<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alisa&#39;s Home</title>
  
  <subtitle>Alisa&#39;s Home</subtitle>
  <link href="https://hmxyl.github.io/atom.xml" rel="self"/>
  
  <link href="https://hmxyl.github.io/"/>
  <updated>2023-05-11T06:38:33.131Z</updated>
  <id>https://hmxyl.github.io/</id>
  
  <author>
    <name>Alisa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring全家桶</title>
    <link href="https://hmxyl.github.io/20230319/6a5a5c18.html"/>
    <id>https://hmxyl.github.io/20230319/6a5a5c18.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.131Z</updated>
    
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础-AOP</title>
    <link href="https://hmxyl.github.io/20230319/28678f43.html"/>
    <id>https://hmxyl.github.io/20230319/28678f43.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.138Z</updated>
    
    <content type="html"><![CDATA[<h1>拦截器类型</h1><ul><li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li><li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li><li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li><li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li><li>@Around：能完全控制目标代码是否执行，并可以在<strong>执行前后、抛异常后执行任意拦截代码</strong>，可以说是包含了上面所有功能</li></ul><h1>使用注解装配AOP的DEMO</h1><ol><li><p>依赖引入</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>spring-aop：AOP核心功能，例如代理工厂等</p><p>aspectjweaver：支持切入点表达式等</p><p>aspectjrt：支持aop相关注解等</p><p>aspectjweaver包含aspectjrt的内容，所以我们只需要引入aspectjweaver依赖包就可以了</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230319183014032.png" alt="aspectjweaver包含aspectjrt的内容"></p></blockquote></li><li><p>定义一个性能监控的注解</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MetricTime</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义切面</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MetricTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Instant</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(metricTime)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">metric</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">,</span> <span class="token class-name">MetricTime</span> metricTime<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around.begin............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Instant</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> spend <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Metrics][%s]-消耗：%d 毫秒"</span><span class="token punctuation">,</span> metricTime<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spend<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around.end............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在需要被监控的关键方法上标注该注解</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MetricTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@MetricTime</span><span class="token punctuation">(</span><span class="token string">"aop"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/aop/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">testAopSpend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingLong</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动类上标注<code>@EnableAspectJAutoProxy</code></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>AspectJ定义AOP装配规则</h1><table><thead><tr><th>装配规则</th><th>说明</th></tr></thead><tbody><tr><td>“execution(public * com.itranswarp.learnjava.service.<em>.</em>(…))”</td><td>某个service包下面的所有Bean的所有方法都会被拦截</td></tr><tr><td>“execution(public * update*(…))”</td><td>方法名前缀进行拦截。<br>这种非精准打击误伤面更大，因为从方法前缀区分是否是数据库操作是非常不可取的。</td></tr><tr><td></td><td></td></tr></tbody></table><h1>AOP 可能造成的空指针</h1><p>参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1339039378571298">https://www.liaoxuefeng.com/wiki/1252599548343744/1339039378571298</a></p><blockquote><p>Spring通过CGLIB创建的代理类，不会初始化代理类自身继承的任何成员变量，包括final类型的成员变量！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;拦截器类型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；&lt;/li&gt;
&lt;li&gt;@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；&lt;/li&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础</title>
    <link href="https://hmxyl.github.io/20230319/d607e27b.html"/>
    <id>https://hmxyl.github.io/20230319/d607e27b.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring的特性和优势">Spring的特性和优势</h3><blockquote><p>Spring Framework有哪些特性，用了这个框架对开发而言有什么好处呢？</p></blockquote><p>从Spring 框架的<strong>特性</strong>来看：</p><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>控制反转：<code>IOC——Inversion of Control</code>，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：<code>DI——Dependency Injection</code>，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：<code>Aspect Oriented Programming——AOP</code></li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><p>从使用Spring 框架的<strong>好处</strong>看：</p><ul><li>Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。</li><li>Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了。</li><li>Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。</li><li>测试一个用 Spring 编写的应用程序很容易，因为环境相关的代码被移动到这个框架中。此外，通过使用 JavaBean-style POJOs，它在使用依赖注入注入测试数据时变得更容易。</li><li>Spring 的 web 框架是一个设计良好的 web MVC 框架，它为比如 Structs 或者其他工程上的或者不怎么受欢迎的 web 框架提供了一个很好的供替代的选择。MVC 模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。模型(Model)封装了应用程序数据，通常它们将由 POJO 类组成。视图(View)负责渲染模型数据，一般来说它生成客户端浏览器可以解释 HTML 输出。控制器(Controller)负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。</li><li>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</li><li>轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。</li><li>Spring 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Spring的特性和优势&quot;&gt;Spring的特性和优势&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Framework有哪些特性，用了这个框架对开发而言有什么好处呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从Spring 框架的&lt;strong&gt;特性&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java命名规范</title>
    <link href="https://hmxyl.github.io/20230317/1761bce2.html"/>
    <id>https://hmxyl.github.io/20230317/1761bce2.html</id>
    <published>2023-03-17T09:44:04.000Z</published>
    <updated>2023-05-11T06:38:33.133Z</updated>
    
    <content type="html"><![CDATA[<h1>Java命名规范</h1><h2 id="泛型类">泛型类</h2><p>在书写泛型类时，通常做以下的约定：</p><ul><li>E表示Element，通常用在集合中；</li><li>ID用于表示对象的唯一标识符类型</li><li>T表示Type(类型)，通常指代类；</li><li>K表示Key(键), 通常用于Map中；</li><li>V表示Value(值),通常用于Map中，与K结对出现；</li><li>N表示Number,通常用于表示数值类型；</li><li>？表示不确定的Java类型；</li><li>X用于表示异常；</li><li>U,S表示任意的类型。</li></ul><h2 id="速记Java开发中的各种O">速记Java开发中的各种O</h2><p>通过一张表和图快速对Java中的<code>BO</code>,<code>DTO</code>,<code>DAO</code>,<code>PO</code>,<code>POJO</code>,<code>VO</code>之间的含义，区别以及联系进行梳理。</p><table><thead><tr><th>名称</th><th>使用范围</th><th>解释说明</th></tr></thead><tbody><tr><td>BO</td><td>用于Service,Manager,Business等业务相关类的命名</td><td>Business Object业务处理对象，主要作用是把业务逻辑封装成一个对象。</td></tr><tr><td>DTO</td><td>经过加工后的PO对象，其内部属性可能增加或减少</td><td>Data Transfer  Object数据传输对象，主要用于远程调用等需要大量传输数据的地方，例如，可以将一个或多个PO类的部分或全部属性封装为DTO进行传输</td></tr><tr><td>DAO</td><td>用于对数据库进行读写操作的类进行命名</td><td>Data Access  Object数据访问对象，主要用来封装对数据库的访问，通过DAO可以将POJO持久化为PO，也可以利用PO封装出VO和DTO</td></tr><tr><td>PO</td><td>Bean,Entity等类的命名</td><td>Persistant  Object持久化对象，数据库表中的数据在Java对象中的映射状态，可以简单的理解为一个PO对象即为数据库表中的一条记录</td></tr><tr><td>POJO</td><td>POJO是DO/DTO/BO/VO的统称</td><td>Plain Ordinary Java Object  简单Java对象，它是一个简单的普通Java对象，禁止将类命名为XxxxPOJO</td></tr><tr><td>VO</td><td>通常是视图控制层和模板引擎之间传递的数据对象</td><td>Value Object  值对象，主要用于视图层，视图控制器将视图层所需的属性封装成一个对象，然后用一个VO对象在视图控制器和视图之间进行数据传输。</td></tr><tr><td>AO</td><td>应用层对象</td><td>Application Object，在Web层与Service层之间抽象的复用对象模型，很少用。</td></tr></tbody></table><p>下面将通过一张图来理解上述几种O之间相互转换的关系：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/eae992c8-ce71-47df-ae94-eca9bc91dac0-1679046277720-1.jpg" alt="微信图片_20211213004837"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Java命名规范&lt;/h1&gt;
&lt;h2 id=&quot;泛型类&quot;&gt;泛型类&lt;/h2&gt;
&lt;p&gt;在书写泛型类时，通常做以下的约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E表示Element，通常用在集合中；&lt;/li&gt;
&lt;li&gt;ID用于表示对象的唯一标识符类型&lt;/li&gt;
&lt;li&gt;T表示Type(类型)</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://hmxyl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成Redis</title>
    <link href="https://hmxyl.github.io/20230302/f677ab49.html"/>
    <id>https://hmxyl.github.io/20230302/f677ab49.html</id>
    <published>2023-03-02T11:10:19.000Z</published>
    <updated>2023-03-31T06:33:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。</p><p>可以参考 <a href="https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.6/spring-boot-dependencies-2.6.6.pom">https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.6/spring-boot-dependencies-2.6.6.pom</a> 查看版本依赖</p></blockquote><h1>基于RedisTemplate+Jedis的数据操作</h1><blockquote><p>Jedis是Redis的Java客户端，在SpringBoot 1.x版本中也是默认的客户端。在SpringBoot 2.x版本中默认客户端是Luttuce。</p></blockquote><h2 id="实现DEMO">实现DEMO</h2><ol><li><p>POM.xml</p><p>引入spring-boot-starter-data-redis包，SpringBoot2中默认的客户端是Lettuce, 所以需要exclude掉lettuce-core包，并引入jedis的包。</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>redis.yml 配置</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.163.128    <span class="token key atrule">password</span><span class="token punctuation">:</span> dHcphufFGcSaJLMK    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisConfig配置</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入JedisConnectionFactory：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315153558460.png" alt="注入JedisConnectionFactory"></p></li><li></li><li><p>测试Redis连接</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DatabaseApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"server.port=80"</span><span class="token punctuation">,</span>                <span class="token string">"spring.application.name=configuration"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.server-addr=native.virtual.com:8848"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.file-extension=yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.group=DEFAULT_GROUP"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].data-id=redis.yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].refresh=true"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>基于RedisTemplate+Lettuce的数据操作</h1><h2 id="Lettuce-说明">Lettuce 说明</h2><p><a href="https://github.com/lettuce-io/lettuce-core">Github（lettuce-core）</a></p><p>Lettuce 是一个可伸缩线程安全的 Redis 客户端。多个线程可以共享同一个 RedisConnection。它利用优秀 netty NIO 框架来高效地管理多个连接。</p><p>Lettuce 从一开始就按照非阻塞式 IO 进行设计，是一个纯异步客户端，对异步和反应式 API 的支持都很全面。即使是同步命令，底层的通信过程仍然是异步模型，只是通过阻塞调用线程来模拟出同步效果而已。</p><blockquote><p>在SpringBoot 2.x版本中Redis默认客户端是Lettuce，本文主要介绍SpringBoot 和默认的Lettuce的整合案例</p></blockquote><h2 id="Lettuce-特性">Lettuce 特性</h2><ul><li>支持 同步、异步、响应式 的方式</li><li>支持 Redis Sentinel</li><li>支持 Redis Cluster</li><li>支持 SSL 和 Unix Domain Socket 连接</li><li>支持 Streaming API</li><li>支持 CDI 和 Spring 的集成</li><li>支持 Command Interfaces</li><li>兼容 Java 8+ 以上版本</li></ul><p><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:connectors:lettuce">Lettuce  和 Jedis 对比官方说明</a></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315150902635.png" alt="image-20230315150902635"></p><h2 id="实现DEMO-2">实现DEMO</h2><ol><li><p>POM.xml</p><p>引入spring-boot-starter-data-redis包，SpringBoot2中默认的客户端是Lettuce, 所以需要exclude掉lettuce-core包，并引入jedis的包。</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>redis.yml 配置</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.163.128    <span class="token key atrule">password</span><span class="token punctuation">:</span> dHcphufFGcSaJLMK    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">200</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisConfig配置（代码和Jedis注入一样 ，只是装配的 <code>connectionFactory</code>  实现类不一样 ）</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入JedisConnectionFactory：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315154313840.png" alt="注入LettuceConnectionFactory"></p></li><li><p>测试Redis连接</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DatabaseApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"server.port=80"</span><span class="token punctuation">,</span>                <span class="token string">"spring.application.name=configuration"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.server-addr=native.virtual.com:8848"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.file-extension=yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.group=DEFAULT_GROUP"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].data-id=redis.yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].refresh=true"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="基于RedisTemplate-Lettuce数据类封装">基于RedisTemplate+Lettuce数据类封装</h2><p>原文：<a href="https://pdai.tech/md/spring/springboot/springboot-x-redis-lettuce-wrap.html">https://pdai.tech/md/spring/springboot/springboot-x-redis-lettuce-wrap.html</a></p><blockquote><p>RedisTemplate中的操作和方法众多，为了程序保持方法使用的一致性，屏蔽一些无关的方法以及对使用的方法进一步封装。</p></blockquote><ol><li><p>RedisService接口类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deleteSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> redisCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisService的实现类</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">import com.local.service.IRedisService;import org.springframework.data.redis.core.RedisCallback;import org.springframework.data.redis.core.RedisTemplate;import javax.annotation.Resource;import java.util.Collection;import java.util.Set;import java.util.concurrent.TimeUnit;public class RedisServiceImpl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> implements IRedisService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> {    @Resource(name = "redisTemplate")    private RedisTemplate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">T</span><span class="token punctuation">&gt;</span></span> redisTemplate;    @Override    public void set(String key, T value, long time) {        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);    }    @Override    public void set(String key, T value) {        redisTemplate.opsForValue().set(key, value);    }    @Override    public T get(String key) {        return redisTemplate.opsForValue().get(key);    }    @Override    public void delete(String key) {        redisTemplate.delete(key);    }    @Override    public void delete(Collection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span> keys) {        redisTemplate.delete(keys);    }    @Override    public boolean expire(String key, long time) {        return redisTemplate.expire(key, time, TimeUnit.SECONDS);    }    @Override    public Long getExpire(String key) {        return redisTemplate.getExpire(key, TimeUnit.SECONDS);    }    @Override    public boolean hasKey(String key) {        return redisTemplate.hasKey(key);    }    @Override    public Long increment(String key, long delta) {        return redisTemplate.opsForValue().increment(key, delta);    }    @Override    public Long decrement(String key, long delta) {        return redisTemplate.opsForValue().decrement(key);    }    @Override    public void addSet(String key, T value) {        redisTemplate.opsForSet().add(key, value);    }    @Override    public Set<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> getSet(String key) {        return redisTemplate.opsForSet().members(key);    }    @Override    public void deleteSet(String key, T value) {        redisTemplate.opsForSet().remove(key, value);    }    @Override    public T execute(RedisCallback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> redisCallback) {        return redisTemplate.execute(redisCallback);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。&lt;/p&gt;
&lt;p&gt;可以参考 &lt;a href=&quot;https://repo1.maven.org/maven2/org/springframework/boo</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="SpringBoot" scheme="https://hmxyl.github.io/tags/SpringBoot/"/>
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Nacos 使用示例</title>
    <link href="https://hmxyl.github.io/20230301/d8cb1733.html"/>
    <id>https://hmxyl.github.io/20230301/d8cb1733.html</id>
    <published>2023-03-01T02:19:20.000Z</published>
    <updated>2023-05-18T02:49:56.490Z</updated>
    
    <content type="html"><![CDATA[<h1>配置中心示例</h1><p>源码地址：<a href="https://github.com/hmxyl/nacosdemo.git">https://github.com/hmxyl/nacosdemo.git</a></p><h2 id="准备Nacos配置文件">准备Nacos配置文件</h2><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510164730428.png" alt="image-20230510164730428"></p><h2 id="使用-application-yml-配置（推荐）">使用 application.yml 配置（推荐）</h2><blockquote><ol><li>版本号<br>从 2021.0.1.0 开始，Spring Cloud Alibaba  版本将会对应 Spring Cloud 版本，<br>前三位为 Spring Cloud 版本，最后一位为扩展版本</li><li>弃用 <code>bootstrap.yml</code> 文件（Spring Cloud 在Spring boot 2.4以后无法应用BootStrap.yml）</li><li>源码： configuration 模块</li></ol></blockquote><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8801</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">import</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>text.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>code.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动时 配置 active profiles 为 <code>dev</code></p></li><li><p>启动 ConfigurationOldApplication</p></li><li><p>访问 <a href="http://localhost:8801/config/info">http://localhost:8801/config/info</a> 获取配置信息</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">ConfigInfo</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> configInfo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Junit 单元测试</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">ConfigInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ConfigurationOldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ConfigurationOldApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ConfigInfo</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token string">"configuration_test"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>参考[1]：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sca-upgrade-guide.adoc">https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sca-upgrade-guide.adoc</a></p><p>参考[2]：<a href="https://developer.aliyun.com/article/897341#slide-12">https://developer.aliyun.com/article/897341#slide-12</a></p><h2 id="使用-bootstrap-yml-配置（不推荐）">使用 bootstrap.yml 配置（不推荐）</h2><blockquote><p>源码： configuration_old 模块</p></blockquote><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SpringCloud2020及以后的版本默认不启用 bootstrap 配置，我们需要在pom里面显式地引入：--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：我们使用的 Spring Cloud 2020 版本默认不启用 bootstrap，若想要在应用启动时加载 bootstrap 配置（例如 bootstrap.yml 或 bootstrap.properties），就需要我们在 pom.xml 中显式的引入 spring-cloud-starter-bootstrap 依赖。</p></blockquote></li><li><p>bootstrap.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8802</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration_old  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP        <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration.yml        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml        extension<span class="token punctuation">-</span>configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token key atrule">data-id</span><span class="token punctuation">:</span> text.yml          <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        extension<span class="token punctuation">-</span>configs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token key atrule">data-id</span><span class="token punctuation">:</span> code.yml          <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>config配置的dataID组成: ${prefix}-${spring.profiles.active}.${file-extension}</p><ul><li>${prefix}：默认取值为微服务的服务名，即配置文件中 <a href="http://spring.application.name">spring.application.name</a> 的值，我们可以在配置文件中通过配置 <code>spring.cloud.nacos.config.prefix</code> 来指定。</li><li>${spring.profiles.active}：表示当前环境对应的 Profile，例如 dev、test、prod 等。当没有指定环境的 Profile 时，其对应的连接符也将不存在， dataId 的格式变成${prefix}.${file-extension}。</li><li>${file-extension}：表示配置内容的数据格式，我们可以在配置文件中通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置，例如 properties 和 yaml。</li></ul></blockquote><p>问题记录：</p><ul><li><p><strong>若文件名称不为 bootstrap.yml， 则在启动时，会先加载默认配置。server-addr 为127.0.0.1:8848，而正确的配置，在注解参数读取完成之后，才能读取到。因此BEAN 创建失败</strong></p><p><code>com.alibaba.cloud.nacos.NacosConfigManager</code>、<code>com.alibaba.cloud.nacos.NacosConfigProperties</code></p></li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span>BeanCreationException</span><span class="token operator">:</span> <span class="token class-name">Error</span> creating bean <span class="token keyword">with</span> <span class="token namespace">name</span> 'scopedTarget<span class="token punctuation">.</span>configInfo'<span class="token operator">:</span> <span class="token class-name">Injection</span> of autowired dependencies failed<span class="token punctuation">;</span> nested exception is <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalArgumentException</span><span class="token operator">:</span> <span class="token class-name">Could</span> not resolve placeholder 'config<span class="token punctuation">.</span>text' in value <span class="token string">"${config.text}"</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">405</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.3</span><span class="token number">.18</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.3</span><span class="token number">.18</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动时 配置 active profiles 为 <code>dev</code></p></li><li><p>启动 ConfigurationOldApplication</p></li><li><p>访问 <a href="http://localhost:8802/config/info">http://localhost:8802/config/info</a> 获取配置信息。同上。</p></li><li><p>Junit测试。同上。</p></li></ol><h1>注册中心示例</h1><p>目的：将不同的服务，注册到<code>服务列表</code>中，如下图所示</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510183445711.png" alt="image-20230510183445711"></p><table><thead><tr><th>字段</th><th>说明</th><th></th></tr></thead><tbody><tr><td>服务名</td><td>注册的服务名称<code>spring.cloud.nacos.discovery.service</code> 默认配置的是：<code>spring.application.name</code></td><td></td></tr><tr><td>触发保护阈值</td><td>保护阈值：可以设置为0-1之间的浮点数，它其实是⼀个⽐例值（当前服务健康实例数/当前服务总实例数）<br><br>⼀般流程下， nacos是服务注册中⼼，服务消费者要从nacos获取某⼀个服务的可⽤实例信息，对于服务实例有健康/不健康状态之分， nacos在返回给消费者实例信息的时候，会返回健康实例。这个时候在⼀些⾼并发、⼤流量场景下会存在⼀定的问题：<br><br>如果服务A有100个实例， 98个实例都不健康了，只有2个实例是健康的，如果nacos只返回这两个健康实例的信息的话，那么后续消费者的请求将全部被分配到这两个实例，流量洪峰到来， 2个健康的实例也扛不住了，整个服务A 就扛不住，上游的微服务也会导致崩溃，产⽣雪崩效应。<br><br><strong>保护阈值的意义在于</strong>：当服务A健康实例数/总实例数 &lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触发（状态<strong>true</strong>）<br>nacos将会把该服务所有的实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也⽐造成雪崩要好，牺牲了⼀些请求，保证了整个系统的⼀个可⽤</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><ul><li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li><li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li><li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><h2 id="注册服务提供者">注册服务提供者</h2><blockquote><p>producer_a、producer_a 两个模块，模拟两个服务提供者实例</p></blockquote><h3 id="producer-a">producer_a</h3><ol><li><p>pom.xml</p> <pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> producer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>        <span class="token key atrule">register-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>配置</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>spring.cloud.nacos.discovery.service</td><td>${<a href="http://spring.application.name">spring.application.name</a>}</td><td>注册服务名称</td></tr><tr><td>spring.cloud.nacos.discovery.register-enabled</td><td>true</td><td>是否注册服务</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>启动类上，使用 <code>@EnableDiscoveryClient</code> 注解开启 Nacos 服务发现功能</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerA</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProducerA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供服务的业务方法（测试类）</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.application.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"服务名："</span> <span class="token operator">+</span> serverName <span class="token operator">+</span> <span class="token string">"&lt;br /&gt; 端口号： "</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">"&lt;br /&gt; 传入的参数："</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动模块, 提示  <strong>register finished</strong> 注册完成。查看Nacos服务列表，此时 producer  服务已注册，实例数为1。</p></li><li><p>使用浏览器访问http://localhost:8001/nacos/1 验证实例是否正常提供服务</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510181828965.png" alt="image-20230510181828965"></p></li></ol><h3 id="producer-b">producer_b</h3><ol><li><p>pom.xml ：同 producer_a</p></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8002</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> producer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动类上，使用 <code>@EnableDiscoveryClient</code> 注解开启 Nacos 服务发现功能</p></li><li><p>提供服务的业务方法（测试类）</p></li><li><p>启动模块。查看Nacos服务列表，此时 producer  服务已注册，实例数为2。</p></li><li><p>使用浏览器访问http://localhost:8002/nacos/1 验证实例是否正常提供服务</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510182034079.png" alt="image-20230510182034079"></p></li></ol><h2 id="注册服务消费者">注册服务消费者</h2><h3 id="consumer">consumer</h3><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--由于 Netflix Ribbon 进入停更维护阶段，因此新版本的 Nacos discovery 都已经移除了 Ribbon ，此时我们需要引入 loadbalancer 代替 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8101</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">register-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//producer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个<code>配置类</code>，使用 @LoadBalanced 注解与 Ribbon 进行集成开启负载均衡功能</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">LoadBalanced</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//与 Ribbon 集成，并开启负载均衡功能</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建消费者测试类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service-url.nacos-user-service}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverURL<span class="token punctuation">;</span> <span class="token comment">//服务提供者的服务名</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverURL <span class="token operator">+</span> <span class="token string">"/nacos/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动consumer模块</p></li><li><p>使用浏览器多次访问 <code>http://localhost:8101/consumer/nacos/1</code>。</p><p>浏览器地址不变，4次请求结果如下</p><table><thead><tr><th>请求次数</th><th>返回结果</th></tr></thead><tbody><tr><td>1</td><td>服务名：producer<br>端口号： 8001<br>传入的参数：1</td></tr><tr><td>2</td><td>服务名：producer<br>端口号： 8002<br>传入的参数：1</td></tr><tr><td>3</td><td>服务名：producer<br>端口号： 8001<br>传入的参数：1</td></tr><tr><td>4</td><td>服务名：producer<br>端口号： 8002<br>传入的参数：1</td></tr></tbody></table></li></ol><h2 id="问题记录">问题记录</h2><ol><li>nacos服务部署时， 配置的默认路径由  <code>server.servlet.contextPath=/nacos</code> 修改为  <code>server.servlet.contextPath=/</code>  API 查询结果404</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;配置中心示例&lt;/h1&gt;
&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/hmxyl/nacosdemo.git&quot;&gt;https://github.com/hmxyl/nacosdemo.git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;准备Nacos配置文件&quot;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Nacos" scheme="https://hmxyl.github.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>Nacos</title>
    <link href="https://hmxyl.github.io/20230301/c383a3c4.html"/>
    <id>https://hmxyl.github.io/20230301/c383a3c4.html</id>
    <published>2023-03-01T02:19:20.000Z</published>
    <updated>2023-05-18T02:49:46.455Z</updated>
    
    <content type="html"><![CDATA[<p>Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台（参考自 <a href="https://nacos.io/zh-cn/index.html">Nacos 官网</a>）。</p><p>英文全称为 Dynamic Naming and Configuration Service，是一个由阿里巴巴团队使用 Java 语言开发的开源项目。Nacos 的命名是由 3 部分组成：</p><table><thead><tr><th>组成部分</th><th>全称</th><th>描述</th></tr></thead><tbody><tr><td>Na</td><td>naming/nameServer</td><td>即服务注册中心，与 Spring Cloud Eureka 的功能类似。</td></tr><tr><td>co</td><td>configuration</td><td>即配置中心，与 Spring Cloud Config+Spring Cloud Bus 的功能类似。</td></tr><tr><td>s</td><td>service</td><td>即服务，表示 Nacos 实现的服务注册中心和配置中心都是以服务为核心的。</td></tr></tbody></table><p>我们可以将 Nacos 理解成服务注册中心和配置中心的组合体。</p><ul><li>它可以替换 <a href="http://c.biancheng.net/springcloud/eureka.html">Eureka</a> 作为服务注册中心，实现服务的注册与发现；</li><li>可以替换 <a href="http://c.biancheng.net/springcloud/config.html">Spring Cloud Config</a> 作为配置中心，实现配置的动态刷新。</li></ul><p>Nacos 支持几乎所有主流类型“服务”的发现、配置和管理：</p><ul><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">Kubernetes Service</a></li><li><a href="https://grpc.io/docs/what-is-grpc/core-concepts#service-definition">gRPC </a>&amp; <a href="https://dubbo.apache.org/zh/">Dubbo RPC Service</a></li><li>Spring Cloud RESTful Service</li></ul><h1>Nacos 的特性</h1><p>Nacos 提供了一系列简单易用的特性，能够帮助我们快速地实现动态服务发现、服务配置等功能。</p><h2 id="服务发现">服务发现</h2><p>Nacos 支持基于 DNS 和 RPC 的服务发现。</p><p>当服务提供者使用原生 SDK、OpenAPI 或一个独立的 Agent TODO 向 Nacos 注册服务后，服务消费者可以在 Nacos 上通过 DNS TODO 或 HTTP&amp;API 查找、发现服务。</p><h2 id="服务健康监测">服务健康监测</h2><p>Nacos 提供对服务的实时健康检查，能够阻止请求发送到不健康主机或服务实例上。Nacos 还提供了一个健康检查仪表盘，能够帮助我们根据健康状态管理服务的可用性及流量。</p><h2 id="动态配置服务">动态配置服务</h2><p>动态配置服务可以让我们以中心化、外部化和动态化的方式，管理所有环境的应用配置和服务配置。</p><p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效、敏捷。</p><p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>Nacos 提供了一个简洁易用的 UI 帮助我们管理所有服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助我们更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p><h2 id="动态-DNS-服务">动态 DNS 服务</h2><p>Nacos 提供了动态 DNS 服务，能够让我们更容易地实现负载均衡、流量控制以及数据中心内网的简单 DNS 解析服务。</p><p>Nacos 提供了一些简单的 DNS APIs TODO，可以帮助我们管理服务的关联域名和可用的 IP:PORT 列表。</p><h2 id="服务及其元数据管理">服务及其元数据管理</h2><p>Nacos 能让我们从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及 metrics 统计数据。</p><h1>Nacos 两大组件</h1><p>与 Eureka 类似，Nacos 也采用 CS（Client/Server，客户端/服务器）架构，它包含两大组件，如下表。</p><ol><li><p>Nacos Server</p><p>描述：</p><ul><li>Nacos 服务端，与 Eureka Server 不同，Nacos Server 由阿里巴巴团队使用 Java 语言编写并将 Nacos Server 的下载地址给用户，用户只需要直接下载并运行即可。</li></ul><p>功能：</p><ul><li>Nacos Server 可以作为服务注册中心，帮助 Nacos Client 实现服务的注册与发现。</li><li>Nacos Server 可以作为配置中心，帮助 Nacos Client 在不重启的情况下，实现配置的动态刷新。</li></ul></li><li><p>Nacos Client</p><p>描述：</p><ul><li>Nacos 客户端，通常指的是微服务架构中的各个服务，由用户自己搭建，可以使用多种语言编写。</li></ul><p>功能：</p><ul><li><p>Nacos Client 通过添加依赖 spring-cloud-starter-alibaba-nacos-discovery，在服务注册中心（Nacos Server）中实现服务的注册与发现</p></li><li><p>Nacos Client 通过添加依赖 spring-cloud-starter-alibaba-nacos-config，在配置中心（Nacos Server）中实现配置的动态刷新。</p></li></ul></li></ol><h1>Nacos 服务注册中心</h1><p>Nacos 作为服务注册中心可以实现服务的注册与发现，流程如下图。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1022563360-0.png" alt="Nacos 服务注册与发现"></p><p>在图 1 中共涉及到以下 3 个角色：</p><ul><li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li><li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li><li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><p>Nacos 实现服务注册与发现的流程如下：</p><ol><li>从 Nacos 官方提供的下载页面中，下载 Nacos Server 并运行。</li><li>服务提供者 Nacos Client 启动时，会把服务以服务名（<a href="http://spring.application.name">spring.application.name</a>）的方式注册到服务注册中心（Nacos Server）；</li><li>服务消费者 Nacos Client 启动时，也会将自己的服务注册到服务注册中心；</li><li>服务消费者在注册服务的同时，它还会从服务注册中心获取一份服务注册列表信息，该列表中包含了所有注册到服务注册中心上的服务的信息（包括服务提供者和自身的信息）；</li><li>在获取了服务提供者的信息后，服务消费者通过 HTTP 或消息中间件远程调用服务提供者提供的服务。</li></ol><p>参考</p><ul><li><a href="http://c.biancheng.net/springcloud/nacos.html">http://c.biancheng.net/springcloud/nacos.html</a></li><li><a href="https://www.jb51.net/article/235057.htm">https://www.jb51.net/article/235057.htm</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台（参考自 &lt;a href=&quot;https://nacos.io/zh-cn/index.html&quot;&gt;Nacos 官网&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;英文全称为 Dynamic Naming and Con</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Nacos" scheme="https://hmxyl.github.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>2023年问题记录</title>
    <link href="https://hmxyl.github.io/20230223/65e80ab3.html"/>
    <id>https://hmxyl.github.io/20230223/65e80ab3.html</id>
    <published>2023-02-23T11:52:44.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>response.sendRedirect丢失请求地址的HTTPS协议</h1><ul><li><p>问题描述：</p><p><code>response.sendRedirect</code> 默认采用的HTTP协议GET请求，导致在重定向之后，原先的HTTPS请求变为HTTP请求</p></li><li><p>解决</p><ol><li><p>在响应信息中设置<code>HTTP状态码</code>和<code>location</code>头信息</p><p>当状态码为302时，表明资源位置临时发生了改变，需要进行重定向，location头信息标识了资源转向的位置，该地址写相对地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> consultUser<span class="token punctuation">.</span><span class="token function">getSession_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/dept_sub_consult/source/notice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用转发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>consultUser<span class="token punctuation">.</span><span class="token function">getSession_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/intermediate/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul><h1>JUnit测试提示Java.lang.Exception: No runnable methods</h1><ul><li><p>问题描述：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315103150697.png" alt="image-20230315103150697"></p></li><li><p>解决</p><p>@Test导入的包错了，spring-test 需要的Junit是org.junit.Test，但是在@Test有两个包，另一个是org.junit.jupiter.api.Test，</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;response.sendRedirect丢失请求地址的HTTPS协议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;response.sendRedirect&lt;/code&gt; 默认采用的HTTP协议GET请求，导致在重定向之后，原先的HTTPS</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="点滴" scheme="https://hmxyl.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
    <category term="Java" scheme="https://hmxyl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Windows 命令行命令记录</title>
    <link href="https://hmxyl.github.io/20230216/92ff07c.html"/>
    <id>https://hmxyl.github.io/20230216/92ff07c.html</id>
    <published>2023-02-16T02:39:23.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>说明</th><th>命令</th></tr></thead><tbody><tr><td>ipconfig /flushdns</td><td>Windows刷新DNS命令</td></tr><tr><td>wmic memphysical get maxcapacity</td><td>查看支持的最大内存容量</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ipconfig /flushdns&lt;/td&gt;
&lt;td&gt;Windows刷新DNS命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;</summary>
      
    
    
    
    <category term="操作系统" scheme="https://hmxyl.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Windows" scheme="https://hmxyl.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows VPN连接报错</title>
    <link href="https://hmxyl.github.io/20230216/ede6579e.html"/>
    <id>https://hmxyl.github.io/20230216/ede6579e.html</id>
    <published>2023-02-16T02:39:23.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>问题描述</p><p>确认VPN信息正确的条件下，选择<code>PPTP</code>协议连接，提示 “不能建立到远程计算机的连接。你可能需要更改此连接的网络设置” 的错误</p></li><li><p>问题排除</p><p><code>event</code> 打开 <code>事件查看器</code>，获取VPN连接失败错误代码</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230216100057902.png" alt="image-20230216100057902"></p></li><li><p>搜索对应的问题描述：<a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/networking/troubleshoot-error-720-when-establishing-a-vpn-connection">尝试建立 VPN 连接时出现“失败后返回的错误代码为 720”</a></p></li><li><p>最终解决方案：重新安装 WAN 微型端口 (IP) 接口驱动程序</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述&lt;/p&gt;
&lt;p&gt;确认VPN信息正确的条件下，选择&lt;code&gt;PPTP&lt;/code&gt;协议连接，提示 “不能建立到远程计算机的连接。你可能需要更改此连接的网络设置” 的错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题排除&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ev</summary>
      
    
    
    
    <category term="操作系统" scheme="https://hmxyl.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="点滴" scheme="https://hmxyl.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
    <category term="Windows" scheme="https://hmxyl.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Redis-ACL</title>
    <link href="https://hmxyl.github.io/20230210/4be8fe93.html"/>
    <id>https://hmxyl.github.io/20230210/4be8fe93.html</id>
    <published>2023-02-10T07:14:01.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。</p><p>Redis AUTH命令在Redis 6中进行了扩展，所以现在可以以双参数形式使用它:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUTH <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里有一个旧形式的例子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUTH <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所发生的情况是，用于身份验证的用户名是“default”，因此仅指定密码就意味着我们希望根据默认用户进行身份验证。这提供了向后兼容性。</p><p>如果该用户具有 <code>nopass</code>规则，那么新的连接将立即作为“默认”用户进行身份验证，而不需要通过AUTH命令提供任何密码。</p><p>如果“默认”用户没有标记为<code>nopass</code>，则连接将在未验证的状态下启动，并将需要AUTH(或HELLO命令AUTH选项)才能进行身份验证并开始工作。</p><h1>使用场景</h1><ol><li>您希望通过限制对命令和密钥的访问来提高安全性，这样不受信任的客户机就没有访问权限，而受信任的客户机只有执行所需工作所需的最低级别的数据库访问权限。例如，某些客户端可能只能执行只读命令。</li><li>您希望提高操作安全性，以便访问Redis的进程或人员不允许由于软件错误或手动错误而损坏数据或配置。例如，从Redis获取延迟作业的worker没有理由能够调用FLUSHALL命令。</li></ol><h1>配置ACL</h1><p>Redis ACL用户的定义格式如下: <code>user &lt;username&gt; ... acl rules ...</code> 如<code> worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</code></p><p>默认情况下，只定义了一个名为default的用户。我们可以使用ACL LIST命令来检查当前活动的ACL，并验证一个新启动的、默认配置的Redis实例的配置是什么:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>每行的前两个单词是“user”，后面跟着用户名。下一个单词是描述不同事物的ACL规则。我们将详细说明这些规则是如何工作的，但现在只需要说明默认用户被配置为活动(on)，不需要密码(nopass)，可以访问每个可能的密钥(~<em>)和发布/订阅通道(&amp;</em>)，并且能够调用每个可能的命令(+@all)。</p><p>此外，在默认用户的特殊情况下，使用<code>nopass</code>规则意味着新连接将自动使用默认用户进行身份验证，而不需要任何显式的AUTH调用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> ACL SETUSER aliceOK<span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user alice off resetchannels -@all"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span class="token comment"># 这样的用户完全没用。让我们尝试定义用户，使其处于活动状态，具有密码，并且只能使用GET命令访问以字符串“cached:”开头的键名。</span><span class="token operator">&gt;</span> ACL SETUSER alice on <span class="token operator">&gt;</span>p1pp0 ~cached:* +getOK<span class="token operator">&gt;</span> AUTH alice p1pp0OK<span class="token operator">&gt;</span> GET foo<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to access one of the keys used as arguments<span class="token operator">&gt;</span> GET cached:1234<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token operator">&gt;</span> SET cached:1234 zap<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to run the <span class="token string">'set'</span> <span class="token builtin class-name">command</span><span class="token comment"># ACL GETUSER 是 ACL LIST的替代方案，方便阅读</span><span class="token operator">&gt;</span> ACL GETUSER alice<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"flags"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"on"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"passwords"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"2d9c75..."</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"commands"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"-@all +get"</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"keys"</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"~cached:*"</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"channels"</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">""</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"selectors"</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token comment"># 使用另一个ACL SETUSER命令(来自不同的用户，因为alice不能运行ACL命令)，我们可以向用户添加多个模式:</span><span class="token operator">&gt;</span> ACL SETUSER alice ~objects:* ~items:* ~public:*OK<span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user alice on #2d9c75... ~cached:* ~objects:* ~items:* ~public:* resetchannels -@all +get"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>ACL规则</h1><p>ACL规则可以以任意顺序指定：例如，可以从密码开始，然后是标志或密钥模式。但是请注意，加法和减法规则将根据顺序改变含义。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 例如，请看下面的例子:</span><span class="token comment">#</span><span class="token comment">#   user alice on +@all -DEBUG ~* &gt;somepassword</span><span class="token comment">#</span><span class="token comment"># 这将允许“alice”使用除DEBUG命令之外的所有命令,因为 +@all将所有命令添加到alice可以使用的命令集，后来DEBUG被删除。</span><span class="token comment"># 然而，如果我们颠倒两个ACL规则的顺序，结果将是不同的:</span><span class="token comment">#</span><span class="token comment">#   user alice on -DEBUG +@all ~* &gt;somepassword</span><span class="token comment">#</span><span class="token comment"># 现在，当alice在允许的命令集中还没有命令时，DEBUG被删除，之后所有的命令都被添加，所以用户将能够执行所有的命令。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本上ACL规则是从左到右处理的。</p><p>下面是有效的ACL规则列表。某些规则只是单个单词，用于激活或删除标志，或执行对用户ACL的给定更改。其他规则是与命令或类别名称、键模式等连接在一起的字符前缀。</p><ul><li><p>启用和禁用用户</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>on</td><td>启用用户：可以作为该用户进行身份验证。</td></tr><tr><td>off</td><td>禁止该用户：不再可能对该用户进行身份验证；但是，以前经过身份验证的连接仍然可以工作。<br>注意，如果默认用户被标记为关闭，那么新的连接将作为未验证启动，并且将要求用户发送带有AUTH选项的AUTH或HELLO，以便以某种方式进行身份验证，而不管默认用户配置如何。</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>allow和disallow命令</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead></table></li></ul><p>|+<command> | 将该命令添加到用户可以调用的命令列表中。可以与<code>|</code>一起使用以允许子命令（例如<code>+config|get</code>)。 |<br>| -<command> | 将该命令移到用户可以调用的命令列表中。从Redis 7.0开始，它可以与<code>|</code>一起用于阻塞子命令（例如<code>+config|get</code>)。 |<br>| +@<category> | 添加该类别中所有用户调用的命令，有效类别为@admin， @set， @sortedset，…诸如此类， <code>ACL CAT </code>命令查看完整的列表。<br>特殊类别@all表示所有命令，包括当前存在于服务器中的命令，以及将来将通过模块加载的命令。 |<br>| -@<category> | 类似<code> +@&lt;category&gt;</code> 但是从客户端可以调用的命令列表中删除命令。 |<br>| +<command>|first-arg（弃用） | 允许在其他情况下禁用命令的特定第一个参数<br>它只支持没有子命令的命令，并且不允许作为<code>-SELECT|1</code>这样的负形式，只支持以<code>+</code>开头的加法。 |<br>| allcommands | <code> +@all</code>另外一种书写形式.  注意，它意味着能够执行通过模块系统加载的所有未来命令。 |<br>| nocommands | <code> -@all</code>另外一种书写形式 |</command></category></category></command></command></p><ul><li><p>允许和禁止某些密钥和密钥权限</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>~<pattern></pattern></td><td>可以作为命令的一部分, 添加一个键的模式 <br>例如<code>~*</code> 允许所有的键 。该模式是一个全局样式的模式，类似于KEYS的模式。可以指定多个模式。</td></tr><tr><td>%R~<pattern></pattern></td><td>(版本<code>7.0</code>之后)  添加键读取模式，指定可以从哪些键读取。<br>它的行为类似于常规键模式，但只授予从匹配给定模式的键读取的权限. <br>有关更多信息，请参阅关键权限。</td></tr><tr><td>%W~<pattern></pattern></td><td>(版本<code>7.0</code>之后)  添加指定的写键模式。指定可以写入哪些键。<br>它的行为类似于常规键模式，但只授予写入匹配给定模式的键的权限。<br>有关更多信息，请参阅关键权限。</td></tr><tr><td>%RW~<pattern></pattern></td><td>(版本<code>7.0</code>之后) <code> ~&lt;pattern&gt;</code>另外一种书写形式</td></tr><tr><td>allkeys</td><td><code>~*</code>另外一种书写形式</td></tr><tr><td>resetkeys</td><td>刷新允许的键模式列表。 <br>例如<code>ACL ~foo:* ~bar:* resetkeys ~objects:*</code>，将只允许客户端访问匹配模式<code>objects:*</code>的键。</td></tr></tbody></table></li><li><p>允许和禁止发布/订阅频道:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>&amp;<pattern></pattern></td><td>(版本<code>6.2</code>之后) 添加用户可以访问的 <code>Pub/Sub</code> 通道的全局样式模式。可以指定多个通道模式。<br>注意：模式匹配只对<code>PUBLISH</code>和<code>SUBSCRIBE</code>提到的通道进行, 而<code>PSUBSCRIBE</code>要求它的通道模式和用户允许的通道模式之间的文字匹配</td></tr><tr><td>allchannels</td><td><code>&amp;*</code>另外一种书写形式，允许用户访问所有Pub/Sub通道。</td></tr><tr><td>resetchannels</td><td>刷新允许的通道模式列表，如果用户的发布/订阅客户端不再能够访问各自的通道 和/或 通道模式，则断开这些客户端。</td></tr></tbody></table></li><li><p>为用户配置有效密码</p><p>如果一个用户没有标记为nopass，并且没有有效密码列表，那么该用户实际上是不可能使用的，因为无法以该用户身份登录</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>&gt;<password></password></td><td>将此密码添加到用户的有效密码列表中。例如，<code>&gt;mypass</code>会将<code>mypass</code>添加到有效密码列表中。<br>该指令清除<code>nopass</code>标志(参见后面的内容)。每个用户可以有任意数量的密码。</td></tr><tr><td>&lt;<password></password></td><td>从有效密码列表中删除此密码。如果您试图删除的密码实际上没有设置，则会发出一个错误。</td></tr><tr><td>#<hash></hash></td><td>将此SHA-256哈希值添加到用户的有效密码列表中。<br>此哈希值将与为ACL用户输入的密码的哈希值进行比较。这允许用户在acl.conf文件中存储哈希值，而不是存储明文密码。<br>只有SHA-256哈希值被接受，因为密码哈希值必须是64个字符，并且只包含小写的十六进制字符。</td></tr><tr><td>!<hash></hash></td><td>从有效密码列表中删除此散列值。<br>当您不知道由哈希值指定的密码，但希望从用户中删除密码时，这很有用。</td></tr><tr><td>nopass</td><td>该用户设置的所有密码都被删除，并且该用户被标记为不需要密码：这意味着每个密码都适用于该用户。<br>如果此指令用于默认用户<code>default</code>，则每个新连接将立即使用默认用户进行身份验证，而不需要任何显式的<code>AUTH</code>命令。<br>注意，resetpass 指令将清除此条件。</td></tr><tr><td>resetpass</td><td>清除允许的密码列表并删除<code>nopass</code>状态。<br>在<code>resetpass</code>之后，用户没有关联的密码，如果不添加一些密码（或者稍后将其设置为nopass）就无法进行身份验证。</td></tr></tbody></table></li><li><p>为用户配置选择器</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>(<rule list="">)</rule></td><td>(版本<code>7.0</code>之后) 创建一个新的选择器来匹配规则。<br>用括号中指定的选项创建一个新的选择器，并将其附加到用户。每个选项应该用空格隔开。第一个字符必须是<code>(</code>最后一个字符必须是<code>)</code><br>选择器在用户权限之后计算，并根据它们定义的顺序计算。如果一个命令匹配用户权限或任何选择器，它就被允许。<br>去 <a href="https://redis.io/docs/management/security/acl/#selectors">selectors</a> 查看更多信息</td></tr><tr><td>clearselectors</td><td>(版本<code>7.0</code>之后) 删除所有附加到用户的选择器</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>重置用户:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>reset</td><td>执行以下操作:<code>resetpass, resetkeys, resetchannels, allchannels(如果设置了acl-pubsub-default)， off, clearselectors， -@all</code><br>用户将返回到创建后立即具有的相同状态。</td></tr></tbody></table></li></ul><h1>命令分类</h1><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>admin</td><td>管理命令。普通应用程序永远不需要使用这些. <br>Includes REPLICAOF, CONFIG, DEBUG, SAVE, MONITOR, ACL, SHUTDOWN, etc.</td></tr><tr><td>blocking</td><td>可能阻塞连接，直到另一个命令释放</td></tr><tr><td>connection</td><td>影响连接或其他连接的命令. 包含 AUTH, SELECT, COMMAND, CLIENT, ECHO, PING, 等</td></tr><tr><td>dangerous</td><td>有潜在危险(由于各种原因，每一种都应谨慎考虑). 包含 FLUSHALL, MIGRATE, RESTORE, SORT, KEYS, CLIENT, DEBUG, INFO, CONFIG, SAVE, REPLICAOF, 等</td></tr><tr><td>fast</td><td>Fast O(1) 命令. 可以循环参数的数量，但不是键中的元素数量。</td></tr><tr><td>keyspace</td><td>以类型不可知的方式从键、数据库或其元数据中写入或读取。包括DEL, RESTORE, DUMP, RENAME, EXISTS, DBSIZE, KEYS, EXPIRE, TTL, FLUSHALL等。<br>可能修改键空间、键或元数据的命令也将有<code>写</code>类别<br>只读取键空间、键或元数据的命令将具有<code>read</code>类别</td></tr><tr><td>pubsub</td><td>PubSub相关命令</td></tr><tr><td>read</td><td>从键(值或元数据)读取。注意，不与键交互的命令既不能读也不能写。</td></tr><tr><td>scripting</td><td>Scripting相关命令</td></tr><tr><td>slow</td><td>所有不是快速的命令.</td></tr><tr><td>transaction</td><td>WATCH / MULTI / EXEC 相关命令</td></tr><tr><td>write</td><td>写入键(值或元数据)。</td></tr><tr><td>bitmap</td><td>Data type: bitmaps related.</td></tr><tr><td>set</td><td>Data type: sets related.</td></tr><tr><td>sortedset</td><td>Data type: sorted sets related.</td></tr><tr><td>geo</td><td>Data type: geospatial indexes related.</td></tr><tr><td>hash</td><td>Data type: hashes related.</td></tr><tr><td>hyperloglog</td><td>Data type: hyperloglog related.</td></tr><tr><td>stream</td><td>Data type: streams related.</td></tr><tr><td>string</td><td>Data type: strings related.</td></tr><tr><td>list</td><td>Data type: lists related.</td></tr></tbody></table><p>有关ACL配置的更多信息，请参见 <a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。&lt;/p&gt;
&lt;p&gt;Redis AUTH命令在Redis 6中进行了扩展，所以现在可以以双参数形式使用它:&lt;/p&gt;
&lt;pre c</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-配置文件</title>
    <link href="https://hmxyl.github.io/20230208/6b8605c4.html"/>
    <id>https://hmxyl.github.io/20230208/6b8605c4.html</id>
    <published>2023-02-08T10:19:01.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>官方模板文件</h1><p>参考：<a href="https://redis.io/docs/management/config-file/">https://redis.io/docs/management/config-file/</a></p><p>各版本参数变更：<a href="https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/ParameterGroups.Redis.html">https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/ParameterGroups.Redis.html</a></p><h1>具体配置项</h1><h2 id="INCLUDES：引入自定义配置文件">INCLUDES：引入自定义配置文件</h2><p>如果你有一个适用于所有Redis服务器的标准模板，但也需要自定义一些每个服务器的设置，可以使用 <code>include </code> 配置</p><p>选项<code>include</code>不会被命令<code>CONFIG REWRITE</code>从管理或Redis哨兵重写。由于Redis总是使用最后处理的行作为配置指令的值，你最好把<code>include</code>放在配置文件的开头，以避免在运行时覆盖配置更改。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## INCLUDES ###################################</span><span class="token comment"># include /path/to/local.conf</span><span class="token comment"># include /path/to/other.conf</span><span class="token comment"># include /path/to/fragments/*.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MODULES">MODULES</h2><p>在启动时加载模块。如果服务器不能加载模块，它将中止。可以使用多个<code>loadmodule</code>指令。</p><p>通过Redis Module可以扩展Redis本身的能力，能够实现一些Redis本身不支持的命令</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## MODULES #####################################</span><span class="token comment"># loadmodule /path/to/my_module.so</span><span class="token comment"># loadmodule /path/to/other_module.so</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NETWORK：网络配置">NETWORK：网络配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################## NETWORK #####################################</span><span class="token comment"># 默认情况下，如果没有指定bind配置指令，Redis将监听来自主机上所有可用网络接口的连接。</span><span class="token comment"># 可以使用bind配置指令监听一个或多个选定的接口，后面跟着一个或多个IP地址。</span><span class="token comment"># 不可用仅指不对应于任何网络接口的地址。已经在使用的地址将总是失败，不支持的协议将无法访问。</span><span class="token comment"># Examples:</span><span class="token comment">#</span><span class="token comment"># bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses</span><span class="token comment"># bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6</span><span class="token comment"># bind * -::*                     # like the default, all available interfaces</span><span class="token comment">#</span><span class="token comment"># ~~~ WARNING ~~~ </span><span class="token comment"># 如果运行Redis的计算机直接暴露在互联网上，绑定到所有接口是危险的，并将实例暴露给互联网上的每个人。</span><span class="token comment"># 所以默认情况下，我们取消注释下面的bind指令，这将迫使Redis只监听IPv4和IPv6(如果可用)环回接口地址(这意味着Redis将只能接受来自其运行的同一主机的客户端连接)。</span><span class="token comment">#</span><span class="token comment"># 如果您确定希望您的实例侦听所有接口,注释掉下面一行。</span><span class="token comment"># 您还需要设置密码，除非您显式禁用protected模式。</span><span class="token comment"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 -::1<span class="token comment"># 默认情况下，传出连接(从副本到主，从哨兵到实例，集群总线等)不会绑定到特定的本地地址。</span><span class="token comment"># 在大多数情况下，这意味着操作系统将基于路由进行处理和连接通过的接口。</span><span class="token comment">#</span><span class="token comment"># 使用bind-source-addr可以配置要绑定的特定地址,这也可能影响连接的路由方式。举例:</span><span class="token comment"># bind-source-addr 10.0.0.1</span><span class="token comment"># 保护模式是一层安全保护层, 默认启用。</span><span class="token comment"># 为了避免打开的Redis实例在互联网上被访问和利用。当开启保护模式且默认用户没有密码时，服务器会自动关闭。</span>protected-mode <span class="token function">yes</span><span class="token comment"># Redis使用默认的加固安全配置指令来减少攻击无辜用户。因此，几种敏感配置指令是不可变的，一些潜在危险的命令会被阻塞。</span><span class="token comment"># 控制Redis写入文件的配置指令(例如，'dir' 和'dbfilename')，并且通常不会在运行时修改。通过使它们不可变来保护它们。</span><span class="token comment"># 通过设置，这些可以暴露给所有连接，也可以只暴露给本地连接</span><span class="token comment"># 下面列出的每一个配置到这些值中的任意一个:</span><span class="token comment">#</span><span class="token comment"># no    - 阻塞任何连接(保持不可变)</span><span class="token comment"># yes   - 允许任何连接(无保护)</span><span class="token comment"># local - 只允许本地连接. Ones originating from the IPv4 address (127.0.0.1), IPv6 address (::1) or Unix domain sockets.</span><span class="token comment">#</span><span class="token comment"># enable-protected-configs no</span><span class="token comment"># enable-debug-command no</span><span class="token comment"># enable-module-command no</span><span class="token comment"># 接受指定端口上的连接，默认为6379 (IANA #815344).</span><span class="token comment"># IANA: https://www.iana.org 互联网地址编码分配机构</span><span class="token comment"># 如果指定了端口0,Redis将不会监听TCP套接字。</span>port <span class="token number">6379</span><span class="token comment"># TCP listen() backlog.</span><span class="token comment">#</span><span class="token comment"># 在每秒请求数高的环境中，您需要大量的积压，以避免客户端连接速度慢的问题。</span><span class="token comment"># 请注意，Linux内核会将其静默地截断为/proc/sys/net/core/somaxconn的值（cat /proc/sys/net/core/somaxconn）</span><span class="token comment"># 因此请确保同时提高somaxconn和tcp_max_syn_backlog（cat /etc/sysctl.conf）的值，以便获得所需的效果。</span>tcp-backlog <span class="token number">511</span><span class="token comment"># Unix socket.</span><span class="token comment"># 指定用于侦听传入连接的Unix套接字的路径。没有默认值，所以如果没有指定，Redis将不会监听unix套接字。</span><span class="token comment">#</span><span class="token comment"># unixsocket /run/redis.sock</span><span class="token comment"># unixsocketperm 700</span><span class="token comment"># 在客户端空闲N秒后关闭连接(0为禁用)</span><span class="token function">timeout</span> <span class="token number">0</span><span class="token comment"># TCP keepalive.</span><span class="token comment">#</span><span class="token comment"># 如果非零，在没有通信的情况下使用SO_KEEPALIVE向客户端发送TCP ACKs。这很有用，有两个原因:</span><span class="token comment"># 1) 检测失效节点</span><span class="token comment"># 2) 强制中间的网络设备认为连接是活的。</span><span class="token comment">#</span><span class="token comment"># 在Linux操作系统中，该值(单位为秒)为发送ACK的周期。注意，关闭连接需要两倍的时间。在其他内核上，周期取决于内核配置。</span><span class="token comment"># 这个选项的合理值是300秒。从Redis 3.2.1开始，是新的Redis默认值</span>tcp-keepalive <span class="token number">300</span><span class="token comment"># 应用操作系统特有的机制，用指定的ID标记监听套接字，以支持高级路由和过滤功能。</span><span class="token comment">#</span><span class="token comment"># 在Linux上，ID表示一个连接标记</span><span class="token comment"># 在FreeBSD上，ID表示套接字cookie ID。</span><span class="token comment"># 在OpenBSD上，ID表示路由表ID。</span><span class="token comment"># 默认值是0，这意味着不需要标记。</span><span class="token comment"># socket-mark-id 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TLS-SSL">TLS/SSL</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################# TLS/SSL #####################################</span><span class="token comment"># 默认情况下，TLS/SSL协议处于禁用状态。要启用它，可以使用“tls-port”配置指令定义tls侦听端口。port指定了0，则不再监听TCP套接字。</span><span class="token comment"># 在默认端口上启用TLS，请使用:</span><span class="token comment"># port 0</span><span class="token comment"># tls-port 6379</span><span class="token comment"># 配置X.509证书和私钥，用于对连接的客户端、主节点或集群对等体进行服务器身份验证。这些文件应该是PEM格式的。</span><span class="token comment"># tls-cert-file redis.crt</span><span class="token comment"># tls-key-file redis.key</span><span class="token comment"># 如果KEY文件是使用密码短语加密的，那么它也可以包含在这里。</span><span class="token comment"># tls-key-file-pass secret</span><span class="token comment"># 通常Redis对服务器功能(接受连接)和客户端功能(从主服务器复制，建立集群总线连接等)使用相同的证书。</span><span class="token comment"># 有时颁发证书时带有将其指定为仅客户端证书或仅服务器证书的属性。在这种情况下，可能需要对传入(服务器)和传出(客户端)连接使用不同的证书。要做到这一点，请使用以下指令:</span><span class="token comment"># tls-client-cert-file client.crt</span><span class="token comment"># tls-client-key-file client.key</span><span class="token comment"># 如果KEY文件是使用密码短语加密的，那么它也可以包含在这里。</span><span class="token comment"># tls-client-key-file-pass secret</span><span class="token comment"># 配置DH参数文件，开启 DH (Diffie-Hellman) KEY交换功能，这是旧版本OpenSSL(&lt;3.0)的要求。新版本不需要这种配置，建议不要这样做。</span><span class="token comment"># tls-dh-params-file redis.dh</span><span class="token comment"># 配置CA证书包或目录以验证TLS/SSL客户端和对等体。Redis需要至少其中一个的显式配置，并且不会隐式地使用系统范围的配置。</span><span class="token comment"># tls-ca-cert-file ca.crt</span><span class="token comment"># tls-ca-cert-dir /etc/ssl/certs</span><span class="token comment"># 默认情况下，TLS端口上的客户端(包括副本服务器)需要使用有效的客户端证书进行身份验证。</span><span class="token comment"># - no：则不需要且不接受客户端证书。</span><span class="token comment"># - optional：则接受客户端证书，并且在提供时必须有效，但不是必需的。</span><span class="token comment"># tls-auth-clients no</span><span class="token comment"># tls-auth-clients optional</span><span class="token comment"># 默认情况下，Redis副本不会尝试与其主服务器建立TLS连接。使用下面的指令在复制链路上启用TLS。</span><span class="token comment"># tls-replication yes</span><span class="token comment"># 默认情况下，Redis集群总线使用普通TCP连接. 要为总线协议启用TLS，请使用以下指令:</span><span class="token comment"># tls-cluster yes</span><span class="token comment"># 默认情况下，只启用TLSv1.2和TLSv1.3，强烈建议禁用旧的正式弃用版本，以减少攻击面。</span><span class="token comment"># 您可以显式地指定要支持的TLS版本。允许的值不区分大小写，包括 “TLSv1”，“TLSv1.1”，“TLSv1.2”，"TLSv1.3" (OpenSSL &gt;= 1.1.1) 或者任意组合.</span><span class="token comment"># 如果只启用TLSv1.2和TLSv1.3，请使用:</span><span class="token comment"># tls-protocols "TLSv1.2 TLSv1.3"</span><span class="token comment"># 配置允许的密码。有关此字符串语法的更多信息，请参阅 cipher (1ssl) 手册（ 此配置仅适用于&lt;= TLSv1.2）</span><span class="token comment"># tls-ciphers DEFAULT:!MEDIUM</span><span class="token comment"># 配置允许使用的TLSv1.3密码套件。有关此字符串语法的更多信息，特别是关于TLSv1.3密码套件的信息，请参阅 cipher (1ssl) 手册</span><span class="token comment"># tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256</span><span class="token comment">#在选择密码时，使用服务器的首选项而不是客户端首选项。默认情况下，服务器遵循客户端的首选项。</span><span class="token comment"># tls-prefer-server-ciphers yes</span><span class="token comment"># 默认情况下，启用TLS会话缓存，以允许支持TLS会话缓存的客户端更快、更便宜地重新连接。使用下面的指令禁用缓存。</span><span class="token comment"># tls-session-caching no</span><span class="token comment"># 修改TLS缓存的默认会话数。零值将缓存设置为无限大小。默认大小为20480。</span><span class="token comment"># tls-session-cache-size 5000</span><span class="token comment"># 修改TLS缓存会话的默认超时时间。缺省超时时间为300秒。</span><span class="token comment"># tls-session-cache-timeout 60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GENERAL：通用设置">GENERAL：通用设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################# GENERAL #####################################</span><span class="token comment"># 默认情况下，Redis不作为守护进程运行。如果需要，配置为 “yes”</span><span class="token comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><span class="token comment"># 注意，Redis会在文件 /var/run/redis.pid 中写入守护时的 pid</span><span class="token comment"># 当Redis被upstart或systemd监控时，该参数无影响。</span>daemonize no<span class="token comment"># 如果你从upstart或systemd运行Redis, Redis可以与你的supervision tree交互。这些监督方法只是表明“流程已经准备好了”。他们不允许连续的ping回你的supervisor。</span><span class="token comment"># 选项:</span><span class="token comment">#   - no      - no supervision interaction</span><span class="token comment">#   - upstart - signal upstart by putting Redis into SIGSTOP mode requires "expect stop" in your upstart job config</span><span class="token comment">#   - systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET on startup, and updating Redis status on a regular basis.</span><span class="token comment">#   - auto    - detect upstart or systemd method based on UPSTART_JOB or NOTIFY_SOCKET environment variables</span><span class="token comment">#</span><span class="token comment"># 默认为 “no”。要在 upstart/systemd下运行，你可以简单地取消下面这行代码的注释:</span><span class="token comment"># supervised auto</span><span class="token comment"># 如果指定了pid文件，Redis在启动时将其写入指定的位置，并在退出时删除它。</span><span class="token comment">#</span><span class="token comment"># 如果在配置中没有指定pid文件，那么当服务器运行时，不会创建pid文件。</span><span class="token comment"># 当服务器被守护时，即使没有指定pid文件，也会使用pid文件，默认为 "/var/run/redis.pid"。</span><span class="token comment">#</span><span class="token comment"># 正常创建一个pid文件是最好的结果:如果Redis不能创建它，没有什么不好的事情发生，服务器将正常启动和运行。</span><span class="token comment"># 注意，在现代Linux系统中，"/run/redis.pid" 更符合要求，应该用它来代替。</span>pidfile /var/run/redis_6379.pid<span class="token comment"># 指定服务器日志级别</span><span class="token comment"># - debug：有很多信息，对开发/测试很有用</span><span class="token comment"># - verbose：许多极少用到的信息，但不像调试级别那样混乱</span><span class="token comment"># - notice：合理冗余, 但可能是在生产中需要的</span><span class="token comment"># - warning：只记录非常重要/关键的消息</span>loglevel notice<span class="token comment"># 指定日志文件名。</span><span class="token comment"># 空字符串也可以用来强制Redis登录到标准输出。</span><span class="token comment"># 注意，如果使用标准输出进行日志记录，但是使用daemonize，那么日志将被发送到/dev/null</span>logfile <span class="token string">""</span><span class="token comment"># 要启用系统日志记录器，只需将'syslog-enabled'设置为yes，并可选地更新其他系统日志参数以满足您的需要</span><span class="token comment"># syslog-enabled no</span><span class="token comment"># 指定系统日志标识。</span><span class="token comment"># syslog-ident redis</span><span class="token comment"># 系统日志记录的级别，必须为USER或LOCAL0-LOCAL7之间。</span><span class="token comment"># syslog-facility local0</span><span class="token comment"># 要禁用内建的崩溃日志（它可能会在需要时产生更干净的core dumps），取消注释如下:</span><span class="token comment"># crash-log-enabled no</span><span class="token comment"># 要禁用作为崩溃日志一部分的运行时快速内存检查（这可能会让redis更快地终止），取消以下注释:</span><span class="token comment"># crash-memcheck-enabled no</span><span class="token comment">#设置数据库数量。默认数据库是 DB 0，您可以使用select &lt;dbid&gt;在每个连接的基础上选择一个不同的数据库，其中dbid是从0开始计数</span>databases <span class="token number">16</span><span class="token comment"># 默认情况下，Redis只在开始记录到标准输出，并且标准输出是TTY, 系统日志记录被禁用，时显示ASCII艺术徽标</span><span class="token comment"># 基本上，这意味着徽标通常只在交互会话中显示。</span><span class="token comment"># 然而，通过将以下选项设置为yes，可以强制4.0之前的行为，并始终在启动日志中显示ASCII艺术徽标。</span>always-show-logo no<span class="token comment"># 默认情况下，Redis修改进程标题(如'top'和'ps'所示)以提供一些运行时信息。</span><span class="token comment"># 通过将以下设置为no，可以禁用此功能并保留进程名为已执行。</span>set-proc-title <span class="token function">yes</span><span class="token comment"># 当更改流程标题时，Redis使用以下模板来构造修改后的标题。模板变量用花括号指定。支持如下变量:</span><span class="token comment">#</span><span class="token comment"># {title}           父进程时执行的进程名，或子进程的类型</span><span class="token comment"># {listen-addr}     绑定地址或 "*"，后面跟着TCP或TLS端口监听，或Unix套接字(如果有的话)</span><span class="token comment"># {server-mode}     特殊模式, 例如. "[sentinel]" or "[cluster]"</span><span class="token comment"># {port}            TCP监听端口，或0</span><span class="token comment"># {tls-port}        TLS监听端口, or 0.</span><span class="token comment"># {unixsocket}      Unix套接字监听端口, or "".</span><span class="token comment"># {config-file}     使用的配置文件名称.</span><span class="token comment">#</span>proc-title-template <span class="token string">"{title} {listen-addr} {server-mode}"</span><span class="token comment"># 设置用于字符串比较操作的本地环境，也会影响Lua脚本的性能。空字符串表示区域设置是由环境变量派生的。</span><span class="token comment"># Set the local environment which is used for string comparison operations, and  also affect the performance of Lua scripts. </span>locale-collate <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SNAPSHOTTING：快照">SNAPSHOTTING：快照</h2><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230209170518390.png" alt="image-20230209170518390"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ SNAPSHOTTING  ################################</span><span class="token comment"># 将DB数据保存到磁盘</span><span class="token comment"># save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]</span><span class="token comment">#</span><span class="token comment"># 经过给定秒数（seconds），且对DB的写操作超过了给定数量（changes），Redis将保存DB。</span><span class="token comment"># 快照可以通过一个空字符串参数完全禁用，如下例所示:</span><span class="token comment">#</span><span class="token comment"># save ""</span><span class="token comment">#</span><span class="token comment"># 默认情况下Redis会保存DB</span><span class="token comment">#   - 3600 1： 在3600秒(一小时)之后，至少执行了一次更改</span><span class="token comment">#   - 300 100： 在300秒(五分钟)之后，至少执行了100次更改</span><span class="token comment">#   - 60 10000： 在60秒(一分钟)之后，至少执行了10000次更改</span><span class="token comment"># 您可以通过取消注释下面的行显式地设置这些参数</span><span class="token comment"># save 3600 1 300 100 60 10000</span><span class="token comment"># 默认情况下，如果RDB快照启用(至少一个保存点) 并且最近的后台保存失败，Redis将停止接受写入。</span><span class="token comment"># 这将使用户意识到(以一种艰难的方式)数据没有正确地持久化在磁盘上，否则很可能没有人会注意到，从而发生一些灾难。</span><span class="token comment"># 如果后台保存进程重新开始工作，Redis将自动允许再次写入。</span><span class="token comment">#</span><span class="token comment"># 但是，如果你已经设置了适当的Redis服务器监控和持久化，你可能想要禁用这个功能，这样即使有磁盘、权限等问题，Redis也会继续正常工作。</span>stop-writes-on-bgsave-error <span class="token function">yes</span><span class="token comment"># 默认启用：当保存快照文件（RDB数据库）时，使用LZF压缩字符串对象。</span><span class="token comment"># 如果你想在save child中节省一些CPU，将其设置为 "no"，但如果你有可压缩的值或键，数据集可能会更大。</span>rdbcompression <span class="token function">yes</span><span class="token comment"># 从RDB版本5开始，CRC64校验和被放在文件的末尾。</span><span class="token comment"># 这使得格式更能抵抗损坏，但在保存和加载RDB文件时，会有性能损失(大约10%)，因此您可以禁用它以获得最大性能。</span><span class="token comment"># 创建的RDB文件时，禁用校验或者校验和为零，将告诉加载代码跳过该检查</span>rdbchecksum <span class="token function">yes</span><span class="token comment"># loading an RDB or RESTORE payload 时，允许或禁止对 ziplist 或者 listpack 等进行 full sanitization checks</span><span class="token comment"># 这降低了稍后在处理命令时发生断言或崩溃的可能性。</span><span class="token comment"># Options:</span><span class="token comment">#   no         - 从不执行 full sanitization</span><span class="token comment">#   yes        - 总是执行 full sanitization</span><span class="token comment">#   clients    - 仅对用户连接执行full sanitization.</span><span class="token comment">#                排除: RDB 文件, 从主连接接收到的RESTORE命令, 和具有skip-cleanup-payload ACL标志的客户端连接.</span><span class="token comment"># 默认值应该是'clients'，但由于它目前会影响通过MIGRATE进行集群重分片，因此默认情况下暂时设置为'no'。</span><span class="token comment">#</span><span class="token comment"># sanitize-dump-payload no</span><span class="token comment"># 配置快照文件名</span>dbfilename dump.rdb<span class="token comment"># 在未启用持久性的情况下，删除实例中复制使用的RDB文件</span><span class="token comment"># 默认情况下，该选项是禁用的，但是在某些环境下，出于法规或其他安全考虑，应该尽快删除由master保存在磁盘上以提供副本，或由副本存储在磁盘上以加载它们以进行初始同步的RDB文件。</span><span class="token comment"># 注意，此选项仅在同时禁用了AOF和RDB持久性的实例中有效，否则将完全忽略。</span><span class="token comment">#</span><span class="token comment"># 获得相同效果的另一种(有时更好)方法是在主实例和副本实例上使用无磁盘复制。但是，在副本实例的环境下，无磁盘并不总是一种选择。</span>rdb-del-sync-files no<span class="token comment"># 快照工作目录</span><span class="token comment"># dbfilename配置的快照文件，将被写入这个目录中</span><span class="token comment"># Append Only产生的文件也将在此目录中创建。</span><span class="token comment">#</span><span class="token comment"># 注意，这里必须指定目录，而不是文件名。</span><span class="token function">dir</span> ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="REPLICATION：主从复制">REPLICATION：主从复制</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################# REPLICATION #################################</span><span class="token comment"># Master-Replica 复制. 使用replicaof使一个Redis实例成为另一个Redis服务器的副本。 </span><span class="token comment"># 关于Redis复制需要尽快了解的一些事情</span><span class="token comment">#</span><span class="token comment">#   +------------------+      +---------------+</span><span class="token comment">#   |      Master      | ---&gt; |    Replica    |</span><span class="token comment">#   | (receive writes) |      |  (exact copy) |</span><span class="token comment">#   +------------------+      +---------------+</span><span class="token comment">#</span><span class="token comment"># 1) Redis复制是异步的，但是你可以配置一个主服务器，如果它没有与至少给定数量的副本连接，它就会停止接受写操作</span><span class="token comment"># 2) 如果复制链路在相对较短的时间内丢失，Redis副本能够与主服务器执行部分再同步。您可能需要配置复制backlog大小(请参阅此文件的下一节)，并根据您的需要设置合理的值。</span><span class="token comment"># 3) 复制是自动的，不需要用户干预，在网络分区之后，副本会自动尝试重新连接到主节点并与它们重新同步。</span><span class="token comment">#</span><span class="token comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><span class="token comment"># 如果主机有密码保护 ( “requirepass” 配置指令) 可以在启动同步复制进程之前告诉副本进行身份验证, 否则主服务器将拒绝副本请求。</span><span class="token comment">#</span><span class="token comment"># masterauth &lt;master-password&gt;</span><span class="token comment">#</span><span class="token comment"># 然而，如果你正在使用Redis ACL，这是不够的(适用于Redis版本6或更高版本), 默认用户不能执行PSYNC命令和/或复制所需的其他命令。</span><span class="token comment"># 在这种情况下，最好配置一个特殊用户用于复制，并指定主用户配置如下:</span><span class="token comment">#</span><span class="token comment"># masteruser &lt;username&gt;</span><span class="token comment">#</span><span class="token comment"># 当指定了masteruser时，副本将使用新的AUTH表单对其主服务器进行身份验证: AUTH &lt;username&gt; &lt;password&gt;.</span><span class="token comment"># 当一个副本失去了与主服务器的连接，或者当复制仍在进行时，副本可以以两种不同的方式工作:</span><span class="token comment"># 1) 如果 replica-serve-stale-data 配置为"yes"(默认) 副本仍然会回复客户端请求, 可能有过时的数据, 如果这是第一次同步，则数据集可能为空.</span><span class="token comment"># 2) 如果 replica-serve-stale-data 配置为"no", 副本会返回给所有请求一下错误信息："MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to 'no'", 除了以下命令: INFO, REPLICAOF, AUTH, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST, HOST and LATENCY.</span><span class="token comment">#</span><span class="token key attr-name">replica-serve-stale-data</span> <span class="token value attr-value">yes</span><span class="token comment"># 您可以配置副本实例是否接受写操作。</span><span class="token comment"># 针对副本实例写入可能有助于存储一些临时数据(因为写入副本的数据在与主服务器重新同步后很容易被删除)，但如果客户端由于错误配置而写入副本，也可能导致问题。</span><span class="token comment">#</span><span class="token comment"># Redis 2.6 版本之后默认副本是只读的。</span><span class="token comment"># Note: 只读副本不会被设计成暴露给互联网上不受信任的客户端。它只是防止实例被滥用的保护层。</span><span class="token comment"># 默认情况下，只读副本仍然可输出所有管理类命令，如CONFIG、DEBUG等。在有限的范围内，您可以使用'rename-command'来隐藏所有管理的、危险的命令，从而提高只读副本的安全性。</span><span class="token key attr-name">replica-read-only</span> <span class="token value attr-value">yes</span><span class="token comment"># 副本同步策略: 磁盘同步或套接字同步。</span><span class="token comment"># 新的副本和重新连接的副本不能继续复制过程，只是接收差异，需要做所谓的“完全同步”。</span><span class="token comment">#</span><span class="token comment"># RDB文件从主服务器传输到副本。有两种不同的传输方式:</span><span class="token comment"># 1) Disk-backed: Redis主进程创建一个新进程，将RDB文件写入磁盘。随后，父进程将文件增量地传输到副本</span><span class="token comment">#                 当RDB文件生成时，允许更多的副本排队，只要当前生成RDB文件的子进程完成了它的工作，排队的副本们便可以用生成的RDB文件提供服务</span><span class="token comment"># 2) Diskless: Redis主进程创建一个新进程，直接将RDB文件写入复制套接字，而不需要任何磁盘操作。</span><span class="token comment">#              使用无磁盘复制时，一旦传输开始，新的副本将进入队列，当当前传输终止时，新的传输将开始 </span><span class="token comment">#              当使用无盘复制时，主服务器在开始传输之前等待一段可配置的时间(以秒为单位)，希望有多个副本到达，并行传输数据。</span><span class="token comment">#              对于慢磁盘和快速(大带宽)网络，无磁盘复制工作得更好</span><span class="token key attr-name">repl-diskless-sync</span> <span class="token value attr-value">yes</span><span class="token comment"># 当启用无磁盘复制时，为了生成 通过套接字将RDB传输到副本 的子节点，可以配置服务器等待时间</span><span class="token comment"># 这很重要，因为一旦传输开始，就不可能为新的副本提供服务，这些副本将排队等待下一个RDB传输，因此服务器等待延迟以让更多副本到达。</span><span class="token comment">#</span><span class="token comment"># 延迟以秒为单位指定，默认为5秒。要完全禁用它，只需将其设置为0秒，传输将尽快开始。</span><span class="token key attr-name">repl-diskless-sync-delay</span> <span class="token value attr-value">5</span><span class="token comment"># 当使用延迟启用无磁盘复制时，如果期望的最大副本数量已连接，则可以在达到最大延迟之前让复制启动。</span><span class="token comment"># 默认为0意味着没有定义最大副本数量，Redis将等待全部延迟。</span><span class="token key attr-name">repl-diskless-sync-max-replicas</span> <span class="token value attr-value">0</span><span class="token comment"># -----------------------------------------------------------------------------</span><span class="token comment"># WARNING: 由于在这种设置中，副本不会立即在磁盘上存储RDB，因此在故障转移期间可能会导致数据丢失。</span><span class="token comment"># RDB无盘加载+ Redis模块不处理I/O读取可能会导致Redis在与主同步的初始阶段出现I/O错误时中止。</span><span class="token comment"># -----------------------------------------------------------------------------</span><span class="token comment"># Replica可以直接从套接字加载它从复制链路读取的RDB，或者将RDB存储到一个文件中，在从master完全接收到RDB后再读取该文件。</span><span class="token comment">#</span><span class="token comment"># 在许多情况下，磁盘比网络慢，存储和加载RDB文件可能会增加复制时间(甚至增加主服务器的Copy on Write内存和副本缓冲区)。</span><span class="token comment"># 然而，当直接从套接字解析RDB文件时，为了避免数据丢失，只有当新数据集在内存中完全加载时才会安全地刷新当前数据集，从而导致更高的内存使用量。</span><span class="token comment"># 因此，我们有以下选择:</span><span class="token comment">#</span><span class="token comment"># "disabled"    - 不要使用无磁盘加载(先将rdb文件存储到磁盘)</span><span class="token comment"># "swapdb"      - 在直接从套接字解析数据时，将当前db内容保存在RAM中。</span><span class="token comment">#                 在此模式下的副本可以在复制进行时继续服务当前数据集，除非它们无法将主服务器识别为具有来自相同复制历史的数据集</span><span class="token comment">#                 注意，这需要足够的内存，如果没有内存，就有OOM kill的风险</span><span class="token comment"># "on-empty-db" - 仅当当前数据集为空时使用无磁盘加载. </span><span class="token comment">#                 这样更安全，可以避免在复制期间同时加载新旧数据集。</span><span class="token key attr-name">repl-diskless-load</span> <span class="token value attr-value">disabled</span><span class="token comment"># 主机在预定义的时间间隔内向其副本发送ping。可以使用repl_ping_replica_period选项更改这个间隔。缺省值是10秒。</span><span class="token comment">#</span><span class="token comment"># repl-ping-replica-period 10</span><span class="token comment"># 以下选项设置的复制超时时间:</span><span class="token comment"># 1) 从副本的角度来看，同步期间的批量传输I/O</span><span class="token comment"># 2) 从副本(data, ping)的角度看主节点超时</span><span class="token comment"># 3) 从主节点的角度看副本超时(REPLCONF ACK ping)</span><span class="token comment"># 确保这个值大于为repl-ping-replica-period指定的值是很重要的，否则每次在主服务器和副本之间有低流量时都会检测到超时。缺省值是60秒。</span><span class="token comment">#</span><span class="token comment"># repl-timeout 60</span><span class="token comment"># 在SYNC之后禁用副本套接字上的TCP_NODELAY ?</span><span class="token comment">#  - yes： Redis将使用更少的TCP数据包和更少的带宽将数据发送到副本。但是这可能会增加数据在副本端出现的延迟，对于使用默认配置的Linux内核，延迟最长可达40毫秒。</span><span class="token comment">#  - no： 则数据出现在副本端的延迟将减少，但复制将使用更多带宽。</span><span class="token comment"># 默认情况下，我们优化低延迟，但在非常高的流量条件下，或者当主服务器和副本相隔很多跳时，将此选项变为“yes”可能是一个好主意。</span><span class="token key attr-name">repl-disable-tcp-nodelay</span> <span class="token value attr-value">no</span><span class="token comment"># 设置复制backlog大小。backlog是一个缓冲区，当副本断开连接一段时间后，它会积累副本数据，因此当副本想再次重新连接时，通常不需要完全重新同步，部分重新同步就足够了，只需传递断开连接时副本错过的部分数据。</span><span class="token comment"># 复制backlog越大，副本能够忍受断开的时间就越长，并且以后能够执行部分重新同步。</span><span class="token comment"># 只有当至少连接了一个副本时，才分配backlog。</span><span class="token comment">#</span><span class="token comment"># repl-backlog-size 1mb</span><span class="token comment"># 主服务器在一段时间内没有连接的副本后，积压将被释放。</span><span class="token comment"># 下面的选项配置需要经过的秒数，从最后一个副本断开连接的时间开始，以释放积压缓冲区。</span><span class="token comment"># 请注意，副本永远不会因为超时而释放积压，因为它们可能稍后会升级为主副本，并且应该能够正确地与其他副本“部分重新同步”:因此它们应该总是积累积压。</span><span class="token comment">#</span><span class="token comment"># 值为0意味着永远不释放待办事项。</span><span class="token comment">#</span><span class="token comment"># repl-backlog-ttl 3600</span><span class="token comment"># 副本优先级是Redis在INFO输出中发布的整数。它是由Redis哨兵，在主服务器不再正常工作，选择要提升为主服务器的副本时使用</span><span class="token comment"># 优先级低的副本被认为更适合升级，例如，如果有三个优先级为10，100,25的副本，哨兵会选择优先级为10的副本，这是最低的。</span><span class="token comment"># 然而，优先级为0的副本标志着该副本不能执行master角色，因此优先级为0的副本将永远不会被Redis Sentinel选中进行升级。</span><span class="token comment">#</span><span class="token comment"># 缺省情况下，优先级为100。</span><span class="token key attr-name">replica-priority</span> <span class="token value attr-value">100</span><span class="token comment"># 传播错误行为控制了当Redis无法处理来自主机的复制流中正在处理的命令时，它将如何表现。传播过程中发生的错误是意外的，并可能导致数据不一致。然而，在早期版本的Redis中存在一些边缘情况，服务器可能会复制或保留在未来版本中失败的命令。因此，默认行为是忽略此类错误并继续处理命令。</span><span class="token comment"># 如果应用程序希望确保没有数据分歧，则应该将此配置设置为'panic'。该值还可以设置为'panic-on-replicas'，仅当副本在复制流上遇到错误时才恐慌。一旦有足够的安全机制来防止误报崩溃，这两个恐慌值中的一个将成为未来的默认值。</span><span class="token comment">#</span><span class="token comment"># propagation-error-behavior ignore</span><span class="token comment"># 副本忽略磁盘写错误控制副本在无法将从主服务器接收到的写命令持久化到磁盘时的行为。</span><span class="token comment"># 默认情况下，这个配置被设置为'no'，在这种情况下会使副本崩溃。不建议更改这个默认值，但是为了与旧版本的Redis兼容，这个配置可以切换为“yes”，这将只是记录一个警告，并执行从master得到的写命令。</span><span class="token comment">#</span><span class="token comment"># replica-ignore-disk-write-errors no</span><span class="token comment"># -----------------------------------------------------------------------------</span><span class="token comment"># 默认情况下，Redis Sentinel在报告中包含所有副本。一个副本可以排除在Redis哨兵的公告。一个未通知的副本将被'sentinel replicas &lt;master&gt;'命令忽略，并且不会暴露给Redis sentinel的客户端。</span><span class="token comment"># 该选项不会改变复制优先级的行为。即使replica-announce设置为“no”，副本也可以提升为主副本。为了防止这种情况发生，请将replica-priority设置为0。</span><span class="token comment">#</span><span class="token comment"># replica-announced yes</span><span class="token comment"># 如果连接的副本少于N个，主服务器有可能停止接受写操作，延迟小于或等于M秒。也就是N个副本需要处于“online”状态。</span><span class="token comment"># 延迟时间(以秒为单位)必须&lt;=指定的值，是从副本接收到的最后一个ping计算出来的，通常每秒钟发送一次。</span><span class="token comment"># 此选项不保证N个副本将接受写入，但将在没有足够的副本可用的情况下将丢失写入的暴露窗口限制为指定的秒数</span><span class="token comment"># 例如，需要至少3个副本，延迟&lt;= 10秒使用:</span><span class="token comment">#</span><span class="token comment"># min-replicas-to-write 3</span><span class="token comment"># min-replicas-max-lag 10</span><span class="token comment">#</span><span class="token comment"># 将其中一个或另一个设置为0将禁用该特性。</span><span class="token comment"># 默认情况下，min-replica-to-write设置为0(禁用功能)，min-replica-max-lag设置为10。</span><span class="token comment"># Redis主机能够以不同的方式列出附加副本的地址和端口。</span><span class="token comment"># 例如，“INFO replication”部分提供了这些信息，在其他工具中，Redis Sentinel可以使用这些信息来发现副本实例。另一个可用此信息的地方是主机的“ROLE”命令的输出。</span><span class="token comment"># 副本正常上报的列表IP地址和端口可以通过以下方式获取:</span><span class="token comment">#   IP: 通过检查副本用于连接主服务器的套接字的对端地址，可以自动检测该地址。</span><span class="token comment">#   Port: 该端口在复制握手期间由副本通信，并且通常是副本用来侦听连接的端口。</span><span class="token comment">#</span><span class="token comment"># 然而，当使用端口转发或网络地址转换(NAT)时，副本实际上可能通过不同的IP和端口对可达。副本可以使用以下两个选项向其主服务器报告特定的IP和端口集，这样INFO和ROLE都将报告这些值。</span><span class="token comment"># 如果只需要覆盖端口或IP地址，则不需要同时使用这两个选项。</span><span class="token comment">#</span><span class="token comment"># replica-announce-ip 5.5.5.5</span><span class="token comment"># replica-announce-port 1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="KEYS-TRACKING">KEYS TRACKING</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################### KEYS TRACKING #################################</span><span class="token comment"># Redis实现了客户端值缓存的服务器辅助支持。</span><span class="token comment"># 这是使用一个invalidation table来实现的，它使用一个按键名索引的基数键来记住客户端有哪些键。</span><span class="token comment"># 反过来，这用于向客户端发送invalidation messages。请点击本页了解更多功能:</span><span class="token comment">#   https://redis.io/topics/client-side-caching</span><span class="token comment">#</span><span class="token comment"># 当对客户端启用跟踪时，所有的只读查询都被假定为缓存:这将迫使Redis在invalidation table中存储信息。当KEY被修改时，此类信息将被清除，invalidation messages将被发送到客户端。</span><span class="token comment"># 然而，如果工作负载被读操作严重占据，Redis可能会使用越来越多的内存来跟踪多个客户端获取的键。</span><span class="token comment"># </span><span class="token comment"># 因此，可以为无效表配置一个最大填充值。默认情况下，它被设置为1M的键，一旦达到这个限制，Redis将开始从invalidation table中删除键，即使它们没有被修改，只是为了回收内存:这将反过来迫使客户端使缓存的值无效。</span><span class="token comment"># 基本上，表的最大大小是在服务器端用于跟踪谁缓存了什么信息的内存和客户端在内存中保留缓存对象的能力之间进行权衡。</span><span class="token comment"># </span><span class="token comment"># 如果将该值设置为0，则意味着没有限制，并且Redis将在无效表中保留尽可能多的键。</span><span class="token comment"># 在“stats” INFO部分中，您可以找到关于invalidation table中每个给定时刻的键数的信息。</span><span class="token comment">#</span><span class="token comment"># Note: 当在广播模式下使用KEY跟踪时，服务器端不使用内存，因此此设置是无用的。</span><span class="token comment">#</span><span class="token comment"># tracking-table-max-keys 1000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SECURITY：安全配置">SECURITY：安全配置</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## SECURITY ###################################</span><span class="token comment"># 在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。</span><span class="token comment"># Redis ACL用户的定义格式如下:</span><span class="token comment">#   user &lt;username&gt; ... acl rules ...</span><span class="token comment">#</span><span class="token comment"># For example:</span><span class="token comment">#   user worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</span><span class="token comment">#</span><span class="token comment"># 新连接使用特殊用户名“default”。</span><span class="token comment"># 如果该用户具有“nopass”规则，那么新的连接将立即作为“默认”用户进行身份验证，而不需要通过AUTH命令提供任何密码。</span><span class="token comment"># 否则，如果“默认”用户没有标记为“nopass”，则连接将在未验证的状态下启动，并将需要AUTH(或HELLO命令AUTH选项)才能进行身份验证并开始工作。</span><span class="token comment">#</span><span class="token comment"># 基本上ACL规则是从左到右处理的。</span><span class="token comment">#</span><span class="token comment"># ACL日志</span><span class="token comment"># ACL日志跟踪与ACL相关的失败命令和认证事件。ACL日志用于排除被ACL阻塞的命令失败的故障。ACL日志存储在内存中。可以使用ACL LOG RESET回收内存。</span><span class="token comment"># 定义下面ACL日志的最大条目长度。</span><span class="token key attr-name">acllog-max-len</span> <span class="token value attr-value">128</span><span class="token comment"># 使用外部ACL文件</span><span class="token comment"># 不需要在此文件中配置用户，可以使用单独列出用户的文件。两种方法不能混合使用:</span><span class="token comment"># 如果在这里配置用户，同时激活外部ACL文件，服务器将拒绝启动。</span><span class="token comment"># 外部ACL用户文件的格式与redis.conf中用于描述用户的格式完全相同。</span><span class="token comment">#</span><span class="token comment"># aclfile /etc/redis/users.acl</span><span class="token comment"># 重要提示: 从Redis 6开始，“requirepass” 只是一个新的ACL系统之上的兼容层。选项效果将只是为默认用户“default”设置密码。</span><span class="token comment"># 客户端仍然会像往常一样使用AUTH &lt;password&gt;进行身份验证，或者更明确地使用AUTH default &lt;password&gt;，如果他们遵循新协议:两者都可以工作。</span><span class="token comment"># requirepass与aclfile选项和ACL LOAD命令不兼容，这将导致requirepass被忽略。</span><span class="token comment">#</span><span class="token comment"># requirepass foobared</span><span class="token comment"># 默认情况下，新用户初始化具有限制性权限，通过等价于ACL规则'off resetkeys -@all'。</span><span class="token comment"># 从Redis 6.2开始，也可以使用ACL规则管理对Pub/Sub通道的访问。默认的Pub/Sub通道权限如果新用户是由acl-pubsub-default配置指令控制的，该指令接受以下值之一:</span><span class="token comment">#  - allchannels: 允许访问所有的Pub/Sub频道</span><span class="token comment">#  - resetchannels: 撤销对所有发布/订阅频道的访问</span><span class="token comment"># 从Redis 7.0开始，acl-pubsub-default默认为'resetchannels'权限。</span><span class="token comment">#</span><span class="token comment"># acl-pubsub-default resetchannels</span><span class="token comment"># 命令重命名(弃用)。</span><span class="token comment"># ------------------------------------------------------------------------</span><span class="token comment"># WARNING: 尽可能避免使用此选项。相反，使用acl从默认用户中删除命令，只将它们放在您为管理目的而创建的某个管理用户中。</span><span class="token comment"># ------------------------------------------------------------------------</span><span class="token comment"># 可以在共享环境中更改危险命令的名称。例如，CONFIG命令可能会被重命名为难以猜测的内容，以便它仍然对内部使用的工具可用，但对普通客户端不可用。</span><span class="token comment"># 举例：</span><span class="token comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><span class="token comment"># 也可以通过将命令重命名为空字符串来完全终止命令:</span><span class="token comment"># rename-command CONFIG ""</span><span class="token comment">#</span><span class="token comment"># 请注意，更改登录到AOF文件或传输到副本的命令的名称可能会导致问题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CLIENT：客户端">CLIENT：客户端</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################### CLIENTS ####################################</span><span class="token comment"># 设置客户端同时最大连接数。</span><span class="token comment">#  默认情况下，这个限制被设置为10000个客户端，但是如果Redis服务器不能配置进程文件限制，以允许指定的限制，允许的最大客户端数量被设置为当前文件限制-32(因为Redis保留了一些文件描述符供内部使用)</span><span class="token comment"># 一旦达到限制，Redis将关闭所有的新连接，发送一个错误'max number of clients reached'.</span><span class="token comment">#</span><span class="token comment"># 重要说明: 当使用Redis集群时，最大连接数也与集群总线共享:集群中的每个节点将使用两个连接，一个传入连接，另一个传出连接。在非常大的集群的情况下，相应地调整限制是很重要的。</span><span class="token comment">#</span><span class="token comment"># maxclients 10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MEMORY-MANAGEMENT：内存管理">MEMORY MANAGEMENT：内存管理</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################## MEMORY MANAGEMENT ################################</span><span class="token comment"># 将内存使用限制设置为指定的字节数。当达到内存限制时，Redis将尝试根据所选的清除策略(参见maxmemory-policy)删除键。</span><span class="token comment"># 如果Redis不能根据策略删除键，或者如果策略设置为'noeviction'， Redis将开始回复会使用更多内存的命令，如SET, LPUSH等，并将继续回复只读命令，如GET。</span><span class="token comment"># 当使用Redis作为LRU或LFU缓存，或为实例设置硬内存限制(使用'noeviction'策略)时，此选项通常很有用。</span><span class="token comment">#</span><span class="token comment"># maxmemory &lt;bytes&gt;</span><span class="token comment"># MAXMEMORY策略:当达到MAXMEMORY时，Redis如何选择要删除的内容。您可以在以下行为中选择:</span><span class="token comment">#</span><span class="token comment"># volatile-lru -&gt; 使用近似的LRU驱逐，仅具有过期时间的KEY</span><span class="token comment"># allkeys-lru -&gt; 使用近似的LRU驱逐任何键。</span><span class="token comment"># volatile-lfu -&gt; 使用近似LFU驱逐LFU, 仅具有过期时间的KEY</span><span class="token comment"># allkeys-lfu -&gt; 使用近似的LFU驱逐任何键</span><span class="token comment"># volatile-random -&gt; 删除具有过期时间设置的随机KEY</span><span class="token comment"># allkeys-random -&gt; 删除一个随机的任意KEY</span><span class="token comment"># volatile-ttl -&gt; 使用最近的过期时间(小TTL)删除KEY</span><span class="token comment"># noeviction -&gt; 不要清除任何东西，只是在写操作时返回一个错误。</span><span class="token comment">#</span><span class="token comment"># LRU （Least Recently Used）：最近最少使用</span><span class="token comment"># LFU （Least Frequently Used）：最不经常使用的</span><span class="token comment">#</span><span class="token comment"># LRU、LFU和volatile-ttl均采用近似随机化算法实现。</span><span class="token comment">#</span><span class="token comment"># 注意:使用上述任何一种策略，当没有合适的键用于驱逐时，Redis将在需要更多内存的写操作时返回一个错误。</span><span class="token comment"># 这些命令通常用于创建新KEY、添加数据或修改现有KEY。例如:SET、INCR、HSET、LPUSH、SUNIONSTORE、SORT(由于STORE参数)和EXEC(如果事务包含任何需要内存的命令)。</span><span class="token comment"># 默认配置：</span><span class="token comment">#</span><span class="token comment"># maxmemory-policy noeviction</span><span class="token comment"># LRU、LFU和最小TTL算法都不是精确算法，而是近似算法(为了节省内存)，因此您可以调整它的速度或精度。</span><span class="token comment"># 默认情况下，Redis将检查五个键，并选择一个最近使用最少的键，您可以使用以下配置指令更改样本大小。默认值5可以产生足够好的结果。10非常接近真实的LRU，但消耗更多的CPU。3更快，但不是很准确</span><span class="token comment">#</span><span class="token comment"># maxmemory-samples 5</span><span class="token comment"># 驱逐处理被设计为在默认设置下正常工作。</span><span class="token comment"># 如果有一个异常大的写流量，这个值可能需要增加。降低这个值可能会降低延迟，但会影响清除处理的有效性</span><span class="token comment">#   0 = minimum latency, 10 = default, 100 = process without regard to latency</span><span class="token comment">#</span><span class="token comment"># maxmemory-eviction-tenacity 10</span><span class="token comment"># 从Redis 5开始，默认情况下副本将忽略其maxmemory设置(除非在故障转移后或手动将其提升为主内存)。</span><span class="token comment"># 这意味着KEY的删除将仅由主服务器处理，将DEL命令发送到副本，作为主服务器中的KEY删除。</span><span class="token comment"># 这种行为可以确保主副本和副本保持一致，这通常是你想要的，但是如果你的副本是可写的，或者你想让副本有一个不同的内存设置，并且你确定对副本执行的所有写入都是幂等的，那么你可以改变这个默认值(但一定要理解你在做什么)。</span><span class="token comment"># 请注意，由于副本默认情况下不驱逐，因此它最终可能会使用比maxmemory设置的内存更多的内存(副本上的某些缓冲区可能更大，或者数据结构有时可能占用更多内存等等)。因此，请确保监视副本，并确保它们有足够的内存，在主服务器达到配置的maxmemory设置之前不会出现真正的内存不足情况。</span><span class="token comment">#</span><span class="token comment"># replica-ignore-maxmemory yes</span><span class="token comment"># Redis以两种方式回收过期KEY:当这些KEY被发现过期时，在访问时，以及在后台，在所谓的“活动过期KEY”中回收。KEY空间被缓慢地交互式地扫描，寻找要回收的过期KEY，这样就有可能释放过期KEY的内存，并且在短时间内不会再次访问这些KEY。</span><span class="token comment"># 过期周期的默认工作将尽量避免在内存中保留超过10%的过期KEY，并尽量避免消耗总内存的25%以上，并增加系统的延迟。</span><span class="token comment"># 然而，可以将通常设置为“1”的过期“effort”增加到更大的值，直到值“10”。</span><span class="token comment"># 在其最大值时，系统将使用更多的CPU，更长的周期(技术上可能会引入更多的延迟)，并且系统中仍然存在的已经过期的KEY将更少。这是内存、CPU和延迟之间的权衡。</span><span class="token comment">#</span><span class="token comment"># active-expire-effort 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LAZY-FREEING">LAZY FREEING</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################# LAZY FREEING ####################################</span><span class="token comment"># Redis有两个删除键的原语。一个称为DEL，是对对象的阻塞删除。这意味着服务器停止处理新命令，以便以同步方式回收与对象关联的所有内存。</span><span class="token comment"># 如果删除的键与一个小对象相关联，执行DEL命令所需的时间非常小，与Redis中的大多数其他O(1)或O(log_N)命令相当。</span><span class="token comment"># 但是，如果键与包含数百万个元素的聚合值相关联，则服务器可能阻塞很长时间(甚至几秒钟)以完成操作。</span><span class="token comment">#</span><span class="token comment"># 出于上述原因，Redis还提供了非阻塞删除原语，如UNLINK(非阻塞DEL)和FLUSHALL和FLUSHDB命令的ASYNC选项，以便在后台回收内存。这些命令在常数时间内执行。另一个线程将在后台以最快的速度递增地释放对象。</span><span class="token comment">#</span><span class="token comment"># FLUSHALL和FLUSHDB的DEL、UNLINK和ASYNC选项由用户控制.</span><span class="token comment"># 什么时候使用一种或另一种是好主意，这取决于应用程序的设计。</span><span class="token comment"># 然而，Redis服务器有时不得不删除键或刷新整个数据库作为其他操作的副作用。</span><span class="token comment"># 具体来说，Redis在以下场景中独立于用户调用删除对象:</span><span class="token comment">#</span><span class="token comment"># 1) 在清除时，由于maxmemory和maxmemory策略配置，为了为新数据腾出空间，不会超过指定的内存限制.</span><span class="token comment"># 2) 因为过期:当一个键具有相关的生存时间(参见expire命令)时，必须从内存中删除.</span><span class="token comment"># 3) 因为将数据存储在可能已经存在的键上的命令的副作用。</span>     例如，RENAME命令，当它被另一个KEY替换时，可能会删除旧的KEY内容。类似地，带有STORE选项的SUNIONSTORE或SORT可以删除现有的键。     SET命令本身删除指定键的任何旧内容，以便用指定的字符串替换它.<span class="token comment"># 4) 在复制过程中，当一个副本与它的主数据库执行完全重新同步时，整个数据库的内容将被删除，以便加载刚刚传输的RDB文件</span><span class="token comment">#</span><span class="token comment"># 在上述所有情况下，默认是以阻塞方式删除对象，就像调用DEL一样。但是，您可以使用以下配置指令专门配置每种情况，以便像调用UNLINK一样以非阻塞的方式释放内存</span><span class="token key attr-name">lazyfree-lazy-eviction</span> <span class="token value attr-value">no</span><span class="token key attr-name">lazyfree-lazy-expire</span> <span class="token value attr-value">no</span><span class="token key attr-name">lazyfree-lazy-server-del</span> <span class="token value attr-value">no</span><span class="token key attr-name">replica-lazy-flush</span> <span class="token value attr-value">no</span><span class="token comment"># 当用户调用DEL代码替换为UNLINK调用是不容易的情况下，修改DEL命令的默认行为，完全像UNLINK，使用以下配置指令:</span><span class="token key attr-name">lazyfree-lazy-user-del</span> <span class="token value attr-value">no</span><span class="token comment"># FLUSHDB, FLUSHALL, SCRIPT FLUSH and FUNCTION FLUSH 同时支持异步和同步删除, 可以通过将[SYNC|ASYNC]标志传递到命令中来控制。</span><span class="token comment"># 当两个标志都没有传递时，该指令将用于确定是否应该异步删除数据。</span><span class="token key attr-name">lazyfree-lazy-user-flush</span> <span class="token value attr-value">no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="THREADED-I-O">THREADED I/O</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ THREADED I/O ：慢I/O访问线程操作 #################################</span><span class="token comment"># Redis主要是单线程的，但是也有一些线程操作，如UNLINK，慢I/O访问和其他在边线程上执行的事情。</span><span class="token comment">#</span><span class="token comment"># 现在也可以在不同的I/O线程中处理Redis客户端的套接字读写。</span><span class="token comment"># 由于写的很慢，通常Redis用户使用流水线来加快每个核的性能，并生成多个实例来扩展。使用I/O线程，可以轻松地将Redis加速两倍，而无需诉诸于流水线或实例分片。</span><span class="token comment"># 默认情况下线程是禁用的，我们建议只在至少有4个或更多内核的机器上启用它，至少留下一个备用内核。</span><span class="token comment"># 使用超过8个线程不太可能有太大帮助。我们也建议只有当你真的有性能问题时才使用线程I/O，因为Redis实例能够使用相当大比例的CPU时间，否则使用这个特性没有任何意义。</span><span class="token comment">#</span><span class="token comment"># 例如，如果你有一个四核CPU，尝试使用2或3个I/O线程，如果你有一个8核，尝试使用6个线程。为了启用I/O线程，使用以下配置指令:</span><span class="token comment">#</span><span class="token comment"># io-threads 4</span><span class="token comment">#</span><span class="token comment"># 将io-threads设置为1将会像往常一样使用主线程。当I/O线程被启用时，我们只使用线程进行写操作，即执行write(2)系统调用并将客户端缓冲区传输到套接字。</span><span class="token comment"># 然而，也可以使用以下配置指令启用读取线程和协议解析，将其设置为yes:</span><span class="token comment">#</span><span class="token comment"># io-threads-do-reads no</span><span class="token comment">#</span><span class="token comment"># 通常，线程读取没有太大帮助。</span><span class="token comment"># NOTE 1: 这个配置指令不能在运行时通过CONFIG SET修改。此外，当启用SSL时，此特性目前无法工作。</span><span class="token comment"># NOTE 2:如果你想使用red -benchmark测试Redis的加速，确保你也在线程模式下运行基准测试本身，使用——threads选项来匹配Redis线程的数量，否则你将无法注意到这些改进。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="KERNEL-OOM-CONTROL">KERNEL OOM CONTROL</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################ KERNEL OOM CONTROL：内核oom控制 ##############################</span><span class="token comment"># 在Linux上，可以提示内核OOM杀手在内存不足时应该首先杀死哪些进程。</span><span class="token comment"># 启用这个特性可以使Redis主动控制所有进程的oom_score_adj值，这取决于它们的角色。</span><span class="token comment"># 默认分数将尝试在所有其他进程之前杀死后台子进程，并在主进程之前杀死副本。</span><span class="token comment"># Redis支持以下选项:</span><span class="token comment"># - no:       不要更改oom-score-adj(默认值)。</span><span class="token comment"># - yes:      “相对”的别名见下文。</span><span class="token comment"># - absolute: om-score-adj- Values中的值被写入内核。</span><span class="token comment">#- relative:  这些值在服务器启动时相对于oom_score_adj的初始值使用，然后被限制在-1000到1000的范围内。因为初始值通常为0，所以它们通常会与绝对值匹配。</span>oom-score-adj no<span class="token comment"># 当使用oom-score-adj时，该指令控制主进程、副本进程和后台子进程的特定值。数值范围为-2000到2000(越高意味着越有可能被杀死)。</span><span class="token comment"># 没有特权的进程(不是根进程，并且没有CAP_SYS_RESOURCE功能)可以自由地增加其值，但不能将其降低到初始设置以下。</span><span class="token comment"># 这意味着将oom-score-adj设置为“相对”，并将oom-score-adj-values设置为正值总是会成功。</span>oom-score-adj-values <span class="token number">0</span> <span class="token number">200</span> <span class="token number">800</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="KERNEL-transparent-hugepage-CONTROL">KERNEL transparent hugepage CONTROL</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################### KERNEL transparent hugepage CONTROL ###################### </span><span class="token comment"># 通常内核的透明大页面控件设置为“madvise”或者默认为“never”(/sys/kernel/mm/transparent_hugepage/enabled)，这样，此配置无效。</span><span class="token comment"># 在将其设置为“always”的系统中，Redis将为了Redis进程尝试禁用它，为了避免延迟问题（特别是fork(2)和CoW的延迟问题）。</span><span class="token comment"># 如果出于某种原因，您更喜欢保持启用，您可以将此配置设置为“no”，并将内核全局设置为“always”。</span>disable-thp <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="APPEND-ONLY-MODE：追加模式">APPEND ONLY MODE：追加模式</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################## APPEND ONLY MODE ###############################</span><span class="token comment"># 默认情况下，Redis会异步将数据集转储到磁盘上。这种模式在许多应用程序中已经足够好了，但是Redis进程的问题或停电可能会导致几分钟的写入丢失(取决于配置的保存点)。</span><span class="token comment"># 仅追加文件是另一种持久性模式，它提供了更好的持久性。</span><span class="token comment"># 例如，使用默认的数据fsync策略(参见后面的配置文件)，Redis可以在一个意外事件中丢失一秒钟的写操作内容（比如服务器断电，或者如果Redis进程本身发生了一些错误），但Reids程序仍然正常运行。</span><span class="token comment"># AOF和RDB持久性可以同时启用，没有任何问题.</span><span class="token comment"># 如果启动时启用AOF, Redis将加载AOF，这是具有更好的持久性保证的文件。</span><span class="token comment">#</span><span class="token comment"># Please check https://redis.io/topics/persistence for more information.</span>appendonly no<span class="token comment"># 仅附加文件的基本名称</span><span class="token comment"># Redis 7和更新版本使用一组只能追加的文件来持久化数据集和应用于它的更改。使用的文件有两种基本类型:</span><span class="token comment"># - 基本文件，它是表示创建文件时数据集完整状态的快照。 基本文件的形式可以是RDB (binary serialized：二进制序列化) or AOF (textual commands：文本命令).</span><span class="token comment"># - 增量文件，其中包含在前一个文件之后应用于数据集的其他命令。</span><span class="token comment">#</span><span class="token comment"># 此外，清单文件用于跟踪文件及其创建和应用它们的顺序。</span><span class="token comment"># Append-only文件的文件名是由Redis按照特定的模式创建的。文件名的前缀基于“appendfilename”配置参数，后面跟着关于序列和类型的附加信息。</span><span class="token comment"># 例如，如果appendfilename设置为appendonly.aof，可以导出以下文件名:</span><span class="token comment"># - appendonly.aof.1.base.rdb （基本文件）</span><span class="token comment"># - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof （增量文件）</span><span class="token comment"># - appendonly.aof.manifest （清单文件）</span>appendfilename <span class="token string">"appendonly.aof"</span><span class="token comment"># 为了方便起见，Redis将所有持久的仅追加文件存储在专用目录中。目录的名称由appenddirname配置参数决定。</span>appenddirname <span class="token string">"appendonlydir"</span><span class="token comment"># fsync()调用告诉操作系统实际将数据写入磁盘，而不是在输出缓冲区中等待更多数据。</span><span class="token comment"># 有些操作系统真的会在磁盘上刷新数据，其他操作系统会尽快尝试这样做。</span><span class="token comment">#</span><span class="token comment"># Redis支持三种不同的模式:</span><span class="token comment"># - no: 不要fsync，让操作系统在需要的时候刷新数据。快。</span><span class="token comment"># - always: 每次写入仅追加日志后进行fsync。慢，但安全。</span><span class="token comment"># - everysec: 每秒只能进行一次fsync。妥协。</span><span class="token comment">#</span><span class="token comment"># 默认是“everysec”，因为这通常是速度和数据安全之间的正确妥协。</span><span class="token comment"># 这取决于您是否可以将其放宽为“no”，从而让操作系统在需要时刷新输出缓冲区，以获得更好的性能(但如果您可以接受一些数据丢失的想法，请考虑默认的持久性模式快照)，或者相反，使用“always”，它非常慢，但比everysec更安全一些。具体内容参考： http://antirez.com/post/redis-persistence-demystified.html</span><span class="token comment">#</span><span class="token comment"># 如果不确定选择哪种，使用默认的“everysec”。</span><span class="token comment"># appendfsync always</span>appendfsync everysec<span class="token comment"># appendfsync no</span><span class="token comment"># 当AOF的fsync策略设置为always或everysec时，一个后台保存进程(一个后台保存或AOF日志后台重写)正在对磁盘执行大量的I/O，在一些Linux配置中，Redis可能会在fsync()调用上阻塞太长时间。</span><span class="token comment"># 请注意，目前还没有修复这个问题，因为即使在不同的线程中执行fsync也会阻塞同步写(2)调用。</span><span class="token comment">#</span><span class="token comment"># 为了缓解这个问题，可以使用以下选项来防止在BGSAVE或BGREWRITEAOF正在进行时在主进程中调用fsync()。</span><span class="token comment"># 这意味着当另一个子文件正在保存时，Redis的持久性与“appendfsync no”相同。</span><span class="token comment"># 实际上，这意味着在最坏的情况下(使用默认的Linux设置)，可能会丢失长达30秒的日志。</span><span class="token comment">#</span><span class="token comment"># 如果你有延迟问题，把这个改为“是”。否则，从耐久性的角度来看，这是最安全的选择。</span>no-appendfsync-on-rewrite no<span class="token comment"># 自动重写append only文件。</span><span class="token comment"># 当AOF日志大小增长到指定的百分比时，Redis能够隐式地自动重写日志文件，调用BGREWRITEAOF。</span><span class="token comment"># 它是这样工作的: Redis记住最近一次重写后AOF文件的大小(如果重启后没有发生重写，则使用启动时AOF的大小)。</span><span class="token comment">#</span><span class="token comment"># 此基本大小与当前大小进行比较. 如果当前大小大于指定的百分比，则会触发重写. 此外，您还需要指定要重写的AOF文件的最小大小, 这对于避免重写AOF文件很有用，即使达到了百分比增长，但它仍然非常小。</span><span class="token comment"># 指定一个百分数为零以禁用自动AOF重写功能。</span>auto-aof-rewrite-percentage <span class="token number">100</span>auto-aof-rewrite-min-size 64mb<span class="token comment"># 在Redis启动过程中，当AOF数据被加载回内存时，可能会发现AOF文件在结束时被截断。当Redis运行的系统崩溃时，可能会发生这种情况, 特别是当ext4文件系统在没有data=ordered选项的情况下被挂载时(然而，当Redis本身崩溃或中止，但操作系统仍然正常工作时，这就不会发生)。</span><span class="token comment"># 当这种情况发生时，Redis可以退出错误，或者加载尽可能多的数据(现在的默认值)，并在发现AOF文件在结束时被截断时启动。以下选项控制此行为。</span><span class="token comment">#</span><span class="token comment"># 如果aof-load-truncated设置为yes，则加载一个截断的AOF文件，并且Redis服务器开始发送日志来通知用户该事件。</span><span class="token comment"># 否则，如果该选项被设置为no，服务器将终止并报错并拒绝启动。当该选项设置为no时，用户需要在重新启动服务器之前使用“redis-check-aof”实用程序修复AOF文件。</span><span class="token comment">#</span><span class="token comment"># 注意，如果AOF文件在中间被发现损坏，服务器仍然会报错退出。这个选项只适用于当Redis试图从AOF文件读取更多的数据，但没有足够的字节将被发现。</span>aof-load-truncated <span class="token function">yes</span><span class="token comment"># Redis可以创建RDB或AOF格式的只能追加的基本文件. 使用RDB格式总是更快更有效，仅出于向后兼容的目的才支持禁用RDB格式。</span>aof-use-rdb-preamble <span class="token function">yes</span><span class="token comment"># Redis支持在AOF中记录时间戳注释，以支持从特定时间点恢复数据。但是，使用此功能会以一种可能与现有AOF解析器不兼容的方式更改AOF格式。</span>aof-timestamp-enabled no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SHUTDOWN">SHUTDOWN</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ SHUTDOWN #####################################</span><span class="token comment"># 关闭时等待副本的最大时间，以秒为单位。</span><span class="token comment">#</span><span class="token comment"># 在关闭期间，宽限期允许任何滞后的副本在主复制存在之前赶上最新的复制偏移量。这段时间可以防止数据丢失，特别是对于没有配置磁盘备份的部署。</span><span class="token comment"># “shutdown-timeout”值是宽限期的持续时间，单位为秒。它只适用于实例有副本的情况。如果要禁用该特性，请将该值设置为0。</span><span class="token comment">#</span><span class="token comment"># shutdown-timeout 10</span><span class="token comment"># 当Redis接收到SIGINT（中断信号：interrupt）或SIGTERM（终止信号：terminal）时，启动关机，默认情况下，如果配置了保存点，则在阻塞操作中将RDB快照写入磁盘。</span><span class="token comment"># 用于信号关闭的选项可以包括以下值:</span><span class="token comment"># default:  仅当配置保存点时保存RDB快照。等待滞后的副本赶上。</span><span class="token comment"># save:     强制数据库保存操作，即使没有配置保存点。</span><span class="token comment"># nosave:   拒绝数据库保存操作，即使配置了一个或多个保存点。</span><span class="token comment"># now:      跳过等待滞后的副本。</span><span class="token comment"># force:    忽略任何通常会阻止服务器退出的错误。</span><span class="token comment">#</span><span class="token comment"># 只要“save”和“nosave”不同时设置，就允许任何值的组合。例如: "nosave force now"</span><span class="token comment">#</span><span class="token comment"># shutdown-on-sigint default</span><span class="token comment"># shutdown-on-sigterm default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NON-DETERMINISTIC-LONG-BLOCKING-COMMANDS">NON-DETERMINISTIC LONG BLOCKING COMMANDS</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################ NON-DETERMINISTIC LONG BLOCKING COMMANDS： 不确定的长阻塞命令 #####################</span><span class="token comment"># 在Redis开始处理或拒绝其他客户端之前，EVAL脚本、函数和某些情况下模块命令的最大时间(以毫秒为单位)。</span><span class="token comment">#</span><span class="token comment"># 如果达到最大执行时间，Redis将开始回复大多数命令与BUSY错误。</span><span class="token comment"># 在这种状态下，Redis只允许执行少量命令。例如，SCRIPT KILL, FUNCTION KILL, SHUTDOWN NOSAVE，可能还有一些模块特定的'allow-busy'命令。</span><span class="token comment"># SCRIPT KILL和FUNCTION KILL只能停止尚未调用任何写命令的脚本，因此，当用户不想等待脚本的自然终止时，如果脚本已经发出了写命令，则SHUTDOWN NOSAVE可能是停止服务器的唯一方法</span><span class="token comment">#</span><span class="token comment"># 缺省值是5秒。可以将其设置为0或负值来禁用此机制(不间断执行)。注意，在过去这个配置有一个不同的名字，现在是一个别名，所以这两个都是一样的:</span><span class="token comment">#</span><span class="token comment"># lua-time-limit 5000</span><span class="token comment"># busy-reply-threshold 5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="REDIS-CLUSTER：集群配置">REDIS CLUSTER：集群配置</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ REDIS CLUSTER  ###############################</span><span class="token comment"># 普通的Redis实例不能成为Redis集群的一部分，只有作为集群节点启动的节点可以。</span><span class="token comment"># 为了启动一个Redis实例作为一个集群节点，启用集群支持取消注释如下:</span><span class="token comment">#</span><span class="token comment"># cluster-enabled yes</span><span class="token comment"># 每个集群节点都有一个集群配置文件。此文件不建议手动编辑。它由Redis节点创建和更新。</span><span class="token comment"># 每个Redis集群节点都需要不同的集群配置文件。</span><span class="token comment"># 确保在同一系统中运行的实例没有重叠的集群配置文件名。</span><span class="token comment">#</span><span class="token comment"># cluster-config-file nodes-6379.conf</span><span class="token comment"># 集群节点超时时间是指一个节点必须不可达的毫秒数，才会被认为处于故障状态。</span><span class="token comment">#</span><span class="token comment"># cluster-node-timeout 15000</span><span class="token comment"># 集群端口是集群总线侦听入站连接的端口。</span><span class="token comment"># 当设置为默认值0时，绑定到命令端口+10000。设置此值要求您在执行cluster meet时指定集群总线端口。</span><span class="token comment"># cluster-port 0</span><span class="token comment"># 如果发生故障的主服务器的数据看起来太旧，它的副本将避免启动故障转移。</span><span class="token comment"># 对于副本来说，没有简单的方法可以准确测量其“数据年龄”，因此执行以下两个检查:</span><span class="token comment">#</span><span class="token comment"># 1) 如果有多个副本能够进行故障转移，它们将交换消息，以便尝试为副本提供最佳复制偏移(处理来自主服务器的更多数据)。</span><span class="token comment">#     副本将尝试通过偏移量获得它们的排名，并将与它们的排名成比例的延迟应用于故障转移的开始。</span><span class="token comment">#</span><span class="token comment"># 2) 每个副本都计算与主节点最后一次交互的时间. 这可能是接收到的最后一个ping或命令 (如果主服务器仍然处于“已连接”状态), 或者与主服务器断开连接后经过的时间(如果复制链路当前断开)。</span><span class="token comment">#     如果最后一次交互太旧，副本将根本不会尝试故障转移。</span><span class="token comment">#</span><span class="token comment"># 第二点可由用户调整。具体来说，如果自上次与主服务器交互以来，所消耗的时间大于以下情况，副本将不执行故障转移:</span><span class="token comment">#</span><span class="token comment">#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period</span><span class="token comment">#   (节点掉线时间 * 集群副本有效性因子) + 循环PING访问的周期时间</span><span class="token comment">#</span><span class="token comment"># 因此，例如，如果node-timeout是30秒，cluster-replica-validity-factor是10，并且假设默认的repo -ping-replica-period是10秒，那么如果它不能与主服务器对话超过310秒，它就不会尝试故障转移。</span><span class="token comment"># 一个大的cluster-replica-validity-factor可能会允许带有太旧数据的副本故障转移到主节点，而一个太小的值可能会阻止集群完全能够选择一个副本。</span><span class="token comment">#</span><span class="token comment"># 为了获得最大可用性，可以将cluster-replica-validity-factor设置为0，这意味着副本将始终尝试故障转移到主服务器，而不管它们最后一次与主服务器交互是什么时候。</span><span class="token comment"># (然而，他们总是尝试应用一个与他们的偏移等级成比例的延迟)。</span><span class="token comment">#</span><span class="token comment"># 0是唯一能够保证当所有分区恢复时，集群始终能够继续运行的值。</span><span class="token comment">#</span><span class="token comment"># cluster-replica-validity-factor 10</span><span class="token comment"># 集群副本能够迁移到孤立的主服务器，即没有工作副本的主服务器。</span><span class="token comment"># 这提高了集群抵抗故障的能力，否则，如果没有工作副本，孤立的主节点就不能在故障发生时被故障转移。但是，只有当它们的旧主人至少还有一定数量的其他工作副本时，副本才会迁移到孤立的主人。这个数字就是“迁移障碍”。迁移障碍为1意味着一个副本只有在它的主副本至少有一个其他工作副本时才会迁移，以此类推。它通常反映集群中每个主节点所需的副本数量。</span><span class="token comment">#</span><span class="token comment"># 默认值是1(只有当它们的主副本保留至少一个副本时，副本才会迁移)。</span><span class="token comment"># 要禁用迁移，只需将其设置为一个非常大的值或将cluster-allow-replica-migration设置为“no”。可以设置0值，但仅在调试时有用，在生产中是危险的。</span><span class="token comment">#</span><span class="token comment"># cluster-migration-barrier 1</span><span class="token comment"># 关闭此选项允许使用较少的自动集群配置。它既禁止迁移到孤儿的主节点，也禁止从空的主节点迁移。默认是'yes'(允许自动迁移)。</span><span class="token comment">#</span><span class="token comment"># cluster-allow-replica-migration yes</span><span class="token comment"># 默认情况下，如果Redis集群节点检测到至少有一个哈希槽未被发现(没有可用的节点正在为它服务)，它们将停止接受查询。</span><span class="token comment"># 这样，如果集群部分关闭(例如，一系列哈希槽不再被覆盖)，所有集群最终都将不可用。一旦所有插槽被再次覆盖，它就自动返回可用。</span><span class="token comment"># 然而，有时您希望正在工作的集群子集继续接受对仍然覆盖的键空间部分的查询。为此，只需将cluster-require-full-coverage选项设置为no。</span><span class="token comment">#</span><span class="token comment"># cluster-require-full-coverage yes</span><span class="token comment"># 当此选项设置为yes时，将防止副本在主服务器故障时试图将其主服务器故障转移。但是，如果强制执行，副本仍然可以执行手动故障转移。</span><span class="token comment"># 这在不同的场景中都很有用，特别是在多个数据中心操作的情况下，如果不是在DC完全故障的情况下，我们希望其中一方永远不会被提升。</span><span class="token comment">#</span><span class="token comment"># cluster-replica-no-failover no</span><span class="token comment"># 当该选项设置为yes时，允许节点在集群处于down状态时服务读流量，只要节点认为它拥有插槽。</span><span class="token comment"># 这在两种情况下是有用的</span><span class="token comment"># 1. 当应用程序在节点故障或网络分区期间不需要数据一致性时。例如缓存数据。只要节点拥有数据，它就应该能够为其提供服务。</span><span class="token comment"># 2. 此用例用于集群不满足推荐的三个分片，但又希望启用集群模式并在以后扩展的配置。</span><span class="token comment">#    如果没有设置这个选项，1或2个分片配置中的主中断将导致整个集群的读/写中断，如果设置了这个选项，则只会导致写中断。如果没有指定的master，插槽的所有权将不会自动改变。</span><span class="token comment"># </span><span class="token comment"># cluster-allow-reads-when-down no</span><span class="token comment"># 当该选项设置为yes时，允许节点在集群处于down状态时服务发布分片流量，只要节点认为它拥有插槽。</span><span class="token comment"># 如果应用程序即使在集群全局稳定状态不正常的情况下也想使用pubsub特性，那么这是很有用的。如果应用程序想要确保只有一个分片服务于给定的通道，这个特性应该保持为yes。</span><span class="token comment"># </span><span class="token comment"># cluster-allow-pubsubshard-when-down yes</span><span class="token comment"># 设置每个集群总线连接的发送字节缓冲区的内存使用限制，超过限制缓冲区将被清空。</span><span class="token comment"># 这主要是为了防止发送缓冲区在通往慢速连接的链路上无限制地增长(例如PubSub消息被堆积起来)。默认情况下禁用此限制。</span><span class="token comment"># 而当INFO中的'mem_cluster_links' 和/或 'CLUSTER LINKS ' 命令回显中的'send-buffer-allocated'（已分配的发送缓冲区） 项不断增加时，启用该限制。</span><span class="token comment"># 建议设置1gb的最小限制，这样集群链接缓冲区默认情况下至少可以容纳一条PubSub消息。(client-query-buffer-limit默认值为1gb。见 ADVANCED CONFIG)</span><span class="token comment">#</span><span class="token comment"># cluster-link-sendbuf-limit 0</span> <span class="token comment"># 集群可以使用此配置配置其宣布的主机名。</span><span class="token comment"># 对于需要使用TLS服务器名称指示(SNI)或处理基于DNS的路由的应用程序，这是一个常见的用例。</span><span class="token comment"># 默认情况下，该值仅在CLUSTER SLOTS命令中显示为额外的元数据，但可以使用'cluster-preferred-endpoint-type' 更改。该值通过集群总线传递给所有节点，将其设置为空字符串将删除主机名并传播删除。</span><span class="token comment"># cluster-announce-hostname ""</span><span class="token comment"># 集群可以通告客户端如何使用它们的IP地址连接到它们，用户定义主机名，或者声明它们没有端点。</span><span class="token comment"># 通过使用 cluster-preferred-end -type 配置值'ip'、'hostname'或'unknown-endpoint'来设置哪个端点显示为首选端点。</span><span class="token comment"># 这个值控制端点如何返回MOVED/ASKING请求以及CLUSTER插槽的第一个字段。</span><span class="token comment"># 如果首选端点类型设置为主机名，但没有设置宣布的主机名，则'?’将被返回。</span><span class="token comment"># 当集群宣称自己具有未知端点时，这表明服务器不知道客户机如何到达集群。这可能发生在某些网络情况下，其中有多个可能的路由到节点，并且服务器不知道客户端选择了哪一个。</span><span class="token comment"># 在这种情况下，服务器期望客户端通过发出最后一个请求时使用的相同端点进行联系，但是使用响应中提供的端口。</span><span class="token comment">#</span><span class="token comment"># cluster-preferred-endpoint-type ip</span><span class="token comment"># In order to setup your cluster make sure to read the documentation</span><span class="token comment"># available at https://redis.io web site.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CLUSTER-DOCKER-NAT-support：集群配置">CLUSTER DOCKER/NAT support：集群配置</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">########################## CLUSTER DOCKER/NAT support：容器内集群配置  ########################</span><span class="token comment"># 在某些部署中，无法检测到Redis集群节点，因为地址是NAT-ted或因为端口被转发(典型的情况是Docker和其他容器)。</span><span class="token comment"># 为了使Redis集群在Docker容器这样的环境中工作，需要一个静态配置，其中每个节点都知道自己的公共地址。</span><span class="token comment"># 以下四个选项用于此范围，分别是:</span><span class="token comment"># * cluster-announce-ip</span><span class="token comment"># * cluster-announce-port</span><span class="token comment"># * cluster-announce-tls-port</span><span class="token comment"># * cluster-announce-bus-port</span><span class="token comment"># 每个配置都指示节点有关其地址、客户端端口(用于不带TLS和带TLS的连接)和集群消息总线端口。</span><span class="token comment"># 然后在总线包的报头中发布该信息，以便其他节点能够正确地映射发布该信息的节点的地址。</span><span class="token comment"># </span><span class="token comment"># 如果“tls-cluster”设置为“yes”，而“cluster-announce-tls-port”被省略或设置为“0”，则“cluster-announce-port”指的是TLS端口。</span><span class="token comment"># 另请注意，如果“tls-cluster”设置为“no“（默认），则”cluster-announce-tls-port”无效。</span><span class="token comment">#</span><span class="token comment"># 如果不使用上述选项，将使用正常的Redis集群自动检测。</span><span class="token comment"># </span><span class="token comment"># 注意，在重新映射时，总线端口可能不在客户端端口+10000 的固定偏移量上，因此您可以根据重新映射的方式指定任何端口和总线端口。</span><span class="token comment"># 如果没有设置总线端口，将像往常一样使用固定偏移量10000</span><span class="token comment">#</span><span class="token comment"># 例如:</span><span class="token comment">#</span><span class="token comment"># cluster-announce-ip 10.1.1.5</span><span class="token comment"># cluster-announce-tls-port 6379</span><span class="token comment"># cluster-announce-port 0</span><span class="token comment"># cluster-announce-bus-port 6380</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SLOW-LOG：慢查询日志">SLOW  LOG：慢查询日志</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## SLOW LOG ：满查询日志###################################</span><span class="token comment"># Redis Slow Log 是一个记录超过指定执行时间的查询的系统。执行时间不包括I/O操作，如与客户端交谈、发送应答等，而只包括实际执行命令所需的时间(这是命令执行的唯一阶段，线程被阻塞，不能同时服务其他请求)。</span><span class="token comment"># 您可以使用两个参数配置慢速日志: 一个参数告诉Redis要超过多少微秒的执行时间才能记录命令，另一个参数是慢速日志的长度。</span><span class="token comment"># 当记录一个新命令时，最早的命令将从记录的命令队列中删除。</span><span class="token comment"># 下面的时间以微秒表示，因此1000000相当于一秒。请注意，负数禁用慢日志，而值为零则强制记录每个命令。</span><span class="token key attr-name">slowlog-log-slower-than</span> <span class="token value attr-value">10000</span><span class="token comment"># 这个长度没有限制。只是要注意它会消耗内存。</span><span class="token comment"># 可以使用SLOWLOG RESET回收慢日志使用的内存。</span><span class="token key attr-name">slowlog-max-len</span> <span class="token value attr-value">128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LATENCY-MONITOR：延迟监控">LATENCY MONITOR：延迟监控</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ LATENCY MONITOR：延迟监控 ##############################</span><span class="token comment"># The Redis latency monitoring subsystem samples different operations at runtime in order to collect data related to possible sources of latency of a Redis instance.</span><span class="token comment"># Redis延迟监控子系统在运行时对不同的操作进行抽样，以收集与Redis实例的可能延迟来源相关的数据。</span><span class="token comment"># 通过LATENCY命令，用户可以打印图表并获得报告。</span><span class="token comment">#</span><span class="token comment"># 系统只记录执行时间等于或大于通过延迟监视器阈值配置指令指定的毫秒数的操作。</span><span class="token comment"># 当其值设置为0时，将关闭延迟监视器。</span><span class="token comment">#</span><span class="token comment"># 默认情况下，延迟监视是禁用的，因为如果您没有延迟问题，则通常不需要它，并且收集数据会对性能产生影响，尽管影响很小，但可以在大负载下测量。</span><span class="token comment"># 如果需要，可以在运行时使用命令"CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;" 轻松启用延迟监控。</span><span class="token key attr-name">latency-monitor-threshold</span> <span class="token value attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LATENCY-TRACKING：延迟追踪">LATENCY TRACKING：延迟追踪</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ LATENCY TRACKING ##############################</span><span class="token comment"># Redis扩展延迟监控跟踪每个命令的延迟，并通过“INFO latencystats”命令导出百分比分布，并通过LATENCY命令导出累积延迟分布(直方图)。</span><span class="token comment"># 默认情况下，扩展延迟监视是启用的，因为跟踪命令延迟的开销非常小。</span><span class="token comment"># latency-tracking yes</span><span class="token comment"># 缺省情况下，通过INFO latencystats命令导出的延迟百分比为p50、p99和p999。</span><span class="token comment"># latency-tracking-info-percentiles 50 99 99.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EVENT-NOTIFICATION：事件通知">EVENT NOTIFICATION：事件通知</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################# EVENT NOTIFICATION ##############################</span><span class="token comment"># Redis可以通知Pub/Sub客户端在key space中发生的事件。该特性在https://redis.io/topics/notifications上有文档说明</span><span class="token comment"># 例如，如果“notify-keyspace-events”通知被启用，并且客户端对存储在数据库0中的KEY“foo”执行DEL操作，则两条消息将通过Pub/Sub发布:</span><span class="token comment">#</span><span class="token comment"># PUBLISH __keyspace@0__:foo del</span><span class="token comment"># PUBLISH __keyevent@0__:del foo</span><span class="token comment">#</span><span class="token comment"># 可以选择Redis将在一组类中通知的事件。每个类别都由一个单一的字符来标识:</span><span class="token comment">#</span><span class="token comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span><span class="token comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span><span class="token comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span><span class="token comment">#  $     String commands</span><span class="token comment">#  l     List commands</span><span class="token comment">#  s     Set commands</span><span class="token comment">#  h     Hash commands</span><span class="token comment">#  z     Sorted set commands</span><span class="token comment">#  x     Expired events (events generated every time a key expires)</span><span class="token comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span><span class="token comment">#  n     New key events (Note: not included in the 'A' class)</span><span class="token comment">#  t     Stream commands</span><span class="token comment">#  d     Module key type events</span><span class="token comment">#  m     Key-miss events (Note: It is not included in the 'A' class)</span><span class="token comment">#  A     Alias for g$lshzxetd, so that the "AKE" string means all the events</span><span class="token comment">#        (Except key-miss events which are excluded from 'A' due to their</span><span class="token comment">#         unique nature).</span><span class="token comment"># </span><span class="token comment">#  “notify-keyspace-events” 以一个由零个或多个字符组成的字符串作为参数。空字符串表示禁用通知。</span><span class="token comment">#  示例1:要启用列表和通用事件，从事件名称的角度来看，使用: notify-keyspace-events Elg</span><span class="token comment">#  示例2: 获取订阅通道名的过期KEY的流 __keyevent@0__:expired 使用: notify-keyspace-events Ex</span><span class="token comment">#</span><span class="token comment"># 默认情况下，所有通知都是禁用的，因为大多数用户不需要这个功能，而且这个功能有一些开销。注意，如果不指定K或E中的至少一个，则不会传递任何事件。</span><span class="token key attr-name">notify-keyspace-events</span> <span class="token value attr-value">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ADVANCED-CONFIG">ADVANCED CONFIG</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################### ADVANCED CONFIG ###############################</span><span class="token comment"># 当哈希表有少量条目且最大条目不超过给定阈值时，使用内存效率高的数据结构进行编码。</span><span class="token comment"># 可以使用以下指令配置这些阈值。</span><span class="token key attr-name">hash-max-listpack-entries</span> <span class="token value attr-value">512</span><span class="token key attr-name">hash-max-listpack-value</span> <span class="token value attr-value">64</span><span class="token comment"># 列表还以一种特殊的方式进行编码，以节省大量空间。</span><span class="token comment"># 每个内部列表节点允许的条目数可以指定为固定的最大大小或最大元素数。</span><span class="token comment"># 对于固定的最大大小，使用-5到-1，这意味着:</span><span class="token comment"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span><span class="token comment"># -4: max size: 32 Kb  &lt;-- not recommended</span><span class="token comment"># -3: max size: 16 Kb  &lt;-- probably not recommended</span><span class="token comment"># -2: max size: 8 Kb   &lt;-- good</span><span class="token comment"># -1: max size: 4 Kb   &lt;-- good</span><span class="token comment"># 正数意味着每个列表节点存储的元素数量不超过这个数字</span><span class="token comment"># 最高性能选项通常是-2 (8 Kb大小)或-1 (4 Kb大小)，但如果您的用例是唯一的，请根据需要调整设置。</span><span class="token key attr-name">list-max-listpack-size</span> <span class="token value attr-value">-2</span><span class="token comment"># 列表也可以被压缩。</span><span class="token comment"># 压缩深度是从列表的两边排除压缩的quicklist ziplist节点的数量。</span><span class="token comment"># 列表的头部和尾部总是未压缩，以便进行快速的推送/弹出操作。设置:</span><span class="token comment"># 0: 禁用所有列表压缩</span><span class="token comment"># 1: depth 1 means "don't start compressing until after 1 node into the list,</span><span class="token comment">#    going from either the head or tail"</span><span class="token comment">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span><span class="token comment">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span><span class="token comment"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span><span class="token comment">#    2 here means: don't compress head or head-&gt;next or tail-&gt;prev or tail,</span><span class="token comment">#    but compress all nodes between them.</span><span class="token comment"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span><span class="token comment"># etc.</span><span class="token key attr-name">list-compress-depth</span> <span class="token value attr-value">0</span><span class="token comment"># 当一个集合只是由基数为10的64位有符号整数范围内的整数组成时，集合具有特殊的编码。</span><span class="token comment"># 下面的配置设置设置了集合大小的限制，以便使用这种特殊的内存节省编码。</span><span class="token key attr-name">set-max-intset-entries</span> <span class="token value attr-value">512</span><span class="token comment"># 包含非整数值的集合，当它们有少量的条目，并且最大的条目不超过给定的阈值时，也使用内存有效的数据结构进行编码。 </span><span class="token comment"># 可以使用以下指令配置这些阈值。</span><span class="token key attr-name">set-max-listpack-entries</span> <span class="token value attr-value">128</span><span class="token key attr-name">set-max-listpack-value</span> <span class="token value attr-value">64</span><span class="token comment"># 与哈希和列表类似，排序集也经过特殊编码，以节省大量空间。此编码仅在排序集的长度和元素低于以下限制时使用:</span><span class="token key attr-name">zset-max-listpack-entries</span> <span class="token value attr-value">128</span><span class="token key attr-name">zset-max-listpack-value</span> <span class="token value attr-value">64</span><span class="token comment"># HyperLogLog稀疏表示字节限制。限制包括16字节的报头。当使用稀疏表示的HyperLogLog超过该限制时，将被转换为密集表示。</span><span class="token comment"># 大于16000的值是完全无用的，因为此时密集表示的内存效率更高。</span><span class="token comment"># 建议值为~ 3000，以获得空间高效编码的好处，而不会降低太多PFADD的速度，使用稀疏编码时PFADD为O(N)。</span><span class="token comment"># 当不考虑CPU，但考虑空间，并且数据集由基数在0-15000范围内的许多hyperloglog组成时，该值可以提高到~10000。</span><span class="token key attr-name">hll-sparse-max-bytes</span> <span class="token value attr-value">3000</span><span class="token comment"># Streams macro node max size / items.</span><span class="token comment"># 流数据结构是一个大节点的基树，其中编码多个项。使用此配置，可以配置单个节点的字节大小，以及在添加新流条目时切换到新节点之前可以包含的最大项数。</span><span class="token comment"># 如果下列任何设置被设置为0，则该限制将被忽略，因此，例如，可以通过将max-bytes设置为0并将max-entries设置为所需值来设置max-entries限制。</span><span class="token key attr-name">stream-node-max-bytes</span> <span class="token value attr-value">4096</span><span class="token key attr-name">stream-node-max-entries</span> <span class="token value attr-value">100</span><span class="token comment"># 主动rehash每100毫秒使用1毫秒的CPU时间来帮助重哈希主Redis哈希表(将顶级键映射到值的哈希表)。</span><span class="token comment"># Redis使用的哈希表实现(参见dicc .c)执行惰性重哈希:你对哈希表执行的操作越多，执行的重哈希“步骤”就越多，所以如果服务器空闲，重哈希永远不会完成，哈希表会占用更多内存。</span><span class="token comment">#</span><span class="token comment"># 默认情况下，每秒钟使用这个毫秒10次，以便主动重新散列主字典，尽可能释放内存。</span><span class="token comment"># 如果不确定:使用“activerehashing no”，如果你有硬延迟要求，在你的环境中，Redis可以不时地以2毫秒的延迟回复查询，这不是一件好事。</span><span class="token comment"># 如果你没有这样的硬性要求，但想尽快释放内存，请使用"activerehashing yes"。</span><span class="token key attr-name">activerehashing</span> <span class="token value attr-value">yes</span><span class="token comment"># 客户端输出缓冲区限制可用于强制断开由于某些原因(常见原因是Pub/Sub客户端消费消息的速度不及发布者生成消息的速度)而未能足够快地从服务器读取数据的客户端。</span><span class="token comment"># 可以为三种不同类型的客户端设置不同的限制:</span><span class="token comment">#</span><span class="token comment"># normal -&gt; normal clients including MONITOR clients</span><span class="token comment"># replica -&gt; replica clients</span><span class="token comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span><span class="token comment">#</span><span class="token comment"># The syntax of every client-output-buffer-limit directive is the following:</span><span class="token comment">#</span><span class="token comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><span class="token comment">#</span><span class="token comment"># A client is immediately disconnected once the hard limit is reached, or if</span><span class="token comment"># the soft limit is reached and remains reached for the specified number of</span><span class="token comment"># seconds (continuously).</span><span class="token comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span><span class="token comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span><span class="token comment"># if the size of the output buffers reach 32 megabytes, but will also get</span><span class="token comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span><span class="token comment"># the limit for 10 seconds.</span><span class="token comment">#</span><span class="token comment"># By default normal clients are not limited because they don't receive data</span><span class="token comment"># without asking (in a push way), but just after a request, so only</span><span class="token comment"># asynchronous clients may create a scenario where data is requested faster</span><span class="token comment"># than it can read.</span><span class="token comment">#</span><span class="token comment"># Instead there is a default limit for pubsub and replica clients, since</span><span class="token comment"># subscribers and replicas receive data in a push fashion.</span><span class="token comment">#</span><span class="token comment"># Note that it doesn't make sense to set the replica clients output buffer</span><span class="token comment"># limit lower than the repl-backlog-size config (partial sync will succeed</span><span class="token comment"># and then replica will get disconnected).</span><span class="token comment"># Such a configuration is ignored (the size of repl-backlog-size will be used).</span><span class="token comment"># This doesn't have memory consumption implications since the replica client</span><span class="token comment"># will share the backlog buffers memory.</span><span class="token comment">#</span><span class="token comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span><span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">normal 0 0 0</span><span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">replica 256mb 64mb 60</span><span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">pubsub 32mb 8mb 60</span><span class="token comment"># Client query buffers accumulate new commands. They are limited to a fixed</span><span class="token comment"># amount by default in order to avoid that a protocol desynchronization (for</span><span class="token comment"># instance due to a bug in the client) will lead to unbound memory usage in</span><span class="token comment"># the query buffer. However you can configure it here if you have very special</span><span class="token comment"># needs, such us huge multi/exec requests or alike.</span><span class="token comment">#</span><span class="token comment"># client-query-buffer-limit 1gb</span><span class="token comment"># In some scenarios client connections can hog up memory leading to OOM</span><span class="token comment"># errors or data eviction. To avoid this we can cap the accumulated memory</span><span class="token comment"># used by all client connections (all pubsub and normal clients). Once we</span><span class="token comment"># reach that limit connections will be dropped by the server freeing up</span><span class="token comment"># memory. The server will attempt to drop the connections using the most </span><span class="token comment"># memory first. We call this mechanism "client eviction".</span><span class="token comment">#</span><span class="token comment"># Client eviction is configured using the maxmemory-clients setting as follows:</span><span class="token comment"># 0 - client eviction is disabled (default)</span><span class="token comment">#</span><span class="token comment"># A memory value can be used for the client eviction threshold,</span><span class="token comment"># for example:</span><span class="token comment"># maxmemory-clients 1g</span><span class="token comment">#</span><span class="token comment"># A percentage value (between 1% and 100%) means the client eviction threshold</span><span class="token comment"># is based on a percentage of the maxmemory setting. For example to set client</span><span class="token comment"># eviction at 5% of maxmemory:</span><span class="token comment"># maxmemory-clients 5%</span><span class="token comment"># In the Redis protocol, bulk requests, that are, elements representing single</span><span class="token comment"># strings, are normally limited to 512 mb. However you can change this limit</span><span class="token comment"># here, but must be 1mb or greater</span><span class="token comment">#</span><span class="token comment"># proto-max-bulk-len 512mb</span><span class="token comment"># Redis calls an internal function to perform many background tasks, like</span><span class="token comment"># closing connections of clients in timeout, purging expired keys that are</span><span class="token comment"># never requested, and so forth.</span><span class="token comment">#</span><span class="token comment"># Not all tasks are performed with the same frequency, but Redis checks for</span><span class="token comment"># tasks to perform according to the specified "hz" value.</span><span class="token comment">#</span><span class="token comment"># By default "hz" is set to 10. Raising the value will use more CPU when</span><span class="token comment"># Redis is idle, but at the same time will make Redis more responsive when</span><span class="token comment"># there are many keys expiring at the same time, and timeouts may be</span><span class="token comment"># handled with more precision.</span><span class="token comment">#</span><span class="token comment"># The range is between 1 and 500, however a value over 100 is usually not</span><span class="token comment"># a good idea. Most users should use the default of 10 and raise this up to</span><span class="token comment"># 100 only in environments where very low latency is required.</span><span class="token key attr-name">hz</span> <span class="token value attr-value">10</span><span class="token comment"># Normally it is useful to have an HZ value which is proportional to the</span><span class="token comment"># number of clients connected. This is useful in order, for instance, to</span><span class="token comment"># avoid too many clients are processed for each background task invocation</span><span class="token comment"># in order to avoid latency spikes.</span><span class="token comment">#</span><span class="token comment"># Since the default HZ value by default is conservatively set to 10, Redis</span><span class="token comment"># offers, and enables by default, the ability to use an adaptive HZ value</span><span class="token comment"># which will temporarily raise when there are many connected clients.</span><span class="token comment">#</span><span class="token comment"># When dynamic HZ is enabled, the actual configured HZ will be used</span><span class="token comment"># as a baseline, but multiples of the configured HZ value will be actually</span><span class="token comment"># used as needed once more clients are connected. In this way an idle</span><span class="token comment"># instance will use very little CPU time while a busy instance will be</span><span class="token comment"># more responsive.</span><span class="token key attr-name">dynamic-hz</span> <span class="token value attr-value">yes</span><span class="token comment"># When a child rewrites the AOF file, if the following option is enabled</span><span class="token comment"># the file will be fsync-ed every 4 MB of data generated. This is useful</span><span class="token comment"># in order to commit the file to the disk more incrementally and avoid</span><span class="token comment"># big latency spikes.</span><span class="token key attr-name">aof-rewrite-incremental-fsync</span> <span class="token value attr-value">yes</span><span class="token comment"># When redis saves RDB file, if the following option is enabled</span><span class="token comment"># the file will be fsync-ed every 4 MB of data generated. This is useful</span><span class="token comment"># in order to commit the file to the disk more incrementally and avoid</span><span class="token comment"># big latency spikes.</span><span class="token key attr-name">rdb-save-incremental-fsync</span> <span class="token value attr-value">yes</span><span class="token comment"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><span class="token comment"># idea to start with the default settings and only change them after investigating</span><span class="token comment"># how to improve the performances and how the keys LFU change over time, which</span><span class="token comment"># is possible to inspect via the OBJECT FREQ command.</span><span class="token comment">#</span><span class="token comment"># There are two tunable parameters in the Redis LFU implementation: the</span><span class="token comment"># counter logarithm factor and the counter decay time. It is important to</span><span class="token comment"># understand what the two parameters mean before changing them.</span><span class="token comment">#</span><span class="token comment"># The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis</span><span class="token comment"># uses a probabilistic increment with logarithmic behavior. Given the value</span><span class="token comment"># of the old counter, when a key is accessed, the counter is incremented in</span><span class="token comment"># this way:</span><span class="token comment">#</span><span class="token comment"># 1. A random number R between 0 and 1 is extracted.</span><span class="token comment"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><span class="token comment"># 3. The counter is incremented only if R &lt; P.</span><span class="token comment">#</span><span class="token comment"># The default lfu-log-factor is 10. This is a table of how the frequency</span><span class="token comment"># counter changes with a different number of accesses with different</span><span class="token comment"># logarithmic factors:</span><span class="token comment">#</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | 0      | 104        | 255        | 255        | 255        | 255        |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | 1      | 18         | 49         | 255        | 255        | 255        |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | 10     | 10         | 18         | 142        | 255        | 255        |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | 100    | 8          | 11         | 49         | 143        | 255        |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment">#</span><span class="token comment"># NOTE: The above table was obtained by running the following commands:</span><span class="token comment">#</span><span class="token comment">#   redis-benchmark -n 1000000 incr foo</span><span class="token comment">#   redis-cli object freq foo</span><span class="token comment">#</span><span class="token comment"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span><span class="token comment"># to accumulate hits.</span><span class="token comment">#</span><span class="token comment"># The counter decay time is the time, in minutes, that must elapse in order</span><span class="token comment"># for the key counter to be decremented.</span><span class="token comment">#</span><span class="token comment"># The default value for the lfu-decay-time is 1. A special value of 0 means we</span><span class="token comment"># will never decay the counter.</span><span class="token comment">#</span><span class="token comment"># lfu-log-factor 10</span><span class="token comment"># lfu-decay-time 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ACTIVE-DEFRAGMENTATION">ACTIVE DEFRAGMENTATION</h2><pre><code class="language-properties">########################### ACTIVE DEFRAGMENTATION ######################### What is active defragmentation?# -------------------------------## Active (online) defragmentation allows a Redis server to compact the# spaces left between small allocations and deallocations of data in memory,# thus allowing to reclaim back memory.## Fragmentation is a natural process that happens with every allocator (but# less so with Jemalloc, fortunately) and certain workloads. Normally a server# restart is needed in order to lower the fragmentation, or at least to flush# away all the data and create it again. However thanks to this feature# implemented by Oran Agra for Redis 4.0 this process can happen at runtime# in a "hot" way, while the server is running.## Basically when the fragmentation is over a certain level (see the# configuration options below) Redis will start to create new copies of the# values in contiguous memory regions by exploiting certain specific Jemalloc# features (in order to understand if an allocation is causing fragmentation# and to allocate it in a better place), and at the same time, will release the# old copies of the data. This process, repeated incrementally for all the keys# will cause the fragmentation to drop back to normal values.## Important things to understand:## 1. This feature is disabled by default, and only works if you compiled Redis#    to use the copy of Jemalloc we ship with the source code of Redis.#    This is the default with Linux builds.## 2. You never need to enable this feature if you don't have fragmentation#    issues.## 3. Once you experience fragmentation, you can enable this feature when#    needed with the command "CONFIG SET activedefrag yes".## The configuration parameters are able to fine tune the behavior of the# defragmentation process. If you are not sure about what they mean it is# a good idea to leave the defaults untouched.# Active defragmentation is disabled by default# activedefrag no# Minimum amount of fragmentation waste to start active defrag# active-defrag-ignore-bytes 100mb# Minimum percentage of fragmentation to start active defrag# active-defrag-threshold-lower 10# Maximum percentage of fragmentation at which we use maximum effort# active-defrag-threshold-upper 100# Minimal effort for defrag in CPU percentage, to be used when the lower# threshold is reached# active-defrag-cycle-min 1# Maximal effort for defrag in CPU percentage, to be used when the upper# threshold is reached# active-defrag-cycle-max 25# Maximum number of set/hash/zset/list fields that will be processed from# the main dictionary scan# active-defrag-max-scan-fields 1000# Jemalloc background thread for purging will be enabled by defaultjemalloc-bg-thread yes# It is possible to pin different threads and processes of Redis to specific# CPUs in your system, in order to maximize the performances of the server.# This is useful both in order to pin different Redis threads in different# CPUs, but also in order to make sure that multiple Redis instances running# in the same host will be pinned to different CPUs.## Normally you can do this using the "taskset" command, however it is also# possible to this via Redis configuration directly, both in Linux and FreeBSD.## You can pin the server/IO threads, bio threads, aof rewrite child process, and# the bgsave child process. The syntax to specify the cpu list is the same as# the taskset command:## Set redis server/io threads to cpu affinity 0,2,4,6:# server_cpulist 0-7:2## Set bio threads to cpu affinity 1,3:# bio_cpulist 1,3## Set aof rewrite child process to cpu affinity 8,9,10,11:# aof_rewrite_cpulist 8-11## Set bgsave child process to cpu affinity 1,10,11# bgsave_cpulist 1,10-11# In some cases redis will emit warnings and even refuse to start if it detects# that the system is in bad state, it is possible to suppress these warnings# by setting the following config which takes a space delimited list of warnings# to suppress## ignore-warnings ARM64-COW-BUG</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;官方模板文件&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://redis.io/docs/management/config-file/&quot;&gt;https://redis.io/docs/management/config-file/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各版本参数</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-数据类型（基础）</title>
    <link href="https://hmxyl.github.io/20230103/72ab10c8.html"/>
    <id>https://hmxyl.github.io/20230103/72ab10c8.html</id>
    <published>2023-01-03T12:22:19.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>String</h1><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">SET</td><td style="text-align:left">SET <em>key</em> value <br>SET <em>key</em> value ex seconds</td><td style="text-align:left">增</td><td>储值<br>储值且key在指定秒后过期</td></tr><tr><td style="text-align:left">MSET</td><td style="text-align:left">MSET <em>key</em> value [key value …]</td><td style="text-align:left">增</td><td>同时储多个值</td></tr><tr><td style="text-align:left">SETEX</td><td style="text-align:left">SETEX <em>key</em> seconds value</td><td style="text-align:left">增</td><td>储值，且key在指定秒后过期</td></tr><tr><td style="text-align:left">PSETEX</td><td style="text-align:left">PSETEX <em>key</em> milliseconds value</td><td style="text-align:left">增</td><td>储值，且key在指定毫秒后过期</td></tr><tr><td style="text-align:left">SETNX</td><td style="text-align:left">SETNX <em>key</em> value</td><td style="text-align:left">增</td><td>仅在key不存在时执行</td></tr><tr><td style="text-align:left">MSETNX</td><td style="text-align:left">MSETNX <em>key</em> value [key value …]</td><td style="text-align:left">增</td><td>在所有的key不存在时执行</td></tr><tr><td style="text-align:left">SETRANGE</td><td style="text-align:left">SETRANGE <em>key</em> offset value</td><td style="text-align:left">改</td><td>字符串从offset开始由value替代</td></tr><tr><td style="text-align:left">INCR</td><td style="text-align:left">INCR key</td><td style="text-align:left">改</td><td>key自增</td></tr><tr><td style="text-align:left">DECR</td><td style="text-align:left">DECR key</td><td style="text-align:left">改</td><td>key自减</td></tr><tr><td style="text-align:left">INCRBY</td><td style="text-align:left">INCRBY <em>key</em> increment</td><td style="text-align:left">改</td><td>key增加指定整形量</td></tr><tr><td style="text-align:left">DECRBY</td><td style="text-align:left">DECRBY <em>key</em> decrement</td><td style="text-align:left">改</td><td>key减少指定整形量</td></tr><tr><td style="text-align:left">INCRBYFLOAT</td><td style="text-align:left">INCRBYFLOAT <em>key</em> increment</td><td style="text-align:left">改</td><td>key增加指定浮点量，浮点数为负数则为减少</td></tr><tr><td style="text-align:left">APPEND</td><td style="text-align:left">APPEND <em>key</em> value</td><td style="text-align:left">改</td><td>追加储值</td></tr><tr><td style="text-align:left">GET</td><td style="text-align:left">GET <em>key</em></td><td style="text-align:left">查</td><td>获取key的value</td></tr><tr><td style="text-align:left">MGET</td><td style="text-align:left">MGET key [key …]</td><td style="text-align:left">查</td><td>同时获取多个key</td></tr><tr><td style="text-align:left">GETDEL</td><td style="text-align:left">GETDEL <em>key</em></td><td style="text-align:left">查&amp;删</td><td>获取key的value后删除key</td></tr><tr><td style="text-align:left">GETSET</td><td style="text-align:left">GETSET <em>key</em> value</td><td style="text-align:left">查&amp;改</td><td>set新的value，并返回旧的value</td></tr><tr><td style="text-align:left">GETRANGE</td><td style="text-align:left">GETRANGE <em>key</em> start end</td><td style="text-align:left">查</td><td>获取value的子字符串 （从start到end）</td></tr><tr><td style="text-align:left">SUBSTR</td><td style="text-align:left">SUBSTR <em>key</em> start end</td><td style="text-align:left">查</td><td>获取value的子字符串 （从start到end）</td></tr><tr><td style="text-align:left">STRLEN</td><td style="text-align:left">STRLEN key</td><td style="text-align:left">查</td><td>获取字符串长度</td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th></th><th>发行版本</th><th>命令</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>GETEX</td><td>6.2.0</td><td><strong>GETEX</strong> key [<strong>EX</strong> seconds |<strong>PX</strong> milliseconds |<strong>EXAT</strong> unix-time-seconds |<strong>PXAT</strong> unix-time-milliseconds |<strong>PERSIST</strong>]</td><td>查&amp;删</td><td>- <strong>EX</strong> seconds：指定过期秒数<br>- <strong>PX</strong> milliseconds：指定过期毫秒数<br>- <strong>EXAT</strong> timestamp-seconds：指定unix某时间点后多少秒过期<br>- <strong>PXAT</strong> timestamp-milliseconds：指定unix某时间点后多少毫秒过期<br>- <strong>PERSIST</strong>：删除过期时间</td></tr><tr><td>LCS</td><td>7.0.0</td><td><strong>LCS</strong> key1 key2 [LEN] [<strong>IDX</strong>] [<strong>MINMATCHLEN</strong> len] [<strong>WITHMATCHLEN</strong>]</td><td>查</td><td>实现最长公共子序列算法。匹配是从最后一个key到第一个key产生的。<br><br>[<strong>LEN</strong>]：最长匹配字符串长度<br>[<strong>IDX</strong>]：返回一个数组。其中包含 LCS匹配结果长度、两个字符串匹配上的开始和结束偏移量<br>[<strong>MINMATCHLEN</strong> len] ：最短匹配字符串长度<br>[<strong>WITHMATCHLEN</strong>]：与IDX一起使用，返回最长公共子字符串的长度</td></tr></tbody></table><blockquote><p>详解</p></blockquote><ol><li><p><span id="Order_LCS"><strong>LCS</strong> key1 key2 [LEN] [<strong>IDX</strong>] [<strong>MINMATCHLEN</strong> len] [<strong>WITHMATCHLEN</strong>] （longest contain substring）</span></p><p>LCS 命令实现最长公共子序列算法。请注意，这与最长的常见字符串算法不同，因为字符串中的匹配字符不需要是连续的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> MSET key1 ohmytext key2 mynewtextOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>a. 获取匹配结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2<span class="token string">"mytext"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>b. 有时我们只需要匹配的长度：LEN</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 LEN<span class="token string">"6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>c. 获取匹配的详细情况：IDX（LEN 和 IDX 不可同时存在）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，通常非常有用的是知道每个字符串中的匹配位置：<strong>匹配是从最后一个到第一个产生的</strong></p><p>上面的数组意味着第一个匹配项（数组的第二个元素）在第一个字符串的位置 2-3 和第二个字符串的 0-1 之间。然后是 4-7 和 5-8 之间。</p><p>要将匹配列表限制为给定最小长度的匹配列表：<code>MINMATCHLEN 4</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX MINMATCHLEN <span class="token number">4</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匹配列表展示匹配长度：<code>WITHMATCHLEN</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX MINMATCHLEN <span class="token number">4</span> WITHMATCHLEN<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>如果没有修饰符，则返回表示<strong>最长</strong>公共子字符串的字符串。</p></li><li><p>当<code>LEN</code>给出命令返回最长公共子字符串的长度。</p></li><li><p>当<code>IDX</code>给出该命令时，返回一个数组。</p><p>len：包含 LCS匹配结果长度</p><p>matches：两个字符串匹配上的开始和结束偏移量。当<code>WITHMATCHLEN</code>给出每个表示匹配的数组时，也将具有匹配的长度</p></li></ul></li></ol><h1>List</h1><p>Redis 列表是字符串值的链表。</p><p>Redis 列表经常用于：</p><ul><li>实现堆栈和队列。</li><li>为后台工作系统构建队列管理。</li></ul><p>双向链表：LPUSH命令将一个新元素添加到列表的左侧（头部），而该RPUSH命令将一个新元素添加到列表的右侧（尾部）</p><p>使用列表的技巧</p><ul><li>lpush+lpop = Stack(栈)</li><li>lpush+rpop = Queue（队列）</li><li>lpush+ltrim = Capped Collection（有限集合）</li><li>lpush+brpop = Message Queue（消息队列）</li></ul><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">LPUSH</td><td style="text-align:left">LPUSH <em>key</em> value [value …]</td><td style="text-align:left">增</td><td></td></tr><tr><td style="text-align:left">LPOP</td><td style="text-align:left">LPOP key</td><td style="text-align:left">删</td><td></td></tr><tr><td style="text-align:left">LPUSHX</td><td style="text-align:left">LPUSHX <em>key</em> value [value …]</td><td style="text-align:left">增</td><td>当 key 不存在时不会进行任何操作</td></tr><tr><td style="text-align:left">LSET</td><td style="text-align:left">LSET <em>key</em> index value</td><td style="text-align:left">改</td><td>修改指定位置元素</td></tr><tr><td style="text-align:left">LINSERT</td><td style="text-align:left">LINSERT key &lt;BEFORE |AFTER&gt; pivot element</td><td style="text-align:left">查&amp;增</td><td>功能： 在参考值pivot 之前或之后，将元素插入存储在 key 处的列表中。<br>-  当key不存在时，认为是空列表，不进行任何操作。 <br>- 当key存在，但不包含值pivot 时返回错误。<br><br>返回：  插入操作后列表的长度，或者当未找到值主元时为 -1。<br>举例：<code>LINSERT mylist BEFORE "World" "There"</code></td></tr><tr><td style="text-align:left">LREM</td><td style="text-align:left">LREM <em>key</em> count value</td><td style="text-align:left">删</td><td>删除count个value。count 为负数，从列尾开始计算</td></tr><tr><td style="text-align:left">LTRIM</td><td style="text-align:left">LTRIM <em>key</em> start stop</td><td style="text-align:left">删</td><td>截断列表元素，-1 是列表的最后一个元素</td></tr><tr><td style="text-align:left">LRANGE</td><td style="text-align:left">LRANGE <em>key</em> start stop</td><td style="text-align:left">查</td><td>获取列表指定范围数据：偏移量为负数，表示从列表末尾开始的偏移量。 <br>正整数（正数排名），负整数（倒数排名）<br>例如，-1 是列表的最后一个元素，-2 是倒数第二个元素，依此类推。</td></tr><tr><td style="text-align:left">LLEN</td><td style="text-align:left">LLEN <em>key</em></td><td style="text-align:left">查</td><td>获取列表元素个数</td></tr><tr><td style="text-align:left">LINDEX</td><td style="text-align:left">LINDEX <em>key</em> index</td><td style="text-align:left">查</td><td>获取列表第index个元素，-1 是列表的最后一个元素</td></tr><tr><td style="text-align:left">LPOS</td><td style="text-align:left">LPOS <em>key</em> element [RANK rank] [COUNT num-matches] [MAXLEN len]</td><td style="text-align:left">查</td><td>查找列表元素（发布版本：6.0.6） <br>[RANK rank] ： 指定要返回的第一个元素的“排名”，正整数（正数排名），负整数（倒数排名）。<br>[COUNT num-matches]：总共返回 num-matches个目标元素<br>[MAXLEN len]：最大筛查次数</td></tr><tr><td style="text-align:left">BLPOP</td><td style="text-align:left">BLPOP <em>key [key …]</em> timeout</td><td style="text-align:left">删</td><td>它是 LPOP 的阻塞版本。<br> 当没有任何元素可以从任何给定列表中弹出时，它会阻塞连接，直到超时后返回 null</td></tr><tr><td style="text-align:left">RPUSH</td><td style="text-align:left">RPUSH <em>key</em> value [value …]</td><td style="text-align:left">增</td><td></td></tr><tr><td style="text-align:left">RPUSHX</td><td style="text-align:left">RPUSHX <em>key</em> value [value …]</td><td style="text-align:left">增</td><td>当 key 不存在时不会进行任何操作</td></tr><tr><td style="text-align:left">RPOP</td><td style="text-align:left">RPOP <em>key</em></td><td style="text-align:left">删</td><td></td></tr><tr><td style="text-align:left">RPOPLPUSH</td><td style="text-align:left">RPOPLPUSH <em>source</em> <em>destination</em></td><td style="text-align:left">删</td><td>删除列表中的最后一个元素，将其添加到另一个列表并返回</td></tr><tr><td style="text-align:left">BRPOP</td><td style="text-align:left">BRPOP <em>key [key …]</em> timeout</td><td style="text-align:left">删</td><td>它是 RPOP 的阻塞版本</td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th>命令</th><th>使用</th><th>发行版本</th><th>说明</th></tr></thead><tbody><tr><td>LMOVE</td><td><strong>LMOVE</strong> <em>source  destination</em> <strong>LEFT |RIGHT   LEFT|RIGHT</strong></td><td>6.2.0</td><td>从列表中弹出一个元素，将其推送到另一个列表并返</td></tr><tr><td>LMPOP</td><td><strong>LMPOP</strong> numkeys <em>key [key …]</em> &lt;<strong>LEFT |RIGHT</strong>&gt; [<strong>COUNT</strong> count]</td><td>7.0.0</td><td>从提供的键名列表中的第一个非空列表键中弹出一个或多个元素。</td></tr><tr><td>BLMPOP</td><td><strong>BLMPOP</strong> timeout numkeys <em>key [key …]</em> &lt;<strong>LEFT |RIGHT</strong>&gt; [<strong>COUNT</strong> count]</td><td>7.0.0</td><td>它是 LMPOP 的阻塞版本</td></tr><tr><td>BLMOVE</td><td><strong>BLMOVE</strong>  <em>source  destination</em> &lt;<strong>LEFT |RIGHT</strong>&gt; &lt;<strong>LEFT |RIGHT</strong>&gt; timeout</td><td>6.2.0</td><td>它是 LMOVE 的阻塞版本</td></tr></tbody></table><h1>Hash</h1><p>Redis 哈希是结构为字段值对集合的记录类型。您可以使用散列来表示基本对象并存储计数器分组等。</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">HEXISTS</td><td style="text-align:left">HEXISTS <em>key</em> field</td><td style="text-align:left">查</td><td>查询 key.field 是否存在，存在返回0，不存在返回1</td></tr><tr><td style="text-align:left">HGET</td><td style="text-align:left">HGET <em>key</em> field</td><td style="text-align:left">查</td><td>获取指定键值对</td></tr><tr><td style="text-align:left">HMGET</td><td style="text-align:left">HMGET <em>key</em> field [field …]</td><td style="text-align:left">查</td><td>获取多个字段值</td></tr><tr><td style="text-align:left">HGETALL</td><td style="text-align:left">HGETALL <em>key</em></td><td style="text-align:left">查</td><td>获取所有键值对数据</td></tr><tr><td style="text-align:left">HINCRBY</td><td style="text-align:left">HINCRBY <em>key</em> field increment</td><td style="text-align:left">改</td><td>将hash 的 field字段的整数值增加给定的数字</td></tr><tr><td style="text-align:left">HINCRBYFLOAT</td><td style="text-align:left">HINCRBYFLOAT <em>key</em> field increment</td><td style="text-align:left">改</td><td>将hash 的 field字段的浮点值增加给定的数量</td></tr><tr><td style="text-align:left">HKEYS</td><td style="text-align:left">HKEYS <em>key</em></td><td style="text-align:left">查</td><td>获取hash 中的所有key</td></tr><tr><td style="text-align:left">HLEN</td><td style="text-align:left">HLEN <em>key</em></td><td style="text-align:left">查</td><td>键值对个数</td></tr><tr><td style="text-align:left">HSET</td><td style="text-align:left">HSET <em>key</em> field value</td><td style="text-align:left">增</td><td></td></tr><tr><td style="text-align:left">HMSET</td><td style="text-align:left">HMSET <em>key</em> field value [field value…]</td><td style="text-align:left">增</td><td></td></tr><tr><td style="text-align:left">HSETNX</td><td style="text-align:left">HSETNX <em>key</em> field value [field value…]</td><td style="text-align:left">增</td><td>如果 key field 都已存在时不会进行任何操作</td></tr><tr><td style="text-align:left">HSTRLEN</td><td style="text-align:left">HSTRLEN <em>key</em> field</td><td style="text-align:left">查</td><td>获取 key.field的value的长度</td></tr><tr><td style="text-align:left">HVALS</td><td style="text-align:left">HVALS <em>key</em></td><td style="text-align:left">查</td><td>获取hash 中的所有value</td></tr><tr><td style="text-align:left">HSCAN</td><td style="text-align:left">HSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td><td style="text-align:left">查</td><td>使用方法方法可以参考<a href="#Order_SCAN">SCAN</a></td></tr><tr><td style="text-align:left">HDEL</td><td style="text-align:left">HDEL <em>key</em> field [field …]</td><td style="text-align:left">删</td><td>删除一个或者多个Hash表的键值对</td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th>命令</th><th>发行版本</th><th>使用</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>HRANDFIELD</td><td>6.2.0</td><td><strong>HRANDFIELD</strong> key [count [<strong>WITHVALUES</strong>]]</td><td>查</td><td>从哈希中获取一个或多个随机字段<br>[<strong>WITHVALUES</strong>]：返回结果包含value</td></tr></tbody></table><p>实战场景</p><ul><li>缓存：相比String更节省空间，能直观的维护缓存信息，如用户信息，视频信息等。</li></ul><h1>Set：无序集合</h1><p>Redis 集是唯一字符串（成员）的无序集合。您可以使用 Redis 集高效地：</p><ul><li>跟踪唯一项目（例如，跟踪访问给定博客文章的所有唯一 IP 地址）</li><li>表示关系（例如，具有给定角色的所有用户的集合）</li><li>执行常见的集合运算，例如交集、并集和差集</li></ul><p><strong>实战场景</strong></p><ul><li><strong>标签</strong>（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。</li><li><strong>点赞，或点踩，收藏等</strong>，可以放到set中实现</li></ul><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SADD</td><td style="text-align:left">SADD <em>key</em> member [member …]</td><td style="text-align:left">增</td><td style="text-align:left">向集合中添加一个或多个成员</td></tr><tr><td style="text-align:left">SCARD</td><td style="text-align:left">SCARD <em>key</em></td><td style="text-align:left">查</td><td style="text-align:left">集合中元素个数</td></tr><tr><td style="text-align:left">SDIFF</td><td style="text-align:left">SDIFF <em>key [key …]</em></td><td style="text-align:left">集合：补</td><td style="text-align:left">取多个集合的差分（其他集合中都没有的元素）</td></tr><tr><td style="text-align:left">SDIFFSTORE</td><td style="text-align:left">SDIFFSTORE <em>destination</em> <em>key [key …]</em></td><td style="text-align:left">集合：补&amp;存</td><td style="text-align:left">取多个集合的差分, 并将结果集存储在一个集合中</td></tr><tr><td style="text-align:left">SINTER</td><td style="text-align:left">SINTER <em>key [key …]</em></td><td style="text-align:left">集合：交</td><td style="text-align:left">取多个集合的交集并返回 <br>INTER 为 Intersect /ˌɪntəˈsekt/ 的缩写</td></tr><tr><td style="text-align:left">SINTERSTORE</td><td style="text-align:left">SINTERSTORE <em>destination</em> <em>key [key …]</em></td><td style="text-align:left">集合：交&amp;存</td><td style="text-align:left">取多个集合的交集并将结果集存储在一个集合中（destination）</td></tr><tr><td style="text-align:left">SISMEMBER</td><td style="text-align:left">SISMEMBER <em>key</em> member</td><td style="text-align:left">查</td><td style="text-align:left">检查一个元素是否存在</td></tr><tr><td style="text-align:left">SMEMBERS</td><td style="text-align:left">SMEMBERS <em>key</em></td><td style="text-align:left">查</td><td style="text-align:left">返回所有元素</td></tr><tr><td style="text-align:left">SMOVE</td><td style="text-align:left">SMOVE <em>source destination</em> member</td><td style="text-align:left">查&amp;移动</td><td style="text-align:left">将集合source 中的元素member移动到集合destination中</td></tr><tr><td style="text-align:left">SPOP</td><td style="text-align:left">SPOP key [count]</td><td style="text-align:left">查&amp;删</td><td style="text-align:left">从集合中移除并返回一个或多个（count）随机成员</td></tr><tr><td style="text-align:left">SRANDMEMBER</td><td style="text-align:left">SRANDMEMBER key [count]</td><td style="text-align:left">查</td><td style="text-align:left">从集合中获取一个或多个（count）随机成员，元素在集合中依然存在</td></tr><tr><td style="text-align:left">SREM</td><td style="text-align:left">SREM <em>key</em> member [member …]</td><td style="text-align:left">删</td><td style="text-align:left">从SET中删除一个或者多个元素</td></tr><tr><td style="text-align:left">SUNION</td><td style="text-align:left">SUNION <em>key [key …]</em></td><td style="text-align:left">集合：并</td><td style="text-align:left">取多个集合的并集</td></tr><tr><td style="text-align:left">SUNIONSTORE</td><td style="text-align:left">SUNIONSTORE <em>destination</em> <em>key [key …]</em></td><td style="text-align:left">集合：并&amp;存</td><td style="text-align:left">取多个集合的并集并将结果集存储在一个集合中（destination）</td></tr><tr><td style="text-align:left">SSCAN</td><td style="text-align:left">SSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td><td style="text-align:left">遍历查</td><td style="text-align:left">参考<a href="#Order_SCAN">SCAN</a></td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">发行版本</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SINTERCARD</td><td style="text-align:left">SINTERCARD numkeys <em>key [key …]</em> [LIMIT limit]</td><td style="text-align:left">7.0.0</td><td style="text-align:left">集合：交</td><td style="text-align:left">获取两个集合的交集数量<br>[LIMIT  limit]：最大交集量 <br><code>SINTERCARD 2 testset testset1返回19</code> 两个集合的交集量容量为19 <br><code>SINTERCARD 2 testset testset1 limit 10 </code>返回10</td></tr><tr><td style="text-align:left">SMISMEMBER</td><td style="text-align:left">SMISMEMBER <em>key</em> member [member …]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查</td><td style="text-align:left">返回每个成员是否是存储在 key  集合的成员（多个元素的存在的查询） <br>返回与指定的member顺序一致的数组</td></tr></tbody></table><h1>Zset : 有序集合</h1><p>Redis 排序集是由<strong>相关分数</strong>排序的唯一字符串（成员）的集合。当多个字符串具有相同的分数时，这些字符串按字典顺序排列。排序集的一些用例包括：</p><ul><li><p>排行榜。例如，您可以使用排序集轻松维护大型在线游戏中最高分的有序列表。</p></li><li><p>速率限制器。特别是，您可以使用排序集来构建滑动窗口速率限制器，以防止过多的 API 请求。</p></li></ul><p>Sorted Set 中的每个元素都与一个浮点值相关联，称为<code>score </code>。所以Sorted Set 也是一种Hash结构。</p><p>排序规则：</p><ul><li><p>如果 A 和 B 是具有不同分数的两个元素， A.score &gt; B.score，则 A &gt; B 。</p></li><li><p>如果 A 和 B 具有完全相同的分数，如果 A 字符串<code>在字典顺序上</code>大于 B 字符串，则 A &gt; B。A 和 B 字符串不能相等，因为排序集只有唯一元素</p></li></ul><p>实战场景</p><ul><li><strong>排行榜</strong>：小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</li></ul><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ZADD</td><td style="text-align:left">ZADD <em>key</em> [NX | XX] [GT | LT] [CH] [INCR]  <em>score member [score member   …]</em></td><td style="text-align:left">增</td><td style="text-align:left">为有序集合添加一个/多个元素，若元素存在，则修改元素的score<br> - <strong>XX</strong>:  只更新已经存在的元素。不添加新元素。<br>- <strong>NX</strong>:   只添加新元素。 不要更新已经存在的元素. <br>- <strong>LT</strong>:   如果新分数<strong>小于</strong>当前分数，则仅更新现有元素。 此标志不会阻止添加新元素。<br>- <strong>GT</strong>:  如果新分数<strong>大于</strong>当前分数，则仅更新现有元素。 此标志不会阻止添加新元素。<br>- <strong>CH</strong>:  通常ZADD的返回值只计算添加的新元素的数量，此命令将返回值则为更改的元素总数（CH 是 <em>changed</em> 的缩写），即：<strong>添加的新元素</strong>和<strong>已经存在且分数被更新的元素</strong>。  <br><strong>INCR</strong>:   此命令类似于<code>ZINCRBY</code>。在此模式下只能指定一个分数元素对。<br><br>注意: <strong>GT</strong>、<strong>LT</strong> 和 <strong>NX</strong> 选项是互斥的。</td></tr><tr><td style="text-align:left">ZCARD</td><td style="text-align:left">ZCARD <em>key</em></td><td style="text-align:left">查</td><td style="text-align:left">返回存储在 key 处的有序集合元素数 <br>card: cardinality 基数</td></tr><tr><td style="text-align:left">ZCOUNT</td><td style="text-align:left">ZCOUNT <em>key</em> min max</td><td style="text-align:left">查</td><td style="text-align:left">用给定值内的分数计算有序集合元素数（包含min 和 max）</td></tr><tr><td style="text-align:left">ZINCRBY</td><td style="text-align:left">ZINCRBY <em>key</em> increment member</td><td style="text-align:left">查&amp;改</td><td style="text-align:left">将存储在 key 的有序集合中的成员的分数按增量递增 <br>① 如果成员在排序集中不存在，则将其添加为增量作为其分数（就像它之前的分数是 0.0） <br>② 如果 key 不存在，则创建一个以指定成员为唯一成员的新排序集。</td></tr><tr><td style="text-align:left">ZLEXCOUNT</td><td style="text-align:left">ZLEXCOUNT <em>key</em> min max</td><td style="text-align:left">查</td><td style="text-align:left">该命令返回有序集合中指定字典范围内的元素个数。<br>① 当一个有序集合中的所有元素以相同的分数插入时，强制使用字典顺序<br>② min 和 max 的定义类似 <a href="#ORDER_ZRANGEBYLEX">ZRANGEBYLEX</a></td></tr><tr><td style="text-align:left">ZPOPMAX</td><td style="text-align:left">ZPOPMAX <em>key</em> [count]</td><td style="text-align:left">查&amp;删</td><td style="text-align:left"><code>从一个key，弹出多个成员</code><br>删除并返回存储在排序集（key）中得分最高的 count个成员。</td></tr><tr><td style="text-align:left">BZPOPMAX</td><td style="text-align:left">BZPOPMAX <em>key [key …]</em> timeout</td><td style="text-align:left">查&amp;删</td><td style="text-align:left"><code> 从多个key，弹出一个成员</code><br>从一个或多个排序集（key [key …]）删除并返回得分最高的成员<br>无数据，则阻塞等待，直到有一个key可用。</td></tr><tr><td style="text-align:left">ZPOPMIN</td><td style="text-align:left">ZPOPMIN <em>key</em> [count]</td><td style="text-align:left">查&amp;删</td><td style="text-align:left"><code>从一个key，弹出多个成员</code><br>删除并返回存储在 key 的排序集中得分最低的 count个 成员</td></tr><tr><td style="text-align:left">BZPOPMIN</td><td style="text-align:left">BZPOPMIN <em>key [key …]</em> timeout</td><td style="text-align:left">查&amp;删</td><td style="text-align:left"><code>从多个key，弹出一个成员</code><br>从一个或多个排序集中删除并返回得分最低的成员，或阻止，直到有一个可用</td></tr><tr><td style="text-align:left">ZRANGE</td><td style="text-align:left">ZRANGE <em>key</em> start stop [WITHSCORES]</td><td style="text-align:left">查</td><td style="text-align:left">有序集合，返回指定index范围的元素 <br>[WITHSCORES]：一并返回元素分值 <br>举例： <code>ZRANGE hackers 0 -1 WITHSCORES</code></td></tr><tr><td style="text-align:left">ZRANK</td><td style="text-align:left">ZRANK <em>key</em> member</td><td style="text-align:left">查</td><td style="text-align:left">返回 member 在存储在 key 的有序集合中的排名，分数从低到高排序。<br>排名（或索引）从 0 开始</td></tr><tr><td style="text-align:left">ZREVRANK</td><td style="text-align:left">ZREVRANK <em>key</em> member</td><td style="text-align:left">查</td><td style="text-align:left">返回 member 在存储在 key 的有序集合中的排名，分数从高到低排序。<br>排名（或索引）从 0 开始，这意味着得分最高的成员的排名为 0</td></tr><tr><td style="text-align:left">ZREM</td><td style="text-align:left">ZREM <em>key</em> member [member …]</td><td style="text-align:left">删</td><td style="text-align:left">从存储在 key 的排序集中删除指定的成员<br>不存在的成员将被忽略</td></tr><tr><td style="text-align:left">ZREMRANGEBYLEX</td><td style="text-align:left">ZREMRANGEBYLEX <em>key</em> min max</td><td style="text-align:left">删</td><td style="text-align:left">删除给定字典序范围内的元素（闭区间）</td></tr><tr><td style="text-align:left">ZREMRANGEBYRANK</td><td style="text-align:left">ZREMRANGEBYRANK <em>key</em> start stop</td><td style="text-align:left">删</td><td style="text-align:left">删除指定位置区间内的元素（闭区间）</td></tr><tr><td style="text-align:left">ZREMRANGEBYSCORE</td><td style="text-align:left">ZREMRANGEBYSCORE <em>key</em> min max</td><td style="text-align:left">删</td><td style="text-align:left">删除分数介于 min 和 max 之间的元素 （闭区间）</td></tr><tr><td style="text-align:left">ZSCORE</td><td style="text-align:left">ZSCORE <em>key</em> member</td><td style="text-align:left">查</td><td style="text-align:left">获取与排序集合中给定成员关联的分数</td></tr><tr><td style="text-align:left">ZSCAN</td><td style="text-align:left">ZSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td><td style="text-align:left">查</td><td style="text-align:left">增量迭代排序集元素和相关分数。使用方法可以参考<a href="#Order_SCAN">SCAN</a></td></tr></tbody></table><blockquote><p>集合操作（6.0.6 之前）</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th>功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>ZINTERSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight   [weight …]] [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;]</td><td>交集</td><td style="text-align:left">计算多个有序集合的交集，并保存到destination 中。<br>[<strong>WEIGHTS</strong> weight   [weight …]] ：使用此选项，可以为每个输入排序集指定一个乘法因子。<br>① 每个输入排序集中的每个元素的分数在传递给聚合函数之前都会乘以该因子。<br>② 当未给出 WEIGHTS 时，乘法因子默认为 1。<br>[<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] : <em>destination</em> 中元素的分数的计算方式。默认为求和。</td></tr><tr><td style="text-align:left"><strong>ZUNIONSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight   [weight …]] [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;]</td><td>并集</td><td style="text-align:left">计算多个有序集合的并集，并保存到destination 中。<br>如果destination已经存在，它会被覆盖。<br><br>[<strong>WEIGHTS</strong> weight   [weight …]] ：使用此选项，可以为每个输入排序集指定一个乘法因子<br>① 每个输入排序集中的每个元素的分数在传递给聚合函数之前都会乘以该因子。<br>② 当未给出 WEIGHTS 时，乘法因子默认为 1。<br>[<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] : <em>destination</em> 中元素的分数的计算方式。默认为求和。</td></tr></tbody></table><blockquote><p>集合操作（6.0.6 之后）</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">功能</th><th style="text-align:left">版本</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>ZINTER</strong> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight [weight …]]   [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] [<strong>WITHSCORES</strong>]</td><td style="text-align:left">交集</td><td style="text-align:left">6.2.0</td><td style="text-align:left">计算多个有序集合的交集，并返回</td></tr><tr><td style="text-align:left"><strong>ZUNION</strong> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight [weight …]]   [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] [<strong>WITHSCORES</strong>]</td><td style="text-align:left">并集</td><td style="text-align:left">6.2.0</td><td style="text-align:left">计算多个有序集合的并集，并返回</td></tr><tr><td style="text-align:left"><strong>ZDIFF</strong> numkeys <em>key [key …]</em> [<strong>WITHSCORES</strong>]</td><td style="text-align:left">补集</td><td style="text-align:left">6.2.0</td><td style="text-align:left">计算第一个集合比后面所有集合多出的元素，并返回<br>（比较逻辑和分值无关）</td></tr><tr><td style="text-align:left"><strong>ZDIFFSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em></td><td style="text-align:left">补集</td><td style="text-align:left">6.2.0</td><td style="text-align:left">计算第一个集合比后面所有集合多出的元素，并存入destination<br>（比较逻辑和分值无关）</td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">发行版本</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ZRANDMEMBER</td><td style="text-align:left"><strong>ZRANDMEMBER</strong> key [count [<strong>WITHSCORES</strong>]]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查</td><td style="text-align:left">从有序集合中返回一个或多个元素<br>如果提供的 count 参数为正，则返回不同元素的数组。数组的长度是计数或排序集的基数 (ZCARD)，以较低者为准。<br>如果以负数调用，则行为会发生变化，并且允许该命令多次返回相同的元素。在这种情况下，返回元素的数量是指定计数的绝对值。</td></tr><tr><td style="text-align:left">ZRANGE</td><td style="text-align:left"><strong>ZRANGE</strong> <em>key</em> start  stop [<strong>BYSCORE</strong> |<strong>BYLEX</strong>] [<strong>REV</strong>] [<strong>LIMIT</strong> offset count]   [<strong>WITHSCORES</strong>]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查</td><td style="text-align:left">此命令可以替换以下命令：<br><strong>ZREVRANGE、ZRANGEBYSCORE、ZREVRANGEBYSCORE、ZRANGEBYLEX 和 ZREVRANGEBYLEX</strong><br><br> [<strong>BYSCORE</strong> |<strong>BYLEX</strong>] ：根据分值查找/ 根据字典顺序<br><br><code>zrange hackers  + - bylex rev</code><br></td></tr><tr><td style="text-align:left">ZRANGESTORE</td><td style="text-align:left"><strong>ZRANGESTORE</strong> <em>dst  src</em> min max   [<strong>BYSCORE</strong> | <strong>BYLEX</strong>]   [<strong>REV</strong>]   [<strong>LIMIT</strong> offset   count]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查&amp;存</td><td style="text-align:left">ZRANGE 查询结果结果存储在目标键dst 中</td></tr><tr><td style="text-align:left">ZMSCORE</td><td style="text-align:left"><strong>ZMSCORE</strong> <em>key</em> member [member …]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查</td><td style="text-align:left">查询指定成员关联的分数<br>对于排序集中不存在的每个成员，返回一个 nil 值。</td></tr><tr><td style="text-align:left">ZINTERCARD</td><td style="text-align:left"><strong>ZINTERCARD</strong> numkeys <em>key [key …]</em> [<strong>LIMIT</strong> limit]</td><td style="text-align:left">7.0.0</td><td style="text-align:left">集合：交</td><td style="text-align:left">返回交集元素总量<br> [LIMIT limit]：默认为 0，表示无限制。<br>如果交集元素总量在计算过程中达到极限，算法将退出并将limit 作为交集总量<br><code>ZINTERCARD 2 zset1 zset2 LIMIT 1</code>:   <code>返回 1</code></td></tr><tr><td style="text-align:left">ZMPOP</td><td style="text-align:left"><strong>ZMPOP</strong> numkeys <em>key [key …]</em> &lt;<strong>MIN | MAX</strong>&gt; [<strong>COUNT</strong> count]</td><td style="text-align:left">7.0.0</td><td style="text-align:left">删</td><td style="text-align:left"><code>从多个key，弹出多个成员</code><br>从提供的键名列表中的第一个非空排序集中弹出一个或多个成员</td></tr><tr><td style="text-align:left">BZMPOP</td><td style="text-align:left"><strong>BZMPOP</strong> timeout numkeys <em>key [key …]</em> &lt;<strong>MIN | MAX&gt;</strong> [<strong>COUNT</strong> count]</td><td style="text-align:left">7.0.0</td><td style="text-align:left">删</td><td style="text-align:left"><code> 从多个key，弹出多个成员</code><br>有序集合中存在数据时返回，不存在时阻塞等待。<br>timeout：double数，时间单位为秒，设置为0时无期限等待</td></tr></tbody></table><blockquote><p>6.2.0之后已被弃用，被合并到ZRANGE</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>ZREVRANGE</strong>  <em>key</em> start stop [<strong>WITHSCORES</strong>]</td><td style="text-align:left">查</td><td style="text-align:left">按照<strong>分值降序</strong>后，返回有序集合中指定<strong>index</strong>范围的元素</td></tr><tr><td style="text-align:left"><span id="ORDER_ZRANGEBYLEX"><strong>ZRANGEBYLEX</strong> <em>key</em> min max [<strong>LIMIT</strong> offset count]</span></td><td style="text-align:left">查</td><td style="text-align:left">该命令返回有序集合中指定<strong>字典</strong>范围内的元素<br>① 当排序集中的所有元素<strong>以相同的分数</strong>插入时，使用字典顺序，<br>② 此命令返回排序集中的所有元素在 key 处，其值介于 min 和 max 之间。<br>③ 如果排序集中的元素具有不同的分数，则返回的元素是未指定的<br><code> ZRANGEBYLEX  hackers - +</code> <br><code> ZRANGEBYLEX  hackers - + LIMIT 2 3</code>  <br><code>ZRANGEBYLEX  hackers [A [Z</code>：包含<br><code>ZRANGEBYLEX  hackers (A (Z</code>：不包含</td></tr><tr><td style="text-align:left"><strong>ZREVRANGEBYLEX</strong> <em>key</em> max min [<strong>LIMIT</strong> offset count]</td><td style="text-align:left">查</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>ZRANGEBYSCORE</strong> <em>key</em> min max [<strong>WITHSCORES</strong>] [<strong>LIMIT</strong> offset count]</td><td style="text-align:left">查</td><td style="text-align:left">按照<strong>分值降序</strong>后，返回有序集合中指定分值范围的元素<br>举例：<code>zrangebyscore hackers -inf 1950</code><br>==-inf==: 表示负无穷 <strong>infinity</strong> [ɪnˈfɪnəti]</td></tr><tr><td style="text-align:left"><strong>ZREVRANGEBYSCORE</strong> <em>key</em> max min [<strong>WITHSCORES</strong>] [<strong>LIMIT</strong> offset count]</td><td style="text-align:left">查</td><td style="text-align:left"></td></tr></tbody></table><h1>HyperLogLogs（基数统计）</h1><blockquote><p>Redis 2.8.9 版本更新了 Hyperloglog 数据结构</p></blockquote><ul><li><p><strong>什么是基数？</strong></p><p>举个例子，A = {1, 2, 3, 4, 5}， B = {3, 5, 6, 7, 9}；那么基数（不重复的元素）= 1, 2, 4, 6, 7, 9； （允许容错，即可以接受一定误差）</p></li><li><p><strong>HyperLogLogs 基数统计用来解决什么问题</strong>？</p><p>这个结构可以非常省内存的去统计各种计数，比如注册 IP 数、每日访问 IP 数、页面实时UV、在线用户数，共同好友数等。</p></li><li><p><strong>它的优势体现在哪</strong>？</p><p>一个大型的网站，每天 IP 比如有 100 万，粗算一个 IP 消耗 15 字节，那么 100 万个 IP 就是 15M。而 HyperLogLog 在 Redis 中每个键占用的内容都是 12K，理论存储近似接近 2^64 个值，不管存储的内容是什么，它一个基于基数估算的算法，只能比较准确的估算出基数，可以使用少量固定的内存去存储并识别集合中的唯一元素。而且这个估算的基数并不一定准确，是一个带有 0.81% 标准错误的近似值（对于可以接受一定容错的业务场景，比如IP数统计，UV等，是可以忽略不计的）</p></li><li><p><strong>相关命令使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># PFADD key [element [element ...]]</span><span class="token operator">&gt;</span> PFADD key1 a b c d e f g h i<span class="token comment"># 创建第一组元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 统计元素的基数数量</span><span class="token comment"># PFCOUNT key [key ...]</span><span class="token operator">&gt;</span> PFCOUNT key1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">9</span><span class="token comment"># 创建第二组元素</span><span class="token operator">&gt;</span> PFADD key2 c j k l m e g a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token operator">&gt;</span> PFCOUNT key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span><span class="token comment"># 合并两组：key1 key2 -&gt; key3 并集</span><span class="token comment"># PFMERGE destkey sourcekey [sourcekey ...]</span><span class="token operator">&gt;</span> PFMERGE key3 key1 key2OK<span class="token operator">&gt;</span> pfcount key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1>Bitmap （位存储）</h1><blockquote><p>Bitmap 即位图数据结构，都是操作二进制位来进行记录，只有0 和 1 两个状态。</p></blockquote><ul><li><p><strong>用来解决什么问题</strong></p><p>比如：统计用户信息，活跃，不活跃； 登录，未登录；打卡，不打卡； <strong>两个状态的，都可以使用 Bitmaps</strong>！</p><p>如果存储一年的打卡状态需要多少内存呢？ 365 天 = 365 bit 1字节 = 8bit 46 个字节左右</p></li><li><p><strong>相关命令使用</strong></p><p>使用bitmap 来记录 周一到周日的打卡！ 周一：1 周二：0 周三：0 周四：1 …</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># SETBIT key offset value</span><span class="token operator">&gt;</span> setbit sign <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">4</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">5</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">6</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看某一天是否有打卡</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GETBIT key offset</span><span class="token operator">&gt;</span> getbit sign <span class="token number">3</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token operator">&gt;</span> getbit sign <span class="token number">5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统计操作，统计 打卡的天数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># BITCOUNT key [start end [BYTE | BIT]]</span><span class="token comment"># BITCOUNT 统计的是二进制后的数据</span><span class="token operator">&gt;</span> bitcount sign <span class="token comment"># 统计这周的打卡记录，就可以看到是否有全勤！</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token comment"># 111001101001100010101111</span><span class="token operator">&gt;</span> SET <span class="token builtin class-name">test</span> 谳OK<span class="token operator">&gt;</span> BITCOUNT <span class="token builtin class-name">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li><p>GETBIT key offset</p></li><li><p>SETBIT key offset value</p></li><li><p>BITCOUNT key [start end [BYTE | BIT]]</p></li><li><p>BITOP operation destkey key [key …] ： 在多个键(包含字符串值)之间执行位操作，并将结果存储在目标键中</p><pre class="line-numbers language-none"><code class="language-none">BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyNBITOP OR destkey srckey1 srckey2 srckey3 ... srckeyNBITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyNBITOP NOT destkey srckey<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>BITPOS key bit [start [end [BYTE | BIT]]]   返回字符串中第一个位设置为1或0的位置</p></li></ol><h1>Geospatial (地理位置)</h1><blockquote><p>这个功能可以推算地理位置的信息: 两地之间的距离, 方圆几里的人</p><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul></blockquote><h2 id="GEOADD：添加地理位置">GEOADD：添加地理位置</h2><p><strong>GEOADD</strong> key [NX | XX] [CH] <font color="blue">longitude latitude member </font> <font color="green">[longitude<br>latitude member …]</font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOADD china:city <span class="token number">118.76</span> <span class="token number">32.04</span> nanjing <span class="token number">112.55</span> <span class="token number">37.86</span> taiyuan <span class="token number">123.43</span> <span class="token number">41.80</span> shenyang<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token operator">&gt;</span> GEOADD china:city <span class="token number">144.05</span> <span class="token number">22.52</span> shengzhen <span class="token number">120.16</span> <span class="token number">30.24</span> hangzhou <span class="token number">108.96</span> <span class="token number">34.26</span> xian<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>规则</strong></p><p>两级无法直接添加，我们一般会下载城市数据(这个网址可以查询 GEO： <a href="http://www.jsons.cn/lngcode">http://www.jsons.cn/lngcode</a>)！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span><span class="token operator">&gt;</span> GEOADD china:city <span class="token number">39.90</span> <span class="token number">116.40</span> beijin<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR invalid longitude,latitude pair <span class="token number">39.900000</span>,116.400000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230207154102639-1678135967819-87.png" alt="image-20230207154102639"></p><blockquote><p>存储：将二维的经纬度转换为一维的HASH 值</p></blockquote><h2 id="GEOPOS：获取指定的成员的经度和纬度">GEOPOS：获取指定的成员的经度和纬度</h2><p>获得当前定位, 一定是一个坐标值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOPOS china:city taiyuan nanjing<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GEODIST：计算两点之间的距离">GEODIST：计算两点之间的距离</h2><p><strong>GEODIST</strong> key member1 member2  [M | KM | FT | MI]</p><ul><li>m</li><li>km</li><li>mi 英里</li><li>ft 英尺</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEODIST china:city taiyuan shenyang KM<span class="token string">"1026.4391"</span><span class="token comment"># 位置不存在，返回为空</span><span class="token operator">&gt;</span> GEODIST china:city chengdou shenyang KM<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GEOHASH：-该命令返回11个字符的HASH字符串">GEOHASH： 该命令返回11个字符的HASH字符串</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOHASH china:city taiyuan shenyang<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"ww8p3hhqmp0"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wxrvb9qyxk0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="GEOSEARCH：地理位置查询">GEOSEARCH：地理位置查询</h2><blockquote><p>版本6.2.0 之后新增</p></blockquote><p><strong>GEOSEARCH</strong> key <font color="blue">&lt;<strong>FROMMEMBER</strong> member | <strong>FROMLONLAT</strong> longitude latitude&gt;</font><br><font color="green">&lt;<strong>BYRADIUS</strong> radius &lt;M | KM | FT | MI&gt; | BYBOX width height &lt;M | KM |<br>FT | MI&gt;&gt;</font>  <strong>[ASC | DESC]</strong> <font color="blue"> [<strong>COUNT</strong> count [<strong>ANY</strong>]]</font> [WITHCOORD] [<strong>WITHDIST</strong>]<br>[<strong>WITHHASH</strong>]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span><span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM WITHDIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"859.5256"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1161.7864"</span>   <span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM WITHDIST WITHCOORD<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"859.5256"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1161.7864"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"123.42999905347824097"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"41.79999919077864234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GEOSEARCHSTORE">GEOSEARCHSTORE</h2><p><strong>GEOSEARCHSTORE</strong> destination source  <font color="blue">&lt;<strong>FROMMEMBER</strong> member | <strong>FROMLONLAT</strong> longitude latitude&gt;</font><br><font color="green">&lt;<strong>BYRADIUS</strong> radius &lt;M | KM | FT | MI&gt; | BYBOX width height &lt;M | KM |<br>FT | MI&gt;&gt;</font>  <strong>[ASC | DESC]</strong> <font color="blue"> [<strong>COUNT</strong> count [<strong>ANY</strong>]]</font> [<strong>STOREDIST</strong>]</p><p>此命令类似于<code>GEOSEARCH</code>，但将结果存储在目标键中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOSEARCHSTORE <span class="token builtin class-name">test</span> china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230207161213311-1678135967819-89.png" alt="image-20230207161213311"></p><h2 id="GEORADIUS：获得所有附近的人的地址-定位-通过半径来查询（6-2-0之后弃用）">GEORADIUS：获得所有附近的人的地址, 定位, 通过半径来查询（6.2.0之后弃用）</h2><blockquote><p>从Redis版本6.2.0开始，此命令被认为已弃用。可将其替换为<code>GEOSEARCH</code>和<code>GEOSEARCHSTORE</code>，并使用<code>BYRADIUS</code>参数</p></blockquote><p><strong>GEORADIUS</strong> key longitude latitude radius  <strong>&lt;M | KM | FT | MI&gt;</strong><br>[<strong>WITHCOORD</strong>] [<strong>WITHDIST</strong>] [<strong>WITHHASH</strong>] [<strong>COUNT</strong> count [<strong>ANY</strong>]] [<strong>ASC</strong> | <strong>DESC</strong>]<br>[<strong>STORE</strong> key] [<strong>STOREDIST</strong> key]</p><ul><li><strong>WITHDIST</strong> : 返回距离</li><li><strong>WITHCOORD</strong>：返回坐标</li><li><strong>WITHHASH</strong>：返回坐标的HASH值（ZSET的SCORE值）</li><li><strong>COUNT</strong> count：显示结果的数量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以 100,30 这个坐标为中心, 寻找半径为1000km的城市</span><span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km WITHDIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span><span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km WITHCOORD WITHDIST count <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"864.9816"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GEORADIUSBYMEMBER：-显示与指定成员一定半径范围内的其他成员（6-2-0之后弃用）">GEORADIUSBYMEMBER： 显示与指定成员一定半径范围内的其他成员（6.2.0之后弃用）</h2><blockquote><p>从Redis版本6.2.0开始，此命令被认为已弃用。 可将其替换为<code>GEOSEARCH</code>和<code>GEOSEARCHSTORE</code>，并使用<code>BYRADIUS</code>和<code>FROMMEMBER</code>参数</p></blockquote><p><strong>GEORADIUSBYMEMBER</strong> key member radius <strong>&lt;M | KM | FT | MI&gt;</strong> [<strong>WITHCOORD</strong>]<br>[<strong>WITHDIST</strong>] [<strong>WITHHASH</strong>] [<strong>COUNT</strong> count [<strong>ANY</strong>]] [<strong>ASC</strong> | <strong>DESC</strong>] [<strong>STORE</strong> key]<br>[<strong>STOREDIST</strong> key]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEORADIUSBYMEMBER china:city taiyuan <span class="token number">1000</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token operator">&gt;</span> GEORADIUSBYMEMBER china:city taiyuan <span class="token number">1000</span> km withcoord WITHDIST count <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"514.2264"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Redis Stream</h1><p>Redis Stream 是一种数据结构，其作用类似于<code>an append-only log</code>。您可以使用流实时记录和同步事件。</p><p>Redis Stream 用例的示例包括：</p><ul><li>事件溯源（例如，跟踪用户操作、点击等）</li><li>传感器监控（例如，现场设备的读数）</li><li>通知（例如，将每个用户的通知记录存储在单独的流中）</li></ul><p>Redis 为每个流条目生成一个唯一的 ID。您可以使用这些 ID 稍后检索其关联条目或读取和处理流中的所有后续条</p><table><thead><tr><th style="text-align:left">命令</th><th>使用</th><th>功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><a href="#STREAM_XADD">XADD</a></td><td></td><td>增</td><td style="text-align:left">唯一可以将数据添加到流的 Redis 命令</td></tr><tr><td style="text-align:left"><a href="#STREAM_XRANGE">XRANGE</a>/ <a href="#STREAM_XREVRANGE">XREVRANGE</a></td><td></td><td>查</td><td style="text-align:left">返回流中的一段元素</td></tr><tr><td style="text-align:left"><a href="#STREAM_XREAD">XREAD</a></td><td></td><td>查</td><td style="text-align:left">从一个或多个流中读取数据，只返回 ID 大于调用者报告的最后接收到的 ID 的条目</td></tr><tr><td style="text-align:left"><a href="#STREAM_XTRIM">XTRIM</a></td><td><strong>XTRIM</strong> <em>key</em> &lt;MAXLEN |MINID&gt; [= |~] threshold [LIMIT count]</td><td>删</td><td style="text-align:left">将流修剪到 (如果传入’~'，则大约) 某个大小</td></tr><tr><td style="text-align:left">XDEL</td><td>XDEL <em>key</em> id [id …]</td><td></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><a href="#STREAM_XINFO">XINFO</a></td><td>1. <strong>XINFO STREAM</strong> key [FULL [COUNT count]]<br>2. <strong>XINFO GROUPS</strong> key<br>3. <strong>XINFO CONSUMERS</strong> key groupname <br></td><td>查</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">XLEN</td><td>XLEN key</td><td>查</td><td style="text-align:left">返回流中的条目数</td></tr><tr><td style="text-align:left">XSETID</td><td><strong>XSETID</strong> key last-id  [<strong>ENTRIESADDED</strong> entries_added]  [<strong>MAXDELETEDID</strong> max_deleted_entry_id]</td><td>改</td><td style="text-align:left">XSETID 命令是一个内部命令。 Redis 主服务器使用它来复制最后交付的流 ID。</td></tr><tr><td style="text-align:left"></td><td></td><td></td><td style="text-align:left"></td></tr></tbody></table><p>消息分组</p><table><thead><tr><th style="text-align:left">命令</th><th>使用</th><th>功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><a href="#STREAM_XGROUP_CREATE">XGROUP CREATE</a></td><td><strong>XGROUP CREATE</strong> key groupname <font color="blue"> &lt;<strong>id |$</strong> &gt; </font> <font color="green">[<strong>MKSTREAM</strong>]</font> <strong>[ENTRIESREAD entries_read]</strong></td><td>增</td><td style="text-align:left">创建消费者组</td></tr><tr><td style="text-align:left"><a href="#STREAM_XGROUP_CREATECONSUMER">XGROUP CREATECONSUMER</a></td><td><strong>XGROUP CREATECONSUMER</strong> key groupname consumername</td><td>增</td><td style="text-align:left">在消费者组中创建消费者</td></tr><tr><td style="text-align:left"><a href="#STREAM_XGROUP_DELCONSUMER">XGROUP DELCONSUMER</a></td><td><strong>XGROUP DELCONSUMER</strong> key groupname consumername</td><td>删</td><td style="text-align:left">删除消费者</td></tr><tr><td style="text-align:left"><a href="#STREAM_XGROUP_DESTROY">XGROUP DESTROY</a></td><td><strong>XGROUP DESTROY</strong> key groupname</td><td>删</td><td style="text-align:left">消费者组</td></tr><tr><td style="text-align:left"><a href="#STREAM_XGROUP_SETID">XGROUP SETID</a></td><td><strong>XGROUP SETID</strong> key groupname <font color="blue"> &lt;<strong>id |$</strong> &gt; </font> [ENTRIESREAD entries_read]</td><td>改</td><td style="text-align:left">修改消费者组的最后一个交付ID</td></tr><tr><td style="text-align:left"><a href="#STREAM_XREADGROUP">XREADGROUP</a></td><td><strong>XREADGROUP</strong> <strong>GROUP</strong> group consumer [<strong>COUNT</strong> count] <font color="blue"> [<strong>BLOCK</strong> milliseconds]</font>  [<strong>NOACK</strong>] <strong>STREAMS</strong> key [key …] <font color="orange">id [id …]</font></td><td>查/改</td><td style="text-align:left">从消费者组返回新条目，或者访问给定消费者的待处理条目的历史记录</td></tr><tr><td style="text-align:left"><a href="#STREAM_XPENDING">XPENDING</a></td><td><strong>XPENDING</strong> key group [<font color="blue">[IDLE min-idle-time] start end count [consumer]</font>]</td><td>查</td><td style="text-align:left">从消费者组<code>PEL</code>中 返回获取了但从未确认的消息信息和条目</td></tr><tr><td style="text-align:left"><a href="#STREAM_XCLAIM">XCLAIM</a></td><td><strong>XCLAIM</strong>  key group consumer  min-idle-time id [id …] [<strong>IDLE</strong> ms]   [<strong>TIME</strong> unix-time-milliseconds] [<strong>RETRYCOUNT</strong> count] [<strong>FORCE</strong>] [<strong>JUSTID</strong>]   [<strong>LASTID</strong> id]</td><td></td><td style="text-align:left">更改(或获得)使用者组中消息的所有权，就像消息已交付给指定的使用者一样。</td></tr><tr><td style="text-align:left"><a href="#STREAM_XAUTOCLAIM">XAUTOCLAIM</a></td><td></td><td></td><td style="text-align:left">更改(或获取)使用者组中消息的所有权，就像将消息交付给指定的使用者一样。</td></tr><tr><td style="text-align:left"><a href="#STREAM_XACK">XACK</a></td><td><strong>XACK</strong> key group id [id …]</td><td></td><td style="text-align:left">将挂起的消息标记为正确处理，有效地将其从使用者组的挂起条目列表中删除。该命令的返回值是成功确认的消息的数量，也就是说，我们实际上能够在PEL中解析的id。</td></tr></tbody></table><h2 id="span-id-STREAM-XADD-XADD-span"><span id="STREAM_XADD">XADD</span></h2><ul><li><p>命令详情</p><p>XADD key <font color="green"> [<strong>NOMKSTREAM</strong>]</font> <font color="blue"> [&lt;<strong>MAXLEN</strong> | <strong>MINID</strong>&gt; [= | ~] threshold [<strong>LIMIT</strong> <em>count</em>]] </font>  <font color="orange">&lt;* | id&gt;</font>  <em>field value [field value …]</em></p></li><li><p>命令参数解释</p><ol><li><p>可以使用 <code>NOMKSTREAM </code>选项禁用 <em>Stream key</em> 的创建（key不存在时，返回null）</p></li><li><p><font color="orange">&lt;* | id&gt;</font>  id组成方式：<code>&lt;millisecondsTime&gt;-&lt;sequenceNumber&gt;</code></p><ul><li><p>如果指定的 ID 参数是 <code>*</code>字符，XADD 命令将为您自动生成唯一 ID</p><p><code>XADD stream:test:1 * ip 127.0.0.1</code></p></li><li><p>虽然仅在极少数情况下有用，但可以指定格式良好的 ID，以便将使用指定的 ID 精确添加新条目。</p><p><code>XADD stream:test:1 1662020231547-1 ip 127.0.0.2</code></p><p>当用户为 指定显式 ID 时<code>XADD</code>，最小有效 ID 为 <code>0-1</code>，并且用户<em>必须</em>指定一个大于当前流内任何其他 ID 的 ID，否则该命令将失败并返回错误。</p><p>通常，仅当您有另一个系统生成唯一 ID（例如 SQL 表）并且您确实希望 Redis 流 ID 与另一个系统匹配时，才使用特定 ID。</p></li></ul></li><li><p><font color="blue">[&lt;<strong>MAXLEN</strong> | <strong>MINID</strong>&gt; [= | ~] threshold<br>[<strong>LIMIT</strong> count]]</font>    封顶（Capped streams）</p><p><code>MAXLEN</code>：使用 MAXLEN，当达到指定长度时，旧条目会被自动驱逐</p><p><code>~</code>：表示封顶的阈值 count是一个近似值。<code>MAXLEN ~ 1000</code>我真的不需要这正好是 1000 个项目。它可以是 1000 或 1010 或 1030，只要确保至少保存 1000 个项目即可（常用场景）</p><p><code>MINID</code>：驱逐 ID 低于阈值的条目，其中阈值是流 ID</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XADD mystream <span class="token number">1526919030474</span>-55 message <span class="token string">"Hello,"</span> <span class="token operator">&gt;</span> XADD mystream <span class="token number">1526919030474</span>-* message <span class="token string">" World!"</span><span class="token operator">&gt;</span> XADD mystream MAXLEN ~ <span class="token number">1000</span> * <span class="token punctuation">..</span>. entry fields here <span class="token punctuation">..</span>.<span class="token operator">&gt;</span> XADD stest MINID <span class="token operator">=</span> <span class="token number">1670928883730</span>-0 * name zs age <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>版本变更</p><p>版本6.2.0 前：<strong>XADD</strong> key <strong>ID</strong> <em>field string [field string …]</em></p><p>版本6.2.0后 ：添加了 **NOMKSTREAM 、MINID、  LIMIT **</p><p>版本7.0.0 ： 添加了对 显式 ID 形式的支持</p></li></ul><h2 id="span-id-STREAM-XRANGE-XRANGE-span"><span id="STREAM_XRANGE">XRANGE</span></h2><ul><li><p>详细命令</p><p><strong>XRANGE</strong> key <font color="blue">startId endId</font> <font color="orange">[COUNT count]</font></p></li><li><p>命令参数解释</p><ol><li><p><font style="color:blue;font-weight:bold">startId endId</font>:  startId 和 endId 之间为闭区间</p><ul><li><p>-和 + 特殊 ID 分别表示流中可能的最小 ID 和可能的最大 ID，因此以下命令将仅返回流中的所有条目：<code>XRANGE somestream - +</code></p><p><code>-</code>: 可以理解为：0-0</p><p><code>+</code>: 可以理解为：18446744073709551615-18446744073709551615</p></li><li><p>Incomplete IDs</p><p>不完整指定的ID：仅仅指定 UNIX 时间部分：<code>XRANGE somestream 1526985054069 1526985055069</code></p><p>在这种情况下，XRANGE 将使用 -0 自动完成开始间隔，使用 -18446744073709551615 自动完成结束间隔，以便返回在给定毫秒和另一个指定毫秒结束之间生成的所有条目。</p><p>这也意味着<strong>重复相同的毫秒两次，我们得到指定毫秒内的所有条目</strong></p><p>以这种方式使用 XRANGE 作为范围查询命令来获取指定时间内的条目。这对于获取一段时间内的操作历史，非常方便。</p></li><li><p>Exclusive ranges</p><p>开区间范围查询：ID 前加上字符<code>(</code>来指定一个开区间：<code>XRANGE somestream (1526985685298-0 + COUNT 2</code></p></li></ul></li><li><p><font color="orange">[<strong>COUNT</strong> count]</font> : 返回结果的前count条entry</p></li></ol></li><li><p>使用场景介绍</p><ol><li><p>stream 迭代</p><p>a. 上次查询的entry的id 用 开区间 <code>(</code>，作为下次查询的start 。</p><p>b. 我们可以从任何 ID 开始迭代（指定一个不完整的start id）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XRANGE writers - + COUNT <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985676425</span>-0   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Virginia"</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Woolf"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985685298</span>-0   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Jane"</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Austen"</span><span class="token operator">&gt;</span> XRANGE writers <span class="token punctuation">(</span><span class="token number">1526985685298</span>-0 + COUNT <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985691746</span>-0   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Toni"</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Morrison"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985712947</span>-0   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>    <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Agatha"</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>    <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Christie"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取单个项目</p><p>XRANGE 的参数中指定两次 ID：<code>XRANGE mystream 1526984818136-0 1526984818136-0</code></p></li></ol></li></ul><h2 id="span-id-STREAM-XREVRANGE-XREVRANGE-span"><span id="STREAM_XREVRANGE">XREVRANGE</span></h2><ul><li><p>详细命令</p><p>XREVRANGE key end start [COUNT count]</p></li><li><p>举例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XREVRANGE somestream + - COUNT <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="span-id-STREAM-XREAD-XREAD-span"><span id="STREAM_XREAD">XREAD</span></h2><ul><li><p>命令详情</p><p><strong>XREAD</strong> [<strong>COUNT</strong> count] <font color="green">[<strong>BLOCK</strong> milliseconds]</font> <font color="blue"><strong>STREAMS</strong> key [key …] id<br>[id …]</font></p></li><li><p>命令参数解释</p><p><strong>STREAMS</strong> key [key …] id [id …]：指定了一个键列表以及调用消费者已经为每个流看到的相应最大 ID，因此该命令将只向客户端提供 ID  <code>大于</code>我们指定的 ID 的消息。（不包含指定的ID）</p><p>[<strong>BLOCK</strong> milliseconds]：阻塞的毫秒数。若milliseconds 设置为0 ，则表示永远不会超时</p><p>[<strong>COUNT</strong> count]：限定调用将在每个流中最多返回count个元素</p></li><li><p>特殊的ID<code>$</code></p><p><strong>STREAMS</strong> $ :  意味着应该使用已经存储在流中的最大 ID 作为最后一个 ID。</p><p>当阻塞时，有时我们希望只接收从阻塞那一刻开始通过XADD添加到流中的条目。在这种情况下，我们对已经添加的条目的历史不感兴趣。</p><p>对于这个用例，我们必须检查流顶部元素的ID，并在XREAD命令行中使用这样的ID。这是不干净的，需要调用其他命令，所以可以使用特殊的 <code>$</code> 来通知流，我们只想要新的东西。</p><p><strong>仅在第一次调用 XREAD 时使用 $ ID 非常重要。之后迭代的ID应该是流中最后报告的ID，否则您可能会错过中间添加的所有条目。</strong></p><table><thead><tr><th>客户端A</th><th>客户端B</th><th>客户端C</th></tr></thead><tbody><tr><td>&gt; XREAD COUNT 1 block 30000 STREAMS test $</td><td>&gt; XREAD COUNT 1 block 30000 STREAMS test $</td><td></td></tr><tr><td></td><td></td><td>&gt; xadd test * name wangwu age 22<br>1675666852907-0</td></tr><tr><td>test<br>1675666852907-0<br>name<br>wangwu<br>age<br>22</td><td>test<br>1675666852907-0<br>name<br>wangwu<br>age<br>22</td><td></td></tr></tbody></table><blockquote><p>客户端C 发送消息时，阻塞等待的客户端A、客户端B 均接受到了流中新增条目</p></blockquote></li><li><p>使用场景</p><ol><li><p>非阻塞情况：从多个流读取数据（XRANGE 的扩展版本）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD COUNT <span class="token number">2</span> STREAMS mystream writers <span class="token number">0</span>-0 <span class="token number">0</span>-0<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526984818136</span>-0         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"duration"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1532"</span>            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"event-id"</span>            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"5"</span>            <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"user-id"</span>            <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"7782813"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526999352406</span>-0         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"duration"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"812"</span>            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"event-id"</span>            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"9"</span>            <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"user-id"</span>            <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"388234"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"writers"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985676425</span>-0         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Virginia"</span>            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Woolf"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985685298</span>-0         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Jane"</span>            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Austen"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>阻塞情况下：（无返回数据的情况下，等待数据返回）</p><p>消费者第一次迭代：从我们开始收听的时间开始，阻塞等待最新消息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD BLOCK <span class="token number">5000</span> COUNT <span class="token number">100</span> STREAMS mystream $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一旦我们得到一些回复，下一次调用将是这样的：阻塞等待<code>1526999644174-3</code>之后的数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD BLOCK <span class="token number">5000</span> COUNT <span class="token number">100</span> STREAMS mystream <span class="token number">1526999644174</span>-3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>如何为单个流上被阻止的多个客户端提供服务：<strong>FIFO</strong></p><ol><li><p>当新项目可用时，为给定流阻塞的第一个客户端将是第一个被解除阻塞的客户端。因为从等待数据的客户端的角度来看，阻塞流读取是公平的，其语义是 FIFO 风格。（类似于阻塞队列）</p></li><li><p>为客户端提供服务时，不会从流中删除流条目，因此只要 XADD 命令向流提供数据，就会为每个等待的客户端提供服务。（不同于阻塞队列）</p></li></ol></li></ul><h2 id="span-id-STREAM-XTRIM-XTRIM-span"><span id="STREAM_XTRIM"> XTRIM</span></h2><ul><li><p>命令详情</p><p><strong>XTRIM</strong> <em>key</em> &lt;MAXLEN | MINID&gt; [= | ~] threshold [LIMIT count]</p></li><li><p>命令参数解释</p><p>MAXLEN:  只要流的长度超过指定的阈值，就逐出条目，其中阈值是一个正整数。</p><p>MINID: 驱逐 ID 低于阈值的条目，其中阈值是流 ID。</p></li><li><p>返回：成功移除数据量</p></li><li><p>示范</p><ol><li><p>精确修剪<code>=</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XTRIM mystream MAXLEN <span class="token number">1000</span>XTRIM mystream MINID <span class="token number">649085820</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>近乎精确的修剪</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XTRIM mystream MAXLEN ~ <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul><h2 id="span-id-STREAM-XINFO-XINFO-span"><span id="STREAM_XINFO"> XINFO</span></h2><h3 id="XINFO-STREAM">XINFO STREAM</h3><ul><li><p>命令详情</p><p><strong>XINFO STREAM</strong> key [FULL [COUNT count]]：</p></li><li><p>此命令返回有关存储在 <key> 中的流的信息。详细信息是：</key></p><ul><li><strong>length</strong>: 流中的条目数</li><li><strong>radix-tree-keys</strong>: 底层基数数据结构中的键数</li><li><strong>radix-tree-nodes</strong>: 底层基数数据结构中的节点数</li><li><strong>groups</strong>: 底层基数数据结构中的节点数 groups：为流定义的消费者组数</li><li><strong>last-generated-id</strong>:添加到流中的最近条目的 ID</li><li><strong>max-deleted-entry-id</strong>: 从流中删除的最大条目 ID</li><li><strong>entries-added</strong>: 在其生命周期内添加到流中的所有条目的计数</li><li><strong>first-entry</strong>: 流中第一个条目的 ID 和字段值元组</li><li><strong>last-entry</strong>: 流中最后一个条目的 ID 和字段值元组</li></ul></li></ul><h3 id="XINFO-GROUPS">XINFO GROUPS</h3><ul><li><p>命令详情</p><p>XINFO GROUPS key</p></li></ul><h3 id="XINFO-CONSUMERS">XINFO CONSUMERS</h3><ul><li><p>命令详情</p><p>XINFO CONSUMERS key groupname</p></li></ul><h2 id="span-id-STREAM-GROUP-XGROUP-span"><span id="STREAM_GROUP"> XGROUP</span></h2><ul><li><p><strong>XGROUP</strong> 用于创建、销毁和管理消费者组。</p></li><li><p><strong>XREADGROUP</strong> 用于通过消费者组从流中读取。</p></li><li><p><strong>XACK</strong> 是允许消费者将未决消息标记为已正确处理的命令。</p></li></ul><h3 id="span-id-STREAM-XGROUP-CREATE-XGROUP-CREATE-span"><span id="STREAM_XGROUP_CREATE"> XGROUP CREATE</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP CREATE</strong> key groupname  <font color="blue"> &lt;<strong>id | $</strong> &gt; </font>  <font color="green">[<strong>MKSTREAM</strong>]</font>  <strong>[ENTRIESREAD entries_read]</strong></p></li><li><p>参数说明</p><ol><li><p><font color="blue"> &lt;<strong>id | $</strong> &gt; </font> ：从新组的角度指定流中最后传送的条目。</p><p>例如，如果您希望组的消费者从头开始获取整个流，使用零作为消费者组的起始 ID。特殊 ID <code>$</code> 是指流中最后一个条目的 ID</p></li><li><p><font color="green">[<strong>MKSTREAM</strong>]</font>: 流不存在时，自动创建，否则返回 key不存在的异常</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERR The XGROUP subcommand requires the key to exist. Note that <span class="token keyword">for</span> CREATE you may want to use the MKSTREAM option to create an empty stream automatically.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>[ENTRIESREAD entries_read]</strong></p><p>从 指定的 <font color="blue"> &lt;<strong>id | $</strong> &gt;</font>，到最后一个条目，指定读取的条目容量</p></li></ol></li><li><p>功能说明</p><p>创建消费者组</p></li></ul><h3 id="span-id-STREAM-XGROUP-CREATECONSUMER-XGROUP-CREATECONSUMER-span"><span id="STREAM_XGROUP_CREATECONSUMER">XGROUP CREATECONSUMER</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP CREATECONSUMER</strong> key groupname consumername</p></li><li><p>功能说明</p><p>在消费者组中创建消费者</p></li></ul><h3 id="span-id-STREAM-XGROUP-DELCONSUMER-XGROUP-DELCONSUMER-span"><span id="STREAM_XGROUP_DELCONSUMER">XGROUP DELCONSUMER</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP DELCONSUMER</strong> key groupname consumername</p></li><li><p>功能说明</p><p>在消费者组中删除消费者。消费者拥有的任何待处理消息在被删除后将变得不可领取。因此，强烈建议在从组中删除消费者之前声明或确认任何未决消息。</p></li></ul><h3 id="span-id-STREAM-XGROUP-DESTROY-XGROUP-DESTROY-span"><span id="STREAM_XGROUP_DESTROY">XGROUP DESTROY</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP DESTROY</strong> key groupname</p></li><li><p>功能说明</p><p>摧毁一个消费者组。即使有活跃的消费者和待处理的消息，消费者组也会被销毁，因此请确保仅在真正需要时才调用此命令。</p></li></ul><h3 id="span-id-STREAM-XGROUP-SETID-XGROUP-SETID-span"><span id="STREAM_XGROUP_SETID">XGROUP SETID</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP SETID</strong> key groupname  <font color="blue"> &lt;<strong>id | $</strong> &gt; </font>  [ENTRIESREAD entries_read]</p></li><li><p>功能说明</p><p><strong>XGROUP SETID</strong>命令允许修改组的最后一个交付ID，而不必删除和重新创建组。例如，如果你想让消费者组中的消费者重新处理流中的所有消息，你可以将其下一个ID设置为0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XGROUP SETID mystream mygroup <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="span-id-STREAM-XREADGROUP-XREADGROUP-span"><span id="STREAM_XREADGROUP">XREADGROUP</span></h3><ul><li><p>命令详情</p><p><strong>XREADGROUP</strong> <strong>GROUP</strong> group consumer [<strong>COUNT</strong> count] <font color="blue"> [<strong>BLOCK</strong> milliseconds]</font>  [<strong>NOACK</strong>] <strong>STREAMS</strong> key [key …] <font color="orange">id [id …]</font></p></li><li><p>参数说明</p><p><font color="orange">id [id …]</font>：</p><ul><li>若id为 <code>&gt;</code> :  使用者只想接收从未传递给任何其他使用者的消息</li><li>任何其他ID，即 <code>0</code> 或任何其他有效ID或不完整ID（仅为毫秒时间部分），客户端访问的是：传递给它但尚未确认的消息（历史记录的概念）。注意，在这种情况下，BLOCK和NOACK都被忽略。</li></ul></li><li><p>功能说明</p><p>使用 <code>XREADGROUP </code> 可以创建<strong>客户端组</strong>来消费到达给定流的消息的不同部分。例如，如果流获得新的条目 A、B 和 C，并且有两个消费者通过消费者组读取消息，一个客户端将获得消息 A 和 C，另一个客户端将获得消息 B。</p><p>但是要实现多个键中读取，您需要在每个流中创建一个具有相同名称的消费者组（不常见的需求）</p></li><li><p>举例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XGROUP CREATE mystream mygroup $ MKSTREAM<span class="token operator">&gt;</span> XADD mystream * message apple<span class="token operator">&gt;</span> XADD mystream * message orange<span class="token operator">&gt;</span> XADD mystream * message strawberry<span class="token operator">&gt;</span> XADD mystream * message apricot<span class="token operator">&gt;</span> XRANGE mystream - +<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738497958-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498027-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"orange"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498119-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"strawberry"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498206-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span>            <span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token operator">&gt;</span> XADD mystream * message banana<span class="token string">"1675738604129-0"</span><span class="token comment">## 接收条目</span><span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738667048-0"</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span>         <span class="token comment">## 已接收但是未确认的历史消息列表</span><span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738667048-0"</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span>        <span class="token comment">## 确认消息</span><span class="token operator">&gt;</span> XACK mystream mygroup <span class="token number">1675738667048</span>-0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment">## 已接收但是未确认的历史消息列表</span><span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="span-id-STREAM-XACK-XACK-span"><span id="STREAM_XACK"> XACK</span></h3><ul><li><p>命令详情</p><p><strong>XACK</strong> key group id [id …]</p></li><li><p>功能说明</p><p><code>XACK</code>命令从流使用者组的<code>Pending Entries List (PEL)</code>中删除一条或多条消息。</p><p>客户端成功处理了一条消息，之后应该调用<code>XACK</code>，这样该消息就不会再次被处理，同时，关于该消息的 <code>PEL</code>条目也会被清除，从而从Redis服务器释放内存。</p></li></ul><h3 id="span-id-STREAM-XPENDING-XPENDING-span"><span id="STREAM_XPENDING">XPENDING</span></h3><ul><li><p>命令详情</p><p><strong>XPENDING</strong> key group [<font color="blue">[IDLE min-idle-time] start end count [consumer]</font>]</p></li><li><p>功能说明</p><p>从消费者组<code>PEL</code>中 返回获取了但从未确认的消息信息和条目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 前期</span><span class="token operator">&gt;</span> XGROUP CREATE mystream mygroup $ MKSTREAM<span class="token operator">&gt;</span> XADD mystream * message apple<span class="token operator">&gt;</span> XADD mystream * message orange<span class="token operator">&gt;</span> XADD mystream * message strawberry<span class="token operator">&gt;</span> XADD mystream * message apricot<span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span><span class="token comment">## 实验</span><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360459-0"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360459-0"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Alice"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token operator">&gt;</span> XACK mystream mygroup <span class="token number">1675739360459</span>-0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="span-id-STREAM-XCLAIM-XCLAIM-span"><span id="STREAM_XCLAIM"> XCLAIM</span></h3><ul><li><p>命令详情</p><p><strong>XCLAIM</strong>  key group consumer  min-idle-time  id [id …]  [<strong>IDLE</strong> ms]<br>[<strong>TIME</strong> unix-time-milliseconds] [<strong>RETRYCOUNT</strong> count] [<strong>FORCE</strong>] [<strong>JUSTID</strong>]<br>[<strong>LASTID</strong> id]</p></li><li><p>功能说明</p><p>此命令用于更改待处理消息的 所有权。通常情况是这样的</p><ol><li><code>STREAM</code> 存在关联消费者组 <code>group_a</code></li><li>某个<code>consumer_a </code>在<code>group_a</code>的上下文中通过 <code>XREADGROUP</code> 从流中读取消息。</li><li>在<code>group_a</code>的待处理条目列表 (PEL) 中创建了一个待处理的消息条目：这意味着消息已传递给<code>consumer_a </code>，但尚未通过<code> XACK</code> 确认</li><li>然后突然之间，<code>consumer_a </code>永远地失败了</li><li>其他消费者可能会使用<code>XPENDING</code>命令检查挂起的消息列表，这些消息已经过期很长时间了。为了继续处理此类消息，它们使用XCLAIM获取消息的所有权并继续。使用者还可以使用<code>XAUTOCLAIM</code>命令自动扫描和声明过期的待处理消息。</li></ol><p>XCLAIM在以下情况下不会声明消息</p><ol><li>消息在组PEL中不存在(即它从未被任何消费者读取)</li><li>消息存在于组PEL中，但不存在于流本身(即消息被读取但从未被确认，然后通过修剪或XDEL从流中删除)</li></ol></li><li><p>命令参数</p><p>该命令有多个选项，但大多数主要用于内部使用，以便将<code>XCLAIM</code>或其他命令的效果传输到AOF文件中，并将相同的效果传播到副本中。</p><ol><li><p><strong>IDLE <ms></ms></strong>: 设置消息的空闲时间(最后一次发送)。如果没有指定IDLE，则假设IDLE为0，也就是说，时间计数将被重置，因为消息现在有一个新的所有者试图处理它。</p></li><li><p><strong>TIME <ms-unix-time></ms-unix-time></strong>: 这与IDLE相同，但不是相对的毫秒数，它将空闲时间设置为特定的Unix时间(以毫秒为单位)。这对于重写生成<code>XCLAIM</code>命令的AOF文件非常有用。</p></li><li><p><strong>RETRYCOUNT <count></count></strong>: 设置重试次数为指定值。每当再次传递消息时，此计数器都会增加。通常XCLAIM不会改变这个计数器，它只在调用<code>XPENDING</code>命令时提供给客户端:这样客户端就可以检测到异常情况，比如在尝试大量传递后由于某种原因从未处理过的消息。</p></li><li><p><strong>FORCE</strong>: 在PEL中创建挂起的消息条目，即使某些指定的id还没有在分配给不同客户端的PEL中。但是消息必须在流中存在，否则不存在的消息id将被忽略。</p></li><li><p><strong>JUSTID</strong>:  只返回成功声明的消息的id数组，而不返回实际的消息。使用此选项意味着重试计数器不增加。</p></li></ol></li><li><p>使用举例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Alice"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span> <span class="token operator">&gt;</span> XCLAIM mystream mygroup Bob <span class="token number">300</span> <span class="token number">1675739360699</span>-0<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span> <span class="token comment">## 使用 XCLAIM 之后 1675739360699-0 的消费者由 Alice 变更为 Bob</span><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Bob"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="span-id-STREAM-XAUTOCLAIM-XAUTOCLAIM-span"><span id="STREAM_XAUTOCLAIM">XAUTOCLAIM </span></h3><ul><li><p>命令详情</p><p><strong>XAUTOCLAIM</strong> key group consumer  min-idle-time  start [<strong>COUNT</strong> count]<br>[<strong>JUSTID</strong>]</p></li><li><p>功能说明</p><p>从概念上讲，XAUTOCLAIM 等同于调用XPENDING，然后调用XCLAIM</p></li></ul><h1>基础命令：<span id="Order_SCAN">SCAN</span></h1><ul><li><p>命令详情</p><p><strong>SCAN</strong> cursor [<strong>MATCH</strong> pattern] [<strong>COUNT</strong> count] [<strong>TYPE</strong> type]</p></li><li><p>命令参数解释</p><p>cursor ：开始迭代时的光标值为 0 / 上一次调用 SCAN 返回的光标以继续迭代</p><p><strong>TYPE</strong> type：您可以使用 TYPE 选项要求 SCAN 仅返回与给定类型匹配的对象，从而允许您遍历数据库以查找特定类型的键。TYPE 选项仅在整个数据库 SCAN 上可用，而不是 HSCAN 或 ZSCAN 等。</p></li><li><p>使用DEMO</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> foo foobar feelsgood<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sscan myset <span class="token number">0</span> match f*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"0"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"foo"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"feelsgood"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"foobar"</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重要的是要注意<strong>MATCH</strong>过滤器是在从集合中检索到元素之后应用的，就在将数据返回给客户端之前。</p><p>这意味着如果模式匹配集合中的极少元素，<code>SCAN</code>则在大多数迭代中可能不会返回任何元素。一个例子如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">0</span> MATCH *11*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"288"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key:911"</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">288</span> MATCH *11*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"224"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">224</span> MATCH *11*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"80"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">80</span> MATCH *11*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"176"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">176</span> MATCH *11* COUNT <span class="token number">1000</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"0"</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key:611"</span>    <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"key:711"</span>    <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"key:118"</span>    <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"key:117"</span>    <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"key:311"</span>    <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"key:112"</span>    <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"key:111"</span>    <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"key:110"</span>    <span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"key:113"</span>   <span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"key:211"</span>   <span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"key:411"</span>   <span class="token number">12</span><span class="token punctuation">)</span> <span class="token string">"key:115"</span>   <span class="token number">13</span><span class="token punctuation">)</span> <span class="token string">"key:116"</span>   <span class="token number">14</span><span class="token punctuation">)</span> <span class="token string">"key:114"</span>   <span class="token number">15</span><span class="token punctuation">)</span> <span class="token string">"key:119"</span>   <span class="token number">16</span><span class="token punctuation">)</span> <span class="token string">"key:811"</span>   <span class="token number">17</span><span class="token punctuation">)</span> <span class="token string">"key:511"</span>   <span class="token number">18</span><span class="token punctuation">)</span> <span class="token string">"key:11"</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如您所见，大多数调用返回零元素，但最后一次调用使用 COUNT 为 1000 以强制命令对该迭代进行更多扫描</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;String&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;使用&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;功能&lt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-命令记录</title>
    <link href="https://hmxyl.github.io/20221103/709af9d4.html"/>
    <id>https://hmxyl.github.io/20221103/709af9d4.html</id>
    <published>2022-11-03T11:19:19.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>KEY的命名</h1><p>用<code>:</code>分隔不同的层次命名空间，如：<code>user:id12345:contact</code></p><p>如果某个对象有<code>字段的字段</code>，用<code>.</code>连接。如<code>user:id12345:contact.mail</code>。</p><h1>基础命令记录</h1><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">SWAPDB</td><td style="text-align:left"><span id="Order_SWAPDB"><strong>SWAPDB</strong> index1 index2 </span></td><td>库index1 和 库index2的数据交换</td></tr><tr><td style="text-align:left">EXISTS</td><td style="text-align:left"><span id="Order_EXISTS"><strong>EXISTS</strong> key</span></td><td>判断key是否存在</td></tr><tr><td style="text-align:left">TTL</td><td style="text-align:left"><span id="Order_TTL"><strong>TTL</strong> key</span></td><td>查询key的过期时间</td></tr><tr><td style="text-align:left">EXPIRE</td><td style="text-align:left"><span id="Order_EXPIRE"><strong>EXPIRE</strong> key seconds  /  <strong>EXPIREAT</strong> key timestamp</span></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;KEY的命名&lt;/h1&gt;
&lt;p&gt;用&lt;code&gt;:&lt;/code&gt;分隔不同的层次命名空间，如：&lt;code&gt;user:id12345:contact&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果某个对象有&lt;code&gt;字段的字段&lt;/code&gt;，用&lt;code&gt;.&lt;/code&gt;连接。如&lt;code&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>配置 序列化成JSON字符串.md</title>
    <link href="https://hmxyl.github.io/20221102/3fb18050.html"/>
    <id>https://hmxyl.github.io/20221102/3fb18050.html</id>
    <published>2022-11-02T11:10:19.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们使用<code>@Cacheable</code>注解的时候会将返回的对象缓存起来，我们会发现默认缓存的值是二进制的，不方便查看，为此我们自定义序列化配置，改成JSON格式的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.cjs.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cjs-springsecurity-example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>cjs-springsecurity-example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">RedisCacheWriter</span> redisCacheWriter <span class="token operator">=</span> <span class="token class-name">RedisCacheWriter</span><span class="token punctuation">.</span><span class="token function">nonLockingRedisCacheWriter</span><span class="token punctuation">(</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RedisCacheConfiguration</span> redisCacheConfiguration <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>                    <span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span>redisCacheWriter<span class="token punctuation">,</span> redisCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们使用&lt;code&gt;@Cacheable&lt;/code&gt;注解的时候会将返回的对象缓存起来，我们会发现默认缓存的值是二进制的，不方便查看，为此我们自定义序列化配置，改成JSON格式的&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-markup&quot; </summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
    <category term="Spring Cache" scheme="https://hmxyl.github.io/tags/Spring-Cache/"/>
    
  </entry>
  
  <entry>
    <title>Redis-发布订阅</title>
    <link href="https://hmxyl.github.io/20221102/4cdb4706.html"/>
    <id>https://hmxyl.github.io/20221102/4cdb4706.html</id>
    <published>2022-11-02T11:10:19.000Z</published>
    <updated>2023-05-08T06:49:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Redis  发布订阅简介</h1><blockquote><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p></blockquote><p>Redis 的 SUBSCRIBE 命令可以让客户端订阅任意数量的频道， 每当有新信息发送到被订阅的频道时， 信息就会被发送给所有订阅指定频道的客户端。</p><p>作为例子， 下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-1.svg" alt="img"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-2.svg" alt="img"></p><h2 id="发布-订阅使用">发布/订阅使用</h2><blockquote><p>Redis有两种发布/订阅模式：</p><ul><li>基于频道(Channel)的发布/订阅</li><li>基于模式(pattern)的发布/订阅</li></ul></blockquote><h3 id="基于频道-Channel-的发布-订阅">基于频道(Channel)的发布/订阅</h3><p>"发布/订阅"模式包含两种角色，分别是发布者和订阅者。发布者可以向指定的频道(channel)发送消息; 订阅者可以订阅一个或者多个频道(channel),所有订阅此频道的订阅者都会收到此消息。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-8.png" alt="img"></p><ul><li><p><strong>发布者发布消息</strong></p><p>发布者发布消息的命令是 <code>publish</code>,用法是<code> publish channel message</code>，如向 channel1.1说一声hi</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> publish channel:1 hi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样消息就发出去了。返回值表示接收这条消息的订阅者数量。发出去的消息不会被持久化，也就是有客户端订阅channel:1后只能接收到后续发布到该频道的消息，之前的就接收不到了。</p></li><li><p><strong>订阅者订阅频道</strong></p><p>订阅频道的命令是 <code>subscribe</code>，可以同时订阅多个频道，用法是 <code>subscribe channel1 [channel2 ...]</code>,例如新开一个客户端订阅上面频道:(不会收到消息，因为不会收到订阅之前就发布到该频道的消息)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> subscribe channel:1Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"subscribe"</span> // 消息类型<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"channel:1"</span> // 频道<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"hi"</span> // 消息内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上面命令客户端会进入订阅状态，处于此状态下客户端不能使用除<code>subscribe</code>、<code>unsubscribe</code>、<code>psubscribe</code>和<code>punsubscribe</code>这四个属于"发布/订阅"之外的命令，否则会报错。</p><p>进入订阅状态后客户端可能收到3种类型的回复。每种类型的回复都包含3个值，第一个值是消息的类型，根据消类型的不同，第二个和第三个参数的含义可能不同。</p><p>消息类型的取值可能是以下3个:</p><ul><li><strong>subscribe</strong>。表示订阅成功的反馈信息。第二个值是订阅成功的频道名称，第三个是当前客户端订阅的频道数量。</li><li><strong>message</strong>。表示接收到的消息，第二个值表示产生消息的频道名称，第三个值是消息的内容。</li><li><strong>unsubscribe</strong>。表示成功取消订阅某个频道。第二个值是对应的频道名称，第三个值是当前客户端订阅的频道数量，当此值为0时客户端会退出订阅状态，之后就可以执行其他非"发布/订阅"模式的命令了。</li></ul><table><thead><tr><th><strong>消息发布者</strong></th><th><strong>订阅者A</strong></th><th><strong>订阅者B</strong></th></tr></thead><tbody><tr><td>&gt; PUBLISH channel:a hi <br>(integer) 0</td><td>&gt; SUBSCRIBE channel:a channel:b <br>1) “subscribe” <br>2) “channel:a”<br> 3) (integer) 1 <br>1) “subscribe” <br>2) “channel:b” <br>3) (integer) 2</td><td>&gt; SUBSCRIBE channel:b channel:c <br>1) “subscribe” <br>2) “channel:b” <br>3) (integer) 1 <br>1) “subscribe” <br>2) “channel:c” <br>3) (integer) 2</td></tr><tr><td>&gt; PUBLISH channel:a hi <br>(integer) 1</td><td>1) “message” <br>2) “channel:a” <br>3) “hi”</td><td></td></tr><tr><td>&gt; PUBLISH channel:b hello <br>(integer) 2</td><td>1) “message” <br>2) “channel:b” <br>3) “hello”</td><td>1) “message”<br>2) “channel:b”<br>3) “hello”</td></tr><tr><td>&gt; PUBLISH channel:c lalalala <br>(integer) 1</td><td></td><td>1) “message”<br>2) “channel:c” <br>3) “lalalala”</td></tr></tbody></table></li></ul><h3 id="基于模式-pattern-的发布-订阅">基于模式(pattern)的发布/订阅</h3><p>如果有某个/某些模式和这个频道匹配的话，那么所有订阅这个/这些频道的客户端也同样会收到信息。</p><ul><li><p><strong>用图例解释什么是基于模式的发布订阅</strong></p><p>下图展示了一个带有频道和模式的例子， 其中 <code>tweet.shop.*</code> 模式匹配了 <code>tweet.shop.kindle</code> 频道和 <code>tweet.shop.ipad</code> 频道， 并且有不同的客户端分别订阅它们三个：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-5.svg" alt="img"></p><p>当有信息发送到<code> tweet.shop.kindle</code> 频道时， 信息除了发送给 clientX 和 clientY 之外， 还会发送给订阅<code>tweet.shop.*</code>模式的 client123 和 client256 ：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-6.svg" alt="img"></p><p>另一方面， 如果接收到信息的是频道 <code>tweet.shop.ipad</code> ， 那么 client123 和 client256 同样会收到信息：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-7.svg" alt="img"></p></li><li><p><strong>基于模式的例子</strong></p><p>通配符中<code>?</code>表示1个占位符，<code>*</code>表示任意个占位符(包括0)，<code>?*</code>表示1个以上占位符。</p><table><thead><tr><th></th><th><strong>消息发布者</strong></th><th><strong>订阅者A</strong></th><th></th></tr></thead><tbody><tr><td>准备</td><td></td><td>&gt; <strong>psubscribe a? b* d?*</strong> <br>1) “psubscribe”  <br>2) “a?”  <br>3) (integer) 1  <br>1) “psubscribe”  <br>2) “b” 3) (integer) 2  <br>1) “psubscribe”  <br>2) “d?”  <br>3) (integer) 3 <br></td><td>&gt; <strong>psubscribe c? b* d?*</strong> <br>“psubscribe”  <br>2) “c?”  <br>3) (integer) 1  <br>1) “psubscribe”  <br>2) “b” 3) (integer) 2  <br>1) “psubscribe”  <br>2) “d?”  <br>3) (integer) 3</td></tr><tr><td>发送消息</td><td>&gt; publish a m1<br> (integer) 0</td><td></td><td></td></tr><tr><td>发送消息</td><td>&gt; publish a1 m1<br> (integer) 1</td><td>1) “pmessage”<br>2) “a?”<br>3) “a1”<br>4) “m1”</td><td></td></tr><tr><td>发送消息</td><td>&gt; publish a11 m1 <br>(integer) 0</td><td></td><td></td></tr><tr><td>发送消息</td><td>&gt; publish b abc <br>(integer) 2</td><td>1) “pmessage” <br>2) “b*” <br>3) “b” <br>4) “abc”</td><td>1) “pmessage” <br>2) “b*” <br>3) “b” <br>4) “abc”</td></tr><tr><td>发送消息</td><td>&gt; publish c abc<br> (integer) 0</td><td></td><td></td></tr><tr><td>发送消息</td><td>&gt; publish c1 m1<br> (integer) 1</td><td></td><td>1) “pmessage” <br>2) “c?” <br>3) “c1” <br>4) “m1”</td></tr><tr><td>发送消息</td><td>&gt; publish c11 m1 <br>(integer) 0</td><td></td><td></td></tr><tr><td>发送消息</td><td>&gt; publish d m1 <br>(integer) 0</td><td></td><td></td></tr><tr><td>发送消息</td><td>&gt; publish d1 m1 <br>(integer) 2</td><td>1) “pmessage” <br>2) “d?*” <br>3) “d1” <br>4) “m1”</td><td>1) “pmessage” <br>2) “d?*” <br>3) “d1” <br>4) “m1”</td></tr><tr><td>发送消息</td><td>&gt; publish d11 m1<br> (integer) 2</td><td>1) “pmessage” <br>2) “d?*” <br>3) “d11” <br>4) “m1”</td><td>1) “pmessage” <br>2) “d?*” <br>3) “d11” <br>4) “m1”</td></tr></tbody></table></li><li><p><strong>注意点</strong></p></li></ul><ol><li><p>使用<code>psubscribe</code>命令可以重复订阅同一个频道，如客户端执行了<code>psubscribe c? c?*</code>。这时向c1发布消息客户端会接受到两条消息，而同时<code>publish</code>命令的返回值是2而不是1。同样的，如果有另一个客户端执行了<code>subscribe c1</code> 和<code>psubscribe c?*</code>的话，向c1发送一条消息该客户顿也会受到两条消息(但是是两种类型:message和pmessage)，同时<code>publish</code>命令也返回2.</p></li><li><p><code>punsubscribe</code>命令可以退订指定的规则，用法是: <code>punsubscribe [pattern [pattern ...]]</code>,如果没有参数则会退订所有规则。</p></li><li><p>使用<code>punsubscribe</code>只能退订通过psubscribe命令订阅的规则，不会影响直接通过<code>subscribe</code>命令订阅的频道；同样<code>unsubscribe</code>命令也不会影响通过<code>psubscribe</code>命令订阅的规则。另外需要注意<code>punsubscribe</code>命令退订某个规则时不会将其中的通配符展开，而是进行严格的字符串匹配，所以<code>punsubscribe *</code> 无法退订<code>c*</code>规则，而是必须使用<code>punsubscribe c*</code>才可以退订。（它们是相互独立的，后文可以看到数据结构上看也是两种实现）</p></li></ol><h2 id="深入理解">深入理解</h2><blockquote><p>我们通过几个问题，来深入理解Redis的订阅发布机制</p></blockquote><h3 id="基于频道-Channel-的发布-订阅如何实现的？">基于频道(Channel)的发布/订阅如何实现的？</h3><p>底层是通过字典（图中的pubsub_channels）实现的，这个字典就用于保存订阅频道的信息：字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。</p><ul><li><p><strong>数据结构</strong></p><p>比如说，在下图展示的这个 pubsub_channels 示例中， client2 、 client5 和 client1 就订阅了 channel1 ， 而其他频道也分别被别的客户端所订阅：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-3.svg" alt="img"></p></li><li><p><strong>订阅</strong></p><p>当客户端调用 SUBSCRIBE 命令时， 程序就将客户端和要订阅的频道在 pubsub_channels 字典中关联起来。</p><p>举个例子，如果客户端 client10086 执行命令 <code>SUBSCRIBE channel1 channel2 channel3</code> ，那么前面展示的 pubsub_channels 将变成下面这个样子：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-4.svg" alt="img"></p></li><li><p><strong>发布</strong></p><p>当调用 <code>PUBLISH channel message</code> 命令， 程序首先根据 channel 定位到字典的键， 然后将信息发送给字典值链表中的所有客户端。</p><p>比如说，对于以下这个 pubsub_channels 实例， 如果某个客户端执行命令 <code>PUBLISH channel1 "hello moto"</code> ，那么 client2 、 client5 和 client1 三个客户端都将接收到 “hello moto” 信息：</p></li><li><p><strong>退订</strong></p><p>使用 UNSUBSCRIBE 命令可以退订指定的频道， 这个命令执行的是订阅的反操作： 它从 <code>pubsub_channels </code>字典的给定频道（键）中， 删除关于当前客户端的信息， 这样被退订频道的信息就不会再发送给这个客户端。</p></li></ul><h3 id="基于模式-Pattern-的发布-订阅如何实现的？">基于模式(Pattern)的发布/订阅如何实现的？</h3><p>底层是pubsubPattern节点的链表。</p><ul><li><p><strong>数据结构</strong></p><p>redisServer.pubsub_patterns 属性是一个链表，链表中保存着所有和模式相关的信息：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    list <span class="token operator">*</span>pubsub_patterns<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链表中的每个节点都包含一个 redis.h/pubsubPattern 结构：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">pubsubPattern</span> <span class="token punctuation">{</span>    redisClient <span class="token operator">*</span>client<span class="token punctuation">;</span>    robj <span class="token operator">*</span>pattern<span class="token punctuation">;</span><span class="token punctuation">}</span> pubsubPattern<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>client 属性保存着订阅模式的客户端，而 pattern 属性则保存着被订阅的模式。</p><p>每当调用 PSUBSCRIBE 命令订阅一个模式时， 程序就创建一个包含客户端信息和被订阅模式的 pubsubPattern 结构， 并将该结构添加到 redisServer.pubsub_patterns 链表中。</p><p>作为例子，下图展示了一个包含两个模式的 pubsub_patterns 链表， 其中 client123 和 client256 都正在订阅 <a href="http://tweet.shop">tweet.shop</a>.* 模式：</p><p>!</p><p>](<a href="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-9.svg">https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-9.svg</a>)</p></li><li><p><strong>订阅</strong></p><p>如果这时客户端 client10086 执行 <code>PSUBSCRIBE broadcast.list.*</code> ， 那么 pubsub_patterns 链表将被更新成这样：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-10.svg" alt="img"></p><p>通过遍历整个 pubsub_patterns 链表，程序可以检查所有正在被订阅的模式，以及订阅这些模式的客户端。</p></li><li><p><strong>发布</strong></p><p>发送信息到模式的工作也是由 PUBLISH 命令进行的, 显然就是匹配模式获得Channels，然后再把消息发给客户端。</p></li><li><p><strong>退订</strong></p><p>使用 PUNSUBSCRIBE 命令可以退订指定的模式， 这个命令执行的是订阅模式的反操作： 程序会删除 redisServer.pubsub_patterns 链表中， 所有和被退订模式相关联的 pubsubPattern 结构， 这样客户端就不会再收到和模式相匹配的频道发来的信息。</p></li></ul><h2 id="SpringBoot结合Redis发布-订阅实例？">SpringBoot结合Redis发布/订阅实例？</h2><p>参考：<a href="https://blog.csdn.net/llll234/article/details/80966952">https://blog.csdn.net/llll234/article/details/80966952</a></p><p>最佳实践是通过RedisTemplate，关键代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 发布</span>redisTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"my_topic_name"</span><span class="token punctuation">,</span> <span class="token string">"message_content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 配置订阅</span><span class="token class-name">RedisMessageListenerContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>container<span class="token punctuation">.</span><span class="token function">addMessageListener</span><span class="token punctuation">(</span>xxxMessageListenerAdapter<span class="token punctuation">,</span> <span class="token string">"my_topic_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Redis  发布订阅简介&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis 的 SUBSCRIBE 命令可以让客</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis安装</title>
    <link href="https://hmxyl.github.io/20221102/c9f6f059.html"/>
    <id>https://hmxyl.github.io/20221102/c9f6f059.html</id>
    <published>2022-11-02T11:10:19.000Z</published>
    <updated>2023-05-08T06:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1>单机安装：Windows</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。</p><h2 id="下载地址：">下载地址：</h2><pre class="line-numbers language-none"><code class="language-none">windows版本： https://github.com/MSOpenTech/redis/releasesLinux版本：官网下载： http://www.redis.cn/git下载：https://github.com/antirez/redis/releases<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们现在讨论的是windows下的安装部署，目前windows下最新版本是：3.2.100。下载地址，提供多种下载内容，</p> <pre class="line-numbers language-none"><code class="language-none">Redis-x64-3.2.100.msi是在windows下，最简单的安装文件，方便，直接会将Redis写入windows服务。Redis-x64-3.2.100.zip是需要解压安装的，接下来讨论的是这种。Source code (zip) 源码的zip压缩版Source code (tar.gz) 源码的tar.gz压缩版 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16383227748541.png" alt="8cc0c90bc2b723d9f6cdc3a1356559b9.png"></p><h2 id="安装">安装</h2><p>解压安装将下载的Redis-x64-3.2.100.zip 解压到某个地址。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image004-16383227748552.png" alt="5bfe10debe216c18d70d3d0e555be8ae.png"></p><p>启动命令通过cmd指定到该redis目录。<br>使用命令：<code>redis-server.exe </code>启动服务</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image005-16383227748554.png" alt="263f236f685ad552e15c64422eda72d6.png"></p><p>出现这种效果，表明启动服务成功。启动另一个cmd，在该redis目录下，使用命令：redis-cli.exe 启动客户端,连接服务器</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image006-16383227748553.png" alt="ff00ad0320f2dbe6e8d3a50aa8e8b1a8.png"></p><p>出现这种效果，表明启动客户度成功。</p><h2 id="部署">部署</h2><p>由于上面虽然启动了redis服务，但是，只要一关闭cmd窗口，redis服务就关闭了。所以，把redis设置为一个windows服务。</p><p>安装之前，windows服务是不包含redis服务的</p><p>安装为windows服务安装命令:</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image008-16383227748555.png" alt="95da60801d83c5caf9c8286ecab1574f.png"></p><pre class="line-numbers language-none"><code class="language-none">redis-server.exe --service-install redis.windows.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用命令，安装成功，如图所示</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image009.png" alt="cf536a1024ae8ece56703496ca29dbff.png"></p><p>最后的参数<code> --loglevel verbose</code>表示记录日志等级</p><p>安装之后，windows目前的服务列表</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image011.png" alt="ad9747b797fe689579ca4642902afe49.png"></p><p>常用的redis服务命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">卸载服务：redis-server --service-uninstall开启服务：redis-server --service-start停止服务：redis-server --service-stop重命名服务：redis-server --service-name name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重命名服务，需要写在前三个参数之后</p><p>例如： The following would install and start three separate instances of Redis as a service:</p><p>以下将会安装并启动三个不同的Redis实例作服务：</p><pre class="line-numbers language-none"><code class="language-none">redis-server --service-install --service-name redisService1 --port 10001redis-server --service-start --service-name redisService1redis-server --service-install --service-name redisService2 --port 10002redis-server --service-start --service-name redisService2redis-server --service-install --service-name redisService3 --port 10003redis-server --service-start --service-name redisService3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四：测试启动服务</p><p>客户端命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-server --service-start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>精简模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli.exe <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-a</span> requirepass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-h</td><td>服务器地址</td></tr><tr><td>-p</td><td>指定端口号</td></tr><tr><td>-a</td><td>连接数据库的密码[可以在redis.windows.conf中配置]，默认无密码</td></tr></tbody></table><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image012.png" alt="05c2f1e1f504cb3480c6a96e746c0554.png"><br>安装测试成功。</p><h1>单机安装：Centos</h1><h2 id="准备">准备</h2><ol><li>下载redis安装包</li></ol> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://download.redis.io/releases/redis-4.0.6.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image013.png" alt="4500b2d7d6f71a55db9aef7a8050394e.png"></p><ol start="2"><li>解压压缩包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxvf redis-4.0.6.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image014.png" alt="632ce9c44a953178bb01cedd24d4d8ab.png"></p><ol start="3"><li>yum安装gcc依赖</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-2">安装</h2><ol><li>跳转到redis解压目录下</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/software/redis-4.0.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>编译安装</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image015.png" alt="9760df7be3b6d1534296047905b13e61.png"></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">将/usr/software/redis-4.0.6/src目录下的文件加到/usr/local/bin目录<span class="token builtin class-name">cd</span> src <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image016.png" alt="4aaeefe75f7c20cb5039b355f7062e7f.png"></p><h2 id="启动redis的三种方式">启动redis的三种方式</h2><h3 id="直接启动">直接启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">先切换到redis src目录下<span class="token builtin class-name">cd</span> /usr/software/redis-4.0.6/src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接启动redis</p> <pre class="line-numbers language-none"><code class="language-none">./redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image017.png" alt="277d11179a4ec94b22e978a0f10f1a36.png"><br>如上图：redis启动成功，但是这种启动方式需要一直打开窗口，不能进行其他操作，不太方便。<br>按 ctrl + c可以关闭窗口。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image018.png" alt="19606b9997c671ce2722f2315ddff2dd.png"></p><h3 id="以后台进程方式启动redis">以后台进程方式启动redis</h3><ol><li><p>修改redis.conf文件</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/software/redis-4.0.6vi redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将 <code>daemonize no</code> 修改 <code>daemonize yes</code></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image019.png" alt="4690346a97fc0b147c66c8220cfb6e70.png"></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image020.png" alt="e5b2377dbc25cbf8dbd5a97341b744db.png"></p></li><li><p>指定redis.conf文件启动</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/software/redis-4.0.6/src./redis-server /usr/software/redis-4.0.6/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关闭redis进程</p><pre class="line-numbers language-none"><code class="language-none">ps -aux | grep redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image021.png" alt="4b9b6364ca42da21b0e27f1e1dc90824.png"></p><pre class="line-numbers language-none"><code class="language-none">kill -9 11753<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="设置redis为系统服务">设置redis为系统服务</h3><ol><li><p>在/etc目录下新建redis目录</p><pre class="line-numbers language-none"><code class="language-none">cd /etcmkdir redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将 <code>/usr/software/redis-4.0.6/redis.conf </code>文件复制一份到/etc/redis目录下，并命名为6379.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/software/redis-4.0.6/redis.conf /etc/redis/6379.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将redis的启动脚本复制一份放到/etc/init.d目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/software/redis-4.0.6/utils/redis_init_script /etc/init.d/redisd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置redis开机自启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/init.d<span class="token function">chkconfig</span> redisd on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>出现问题1：</p><pre class="line-numbers language-none"><code class="language-none">service redisd does not support chkconfig　<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看结果是redisd不支持chkconfig<br>解决方法：<code>vi /etc/init.d/redisd</code>，加入如下两行注释，保存退出</p> <pre class="line-numbers language-none"><code class="language-none"># chkconfig: 2345 90 10# summary: Redis is a persistent key-value database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image022.png" alt="ea9dc06f591188ad0d2c8ff4c0e8c4be.png"></p><p>注释的意思是：redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image023.png" alt="48608ef900b2bd7ed0f5a08598d11463.png"></p><p>再次执行开机自启命令，成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chkconfig</span> redisd on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在可以直接以服务的形式启动和关闭redis了</p><p>再次启动：</p> <pre class="line-numbers language-none"><code class="language-none">service redisd start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现问题2：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image024.png" alt="95d24c1fc0745a3f0e55b6140ee87462.png"></p><p>删除：<code>redis_6379.pid</code>后，再次执行：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image025.png" alt="b401291681b760b35c2643e97dbddb25.png"></p></li><li><p>关闭</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> redisd stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="配置密码登录">配置密码登录</h3><ol><li><p>修改配置文件，使用密码登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /usr/software/redis-4.0.6/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image026.png" alt="89a9f187a67da6a0bdc92f8f05ff54b1.png"></p><p>此时，访问redis客户端查询</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image027.png" alt="7742f0112fb76da057cc87316510da4d.png"></p><p>使用密码后，停止服务会报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> redisd stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image028.png" alt="9d88c06e13e7f4116629ae69fdaecd03.png"></p></li><li><p>修改启动配置文件</p><pre class="line-numbers language-none"><code class="language-none">vi /etc/init.d/redisd将其中的CLIEXEC -p REDISPORT shutdown改为CLIEXEC -a "3448395502" -p REDISPORT shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="防火墙开放端口6179">防火墙开放端口6179</h2><ol><li><p>开启6179</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/sbin/iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">6179</span> <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>保存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/rc.d/init.d/iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>centos 7下执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><pre class="line-numbers language-none"><code class="language-none">参考：https://blog.csdn.net/zc474235918/article/details/50974483https://www.cnblogs.com/aqicheng/p/11512153.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>Docker安装Redis集群</h1><blockquote><p>集群至少6个节点</p><ol><li>集群至少3个主节点</li><li>每个主节点至少一个从节点（若一个主节点设置2个从节点，则需要9个节点）</li></ol></blockquote><h2 id="1-环境准备">1. 环境准备</h2><blockquote><p>redis.conf模板文件redis-cluster.tmpl</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># redis端口port ${NODE_PORT}requirepass custom_passwordmasterauth custom_password# 开启集群cluster-enabled yesappendonly yescluster-node-timeout 5000#protected-mode nologlevel noticelogfile /redis/log/redis.logdir /redis/data# 集群节点配置cluster-announce-ip 172.16.163.128cluster-announce-port ${NODE_PORT}cluster-announce-bus-port 1${NODE_PORT}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>批量生成节点文件的批处理程序：<a href="http://redis-cluster-config-before.sh">redis-cluster-config-before.sh</a></p></blockquote><p><code> chmod u+x redis-cluster-config-before.sh</code> 修改可执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash  </span><span class="token comment"># 节点数据</span><span class="token keyword">for</span> <span class="token for-or-select variable">port</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">6381</span> <span class="token number">6386</span><span class="token variable">)</span></span><span class="token keyword">do</span>  <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/data<span class="token punctuation">;</span>  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/log<span class="token punctuation">;</span>  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/conf<span class="token punctuation">;</span>  <span class="token function">chmod</span> <span class="token number">777</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/conf <span class="token function">chmod</span> <span class="token number">777</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/log <span class="token function">chmod</span> <span class="token number">777</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/data<span class="token comment">#  export NODE_PORT=${port}</span><span class="token comment">#  export NODE_INDEX=`expr ${port} - 6379` </span><span class="token comment">#  export NODE_IP=172.19.0.${NODE_INDEX}</span><span class="token comment">#  echo ${NODE_IP} ${NODE_PORT}</span> <span class="token assign-left variable">NODE_PORT</span><span class="token operator">=</span><span class="token variable">${port}</span> envsubst <span class="token operator">&lt;</span> /opt/docker/redis-cluster-7.0.0/redis-cluster.tmpl <span class="token operator">&gt;</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/conf/redis.conf<span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-创建容器">2. 创建容器</h2><blockquote><p>docker-compose.yml 文件</p></blockquote><p><code>docker-compose up -d</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.7'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">redis_6381</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6381    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./6381/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf      <span class="token punctuation">-</span> ./6381/data<span class="token punctuation">:</span>/redis/data      <span class="token punctuation">-</span> ./6381/log<span class="token punctuation">:</span>/redis/log    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6381:6381"</span>      <span class="token punctuation">-</span> <span class="token string">"16381:16381"</span>    <span class="token key atrule">redis_6382</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6382    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./6382/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf      <span class="token punctuation">-</span> ./6382/data<span class="token punctuation">:</span>/redis/data      <span class="token punctuation">-</span> ./6382/log<span class="token punctuation">:</span>/redis/log    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6382:6382"</span>      <span class="token punctuation">-</span> <span class="token string">"16382:16382"</span>  <span class="token key atrule">redis_6383</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6383    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./6383/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf      <span class="token punctuation">-</span> ./6383/data<span class="token punctuation">:</span>/redis/data      <span class="token punctuation">-</span> ./6383/log<span class="token punctuation">:</span>/redis/log    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6383:6383"</span>      <span class="token punctuation">-</span> <span class="token string">"16383:16383"</span>  <span class="token key atrule">redis_6384</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6384    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./6384/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf      <span class="token punctuation">-</span> ./6384/data<span class="token punctuation">:</span>/redis/data      <span class="token punctuation">-</span> ./6384/log<span class="token punctuation">:</span>/redis/log    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6384:6384"</span>      <span class="token punctuation">-</span> <span class="token string">"16384:16384"</span>  <span class="token key atrule">redis_6385</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6385    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./6385/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf      <span class="token punctuation">-</span> ./6385/data<span class="token punctuation">:</span>/redis/data      <span class="token punctuation">-</span> ./6385/log<span class="token punctuation">:</span>/redis/log    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6385:6385"</span>      <span class="token punctuation">-</span> <span class="token string">"16385:16385"</span>  <span class="token key atrule">redis_6386</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6386    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./6386/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf      <span class="token punctuation">-</span> ./6386/data<span class="token punctuation">:</span>/redis/data      <span class="token punctuation">-</span> ./6386/log<span class="token punctuation">:</span>/redis/log    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6386:6386"</span>      <span class="token punctuation">-</span> <span class="token string">"16386:16386"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-防火墙">3. 防火墙</h2><p>开放<code>6381-6386 16381-16386</code>端口</p><ul><li>Urban <code>ufw allow 6381</code> 然后查看 <code>ufw status</code></li><li>Linux   <code>firewall-cmd --zone=public --add-port=6381/tcp --permanent</code> 然后查看 <code>firewall-cmd --zone= public --query-port=6381/tcp</code></li></ul><h2 id="4-集群配置">4.  集群配置</h2><ul><li>进入其中一个节点的容器命令行：<code>docker exec -it redis_6382 bash</code></li><li>集群各个节点自动分配：<code>redis-cli -a custom_password --cluster create 172.16.163.128:6381 172.16.163.128:6382 172.16.163.128:6383 172.16.163.128:6384 172.16.163.128:6385 172.16.163.128:6386 --cluster-replicas 1</code></li><li>集群测试：<code>redis-cli -a custom_password --cluster check 172.16.163.128:6381</code></li><li>集群健康：<code>redis-cli -c -h 172.16.163.128 -p 6381 -a custom_password</code>进入容器，查看<code>cluster info</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;单机安装：Windows&lt;/h1&gt;
&lt;p&gt;Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。&lt;/p&gt;
&lt;h2 id=&quot;下载地址：&quot;&gt;下载地址：&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-持久化</title>
    <link href="https://hmxyl.github.io/20221102/574fe2f4.html"/>
    <id>https://hmxyl.github.io/20221102/574fe2f4.html</id>
    <published>2022-11-02T11:10:19.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>为什么需要持久化</strong>？</p><p>Redis是个基于内存的数据库。那服务一旦宕机，内存中的数据将全部丢失。通常的解决方案是从后端数据库恢复这些数据，但后端数据库有性能瓶颈，如果是大数据量的恢复  1、会对数据库带来巨大的压力，2、数据库的性能不如Redis。导致程序响应慢。所以对Redis来说，实现数据的持久化，避免从后端数据库中恢复数据，是至关重要的。</p></li><li><p><strong>Redis持久化有哪些方式呢</strong>？</p><p>从严格意义上说，Redis服务提供四种持久化存储方案：<code>RDB</code>、<code>AOF</code>、<code>虚拟内存（VM）</code>和　<code>DISKSTORE</code>。</p><p><strong>虚拟内存（VM）方式</strong>，从Redis Version 2.4开始就被官方明确表示不再建议使用，Version 3.2版本中更找不到关于虚拟内存（VM）的任何配置范例.Redis的主要作者Salvatore Sanfilippo还专门写了一篇论文，来反思Redis对虚拟内存（VM）存储技术的支持问题。</p><p><strong>DISKSTORE方式</strong>，是从Redis Version 2.8版本开始提出的一个存储设想，到目前为止Redis官方也没有在任何stable版本中明确建议使用这用方式。在Version 3.2版本中同样找不到对于这种存储方式的明确支持</p></li><li><p><strong>为什么我们需要重点学RDB和AOF</strong>？</p><p>目前官方文档上能够看到的Redis对持久化存储的支持明确的就只有两种方案（<a href="https://redis.io/topics/persistence%EF%BC%89%EF%BC%9ARDB%E5%92%8CAOF">https://redis.io/topics/persistence）：RDB和AOF</a></p></li></ul><h1>RDB</h1><blockquote><p>RDB 就是 Redis DataBase 的缩写，中文名为快照/内存快照，RDB持久化是把当前进程数据生成快照保存到磁盘上的过程，由于是某一时刻的快照，那么快照中的值要早于或者等于内存中的值</p></blockquote><h2 id="触发方式">触发方式</h2><blockquote><p>触发rdb持久化的方式有2种，分别是<strong>手动触发</strong>和<strong>自动触发</strong>。</p></blockquote><h3 id="手动触发">手动触发</h3><blockquote><p>手动触发分别对应<code>save</code>和<code>bgsave</code>命令，会在<code>data</code>文件夹下生成<code>dump.rdb</code>文件</p></blockquote><ul><li><p><strong>save命令</strong>：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存 比较大的实例会造成长时间<strong>阻塞</strong>，线上环境不建议使用</p></li><li><p><strong>bgsave命令</strong>：Redis进程执行<code>fork</code>操作，创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。具体流程如下：</p></li></ul><ol><li><p>redis客户端执行<code>bgsave</code>命令或者自动触发<code>bgsave</code>命令；</p></li><li><p>主进程判断当前是否已经存在正在执行的子进程，如果存在，那么主进程直接返回；</p></li><li><p>如果不存在正在执行的子进程，那么就<code>fork</code>一个新的子进程进行持久化数据，<strong><code>fork</code>过程是阻塞的</strong>，fork操作完成后主进程即可执行其他操作；</p></li><li><p>子进程先将数据写入到临时的<code>rdb</code>文件中，待快照数据写入完成后再原子替换旧的<code>rdb</code>文件；</p></li><li><p>同时发送信号给主进程，通知主进程<code>rdb</code>持久化完成，主进程更新相关的统计信息（info persitence下的rdb_*相关选项）。</p></li></ol><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-rdb-1-1676430207109-3.png" alt="img"></p><h3 id="自动触发">自动触发</h3><p>在以下4种情况时会自动触发</p><ul><li><p>redis.conf中配置<code>save m n</code>，即在m秒内有n次修改时，自动触发bgsave生成rdb文件；</p></li><li><p>主从复制时，从节点要从主节点进行全量复制时也会触发bgsave操作，生成当时的快照发送到从节点；</p></li><li><p>执行<code>debug reload</code>命令重新加载redis时也会触发bgsave操作；</p></li><li><p>默认情况下执行<code>shutdown</code>命令时，如果没有开启<code>aof</code>持久化，那么也会触发bgsave操作</p></li></ul><h2 id="redis-conf配置RDB">redis.conf配置RDB</h2><p><strong>快照周期</strong>：内存快照虽然可以通过技术人员手动执行SAVE或BGSAVE命令来进行，但生产环境下多数情况都会设置其周期性执行条件。</p><ul><li><p><strong>Redis中默认的周期新设置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 周期性执行条件的设置格式为</span>save <span class="token operator">&lt;</span>seconds<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>changes<span class="token operator">&gt;</span><span class="token comment"># 默认的设置为：</span>save <span class="token number">900</span> <span class="token number">1</span>  <span class="token comment"># 如果900秒内有1条Key信息发生变化，则进行快照</span>save <span class="token number">300</span> <span class="token number">10</span> <span class="token comment"># 如果300秒内有10条Key信息发生变化，则进行快照；</span>save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment"># 如果60秒内有10000条Key信息发生变化，则进行快照；</span><span class="token comment"># 以下设置方式为关闭RDB快照功能</span>save <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>其它相关配置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 文件名称</span>dbfilename dump.rdb<span class="token comment"># 文件保存路径</span><span class="token function">dir</span> /home/work/app/redis/data/<span class="token comment"># 如果持久化出错，主进程是否停止写入</span>stop-writes-on-bgsave-error <span class="token function">yes</span><span class="token comment"># 是否压缩</span>rdbcompression <span class="token function">yes</span><span class="token comment"># 导入时是否检查</span>rdbchecksum <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>dbfilename</code>：RDB文件在磁盘上的名称。</p></li><li><p><code>dir</code>：RDB文件的存储路径。默认设置为“./”，也就是Redis服务的主目录。</p></li><li><p><code>stop-writes-on-bgsave-error</code>：上文提到的在快照进行过程中，主进程照样可以接受客户端的任何写操作的特性，是指在快照操作正常的情况下。如果快照操作出现异常（例如操作系统用户权限不够、磁盘空间写满等等）时，Redis就会禁止写操作。这个特性的主要目的是使运维人员在第一时间就发现Redis的运行错误，并进行解决。一些特定的场景下，您可能需要对这个特性进行配置，这时就可以调整这个参数项。该参数项默认情况下值为yes，如果要关闭这个特性，指定即使出现快照错误Redis一样允许写操作，则可以将该值更改为no。</p></li><li><p><code>rdbcompression</code>：该属性将在字符串类型的数据被快照到磁盘文件时，启用LZF压缩算法。Redis官方的建议是请保持该选项设置为yes，因为“it’s almost always a win”。</p></li><li><p><code>rdbchecksum</code>：从RDB快照功能的version 5 版本开始，一个64位的CRC冗余校验编码会被放置在RDB文件的末尾，以便对整个RDB文件的完整性进行验证。这个功能大概会多损失10%左右的性能，但获得了更高的数据可靠性。所以如果您的Redis服务需要追求极致的性能，就可以将这个选项设置为no。</p></li></ul><h2 id="RDB-更深入理解">RDB 更深入理解</h2><blockquote><p>由于生产环境中我们为Redis开辟的内存区域都比较大（例如6GB），那么将内存中的数据同步到硬盘的过程可能就会持续比较长的时间，而实际情况是这段时间Redis服务一般都会收到数据写操作请求。那么如何保证数据一致性呢</p></blockquote><p>​RDB中的核心思路是Copy-on-Write，来保证在进行快照操作的这段时间，需要压缩写入磁盘上的数据在内存中不会发生变化。在正常的快照操作中，一方面Redis主进程会fork一个新的快照进程专门来做这个事情，这样保证了Redis服务不会停止对客户端包括写请求在内的任何响应。另一方面这段时间发生的数据变化会以副本的方式存放在另一个新的内存区域，待快照操作结束后才会同步到原来的内存区域。</p><p>​举个例子：如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-42.jpg" alt="img"></p><ul><li><p><strong>在进行快照操作的这段时间，如果发生服务崩溃怎么办</strong>？</p><p>很简单，在没有将数据全部写入到磁盘前，这次快照操作都不算成功。如果出现了服务崩溃的情况，将以上一次完整的RDB快照文件作为恢复内存数据的参考。也就是说，在快照操作过程中不能影响上一次的备份数据。Redis服务会在磁盘上创建一个临时文件进行数据操作，待操作成功后才会用这个临时文件替换掉上一次的备份。</p></li><li><p><strong>可以每秒做一次快照吗</strong>？</p><p>对于快照来说，所谓“连拍”就是指连续地做快照。这样一来，快照的间隔时间变得很短，即使某一时刻发生宕机了，因为上一时刻快照刚执行，丢失的数据也不会太多。但是，这其中的快照间隔时间就很关键了。</p><p>如下图所示，我们先在 T0 时刻做了一次快照，然后又在 T0+t 时刻做了一次快照，在这期间，数据块 5 和 9 被修改了。如果在 t 这段时间内，机器宕机了，那么，只能按照 T0 时刻的快照进行恢复。此时，数据块 5 和 9 的修改值因为没有快照记录，就无法恢复了。</p></li></ul><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-rdb-2.jpg" alt="img"></p></li></ul><p>所以，要想尽可能恢复数据，t 值就要尽可能小，t 越小，就越像“连拍”。那么，t 值可以小到什么程度呢，比如说是不是可以每秒做一次快照？毕竟，每次快照都是由 bgsave 子进程在后台执行，也不会阻塞主线程。这种想法其实是错误的。虽然 bgsave 执行时不阻塞主线程，但是，<strong>如果频繁地执行全量快照，也会带来两方面的开销</strong>：</p><ul><li>一方面，频繁将全量数据写入磁盘，会给磁盘带来很大压力，多个快照竞争有限的磁盘带宽，前一个快照还没有做完，后一个又开始做了，容易造成恶性循环。</li><li>另一方面，bgsave 子进程需要通过 fork 操作从主线程创建出来。虽然，子进程在创建后不会再阻塞主线程，但是，fork 这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。如果频繁 fork 出 bgsave 子进程，这就会频繁<strong>阻塞主线程</strong>了。</li></ul><p>那么，有什么其他好方法吗？此时，我们可以做增量快照，就是指做了一次全量快照后，后续的快照只对修改的数据进行快照记录，这样可以避免每次全量快照的开销。这个比较好理解。</p><p>但是它需要我们使用额外的元数据信息去记录哪些数据被修改了，这会带来额外的<strong>空间开销问题</strong>。那么，还有什么方法既能利用 RDB 的快速恢复，又能以较小的开销做到尽量少丢数据呢？且看后文中4.0版本中引入的RDB和AOF的混合方式。</p><h2 id="RDB优缺点">RDB优缺点</h2><ul><li><strong>优点</strong><ul><li>RDB文件是某个时间节点的快照，默认使用LZF算法进行压缩，压缩后的文件体积远远小于内存大小，适用于备份、全量复制等场景；</li><li>Redis加载RDB文件恢复数据要远远快于AOF方式；</li></ul></li><li><strong>缺点</strong><ul><li>RDB方式实时性不够，无法做到秒级的持久化；</li><li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；</li><li>RDB文件是二进制的，没有可读性，AOF文件在了解其结构的情况下可以手动修改或者补全；</li><li>版本兼容RDB文件问题；</li></ul></li></ul><p>针对RDB不适合实时持久化的问题，Redis提供了AOF持久化方式来解决</p><h1>AOF</h1><blockquote><p>Redis是“写后”日志，Redis先执行命令，把数据写入内存，然后才记录日志。</p><p>日志里记录的是Redis收到的每一条命令，这些命令是以文本形式保存。PS: 大多数的数据库采用的是写前日志（WAL），例如MySQL，通过写前日志和两阶段提交，实现数据和逻辑的一致性。</p></blockquote><p>而AOF日志采用写后日志，即<strong>先写内存，后写日志</strong>。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-41.jpg" alt="img"></p><p><strong>为什么采用写后日志</strong>？</p><p>Redis要求高性能，采用写日志有两方面好处：</p><ul><li><strong>避免额外的检查开销</strong>：Redis 在向 AOF 里面记录日志的时候，并不会先去对这些命令进行语法检查。所以，如果先记日志再执行命令的话，日志中就有可能记录了错误的命令，Redis 在使用日志恢复数据时，就可能会出错。</li><li>不会阻塞当前的写操作，</li></ul><p>但这种方式存在潜在风险：</p><ul><li>如果命令执行完成，写日志之前宕机了，会丢失数据。</li><li>主线程写磁盘压力大，导致写盘慢，阻塞后续操作。</li></ul><h2 id="如何实现AOF">如何实现AOF</h2><p>AOF日志记录Redis的每个写命令，步骤分为：命令追加（append）、文件写入（write）和 文件同步（sync）。</p><ul><li><p><strong>命令追加</strong> 当AOF持久化功能打开了，服务器在执行完一个写命令之后，会以协议格式将被执行的写命令追加到服务器的<code>aof_buf</code>缓冲区。</p></li><li><p><strong>文件写入和同步</strong> 关于何时将 <code>aof_buf </code>缓冲区的内容写入AOF文件中，Redis提供了三种写回策略</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-4.jpg" alt="img"><code>Always</code>，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；</p><p><code>Everysec</code>，每秒写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；</p><p><code>No</code>，操作系统控制的写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</p></li><li><p><strong>三种写回策略的优缺点</strong></p><p>上面的三种写回策略体现了一个重要原则：<strong>trade-off</strong>，取舍，指在性能和可靠性保证之间做取舍。</p><p>关于AOF的同步策略是涉及到操作系统的 write 函数和 fsync 函数的，在《Redis设计与实现》中是这样说明的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">为了提高文件写入效率，在现代操作系统中，当用户调用write函数，将一些数据写入文件时，操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区的空间被填满或超过了指定时限后，才真正将缓冲区的数据写入到磁盘里。这样的操作虽然提高了效率，但也为数据写入带来了安全问题：如果计算机停机，内存缓冲区中的数据会丢失。为此，系统提供了fsync、fdatasync同步函数，可以强制操作系统立刻将缓冲区中的数据写入到硬盘里，从而确保写入数据的安全性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="redis-conf中配置AOF">redis.conf中配置AOF</h2><p>默认情况下，Redis是没有开启AOF的，可以通过配置redis.conf文件来开启AOF持久化，关于AOF的配置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># appendonly参数开启AOF持久化</span>appendonly no<span class="token comment"># AOF持久化的文件名，默认是appendonly.aof</span>appendfilename <span class="token string">"appendonly.aof"</span><span class="token comment"># AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的</span><span class="token function">dir</span> ./<span class="token comment"># 同步策略</span><span class="token comment"># appendfsync always</span>appendfsync everysec<span class="token comment"># appendfsync no</span><span class="token comment"># aof重写期间是否同步</span>no-appendfsync-on-rewrite no<span class="token comment"># 重写触发配置</span>auto-aof-rewrite-percentage <span class="token number">100</span>auto-aof-rewrite-min-size 64mb<span class="token comment"># 加载aof出错如何处理</span>aof-load-truncated <span class="token function">yes</span><span class="token comment"># 文件重写策略</span>aof-rewrite-incremental-fsync <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>appendonly</code>：默认情况下AOF功能是关闭的，将该选项改为yes以便打开Redis的AOF功能。</p></li><li><p><code>appendfilename</code>：这个参数项很好理解了，就是AOF文件的名字。</p></li><li><p><code>appendfsync</code>：这个参数项是AOF功能最重要的设置项之一，主要用于设置“真正执行”操作命令向AOF文件中同步的策略</p><p>什么叫“真正执行”呢？还记得Linux操作系统对磁盘设备的操作方式吗？ 为了保证操作系统中I/O队列的操作效率，应用程序提交的I/O操作请求一般是被放置在linux Page Cache中的，然后再由Linux操作系统中的策略自行决定正在写到磁盘上的时机。而Redis中有一个fsync()函数，可以将Page Cache中待写的数据真正写入到物理设备上，而缺点是频繁调用这个fsync()函数干预操作系统的既定策略，可能导致I/O卡顿的现象频繁 。</p><p>与上节对应，appendfsync参数项可以设置三个值，分别是：always、everysec、no，默认的值为everysec。</p></li><li><p><code>no-appendfsync-on-rewrite</code>：always和everysec的设置会使真正的I/O操作高频度的出现，甚至会出现长时间的卡顿情况，这个问题出现在操作系统层面上，所有靠工作在操作系统之上的Redis是没法解决的。为了尽量缓解这个情况，Redis提供了这个设置项，保证在完成fsync函数调用时，不会将这段时间内发生的命令操作放入操作系统的Page Cache（这段时间Redis还在接受客户端的各种写操作命令）。</p></li><li><p><code>auto-aof-rewrite-percentage</code>：上文说到在生产环境下，技术人员不可能随时随地使用“BGREWRITEAOF”命令去重写AOF文件。所以更多时候我们需要依靠Redis中对AOF文件的自动重写策略。Redis中对触发自动重写AOF文件的操作提供了两个设置：auto-aof-rewrite-percentage表示如果当前AOF文件的大小超过了上次重写后AOF文件的百分之多少后，就再次开始重写AOF文件。例如该参数值的默认设置值为100，意思就是如果AOF文件的大小超过上次AOF文件重写后的1倍，就启动重写操作。</p></li><li><p><code>auto-aof-rewrite-min-size</code>：参考auto-aof-rewrite-percentage选项的介绍，auto-aof-rewrite-min-size设置项表示启动AOF文件重写操作的AOF文件最小大小。如果AOF文件大小低于这个值，则不会触发重写操作。注意，auto-aof-rewrite-percentage和auto-aof-rewrite-min-size只是用来控制Redis中自动对AOF文件进行重写的情况，如果是技术人员手动调用“BGREWRITEAOF”命令，则不受这两个限制条件左右。</p></li></ul><h2 id="深入理解AOF重写">深入理解AOF重写</h2><blockquote><p>AOF会记录每个写命令到AOF文件，随着时间越来越长，AOF文件会变得越来越大。如果不加以控制，会对Redis服务器，甚至对操作系统造成影响，而且AOF文件越大，数据恢复也越慢。为了解决AOF文件体积膨胀的问题，Redis提供AOF文件重写机制来对AOF文件进行“瘦身”。</p></blockquote><ul><li><strong>图例解释AOF重写</strong></li></ul><p>Redis通过创建一个新的AOF文件来替换现有的AOF，新旧两个AOF文件保存的数据相同，但新AOF文件没有了冗余命令。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-1-1676431861899-14.jpg" alt="img"></p><ul><li><p><strong>AOF重写会阻塞吗</strong>？</p><p>AOF重写过程是由后台进程bgrewriteaof来完成的。主线程fork出后台的bgrewriteaof子进程，fork会把主线程的内存拷贝一份给bgrewriteaof子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</p><p>所以aof在重写时，在fork进程时是会阻塞住主线程的。</p></li><li><p><strong>AOF日志何时会重写</strong>？</p><p>有两个配置项控制AOF重写的触发：</p><p><code>auto-aof-rewrite-min-size</code>:表示运行AOF重写时文件的最小大小，默认为64MB。</p><p><code>auto-aof-rewrite-percentage</code>: 这个值的计算方式是，当前aof文件大小和上一次重写后aof文件大小的差值，再除以上一次重写后aof文件大小。也就是当前aof文件比上一次重写后aof文件的增量大小，和上一次重写后aof文件大小的比值。</p></li><li><p><strong>重写日志时，有新数据写入咋整</strong>？</p><p>重写过程总结为：“一个拷贝，两处日志”。在fork出子进程时的拷贝，以及在重写时，如果有新数据写入，主线程就会将命令记录到两个aof日志内存缓冲区中。如果AOF写回策略配置的是always，则直接将命令写回旧的日志文件，并且保存一份命令至<code>AOF重写缓冲区</code>，这些操作对新的日志文件是不存在影响的。（旧的日志文件：主线程使用的日志文件，新的日志文件：<code>bgrewriteaof</code>进程使用的日志文件）</p><p>而在<code>bgrewriteaof</code>子进程完成会日志文件的重写操作后，会提示主线程已经完成重写操作，主线程会将AOF重写缓冲中的命令追加到新的日志文件后面。这时候在高并发的情况下，AOF重写缓冲区积累可能会很大，这样就会造成阻塞，Redis后来通过Linux管道技术让aof重写期间就能同时进行回放，这样aof重写结束后只需回放少量剩余的数据即可。</p><p>最后通过修改文件名的方式，保证文件切换的原子性。</p><p>在AOF重写日志期间发生宕机的话，因为日志文件还没切换，所以恢复数据时，用的还是旧的日志文件。</p></li></ul><p><strong>总结操作</strong>：</p><ul><li>主线程fork出子进程重写aof日志</li><li>子进程重写日志完成后，主线程追加aof日志缓冲</li><li>替换日志文件</li></ul><blockquote><p>这里的进程和线程的概念有点混乱。因为后台的bgreweiteaof进程就只有一个线程在操作，而主线程是Redis的操作进程，也是单独一个线程。这里想表达的是Redis主进程在fork出一个后台进程之后，后台进程的操作和主进程是没有任何关联的，也不会阻塞主线程。</p></blockquote><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-2-1676432308833-17.jpg" alt="img"></p><ul><li><p><strong>主线程fork出子进程的是如何复制内存数据的</strong>？</p><p>fork采用操作系统提供的写时复制（copy on write）机制，就是为了避免一次性拷贝大量内存数据给子进程造成阻塞。fork子进程时，子进程时会拷贝父进程的页表，即虚实映射关系（虚拟内存和物理内存的映射索引表），而不会拷贝物理内存。这个拷贝会消耗大量cpu资源，并且拷贝完成前会阻塞主线程，阻塞时间取决于内存中的数据量，数据量越大，则内存页表越大。拷贝完成后，父子进程使用相同的内存地址空间。</p><p>但主进程是可以有数据写入的，这时候就会拷贝物理内存中的数据。如下图（进程1看做是主进程，进程2看做是子进程）：</p><p>​<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-3-1676432355144-20.png" alt="img"></p><p>在主进程有数据写入时，而这个数据刚好在页c中，操作系统会创建这个页面的副本（页c的副本)，即拷贝当前页的物理数据，将其映射到主进程中，而子进程还是使用原来的的页c。</p></li><li><p><strong>在重写日志整个过程时，主线程有哪些地方会被阻塞</strong>？</p><ol><li>fork子进程时，需要拷贝虚拟页表，会对主线程阻塞。</li><li>主进程有bigkey写入时，操作系统会创建页面的副本，并拷贝原有的数据，会对主线程阻塞。</li><li>子进程重写日志完成后，主进程追加aof重写缓冲区时可能会对主线程阻塞。</li></ol></li><li><p><strong>为什么AOF重写不复用原AOF日志</strong>？</p><p>两方面原因：</p><ol><li>父子进程写同一个文件会产生竞争问题，影响父进程的性能。</li><li>如果AOF重写过程中失败了，相当于污染了原本的AOF文件，无法做恢复数据使用</li></ol></li></ul><h1>RDB和AOF混合方式（4.0版本)</h1><blockquote><p>Redis 4.0 中提出了一个<strong>混合使用 AOF 日志和内存快照</strong>的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。</p></blockquote><p>这样一来，快照不用很频繁地执行，这就避免了频繁 fork 对主线程的影响。而且，AOF 日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出现文件过大的情况了，也可以避免重写开销。</p><p>如下图所示，T1 和 T2 时刻的修改，用 AOF 日志记录，等到第二次做全量快照时，就可以清空 AOF 日志，因为此时的修改都已经记录到快照中了，恢复时就不再用日志了。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-rdb-4.jpg" alt="img"></p><p>这个方法既能享受到 RDB 文件快速恢复的好处，又能享受到 AOF 只记录操作命令的简单优势, 实际环境中用的很多</p><h2 id="从持久化中恢复数据">从持久化中恢复数据</h2><blockquote><p>数据的备份、持久化做完了，我们如何从这些持久化文件中恢复数据呢？如果一台服务器上有既有RDB文件，又有AOF文件，该加载谁呢？</p></blockquote><p>其实想要从这些文件中恢复数据，只需要重新启动Redis即可。我们还是通过图来了解这个流程：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-5-1676432697747-25.png" alt="img"></p><ul><li>redis重启时判断是否开启aof，如果开启了aof，那么就优先加载aof文件；</li><li>如果aof存在，那么就去加载aof文件，加载成功的话redis重启成功，如果aof文件加载失败，那么会打印日志表示启动失败，此时可以去修复aof文件后重新启动；</li><li>若aof文件不存在，那么redis就会转而去加载rdb文件，如果rdb文件不存在，redis直接启动成功；</li><li>如果rdb文件存在就会去加载rdb文件恢复数据，如加载失败则打印日志提示启动失败，如加载成功，那么redis重启成功，且使用rdb文件恢复数据；</li></ul><p>那么为什么会优先加载AOF呢？因为AOF保存的数据更完整，通过上面的分析我们知道AOF基本上最多损失1s的数据。</p><h2 id="性能与实践">性能与实践</h2><p>通过上面的分析，我们都知道RDB的快照、AOF的重写都需要fork，这是一个重量级操作，会对Redis造成阻塞。因此为了不影响Redis主进程响应，我们需要尽可能降低阻塞。</p><ul><li>降低fork的频率，比如可以手动来触发RDB生成快照、与AOF重写；</li><li>控制Redis最大使用内存，防止fork耗时过长；</li><li>使用更牛逼的硬件；</li><li>合理配置Linux的内存分配策略，避免因为物理内存不足导致fork失败。</li></ul><p>在线上我们到底该怎么做？我提供一些自己的实践经验。</p><ul><li>如果Redis中的数据并不是特别敏感或者可以通过其它方式重写生成数据，可以关闭持久化，如果丢失数据可以通过其它途径补回；</li><li>自己制定策略定期检查Redis的情况，然后可以手动触发备份、重写数据；</li><li>单机如果部署多个实例，要防止多个机器同时运行持久化、重写操作，防止出现内存、CPU、IO资源竞争，让持久化变为串行；</li><li>可以加入主从机器，利用一台从机器进行备份处理，其它机器正常响应客户端的命令；</li><li>RDB持久化与AOF持久化可以同时存在，配合使用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;为什么需要持久化&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;Redis是个基于内存的数据库。那服务一旦宕机，内存中的数据将全部丢失。通常的解决方案是从后端数据库恢复这些数据，但后端数据库有性能瓶颈，如果是大数据量的恢复  1、会对数据库带来巨大的</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>多线程基础</title>
    <link href="https://hmxyl.github.io/20221101/53471b9a.html"/>
    <id>https://hmxyl.github.io/20221101/53471b9a.html</id>
    <published>2022-10-31T22:52:00.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chapter1：快速认识线程">Chapter1：快速认识线程</h2><h3 id="继承Thread类创建线程类（模板设计模式）">继承Thread类创建线程类（模板设计模式）</h3><p>（1）定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</p><p>（2）创建Thread子类的实例，即创建了线程对象。</p><p>（3）调用线程对象的start()方法来启动该线程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token comment">// 定义Thread类的子类，并重写该类的run方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketWindow</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token constant">MAX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"柜台："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"当前的号码是："</span> <span class="token operator">+</span> index<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bankTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// step2：创建Thread子类的实例，即创建了线程对象</span>  <span class="token class-name">TicketWindow</span> ticketWindow1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token string">"一号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step3: 调用线程对象的start()方法来启动该线程</span>  ticketWindow1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TicketWindow</span> ticketWindow2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token string">"二号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TicketWindow</span> ticketWindow3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token string">"三号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TicketWindow</span> ticketWindow4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token string">"四号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过Runnable接口创建线程类（策略模式的应用）">通过Runnable接口创建线程类（策略模式的应用）</h3><p>为了将可执行的控制单元和线程控制分割开来</p><p>（1）定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</p><p>（2）创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</p><p>（3）调用线程对象的start()方法来启动该线程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TickWindowRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token constant">MAX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的号码是："</span> <span class="token operator">+</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bankTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">TickWindowRunnable</span> ticketWindowRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TickWindowRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> ticketWindow1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketWindowRunnable<span class="token punctuation">,</span> <span class="token string">"一号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> ticketWindow2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketWindowRunnable<span class="token punctuation">,</span> <span class="token string">"二号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> ticketWindow3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketWindowRunnable<span class="token punctuation">,</span> <span class="token string">"三号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> ticketWindow4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketWindowRunnable<span class="token punctuation">,</span> <span class="token string">"四号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//java8改造</span> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bankTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token constant">MAX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的号码是："</span> <span class="token operator">+</span> index<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> ticketWindow1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"一号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> ticketWindow2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"二号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> ticketWindow3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"三号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> ticketWindow4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"四号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticketWindow4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Chapter2：深入理解Thread的构造函数">Chapter2：深入理解Thread的构造函数</h2><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Thread()</td><td>Allocates a new Thread object.</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Thread(Runnable target)</td><td>Allocates a new Thread object.</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Thread(Runnable target, String name)</td><td>Allocates a new Thread object.</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">Thread(String name)</td><td>Allocates a new Thread object.</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">Thread(ThreadGroup group, Runnable  target)</td><td>Allocates a new Thread object.</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">Thread(ThreadGroup group, Runnable  target, String name)</td><td>Allocates a new Thread object so that it has target as its run object,  has the specified name as its name, and belongs to the thread group referred  to by group.</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">Thread(ThreadGroup group, Runnable  target, String name, long stackSize)</td><td>Allocates a new Thread object so that it has target as its run object,  has the specified name as its name, and belongs to the thread group referred  to by group, and has the specified stack size.</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">Thread(ThreadGroup group, String  name)</td><td>Allocates a new Thread object.</td></tr></tbody></table><h3 id="Thread命名">Thread命名</h3><ol><li><p>默认线程名称，按照编号，从0开始递增。线程一旦启动，线程名不可再进行更改。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Thread和ThreadGroup">Thread和ThreadGroup</h3><ol><li>main线程所在的ThreadGroup称为main</li><li>构造一个线程如果没有显示的指定ThreadGroup，他将和父线程在同一个ThreadGroup</li></ol><h3 id="Thread和stackSize">Thread和stackSize</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 测试默认栈深度 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStack</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">recur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStackDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">recur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈最大深度："</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TestStack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">getStackDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>结果：<span class="token number">18368</span>  # 查看配置jinfo <span class="token operator">-</span>flag <span class="token class-name">ThreadStackSize</span>  <span class="token number">16320</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="守护线程">守护线程</h3><p>设置守护线程的方法很简单，调用<strong>setDaemon</strong>方法即可，true代表守护线程，false代表正常线程。</p><p>线程是否为守护线程和它的父线程有很大的关系，如果父线程是正常线程，则子线程也是正常线程，反之亦然，如果你想要修改它的特性则可以借助方法。<br><strong>isDaemon</strong>方法可以判断该线程是不是守护线程。</p><p>另外需要注意的就是，<strong>setDaemon方法只在线程启动之前才能生效</strong>，如果一个线程已经死亡，那么再设置setDaemon则会抛出<strong>IllegalThreadStateException</strong>异常。</p><h2 id="Chapter3：-Thread-API">Chapter3： Thread API</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 设置线程名称</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span> <span class="token comment">// 设置线程优先级</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="join">join()</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 主线程等待线程threadTest1、threadTest2执行完成</span><span class="token comment">// threadTest1、threadTest2 交替执行</span>threadTest1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>threadTest2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以下写法，main 线程等待main 线程结束，所有程序一直处于等待状态，无法终止。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="interrupt">interrupt()</h3><p>如下方法的调用会使得当前线程进人阻塞状态，而调用当前线程的interrupt方法，就可以打断阻塞。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述若干方法都会使得当前线程进人阻塞状态，若另外的一个线程调用被阻塞线程的<strong>interrupt</strong>方法，则会打断这种阻塞，因此这种方法有时会被称为可中断方法。</p><p>==打断一个线程并不等于该线程的生命周期结束，仅仅是打断了当前线程的阻塞状态==。</p><p>一旦线程在阻塞的情况下被打断，都会抛出一个称为<strong>InterruptedException</strong>的异常，这个异常就像一个signal（信号）一样通知当前线程被打断了。</p><h3 id="合理关闭一个线程">合理关闭一个线程</h3><ol><li><p>利用中断信号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I will start work."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// working</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I will be exiting."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"System will be shutdown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用Volatile开关变量控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopThread</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> shutdown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I will start work."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>shutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// working</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I will be exiting."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>shutdown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"System will be shutdown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>耗时时间过长，强制退出线程（将执行程序设置为守护线程）</p><ul><li>使用执行线程的守护线程执行程序任务</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadService</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">Thread</span> executeThead<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> finished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    executeThead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        runner<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        runner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment">// 等待runner执行完成</span>          runner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 执行被打断</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务的守护线程被打断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    executeThead<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">long</span> miles<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>finished<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentTime <span class="token operator">&gt;=</span> miles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务超时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executeThead<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 短暂休眠，减少执行次数</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行线程被打断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用执行线程</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCloseForce</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ThreadService</span> threadService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动执行线程</span>    threadService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 模拟线程阻塞</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 超时验证</span>    threadService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行结果</li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">执行任务超时10117执行任务的守护线程被打断java.lang.InterruptedExceptionat java.lang.Object.wait(Native Method)at java.lang.Thread.join(Thread.java:1252)at java.lang.Thread.join(Thread.java:1326)at com.hots.part1.chapter3.ThreadService$1.run(ThreadService.java:16)Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Chapter4：线程安全与数据同步">Chapter4：线程安全与数据同步</h2><h3 id="synchronized关键字">synchronized关键字</h3><blockquote><p>使用synchronized需要注意的问题</p><ol><li><p>与monitor关联的对象不可为空</p></li><li><p>synchronized的作用域不可太大（降低执行效率）</p></li><li><p>不同的monitor企图锁住相同的方法</p></li><li><p>多个锁导致死锁</p></li></ol></blockquote><h3 id="this-monitor-和-class-monitor"><code>this</code> monitor 和 <code>class</code> monitor</h3><ol><li><p>使用synchronized同步一个类的不同方法，争抢的是同一个锁（方法所属的对象的锁）：synchronied(this)</p><p>官方说明：</p><pre class="line-numbers language-none"><code class="language-none">When a thread invokes a synchronized method, it automatically acquires the intrinsic lock for that method's object and releases it when the method returns. The lock release occurs even if the return vas caused by an uncaught exception.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用synchronized同步一个类的不同静态方法，争抢的是同一个锁（类的<strong>class锁</strong>）：synchronied(Test.class)</p><p>官方说明：</p><pre class="line-numbers language-none"><code class="language-none">since a static method is associated with a class, not an object.In this case, the thread acquires the intrinsic lock for the Class object associated with the class. Thus access to class'S static fields is controlled by a lock that's distinct from the lock for any instance of the class.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Chapter5：线程之间的通信">Chapter5：线程之间的通信</h2><p>wait 、notify、notifyAll</p><h3 id="wait-和-sleep和区别">wait 和 sleep和区别</h3><p>从表面上看，wait和sleep方法都可以使当前线程进人阻塞状态，但是两者之间存在着本质的区别，下面我们将总结两者的区别和相似之处</p><ul><li>wait和sleep方法都可以使线程进人阻塞状态</li><li>wait和sleep方法均是可中断方法，被中断后都会收到中断异常。</li><li><strong>wait是Object的方法，而sleep是Thread特有的方法</strong></li><li>wait方法的执行必须在同步方法中进行，而sleep则不需要。</li><li>线程在同步方法中执行sleep方法时，并不会释放的锁，而wait方法则会释放monitor的锁</li><li>sleep方法短暂休眠之后会主动退出阻塞，而wait方法（没有指定wait时间）则需要被其他线程中断后才能退出阻塞。</li></ul><h3 id="单线程通信">单线程通信</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerAndConsumerVersion1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isProduced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">LOCK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduced<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：produced-&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isProduced <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduced<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：consumed-&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isProduced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ProducerAndConsumerVersion1</span> producerAndConsumerVersion1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerAndConsumerVersion1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"P1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    producerAndConsumerVersion1<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"C1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    producerAndConsumerVersion1<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程通信">多线程通信</h3><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211227170019463.png" alt="image-20211227170019463"></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211227170133400.png" alt="image-20211227170133400"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Demo */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerAndConsumerVersion3</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isProduced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">LOCK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>isProduced<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：wait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：produced-&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            isProduced <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isProduced<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：wait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：consumed-&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            isProduced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ProducerAndConsumerVersion3</span> producerAndConsumerVersion3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerAndConsumerVersion3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"P1"</span><span class="token punctuation">,</span> <span class="token string">"P2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        producerAndConsumerVersion3<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"C1"</span><span class="token punctuation">,</span> <span class="token string">"C2"</span><span class="token punctuation">,</span> <span class="token string">"C3"</span><span class="token punctuation">,</span> <span class="token string">"C4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        producerAndConsumerVersion3<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义显示锁">自定义显示锁</h3><ol><li>Lock接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> mills<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBlockedThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getBlockedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">TimeoutException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接口实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooleanLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> initValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> currentThread<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> blockedThreadCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>initValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            blockedThreadCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        initValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockedThreadCollection<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> mills<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mills <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> waitMills <span class="token operator">=</span> mills<span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> waitMills<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>initValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>waitMills <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" waiting timeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 重新设置等待时间</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>waitMills<span class="token punctuation">)</span><span class="token punctuation">;</span>            waitMills <span class="token operator">=</span> endTime <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> currentThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>            initValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" release the monitor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBlockedThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableCollection</span><span class="token punctuation">(</span>blockedThreadCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBlockedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> blockedThreadCollection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>调用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooleanLockTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">BooleanLock</span> booleanLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BooleanLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"W1"</span><span class="token punctuation">,</span> <span class="token string">"W2"</span><span class="token punctuation">,</span> <span class="token string">"W3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            booleanLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">5_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" got the lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">Lock<span class="token punctuation">.</span>TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                            booleanLock<span class="token punctuation">.</span><span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is working..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Chapter6：Thread-Group">Chapter6：Thread Group</h2><h3 id="Thread-与-ThreadGroup">Thread 与 ThreadGroup</h3><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211228162829691.png" alt="image-20211228162829691"></p><h3 id="基本操作">基本操作</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>activeCount()</td><td>用于获取group中活跃的线程，这只是个估计值，并不能百分之百地保证数字一定正确，原因前面已经分析过，该方法会递归获取其他子group中的活跃线程。</td></tr><tr><td>activeGroupCount()</td><td>用于获取group中活跃的子group，这也是一个近似估值，该方法也会递归获取所有的子group。</td></tr><tr><td>getMaxPriority()</td><td>用于获取group的优先级，默认情况下，Group的优先级为10，在该group中，所有线程的优先级都不能大于group的优先级</td></tr><tr><td>getName()</td><td>用于获取group的名字。</td></tr><tr><td>getParent()</td><td>用于获取group的父group，如果父group不存在，则会返回null，比如systemgroup的父group就为null。</td></tr><tr><td>list()</td><td>该方法没有返回值，执行该方法会将group中所有的活跃线程信息全部输出到控制台，也就是System.out0</td></tr><tr><td>parentOf(ThreadGroup g)</td><td>会判断当前group是不是给定group的父group，另外如果给定的group就是自己本身，那么该方法也会返回true。</td></tr><tr><td>setMaxPriority(int pri)</td><td>会指定group的最大优先级，最大优先级不能超过父group的最大优先级，执行该方法不仅会改变当前group的最大优先级，还会改变所有子group的最大优先级</td></tr></tbody></table><h3 id="守护ThreadGroup">守护ThreadGroup</h3><p><code>public final void setDaemon(boolean daemon)</code></p><pre class="line-numbers language-none"><code class="language-none">First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception.A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Demo */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadGroupApi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadGroup</span> tg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tg1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"group1-t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadGroup</span> tg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tg2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"group2-t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tg2<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tg1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> tg1<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tg2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> tg2<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>              tg1<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示销毁</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tg1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> tg1<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tg2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> tg2<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Chapter7：Hook线程以及捕获线程执行异常">Chapter7：Hook线程以及捕获线程执行异常</h2><h3 id="获取线程运行时异常">获取线程运行时异常</h3><h4 id="处理Thread运行时异常API，有四个">处理Thread运行时异常API，有四个</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public static void  <strong>setDefaultUncaughtExceptionHandler</strong>(Thread.UncaughtExceptionHandler eh)</td><td>设置全局的UncaughtExceptionHandler</td></tr><tr><td>public static  Thread.UncaughtExceptionHandler <strong>getDefaultUncaughtExceptionHandler</strong>()</td><td>获取全局的UncaughtExceptionHandler</td></tr><tr><td>public void  setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)</td><td>为某个特定线程指定UncaughtExceptionHandler</td></tr><tr><td>public Thread.UncaughtExceptionHandler  getUncaughtExceptionHandler()</td><td>获取某个特定线程指定UncaughtExceptionHandler</td></tr></tbody></table><p>其中UncaughtExceptionHandler 是一个FunctionalInterface接口，仅包含一个抽象方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UncaughtExceptionHandler</span> <span class="token punctuation">{</span>  <span class="token comment">/**         * Method invoked when the given thread terminates due to the         * given uncaught exception.         * &lt;p&gt;Any exception thrown by this method will be ignored by the         * Java Virtual Machine.         * @param t the thread         * @param e the exception         */</span>  <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该回调接口会被<code>Thread</code>和<code>dispatchUncaughtException</code>调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Dispatch an uncaught exception to the handler. This method is * intended to be called only by the JVM. */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispatchUncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UncaughtExceptionHandler实例">UncaughtExceptionHandler实例</h4><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaptureThreadException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 设置回调接口</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">setDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ----- occur exception："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 2. 抛出运行时异常</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Thread-0 ----- occur exception：/ by zerojava.lang.ArithmeticException: / by zeroat com.hots.chapter7.CaptureThreadException.lambda<span class="token variable">$main</span><span class="token variable">$1</span><span class="token punctuation">(</span>CaptureThreadException.java:20<span class="token punctuation">)</span>at java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:748<span class="token punctuation">)</span>Process finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UncaughtExceptionHandler源码分析">UncaughtExceptionHandler源码分析</h4><ol><li><p>获取Thread的UncaughtExceptionHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispatchUncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Thread未设置UncaughtExceptionHandler，则找ThreadGroup获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">UncaughtExceptionHandler</span> <span class="token function">getUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> uncaughtExceptionHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>    uncaughtExceptionHandler <span class="token operator">:</span> group<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ThreadGroup 是 Thread.UncaughtExceptionHandler 的实现类</p></blockquote></li><li><p>ThreadGroup的uncaughtException</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>parent<span class="token punctuation">.</span><span class="token function">uncaughtException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父ThreadGroup的uncaughtException</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token class-name">Thread<span class="token punctuation">.</span>UncaughtExceptionHandler</span> ueh <span class="token operator">=</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">getDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ueh <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ueh<span class="token punctuation">.</span><span class="token function">uncaughtException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用全局默认的UncaughtExceptionHandler</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ThreadDeath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Exception in thread \""</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将异常的堆栈信息定向到System.err中</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="mermaid">   graph LR   A[线程异常] --&gt;  B(MainGroup) --&gt; C(System Group) --&gt; D[System.err]</pre><h3 id="注入Hook线程">注入Hook线程</h3><h4 id="Hook线程概念">Hook线程概念</h4><p>JVM进程的退出是由于JVM进程中没<strong>有活跃的非守护线程</strong>，或者收到了<strong>系统中断信号</strong>。</p><p><strong>向JVM程序注入一个Hook线程，在JVM进程退出的时候，Hook线程会启动执行。</strong></p><p>通过Runtime可以为JVM注人多个Hook线程。</p><h4 id="Linux-模拟Hook简单调用">Linux 模拟Hook简单调用</h4><p>==Runtime.getRuntime().addShutdownHook(Thread hook));==</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># mkdir /root/java</span><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># vi ExitCapture.java #内容如下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExitCapture</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" exiting......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 进程down之前的安全处理措施</span><span class="token function">notifyAndRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" working...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">notifyAndRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" notify other matchine and release resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"finish exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># javac ExitCapture.java</span><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># java ExitCapture</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p># 后台运行，日志记录到nohup.out文件</p><p>nohup java -cp . ExitCapture &amp;</p></blockquote><p>10秒后程序退出 / Ctrl+C 退出程序 / kill 进程号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># java ExitCapture  </span>main working<span class="token punctuation">..</span><span class="token punctuation">..</span>main working<span class="token punctuation">..</span><span class="token punctuation">..</span>main working<span class="token punctuation">..</span><span class="token punctuation">..</span>main working<span class="token punctuation">..</span><span class="token punctuation">..</span>main working<span class="token punctuation">..</span><span class="token punctuation">..</span>main working<span class="token punctuation">..</span><span class="token punctuation">..</span>^CThread-0 exiting<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Thread-0 notify other matchine and release resourcemain working<span class="token punctuation">..</span><span class="token punctuation">..</span>Thread-0finish exit.<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Exit <span class="token number">1</span>              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>kill -9 进程号 会直接退出，钩子程序不会执行。</p></blockquote><h4 id="Hook线程实际应用举例">Hook线程实际应用举例</h4><p>在我们的开发中经常会遇到Hook线程，比如为了防止某个程序被重复启动，在进程启动时会创建一个文件，进程收到中断信号的时候会删除这个lock文件，我们在MySQL服务器、zookeeper、kafka等系统中都能看到lock文件的存在。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreventDuplicated</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOCK_PATH</span> <span class="token operator">=</span> <span class="token string">"E:\\Downloads"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOCK_FILE</span> <span class="token operator">=</span> <span class="token string">".lock"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PERMISSIONS</span> <span class="token operator">=</span> <span class="token string">"rw-------"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 程序退出，删除lock文件</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deal program shutdown..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">getLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断Lock文件，存在，抛重复执行异常，不存在继续</span>        <span class="token function">checkLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//程序执行</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token function">getLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"The program already running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Path</span> <span class="token function">getLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">LOCK_PATH</span><span class="token punctuation">,</span> <span class="token constant">LOCK_FILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Chapter8：线程池原理以及自定义线程池">Chapter8：线程池原理以及自定义线程池</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * 线程池模拟类  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleThreadPool</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment">/* 线程池现有容量：包含FREE, RUNNING, BLOCKED 三种状态的线程 */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> poolSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> seq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">THREAD_PREFIX</span> <span class="token operator">=</span> <span class="token string">"SIMPLE_THREAD_POOL-"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueSize<span class="token punctuation">;</span>    <span class="token comment">/* 默认TASK_QUEUE的阈值 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_TASK_QUEUE_SIZE</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token constant">TASK_QUEUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ThreadGroup</span> <span class="token constant">GROUP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"Pool_Group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyThread</span><span class="token punctuation">&gt;</span></span> <span class="token constant">THREAD_QUEUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DiscardPolicy</span> discardPolicy<span class="token punctuation">;</span>    <span class="token comment">// 线程池，无能力处理，策略</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">DiscardPolicy</span> <span class="token constant">DEFAULT_DISCARD_POLICY</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DiscardException</span><span class="token punctuation">(</span><span class="token string">"Discard this task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 线程池，销毁标记</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> destroy <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> minPoolSize<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MIN_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> activePoolSize<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_ACTIVE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxPoolSize<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SimpleThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_MIN_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_ACTIVE_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_MAX_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_TASK_QUEUE_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_DISCARD_POLICY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">SimpleThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> minPoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> activePoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxPoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> queueSize<span class="token punctuation">,</span> <span class="token class-name">DiscardPolicy</span> discardPolicy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minPoolSize <span class="token operator">=</span> minPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activePoolSize <span class="token operator">=</span> activePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolSize <span class="token operator">=</span> maxPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queueSize <span class="token operator">=</span> queueSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>discardPolicy <span class="token operator">=</span> discardPolicy<span class="token punctuation">;</span>        <span class="token comment">// 初始化，最小容量线程池</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minPoolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">createMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 自定义线程池，同时也是一个线程，可以根据工作量，自动调整容量</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token constant">THREAD_PREFIX</span> <span class="token operator">+</span> <span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token constant">GROUP</span><span class="token punctuation">,</span> <span class="token constant">THREAD_PREFIX</span> <span class="token operator">+</span> <span class="token punctuation">(</span>seq<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取线程池大小：每次线程池，新增/销毁线程的时候，调用     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>poolSize <span class="token operator">=</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 线程池，根据工作量，自动调整容量     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>destroy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 扩展线程池</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> activePoolSize <span class="token operator">&amp;&amp;</span> poolSize <span class="token operator">&lt;</span> activePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> poolSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> activePoolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">createMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The pool increased to activePoolSize."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxPoolSize <span class="token operator">&amp;&amp;</span> poolSize <span class="token operator">&lt;</span> maxPoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> poolSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxPoolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">createMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The pool increased to maxPoolSize."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 缩减线程池</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">THREAD_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span>taskStatus <span class="token operator">==</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>                        <span class="token operator">&amp;&amp;</span> poolSize <span class="token operator">&gt;</span> activePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> releaseCount <span class="token operator">=</span> poolSize <span class="token operator">-</span> activePoolSize<span class="token punctuation">;</span>                    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyThread</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>releaseCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        myThread<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        myThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">--</span>releaseCount<span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" had been released"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---- is dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 等待现有线程池中任务执行完成</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span>taskStatus <span class="token operator">==</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">THREAD_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 进行关停销毁</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The pool is ready to destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyThread</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>myThread<span class="token punctuation">.</span>taskStatus <span class="token operator">==</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">BLOCKED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// waiting中的线程</span>                    myThread<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    myThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The thread pool disposed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            destroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All threads had been destroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>destroy<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"The thread pool already destroy and not allow submit task."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> queueSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 处理能力之外的任务，处理措施</span>                discardPolicy<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DiscardPolicy</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DiscardException</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">DiscardException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TaskStatus</span> <span class="token punctuation">{</span>        <span class="token constant">FREE</span><span class="token punctuation">,</span> <span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token constant">BLOCKED</span><span class="token punctuation">,</span> <span class="token constant">DEAD</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">TaskStatus</span> taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">FREE</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token constant">OUTER</span><span class="token operator">:</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">!=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">DEAD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment">// 任务队列为空，线程等待，让出monitor</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">BLOCKED</span><span class="token punctuation">;</span>                            <span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// 任务队列存入数据，被唤醒，重新抢锁处理</span>                            <span class="token keyword">break</span> <span class="token constant">OUTER</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    runnable <span class="token operator">=</span> <span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>runnable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">;</span>                    runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">FREE</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">DEAD</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * 线程池测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">SimpleThreadPool</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                                <span class="token keyword">try</span> <span class="token punctuation">{</span>                                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">" be serviced by "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Thread.sleep(10_000);</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Chapter1：快速认识线程&quot;&gt;Chapter1：快速认识线程&lt;/h2&gt;
&lt;h3 id=&quot;继承Thread类创建线程类（模板设计模式）&quot;&gt;继承Thread类创建线程类（模板设计模式）&lt;/h3&gt;
&lt;p&gt;（1）定义Thread类的子类，并重写该类的run方法，该ru</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://hmxyl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发包</title>
    <link href="https://hmxyl.github.io/20221101/3c508c34.html"/>
    <id>https://hmxyl.github.io/20221101/3c508c34.html</id>
    <published>2022-10-31T22:52:00.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Atomic包</h1><h2 id="CAS-Compare-And-Swap-：比较并交换">CAS(Compare And Swap)：比较并交换</h2><p><code>CAS</code>即<code>Compare And Swap</code>的缩写，翻译成中文就是<strong>比较并交换</strong>，其作用是让CPU比较内存中某个值是否和预期的值相同，如果相同则将这个值更新为新值，不相同则不做更新，也就是CAS是<strong>原子性</strong>的操作(读和写两者同时具有原子性)，其实现方式是通过借助<code>C/C++</code>调用CPU指令完成的，所以效率很高。(使用的是最快失败策略)<br><code>CAS</code>的原理很简单，这里使用一段<code>Java</code>代码来描述</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果内存中的值value和期望值expect一样 则将值更新为新值update</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> expect<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> update<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致过程是将内存中的值、我们的期望值、新值交给CPU进行运算，如果内存中的值和我们的期望值相同则将值更新为新值，否则不做任何操作。这个过程是在CPU中完成的，这里不好描述CPU的工作过程，就拿Java代码来描述了。</p><h3 id="Unsafe源码分析">Unsafe源码分析</h3><p>​    Java是在<code>Unsafe(sun.misc.Unsafe)</code>类实现<code>CAS</code>的操作，而我们知道Java是无法直接访问操作系统底层的API的（原因是Java的跨平台性限制了Java不能和操作系统耦合），所以Java并没有在<code>Unsafe</code>类直接实现<code>CAS</code>的操作，而是通过**JDI(Java Native Interface)**本地调用<code>C/C++</code>语言来实现<code>CAS</code>操作的。</p><p><code>Unsafe</code>有很多个<code>CAS</code>操作的相关方法，这里举例几个</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token class-name">Object</span> var4<span class="token punctuation">,</span> <span class="token class-name">Object</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> <span class="token keyword">int</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">long</span> var4<span class="token punctuation">,</span> <span class="token keyword">long</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们拿<code>public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);</code>进行分析</p><p>这个方法是比较内存中的一个值（整型）和我们的期望值（var4）是否一样，如果一样则将内存中的这个值更新为<code>var5</code>，参数中的<code>var1</code>是值所在的对象，<code>var2</code>是值在对象(var1)中的内存偏移量，<strong>参数var1和参数var2是为了定位出值所在内存的地址</strong>。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/7126254-55d47d5ebef3b1e2-16380810237142.webp" alt="img"></p><p><strong>Unsafe.java在这里发挥的作用有：</strong></p><ol><li>将对象引用、值在对象中的偏移量、期望的值和欲更新的新值传递给<code>Unsafe.cpp</code></li><li>如果值更新成功则返回<code>true</code>给开发者，没有更新则返回<code>false</code></li></ol><p><strong>Unsafe.cpp在这里发挥的作用有：</strong></p><ol><li>接受从<code>Unsafe</code>传递过来的对象引用、偏移量、期望的值和欲更新的新值，根据对象引用和偏移量<strong>计算出值的地址</strong>，然后将值的地址、期望的值、欲更新的新值传递给CPU</li><li>如果值更新成功则返回<code>true</code>给<code>Unsafe.java</code>，没有更新则返回<code>false</code></li></ol><p><strong>CPU在这里发挥的作用：</strong></p><ol><li>接受从<code>Unsafe.cpp</code>传递过来的地址、期望的值和欲更新的新值，执行指令<code>cmpxchg</code>，比较地址中的值是否和期望的值一样，一样则将值更新为新的值，不一样则不做任何操作</li><li>将操作结果返回给<code>Unsafe.cpp</code></li></ol><h3 id="CAS的缺点：ABA">CAS的缺点：ABA</h3><p><strong><code>ABA</code>说明</strong></p><blockquote><p>在多线程场景下<code>CAS</code>会出现<code>ABA</code>问题，关于ABA问题这里简单科普下，例如有2个线程同时对同一个值(初始值为A)进行CAS操作，这三个线程如下</p><ol><li>线程1，期望值为A，欲更新的值为B</li><li>线程2，期望值为A，欲更新的值为B</li><li>线程3，期望值为B，欲更新的值为A</li></ol><p>线程<code>1</code>抢先获得CPU时间片，而线程<code>2</code>因为其他原因阻塞了；线程<code>1</code>取值与期望的A值比较，发现相等然后将值更新为B；</p><p>这个时候<strong>出现了线程<code>3</code></strong>，线程3取值与期望的值B比较，发现相等则将值更新为A；</p><p>此时线程<code>2</code>从阻塞中恢复，并且获得了CPU时间片，这时候线程<code>2</code>取值与期望的值A比较，发现相等则将值更新为B</p><p>虽然线程<code>2</code>也完成了操作，但是线程<code>2</code>并不知道值已经经过了<code>A-&gt;B-&gt;A</code>的变化过程。</p></blockquote><p><strong><code>ABA</code>问题带来的危害</strong></p><blockquote><p>小明在提款机，提取了50元，因为提款机问题，有两个线程，同时把余额从100变为50</p><ul><li><p>线程1（提款机）：获取当前值100，期望更新为50，</p></li><li><p>线程2（提款机）：获取当前值100，期望更新为50，</p></li></ul><p>线程1成功执行，线程2某种原因block了，这时，某人给小明汇款50</p><ul><li>线程3（某人）：获取当前值50，期望更新为100，</li></ul><p>这时候线程3成功执行，余额变为100，<br>线程2从Block中恢复，获取到的也是100，compare之后，继续更新余额为50</p><p><strong>此时可以看到，实际余额应该为100（100-50+50），但是实际上变为了50（100-50+50-50）这就是ABA问题带来的成功提交。</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAtomicReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Integer</span> moneyTotal <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token class-name">AtomicInteger</span> money <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>moneyTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    money<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    money<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    money<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出50，钱数错误</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">50</span>）<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">100</span>）<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">50</span>）<span class="token punctuation">.</span><span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>ABA</code>问题解决：AtomicStampedReference</strong></p><p><strong>解决方法</strong>： 在变量前面加上版本号（int），每次变量更新的时候变量的<strong>版本号都<code>+1</code></strong>，即<code>A-&gt;B-&gt;A</code>就变成了<code>1A-&gt;2B-&gt;3A</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAtomicStampedReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> stamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Integer</span> moneyTotal <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token class-name">AtomicStampedReference</span> money <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token punctuation">(</span>moneyTotal<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// step1：取款50</span>    <span class="token keyword">final</span> <span class="token class-name">Integer</span> moneyStep1 <span class="token operator">=</span> moneyTotal <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>moneyTotal<span class="token punctuation">,</span> moneyStep1<span class="token punctuation">,</span> stamp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stamp<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新失败（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>moneyTotal<span class="token punctuation">,</span> moneyStep1<span class="token punctuation">,</span> stamp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stamp<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新失败（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// step2. 他人转入50</span>    <span class="token keyword">final</span> <span class="token class-name">Integer</span> moneyStep2 <span class="token operator">=</span> moneyStep1 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>moneyStep1<span class="token punctuation">,</span> moneyStep2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-最终（%d）:%d.\n"</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出<span class="token constant">T1</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">50</span>）<span class="token operator">:</span><span class="token number">1.</span><span class="token constant">T3</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">100</span>）<span class="token operator">:</span><span class="token number">2.</span><span class="token constant">T2</span><span class="token operator">-</span>更新失败（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">100</span>）<span class="token operator">:</span><span class="token number">2.</span>main<span class="token operator">-</span>最终（<span class="token number">100</span>）<span class="token operator">:</span><span class="token number">2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CAS的缺点：循环时间长开销大">CAS的缺点：循环时间长开销大</h3><p>如果<code>CAS</code>操作失败，就需要循环进行<code>CAS</code>操作(循环同时将期望值更新为最新的)，如果长时间都不成功的话，那么会造成CPU极大的开销。</p><blockquote><p>这种循环也称为自旋</p></blockquote><p><strong>解决方法</strong>： 限制自旋次数，防止进入死循环。</p><h3 id="CAS的缺点：只能保证一个共享变量的原子操作">CAS的缺点：只能保证一个共享变量的原子操作</h3><p><code>CAS</code>的原子操作只能针对一个共享变量。</p><p><strong>解决方法</strong>： 如果需要对多个共享变量进行操作，可以使用加锁方式(悲观锁)保证原子性，或者可以把多个共享变量合并成一个共享变量进行<code>CAS</code>操作。</p><h3 id="CAS的应用">CAS的应用</h3><p>我们知道<code>CAS</code>操作并不会锁住共享变量，也就是一种<strong>非阻塞</strong>的同步机制，<code>CAS</code>就是乐观锁的实现。</p><ol><li><strong>乐观锁</strong>总是假设最好的情况，每次去操作数据都认为不会被别的线程修改数据，<strong>所以在每次操作数据的时候都不会给数据加锁</strong>，即在线程对数据进行操作的时候，<strong>别的线程不会阻塞</strong>仍然可以对数据进行操作，只有在需要更新数据的时候才会去判断数据是否被别的线程修改过，如果数据被修改过则会拒绝操作并且返回错误信息给用户。</li><li><strong>悲观锁</strong>总是假设最坏的情况，每次去操作数据时候都认为会被的线程修改数据，<strong>所以在每次操作数据的时候都会给数据加锁</strong>，让别的线程无法操作这个数据，别的线程会一直阻塞直到获取到这个数据的锁。这样的话就会影响效率，比如当有个线程发生一个很耗时的操作的时候，别的线程只是想获取这个数据的值而已都要等待很久。</li></ol><p><code>Java</code>利用<code>CAS</code>的乐观锁、原子性的特性高效解决了多线程的安全性问题，例如JDK1.8中的集合类<code>ConcurrentHashMap</code>、关键字<code>volatile</code>、<code>ReentrantLock</code>等。</p><h2 id="AtomicLong">AtomicLong</h2><ul><li><p>区别于AtomicInteger：VM_SUPPORTS_LONG_CAS：虚拟机是否支持 CAS 操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Records whether the underlying JVM supports lockless * compareAndSwap for longs. While the Unsafe.compareAndSwapLong * method works in either case, some constructions should be * handled at Java level to avoid locking user-visible locks. */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">VM_SUPPORTS_LONG_CAS</span> <span class="token operator">=</span> <span class="token class-name">VMSupportsCS8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** * Returns whether underlying JVM supports lockless CompareAndSet * for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS. */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token class-name">VMSupportsCS8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="AtomicReference">AtomicReference</h2><p>reference的地址为int类型</p><h2 id="AtomicXXXFieldUpdater">AtomicXXXFieldUpdater</h2><p>使用AtomicXXXFieldUpdater的原因：</p><ul><li><p>想让类的操作属性具备原子性的条件</p><ol><li>类的属性是volatile（ Must be volatile type）</li><li>==非当前类调用，则非private、protected==</li><li>类型必须一致</li></ol></li><li><p>不想使用锁（包括显示锁、重量级锁Synchronized）</p></li><li><p>大量需要原子类型修饰的对象，比较消耗资源</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerFieldUpdaterTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestBean</span><span class="token punctuation">&gt;</span></span> updater <span class="token operator">=</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">TestBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"param"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TestBean</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updater<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updater<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">TestBean</span> <span class="token punctuation">{</span>        <span class="token comment">// 非本类调用，param 不可设置未private、protected</span>        <span class="token keyword">volatile</span> <span class="token keyword">int</span> param<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Unsafe">Unsafe</h2><p>​ java 调用C++/C 再 调用汇编</p><h3 id="几种Counter方案的性能对比。">几种Counter方案的性能对比。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span><span class="token class-name">Unsafe</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THREAD_COUNT</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_NUM</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VolatileCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Volatile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Executors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SynCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Sync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LockCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CasCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Cas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span><span class="token punctuation">&gt;</span></span> action <span class="token operator">=</span> param <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token constant">THREAD_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">THREAD_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CounterRunnable</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token constant">MAX_NUM</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 不可省略，需要等待执行线程运行结束</span>                <span class="token comment">// 一般情况下awaitTermination和shutdown配合使用，shutdown之后调用awaitTermination</span>                <span class="token comment">// 如果注释掉shutdown方法，则awaitTermination不会监视到线程池关闭的信息 所以在这个地方代码会堵塞，</span>                <span class="token comment">// 如果注释掉awaitTermination方法，则后面的代码不会得到线程执行过的结果</span>                executorService<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> action<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 统计运行时长     *     * @param action     * @param counter     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name">Counter</span> counter<span class="token punctuation">,</span> <span class="token class-name">String</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 任务执行</span>        action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tag <span class="token operator">+</span> <span class="token string">" counter result: "</span> <span class="token operator">+</span> counter<span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and time passed in ms: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">VolatileCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> counter<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>counter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AtomicCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>counter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LockCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>counter<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CasCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">CasCounter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> expect <span class="token operator">=</span> counter<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> expect <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                expect <span class="token operator">=</span> counter<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Field</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                unsafe<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CounterRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Counter</span> counter<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token class-name">CounterRunnable</span><span class="token punctuation">(</span><span class="token class-name">Counter</span> counter<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">=</span> counter<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Volatile</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">177</span><span class="token class-name">Executors</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">183</span><span class="token class-name">Sync</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">1111</span><span class="token class-name">Lock</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">204</span><span class="token class-name">Cas</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">114</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Java-调用-C-流程（JNI-）">Java 调用 C 流程（JNI ）</h3><ol><li><p>创建目录<code>jni</code></p></li><li><p>创建文件<code>Hello.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token comment">// 加载动态链接库</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 本地方法</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译Java文件<code>javac Hello.java</code></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222105628308-1667231117133-83.png" alt="image-20220222105628308"></p></li><li><p>使用命令<code>javah -jni Hello</code>生成头文件<code>Hello.h</code>（C的header文件）</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222105835195-1667231117133-84.png" alt="image-20220222105835195"></p><p>Hello.h内容如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">/* DO NOT EDIT THIS FILE - it is machine generated */#include &lt;jni.h&gt;/* Header for class Hello */#ifndef _Included_Hello#define _Included_Hello#ifdef __cplusplusextern "C" {#endif/* * Class:     Hello * Method:    hi * Signature: ()V */JNIEXPORT void JNICALL Java_Hello_hi  (JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写C程序：<code>Hello.c</code>，也就是上面header文件中方法的实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Hello.h"</span></span>JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_Hello_hi</span> <span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span> env<span class="token punctuation">,</span> jobject o<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Say hi.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看<code>ls -l $JAVA_HOME/include</code></p></li><li><p>编译C文件<code>gcc -fPIC  -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" -c Hello.c</code>，生成了<code>Hello.o</code>的目标文件</p></li><li><p>生成"hello" 的动态链接库 <code>gcc -shared Hello.o -o libhello.so</code>， 生成了<code>libhello.so</code>（<code>lib</code> 是linux约定俗成的前缀）</p></li><li><p>运行java文件：<code>java Hello</code>，报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>UnsatisfiedLinkError</span><span class="token operator">:</span> no hello in java<span class="token punctuation">.</span>library<span class="token punctuation">.</span>pathat <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassLoader</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1867</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">870</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1122</span><span class="token punctuation">)</span>at <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置<code>java.library.path</code>. 临时生效：<code>export LD_LIBRARY_PATH=.</code></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222113453875-1667231117133-86.png" alt="image-20220222113453875"></p></li><li><p>重新运行：<code>java Hello</code></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222113625291-1667231117133-85.png" alt="image-20220222113625291"></p></li></ol><h2 id="底层汇编相关指令">底层汇编相关指令</h2><blockquote><p>compareAndSwapInt -&gt; cmpxchg1</p><p>compareAndSwapLong -&gt; cmpxchg</p><p>putOrderedInt -&gt; xchg1</p><p>compareAndSwapObject -&gt; cmpxchgq</p></blockquote><h1>CountDownLatch</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> synchronization aid that allows one or more threads <span class="token keyword">to</span> <span class="token namespace">wait</span> until a set of operations being performed in other threads completes<span class="token punctuation">.</span>“允许一个或多个线程等待，直到在其他线程中执行的一组操作完成”的同步算法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="退出条件">退出条件</h2><ol><li>countDown() 减到0：<code>await()</code></li><li>等待时间到了截止时间：<code>await(long timeout, TimeUnit unit)</code></li></ol><h2 id="使用场景">使用场景</h2><h3 id="等待所有线程执行完成">等待所有线程执行完成</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hots<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// step1: 获取查询数据</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// step2：根据查询数据分配多个线程执行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleRunnable</span><span class="token punctuation">(</span>latch<span class="token punctuation">,</span> count<span class="token punctuation">,</span> i<span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"All works submitted.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// step3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"All works finished. Support with [%d] threads.\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SimpleRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> param<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> count<span class="token punctuation">;</span>        <span class="token class-name">SimpleRunnable</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>param <span class="token operator">=</span> param<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>latch <span class="token operator">=</span> latch<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s deal with [%d]-[%d] \n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">All</span> works submitted<span class="token punctuation">.</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">546</span><span class="token punctuation">]</span> pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">833</span><span class="token punctuation">]</span> pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span> pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span> <span class="token class-name">All</span> works <span class="token class-name"><span class="token namespace">finished<span class="token punctuation">.</span></span> Support</span> <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> threads<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="任务拆分离散并行化处理">任务拆分离散并行化处理</h3><p>业务流程如下</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/CountDown.drawio-1667231117133-87.png" alt="CountDown.drawio"></p><h4 id="基本信息定义">基本信息定义</h4><ul><li>统计表</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">class</span> <span class="token class-name">Table</span> <span class="token punctuation">{</span>    <span class="token comment">// 表名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tableName<span class="token punctuation">;</span>    <span class="token comment">// 原始记录条数</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sourceRecordCount <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// 传输完成后的记录条数：验证1</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> targetCount<span class="token punctuation">;</span>    <span class="token comment">// 原始schema</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sourceColumnSchema <span class="token operator">=</span> <span class="token string">"&lt;table name='a'&gt;&lt;column name='c1' type='varchar'&gt;&lt;/column&gt;&lt;/table&gt;"</span><span class="token punctuation">;</span>    <span class="token comment">// 传输完成之后的schema：验证2</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> targetColumnSchema <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token class-name">String</span> tableName<span class="token punctuation">,</span> <span class="token keyword">long</span> sourceRecordCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableName <span class="token operator">=</span> tableName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sourceRecordCount <span class="token operator">=</span> sourceRecordCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>监控工具</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">;</span>    <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch <span class="token operator">=</span> countDownLatch<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>事件定义（对应一次批处理任务）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> eventName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eventName <span class="token operator">=</span> eventName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>批处理任务完成验证</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventTaskBatch</span> <span class="token keyword">extends</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Event</span> event<span class="token punctuation">;</span>    <span class="token class-name">EventTaskBatch</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">,</span> <span class="token keyword">int</span> taskSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>taskSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>event <span class="token operator">=</span> event<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>countDownLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Event涉及到的所有Table任务完成</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All table of event "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getEventName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is finished verify and update continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>批处理表验证任务全部完成</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TableTaskBatch</span> <span class="token keyword">extends</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Table</span> table<span class="token punctuation">;</span>    <span class="token comment">/* 每张表存在多个验证任务 */</span>    <span class="token keyword">private</span> <span class="token class-name">EventTaskBatch</span> eventTaskBatch<span class="token punctuation">;</span>    <span class="token class-name">TableTaskBatch</span><span class="token punctuation">(</span><span class="token class-name">EventTaskBatch</span> eventTaskBatch<span class="token punctuation">,</span> <span class="token class-name">Table</span> table<span class="token punctuation">,</span> <span class="token keyword">int</span> taskSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>taskSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eventTaskBatch <span class="token operator">=</span> eventTaskBatch<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>countDownLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Table相关所有任务完成</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All tasks of "</span> <span class="token operator">+</span> table<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is finished verify and update continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            eventTaskBatch<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表数据验证行为</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TableVerify</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Table</span> table<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">TableTaskBatch</span> tableTaskBatch<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TableVerify</span><span class="token punctuation">(</span><span class="token class-name">Table</span> table<span class="token punctuation">,</span> <span class="token class-name">TableTaskBatch</span> tableTaskBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableTaskBatch <span class="token operator">=</span> tableTaskBatch<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​a) 验证1：验证数据量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TrustSourceRecordCount</span> <span class="token keyword">extends</span> <span class="token class-name">TableVerify</span><span class="token punctuation">{</span>    <span class="token class-name">TrustSourceRecordCount</span><span class="token punctuation">(</span><span class="token class-name">Table</span> table<span class="token punctuation">,</span> <span class="token class-name">TableTaskBatch</span> tableTaskBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> tableTaskBatch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置传输完成之后的数据量</span>        table<span class="token punctuation">.</span><span class="token function">setTargetCount</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getSourceRecordCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 完成一次一张表的验证完成计数</span>        tableTaskBatch<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​b) 验证2：验证表结构</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TrustSourceColumns</span> <span class="token keyword">extends</span> <span class="token class-name">TableVerify</span> <span class="token punctuation">{</span>    <span class="token class-name">TrustSourceColumns</span><span class="token punctuation">(</span><span class="token class-name">Table</span> table<span class="token punctuation">,</span> <span class="token class-name">TableTaskBatch</span> tableTaskBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> tableTaskBatch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">setTargetColumnSchema</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getSourceColumnSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 完成一次一张表的验证完成计数</span>        tableTaskBatch<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 不同数据源的数据，批处理</span>            <span class="token class-name">Event</span><span class="token punctuation">[</span><span class="token punctuation">]</span> events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"Event-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"Event-2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Event</span> event <span class="token operator">:</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 获取数据源表资源概况</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">=</span> <span class="token function">capture</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">EventTaskBatch</span> eventTaskBatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventTaskBatch</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> tables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Table</span> table <span class="token operator">:</span> tables<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 与Table相关的任务技术监控。</span>                    <span class="token class-name">TableTaskBatch</span> tableTaskBatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableTaskBatch</span><span class="token punctuation">(</span>eventTaskBatch<span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TrustSourceRecordCount</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> tableTaskBatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TrustSourceColumns</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> tableTaskBatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span> <span class="token function">capture</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Table</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getEventName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-Table-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果</p><pre class="line-numbers language-none"><code class="language-none">All tasks of Event-1-Table-3 is finished verify and update continue.All tasks of Event-1-Table-1 is finished verify and update continue.All tasks of Event-1-Table-4 is finished verify and update continue.All tasks of Event-1-Table-6 is finished verify and update continue.All tasks of Event-1-Table-5 is finished verify and update continue.All tasks of Event-1-Table-2 is finished verify and update continue.All tasks of Event-1-Table-0 is finished verify and update continue.All tasks of Event-1-Table-7 is finished verify and update continue.All tasks of Event-1-Table-8 is finished verify and update continue.All tasks of Event-2-Table-4 is finished verify and update continue.All tasks of Event-2-Table-2 is finished verify and update continue.All tasks of Event-2-Table-6 is finished verify and update continue.All tasks of Event-2-Table-3 is finished verify and update continue.All tasks of Event-2-Table-0 is finished verify and update continue.All tasks of Event-1-Table-9 is finished verify and update continue.All table of event Event-1 is finished verify and update continue.All tasks of Event-2-Table-1 is finished verify and update continue.All tasks of Event-2-Table-7 is finished verify and update continue.All tasks of Event-2-Table-9 is finished verify and update continue.All tasks of Event-2-Table-8 is finished verify and update continue.All tasks of Event-2-Table-5 is finished verify and update continue.All table of event Event-2 is finished verify and update continue.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果分析</p><ol><li>每个<strong>table</strong>的所有验证完成，执行<code>TableTaskBatch</code>的<code>done</code>中的后续操作</li><li>每个<strong>event</strong>的所有<strong>table</strong>的验证完成，执行<code>EventTaskBatch</code>的<code>done</code>中的后续操作</li></ol><h1>CyclicBarrier</h1><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point. “允许一组线程互相等待到达一个共同的屏障点”的同步算法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierExample1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CyclicBarrier</span> barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All parties action finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ActionRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CyclicBarrier</span> barrier<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span><span class="token class-name">CyclicBarrier</span> barrier<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>barrier <span class="token operator">=</span> barrier<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"- await finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><pre class="line-numbers language-none"><code class="language-none">T1 finnish task（1651682474323）T4 finnish task（1651682475329）T3 finnish task（1651682480338）T2 finnish task（1651682482329）All parties action finishedT2- await finishedT1- await finishedT4- await finishedT3- await finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例2：使用reset-重置">示例2：使用reset()重置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">CyclicBarrier</span> barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All parties action finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barrier<span class="token punctuation">.</span><span class="token function">getNumberWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    barrier<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barrier<span class="token punctuation">.</span><span class="token function">getNumberWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CountDownLatch-和-CyclicBarrier-的区别">CountDownLatch 和 CyclicBarrier 的区别</h2><table><thead><tr><th>CountDownLatch</th><th>CyclicBarrier</th></tr></thead><tbody><tr><td>不可 reset</td><td>可以循环使用的</td></tr><tr><td>CountDownLatch工作线程之间互不关心</td><td>工作线程互相等待到达一个共同的屏障点</td></tr></tbody></table><h1>Exchanger</h1><ol><li>需要成对出现，否则单出来的一个线程同样会进入阻塞状态</li><li>如果成对的线程，其中一个无法到达“<code>交换点（Exchange Point）</code>”，另一个会一直等待，直到超时/一直阻塞。</li><li><strong>线程对之间交换的对象，是同一个地址的引用，会存在线程不安全的问题</strong>，可以考虑使用Atomic包装。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">一个同步点，在这个同步点上，线程之间可以组队并互相交换数据。每个线程会在进入交换方法时提供给伙伴线程匹配一些对象，并在返回时接收其伙伴的提供的对象。一个交换器可以被看作是一个同步队列的双向形式。交换器在遗传算法和流水线设计等应用中可能是有用的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Exchanger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExchangerText</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Exchanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 交换点，成对的线程同时达到这个交换点才会交换数据</span>                <span class="token class-name">String</span> msg <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"（message from "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" got "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T-A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 交换点，成对的线程同时达到这个交换点才会交换数据</span>                <span class="token class-name">String</span> msg <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"（message from "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" got "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T-B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：<span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">A</span> finnish task（<span class="token number">1651715733432</span>）<span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">B</span> finnish task（<span class="token number">1651715740432</span>）<span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">B</span> got （message from <span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">A</span><span class="token punctuation">.</span>）<span class="token punctuation">[</span><span class="token number">1651715740432</span><span class="token punctuation">]</span><span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">A</span> got （message from <span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">B</span><span class="token punctuation">.</span>）<span class="token punctuation">[</span><span class="token number">1651715740432</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Semaphore</h1><p>注册/回收许可证</p><ol><li><p><code>acquire()/release()</code> ： 相当于 acquire(1)/release(1)</p></li><li><p><code>acquire(int permits) /release(int permits)</code></p></li><li><p><code>acquireUninterruptibly()/acquireUninterruptibly(int permits) </code> 不可打断，不会抛出InterruptedException异常</p></li><li><p><code>drainPermits()</code> 获取所有的许可证</p></li><li><p><code>tryAcquire()/tryAcquire(int permits)</code>  不可打断，不会抛出InterruptedException异常，拿不到许可证，不会阻塞，放弃获取，继续执行</p></li><li><p><code>getQueueLength()</code> 返回等待获取的线程数的评估值</p></li><li><p><code>availablePermits()</code>返回此信号量中可用的当前许可数（评估值）</p></li></ol><ul><li>DEMO-1：可中断的许可证请求（会抛出InterruptedException）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TaskRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">;</span>        <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span><span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>semaphore <span class="token operator">=</span> semaphore<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">" ask for permits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 请求执行许可证</span>                semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">" got permits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 释放许可证</span>                semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">T1 ask for permitsT1 got permitsT2 ask for permitsT1 finnish task <span class="token punctuation">[</span>1651772544344<span class="token punctuation">]</span>T2 got permitsT2 finnish task <span class="token punctuation">[</span>1651772549361<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DEMO-2</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreExample2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TaskRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">;</span>        <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span><span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>semaphore <span class="token operator">=</span> semaphore<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 请求执行许可证</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">" ask for permits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> tryResult <span class="token operator">=</span> semaphore<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token punctuation">(</span>tryResult <span class="token operator">?</span> <span class="token string">" got permits"</span> <span class="token operator">:</span> <span class="token string">" ignore permits and continue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 释放许可证</span>                semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">T2 ask for permitsT1 ask for permitsT2 got permitsT1 ignore permits and continueT1 finnish task [1651774206609]T2 finnish task [1651774206609]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Lock包</h1><blockquote><blockquote><p>java中常见锁分类</p></blockquote><ul><li><p>公平锁和非公平锁</p><p>根据多线程竞争时是否排队依次获取锁，synchronized和ReentrantLock实现默认都是非公平锁，非公平锁可以提高效率，避免线程唤醒带来的空档期</p></li><li><p>可重入锁和不可重复锁</p><p>根据同一个线程是否能重复获取同一把锁</p></li><li><p>共享锁和独占锁(排他锁)</p><p>根据多线程是否能共享一把锁，典型的比如ReentrantReadWriteLock，其中读锁是共享锁，写锁是排他锁</p></li><li><p>可中断锁和不可中断锁</p><p>根据正在尝试获取锁的线程是否可中断</p></li><li><p>悲观锁和乐观锁</p><p>根据线程是否锁住共享资源</p></li><li><p>自旋锁和阻塞锁</p><p>根据线程等待的过程</p></li></ul></blockquote><h2 id="ReentrantLock">ReentrantLock</h2><p>ReentrantLock特点：作用同Synchronized，但是拥有一些独有的特性</p><ul><li><p>可重入：ReentrantLock同步块对同一条线程来说是可重入的，不会出现自己把自己锁死的问题</p></li><li><p>阻塞同步：在成功获取锁的线程执行完之前，会阻塞后面其它线程进入</p></li><li><p><font color="red">等待可中断</font>：持有锁的线程长期不释放锁时，正在等待获取锁的线程可以选择放弃等待，改为处理其它事情，主要是tryLock(time)、lockInterruptibly()方法响应支持</p></li><li><p><font color="red">实现公平锁</font>：通过new ReentrantLock(true)可以实现多线程在等待同一个锁时，严格按照申请锁的顺序来依次获取锁</p></li><li><p><font color="red">锁可以绑定多个条件</font>：一个ReentrantLock对象锁可以同时绑定多个Condition对象</p></li></ul><p>ReentrantLock核心方法解析</p><ul><li>lock()：尝试获取锁，如果锁已被其它线程获取则等待，lock()方法不能被中断，在死锁情况下会无限等待</li><li>tryLock()：尝试获取锁，如果锁已被其它线程获取则放弃，立即返回boolean类型标识位</li><li>tryLock(long var1, TimeUnit var3)：尝试获取锁，如果锁已被其它线程持有则等待var1时间，超时再放弃</li><li>lockInterruptibly()：相当于把tryLock(long var1, TimeUnit var3)的时间设置成了无限长，但是在等待获取锁的过程中，线程可以被中断</li><li>unlock()：释放锁</li></ul><p>ReentrantLock注意事项</p><ul><li>ReentrantLock在异常发生时候不会像synchronized锁一样自动释放锁，所以在使用ReentrantLock时候一定要配合try finally使用来进行释放锁（lock.unlock()）</li><li><font color="red">tryLock()方法自带插队属性</font>，也就是说即使设置了new ReentrantLock(true)，使用tryLock()方法获取锁仍然是不公平的</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">needLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">needLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 不允许打断</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 取得锁 ："</span> <span class="token operator">+</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 释放锁资源："</span> <span class="token operator">+</span> <span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// got the lock</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 取得锁 ："</span> <span class="token operator">+</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 释放锁资源："</span> <span class="token operator">+</span> <span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// do other things</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 未取得锁."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-----------------------------------Thread-0 finnish task [1652021430165]Thread-0 - 取得锁 ：trueThread-0 - 释放锁资源：trueThread-1 finnish task [1652021432181]Thread-1 - 取得锁 ：trueThread-1 - 释放锁资源：true-----------------------------------Thread-3 - 未取得锁.Thread-2 finnish task [1652021443166]Thread-2 - 取得锁 ：trueThread-2 - 释放锁资源：trueProcess finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ReadWriteLock">ReadWriteLock</h2><p>需要解决同时读的排他性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantReadWriteLockExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span> readLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> writeLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// new Thread(ReadWriteLockExample::doWriteAction, "A1").start();</span>        <span class="token comment">// 同时读，不会排他</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ReentrantReadWriteLockExample</span><span class="token operator">::</span><span class="token function">readFiles</span><span class="token punctuation">,</span> <span class="token string">"A1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ReentrantReadWriteLockExample</span><span class="token operator">::</span><span class="token function">readFiles</span><span class="token punctuation">,</span> <span class="token string">"A2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 开始读操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 完成读操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 开始写操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 完成写操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Condition">Condition</h2><p>作用：monitor对象的wait、notify</p><p>使用：condition.await()/ condition.signal()，需要配合lock使用</p><h3 id="当个等待锁队列">当个等待锁队列</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hots<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>condition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author: DH * @date: 2022/3/5 * @desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> sourceLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//  condition 是由lock创建</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> sourceLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">buildData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">useData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            sourceLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// synchronized 关键词 (monitor enter)</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　<span class="token comment">// monitor await</span>            <span class="token punctuation">}</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"P："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// monitor notify</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            sourceLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// monitor end</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            sourceLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>isUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"C："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            sourceLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个等待锁队列">多个等待锁队列</h3><pre class="line-numbers language-none"><code class="language-none">package practice.util.lock.condition;import practice.common.TaskFactory;import java.util.LinkedList;import java.util.concurrent.TimeUnit;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;import java.util.stream.IntStream;/** * 多线程生产、多线程消费 * * @author: DH * @date: 2022/6/12 * @desc: */public class ConditionExample3 {    private static Lock lock = new ReentrantLock();    private static final Condition PRODUCE_COND = lock.newCondition();    private static final Condition CONSUMER_COND = lock.newCondition();    private static final LinkedList&lt;Long&gt; TIMESTAMP_POOL = new LinkedList&lt;&gt;();    private static final int MAX_SIZE = 100;    public static void main(String[] args) {        // 包装多名生产者        IntStream.rangeClosed(1, 5).boxed().forEach(ConditionExample3::doBuildData);        // 包装多名消费者        IntStream.rangeClosed(1, 8).boxed().forEach(ConditionExample3::doConsumeData);    }    private static void doBuildData(int index) {        // 生产者不间断生产数据        new Thread(() -&gt; {            while (true) {                buildData();                TaskFactory.spend(1, TimeUnit.SECONDS);            }        }, "P(" + index + ")").start();    }    private static void doConsumeData(int index) {        // 消费者不间断消费数据        new Thread(() -&gt; {            while (true) {                useData();                TaskFactory.spend(1, TimeUnit.SECONDS);            }        }, "C(" + index + ")").start();    }    private static void buildData() {        try {            lock.lock();            while (TIMESTAMP_POOL.size() &gt; MAX_SIZE) {                PRODUCE_COND.await();            }            TaskFactory.spend(1, TimeUnit.SECONDS);            long value = System.currentTimeMillis();            TIMESTAMP_POOL.addLast(value);            System.out.println(Thread.currentThread() + "-&gt;" + value);            CONSUMER_COND.signalAll();        } catch (InterruptedException e) {            throw new RuntimeException(e);        } finally {            lock.unlock();        }    }    private static void useData() {        try {            lock.lock();            while (TIMESTAMP_POOL.isEmpty()) {                CONSUMER_COND.await();            }            TaskFactory.spend(1, TimeUnit.SECONDS);            long value = TIMESTAMP_POOL.removeFirst();            System.out.println(Thread.currentThread() + "-&gt;" + value);            PRODUCE_COND.signalAll();        } catch (InterruptedException e) {            throw new RuntimeException(e);        } finally {            lock.unlock();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="StampedLock">StampedLock</h2><h3 id="产生背景">产生背景</h3><p>ReentrantReadWriteLock使得多个读线程同时持有读锁（只要写锁未被占用），而写锁是独占的。</p><p>但是，读写锁如果使用不当，很容易产生<font color="red"><strong>“写饥饿”</strong></font>问题</p><p>比如在读线程非常多，写线程很少的情况下，很容易导致写线程“饥饿”，虽然使用“公平”策略可以一定程度上缓解这个问题，但是“公平”策略是以牺牲系统吞吐量为代价的。</p><h3 id="StampedLock的主要特点">StampedLock的主要特点</h3><ol><li><p>所有获取锁的方法，都返回一个邮戳（Stamp），Stamp为0表示获取失败，其余都表示成功；</p></li><li><p>所有释放锁的方法，都需要一个邮戳（Stamp），这个Stamp必须是和成功获取锁时得到的Stamp一致；</p></li><li><p>StampedLock是不可重入的；（如果一个线程已经持有了写锁，再去获取写锁的话就会造成死锁）</p></li><li><p>StampedLock有三种访问模式：</p><p>① Reading（读模式）：功能和ReentrantReadWriteLock的读锁类似</p><p>② Writing（写模式）：功能和ReentrantReadWriteLock的写锁类似</p><p>③ Optimistic reading（乐观读模式）：这是一种优化的读模式。</p><p>​我们知道，在ReentrantReadWriteLock中，当读锁被使用时，如果有线程尝试获取写锁，该写线程会阻塞。</p><p>​但是，在Optimistic reading中，即使读线程获取到了读锁，写线程尝试获取写锁也不会阻塞，这相当于对读模式的优化，但是可能会导致数据不一致的问题。</p><p>​所以，<strong>当使用Optimistic reading获取到读锁时，必须对获取结果进行校验</strong>。</p></li><li><p>StampedLock支持读锁和写锁的相互转换</p><p>我们知道RRW中，当线程获取到写锁后，可以降级为读锁，但是读锁是不能直接升级为写锁的。<br>StampedLock提供了读锁和写锁相互转换的功能，使得该类支持更多的应用场景。</p></li><li><p>无论写锁还是读锁，都不支持Conditon等待</p></li></ol><h3 id="悲观读（读锁和写锁互斥）">悲观读（读锁和写锁互斥）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>stamp</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">StampedLock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author: DH */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StampedLockTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">StampedLock</span> <span class="token constant">STAMPED_LOCK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">9</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 写数据</span>                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 读数据</span>                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取锁，并获取时间戳</span>            stamp <span class="token operator">=</span> <span class="token constant">STAMPED_LOCK</span><span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"、"</span><span class="token punctuation">,</span> <span class="token string">"R-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 按照时间戳释放锁</span>            <span class="token constant">STAMPED_LOCK</span><span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            stamp <span class="token operator">=</span> <span class="token constant">STAMPED_LOCK</span><span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C:"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token constant">STAMPED_LOCK</span><span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="乐观读：Optimistic-reading">乐观读：Optimistic reading</h3><p>“Optimistic reading”的使用必须遵循以下模式：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">long</span></span> stamp <span class="token operator">=</span> <span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 非阻塞获取版本信息</span><span class="token function">copyVaraibale2ThreadMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 拷贝变量到线程本地堆栈</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">// 校验在拷贝过程中有没有排他锁抢占，如果有则悲观读</span>    <span class="token class-name"><span class="token keyword">long</span></span> stamp <span class="token operator">=</span> <span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 获取读锁</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">copyVaraibale2ThreadMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 拷贝变量到线程本地堆栈</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>       <span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 释放悲观锁</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">useThreadMemoryVarables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 使用线程本地堆栈里的数据进行操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为乐观读DEMO：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>stamp</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">StampedLock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * 乐观读 * * @author: DH * @date: 2022/6/12 * @desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StampedLockOptimisticTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">StampedLock</span> stampedLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 写数据</span>                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 读数据</span>                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">optimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">optimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取锁，并获取时间戳</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 乐观读，必须先拷贝一份数据到在方法中</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        local<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检查在拷贝过程中有没有排他锁抢占，如果有则悲观读</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stampedLock<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 重新读取数据到本地 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                local<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                local<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                stampedLock<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 使用数据</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>local<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"、"</span><span class="token punctuation">,</span> <span class="token string">"R-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"W-"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            stampedLock<span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Fork/Join框架</h1><ol><li><p>Fork/Join任务的原理：判断一个任务是否足够小，如果是，直接计算，否则，就分拆成几个小任务分别计算。这个过程可以反复“裂变”成一系列小任务。</p></li><li><p>基于工作窃取算法（work-stealing）</p></li><li><p>Fork/Join机制可能只能在单个jvm上运行</p></li></ol><h2 id="RecursiveTask：有返回">RecursiveTask：有返回</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实验demo : 1~10000 求和</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinPool</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RecursiveTask</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author: DH * @date: 2022/6/20 * @desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveTaskDemo</span> <span class="token punctuation">{</span>    <span class="token comment">// 可执行容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TASK_CAPACITY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ForkJoinPool</span> forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveTask</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================== other tasks ===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================== action results "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            forkJoinPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 计算</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CalculateRecursiveTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">CalculateRecursiveTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;=</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> start<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">Integer</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">&lt;=</span> <span class="token constant">TASK_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 执行任务</span>                <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 拆分任务</span>                <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token class-name">CalculateRecursiveTask</span> taskLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveTask</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">CalculateRecursiveTask</span> taskRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveTask</span><span class="token punctuation">(</span>middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 加入ForkJoinPool.WorkQueue </span>                taskLeft<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 加入ForkJoinPool.WorkQueue </span>                taskRight<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 等待任务执行完成并返回</span>                <span class="token keyword">return</span> taskLeft<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> taskRight<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RecursiveAction：无返回">RecursiveAction：无返回</h2><p>如果有返回值，需要构造一个共同访问区域。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinPool</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RecursiveAction</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author: DH * @date: 2022/6/20 * @desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveActionDemo</span> <span class="token punctuation">{</span>    <span class="token comment">//  线程共享</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> <span class="token constant">SUM_RESULT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 可执行容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TASK_CAPACITY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ForkJoinPool</span> forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveActon</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>forkJoinPool<span class="token punctuation">.</span><span class="token function">getActiveThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 等待执行完成</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>forkJoinPool<span class="token punctuation">.</span><span class="token function">getActiveThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">SUM_RESULT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            forkJoinPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CalculateRecursiveActon</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveAction</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">CalculateRecursiveActon</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;=</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> start<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">&lt;=</span> <span class="token constant">TASK_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token constant">SUM_RESULT</span><span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment">// 任务拆分</span>                <span class="token class-name">CalculateRecursiveActon</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveActon</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">CalculateRecursiveActon</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveActon</span><span class="token punctuation">(</span>middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 任务入池</span>                left<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                right<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Phaser</h1><h2 id="监控方法">监控方法</h2><ul><li><code>public int getRegisteredParties()</code>返回在当前phase上注册的party数目</li><li><code>public int getArrivedParties()</code>返回已经到达当前phase的party的数量，如果这个phaser已经终止，返回值是无意义和任意的</li><li><code>public int getUnarrivedParties()</code>返回还未到达当前phase的party的数量，如果这个phaser已经终止，返回值是无意义和任意的</li><li><code>public final int getPhase()</code>返回当前阶段号, 最大值是Integer.MAX_VALUE，到达最大值之后，从0重新计数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phaser<span class="token punctuation">.</span><span class="token function">bulkRegister</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"phaser.getRegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phaser<span class="token operator">::</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"phaser.getUnarrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"【%s】【monitor-%d】【%30s】%s\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态注册特性">动态注册特性</h2><p><code>public int register()</code> 动态注册</p><p><code>public int bulkRegister(int parties)</code>批量注册</p><p><code>public int arriveAndAwaitAdvance()</code> 类似CyclicBarrier 的await方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Task</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【BEGIN-RegisteredParties】"</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册main线程</span>        phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 到达并且等待前行</span>        phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 等待所有线程全部到达隔离点之后执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【END-RegisteredParties】"</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 】 all threads finished the work."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【other work】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>            <span class="token comment">// 动态追加party</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：finished and continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 到达并且等待前行</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>：finished and <span class="token keyword">continue</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>：finished and <span class="token keyword">continue</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>：finished and <span class="token keyword">continue</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>：finished and <span class="token keyword">continue</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>：finished and <span class="token keyword">continue</span>【<span class="token constant">END</span><span class="token operator">-</span><span class="token class-name">RegisteredParties</span>】<span class="token number">6</span>【main 】 all threads finished the work<span class="token punctuation">.</span>【other work】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重复使用计数器">重复使用计数器</h2><p><code>public final int getPhase()</code> ：获取已执行阶段数（从0开始，每执行一轮，计数器加1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>phaser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 监控5个运动员（指定parties）</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Athlete</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Athlete</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token comment">// 运动员编号</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Athlete</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// step1: 游泳</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"swimming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 等待所有运动员完成游泳任务，继续执行</span>            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// step2: 自行车</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"bicycle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 等待所有运动员完成自行车任务，继续执行</span>            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// step3: 长跑</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 等待所有运动员完成长跑任务，继续执行</span>            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish all tasks."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t【monitor】【%s】【%d】【%s】%s\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish  "</span> <span class="token operator">+</span> taskName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  swimming<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish  swimming<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  swimming<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  swimming<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  swimming<span class="token punctuation">.</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  bicycle<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish  bicycle<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  bicycle<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  bicycle<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  bicycle<span class="token punctuation">.</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  running<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish  running<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  running<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  running<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  running<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish all tasks<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish all tasks<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish all tasks<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish all tasks<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish all tasks<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="减少计数器（动态销户）">减少计数器（动态销户）</h2><p>需要注意：销户之后的<font color="red">return</font>，否则仍然会参与后续流程的计数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * Phaser 减少计数器（动态销户） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample3</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 监控5个运动员</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Athlete</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Athlete</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token comment">// 运动员编号</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Athlete</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// step1: 游泳</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"swimming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// step2: 自行车</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">actionFailed</span><span class="token punctuation">(</span><span class="token string">"bicycle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 运动员退出比赛（退出计数）</span>                phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 退出计数之后，后续流程不在参与重新参与计数</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"bicycle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// step3: 长跑</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish all tasks."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> formatter <span class="token operator">=</span> <span class="token string">"\t【monitor】【%s】【%d】【%s】%s\n"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> threadName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>formatter<span class="token punctuation">,</span> threadName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"RegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish  "</span> <span class="token operator">+</span> taskName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionFailed</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 failed  "</span> <span class="token operator">+</span> taskName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish  swimming<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  swimming<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  swimming<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  swimming<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  swimming<span class="token punctuation">.</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 failed  bicycle<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 withdrew the game<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  bicycle<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  bicycle<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  bicycle<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  bicycle<span class="token punctuation">.</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">2</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">4</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">2</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">4</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  running<span class="token punctuation">.</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">2</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">4</span>【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">2</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">4</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  running<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  running<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  running<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish all tasks<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish all tasks<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish all tasks<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish all tasks<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="人为控制Phase的终结：onAdvance">人为控制Phase的终结：onAdvance</h2><ol><li><p>使用方法：覆写<code>onAdvance</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token keyword">int</span> registeredParties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// return registeredParties == 0; 原始写法</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>onAdvance </code>的返回结果直接设置为<code>returen true</code> ，则<code>arriveAndAwaitAdvance</code>不会阻塞等待所有的<code>parties</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>phaser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * 人为控制phase的终结：onAdvance */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token keyword">int</span> registeredParties<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 无论执行情况，都默认，phase 执行结束。</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">OnAdvanceTask</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OnAdvanceTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">OnAdvanceTask</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 arrived part one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 passed part one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 arrived part two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// onAdvance 设置为true，arriveAndAwaitAdvance不会阻塞</span>                <span class="token comment">// onAdvance 设置false/ 使用默认的onAdvance，Thread-1 会阻塞在此处</span>                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 passed part two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// onAdvance 设置false/ 使用默认的onAdvance，Thread-0 会阻塞在此处</span>            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">"\t【%s】【monitor-%d】【%30s】%s\n"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> actionName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getRegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getUnarrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.isTerminated"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 arrived part one【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 arrived part one【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 passed part one【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 passed part one【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 arrived part two【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 passed part two【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="到达之后，不阻塞等待：arrive">到达之后，不阻塞等待：arrive</h2><p><code>public int arrive()</code></p><p>使用场景：仅==监控线程==关心任务完成，执行线程无需相互等待</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/arrive.drawio-1667231117133-89.png" alt="arrive.drawio"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author: DH * @date: 2022/6/28 * @desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">ArriveTask</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 此处main线程会阻塞，等待part one全部完成</span>        phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 part one all done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ArriveTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ArriveTask</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSecondsRandom</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// parties 参与计数，但是不会阻塞等待</span>            phaser<span class="token punctuation">.</span><span class="token function">arrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 part one all done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSecondsRandom</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">"\t【%s】【monitor-%d】【%30s】%s\n"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> actionName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getRegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getUnarrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.isTerminated"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">3</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">1</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">false</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 part one all done【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">3</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">1</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">false</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 part one all done【main】 part one all done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="仅完成监控任务：awaitAdvance">仅完成监控任务：awaitAdvance</h2><p>awaitAdvance方法 不占用 <code>party</code> 数量，在所有parties全部完成后执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 仅完成监控任务：awaitAdvance */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample7</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 若将phaser的parties注册为3，程序会加入阻塞状态</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            phaser<span class="token punctuation">.</span><span class="token function">awaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 监听到指定phase的parties全部完成后执行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all parties finished："</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            phaser<span class="token punctuation">.</span><span class="token function">awaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 监听到指定phase的parties全部完成后执行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all parties finished："</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span> <span class="token operator">+</span> <span class="token string">" done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Thread</span> <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSecondsRandom</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span> <span class="token operator">+</span> <span class="token string">" done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">all parties finished：<span class="token number">1</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 done【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 doneall parties finished：<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 done【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配合<code>arrive</code>使用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>phaser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * 测试 利用 {@link java.util.concurrent.Phaser#awaitAdvance} 监控所有party完成指定任务，才允许后续操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample8</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">AwaitAdvanceTask</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phaser<span class="token punctuation">.</span><span class="token function">awaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 all part one finished."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AwaitAdvanceTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AwaitAdvanceTask</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 需要监控完成的工作</span>            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"part one"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            phaser<span class="token punctuation">.</span><span class="token function">arrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 非阻塞等待，完成其他工作</span>            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"part two"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> actionName<span class="token punctuation">,</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 start "</span> <span class="token operator">+</span> actionName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish  "</span> <span class="token operator">+</span> actionName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 start part one<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 start part one<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  part one<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 start part two<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  part one<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 start part two<span class="token punctuation">.</span>【main】 all part one finished<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  part two<span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  part two<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打断-超时-终止：awaitAdvanceInterruptibly">打断/超时 终止：awaitAdvanceInterruptibly</h2><p>等待此Phaser的阶段从给定的phase值前进，如果在等待期间被中断，则抛出 InterruptedException，或者如果当前phase不等于给定的phase值或此Phaser终止，则立即返回。</p><p><code>Phaser.awaitAdvanceInterruptibly(int)</code> ，调用interrupt，抛出InterruptedException</p><p><code>Phaser.awaitAdvanceInterruptibly(int, long, TimeUnit)</code>: 调用interrupt/给定超时时间，抛出InterruptedException</p><ul><li><p>不占用 <code>party</code> 数量，在所有parties全部完成后执行</p></li><li><p>打断了其中一个<code>party</code>，其他的 party 仍然能够继续执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample9</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> finishTime <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// phase未结束，可以被打断，其他的 party 仍然能够继续执行</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> waitTimeBeforeInterrupt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// phase已结束，不会抛出打断异常</span>    <span class="token comment">//final static int waitTimeBeforeInterrupt = 4;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>finishTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 允许被打断的await</span>                phaser<span class="token punctuation">.</span><span class="token function">awaitAdvanceInterruptibly</span><span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 未完成party数："</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>waitTimeBeforeInterrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> 未完成party数：<span class="token number">2</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>InterruptedException</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>Phaser</span><span class="token punctuation">.</span><span class="token function">awaitAdvanceInterruptibly</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">760</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>phaser<span class="token punctuation">.</span></span>PhaserExample9</span><span class="token punctuation">.</span>lambda$main$<span class="token function">2</span><span class="token punctuation">(</span><span class="token class-name">PhaserExample9</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">continue<span class="token punctuation">.</span></span>Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">continue</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="强制销毁：forceTermination">强制销毁：forceTermination</h2><p>强制此Phaser进入终止状态。注册方的数量不受影响。如果此Phaser是分层Phaser集的成员，则该集中的所有Phaser都将终止。如果此Phaser已终止，则此方法无效。</p><p>此方法可用于在一个或多个任务遇到意外异常后协调恢复。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phaser<span class="token punctuation">.</span><span class="token function">forceTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">"\t【%s】【monitor-%d】【%30s】%s\n"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> actionName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getRegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getUnarrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.isTerminated"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">continue</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">continue</span><span class="token punctuation">.</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">continue<span class="token punctuation">.</span></span>Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[Toc]</p><h1>Executor框架</h1><h2 id="ExecutorService接口">ExecutorService接口</h2><h3 id="ExecutorService-继承树">ExecutorService 继承树</h3><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/Executor%E6%A1%86%E6%9E%B6-16588299109821-1667231117133-88.png" alt="Executor框架"></p><h3 id="ExecutorService的创建">ExecutorService的创建</h3><p>创建一个什么样的ExecutorService的实例（即线程池）需要g根据具体应用场景而定，不过Java给我们提供了一个Executors工厂类，它可以帮助我们很方便的创建各种类型ExecutorService线程池，Executors一共可以创建下面这四类线程池</p><ul><li>ThreadPoolExecutor 核心构造函数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token comment">/** * 测试ThreadPoolExecutor */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorBuild</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token function">buildThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">monitorThreadPool</span><span class="token punctuation">(</span>threadPoolExecutor<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * ThreadPoolExecutor 核心构造函数    */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">buildThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maximumPoolSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 当线程数大于核心时，这是多余的空闲线程在终止前等待新任务的最长时间</span>        <span class="token keyword">long</span> keepAliveTime <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">;</span>        <span class="token comment">// 用于在任务完成之前保存任务的队列</span>        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 线程创建工厂</span>        <span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> r <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拒绝策略</span>        <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> timeUnit<span class="token punctuation">,</span> blockingQueue<span class="token punctuation">,</span>                threadFactory<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitorThreadPool</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getPoolSize】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getActiveCount】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getMaximumPoolSize】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getCompletedTaskCount】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getCompletedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getCorePoolSize】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getLargestPoolSize】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getLargestPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Executors只是一个工厂类，它所有的方法返回的都是ThreadPoolExecutor、ScheduledThreadPoolExecutor这两个类的实例</p><h3 id="ExecutorService的执行">ExecutorService的执行</h3><p>ExecutorService有如下几个执行方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>execute(Runnable)</li></ul><p>这个方法接收一个Runnable实例，并且异步的执行，请看下面的实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法有个问题，就是没有办法获知task的执行结果。</p><ul><li>submit(Runnable)</li></ul><p>submit(Runnable)和execute(Runnable)</p><p>区别是前者可以返回一个Future对象，通过返回的Future对象，我们可以检查提交的任务是否执行完毕</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Future</span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//returns null if the task has finished correctly.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果任务执行完成，future.get()方法会返回一个null。注意，future.get()方法会产生阻塞。</p><ul><li>submit(Callable)</li></ul><p>submit(Callable) 和submit(Runnable)类似，也会返回一个Future对象，但是除此之外，submit(Callable)接收的是一个Callable的实现，Callable接口中的call()方法有一个返回值，可以返回任务的执行结果，而Runnable接口中的run()方法是void的，没有返回值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Future</span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous Callable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"Callable Result"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future.get() = "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>future.get()方法会返回Callable任务的执行结果。注意，future.get()方法会产生阻塞。</p><ul><li>invokeAny(…)</li></ul><p>invokeAny(…)方法接收的是一个Callable的集合，执行这个方法不会返回Future，但是会返回所有Callable任务中其中一个任务的执行结果。这个方法也无法保证返回的是哪个任务的执行结果，反正是其中的某一个</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> callables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Task 1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Task 2"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Task 3"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAny</span><span class="token punctuation">(</span>callables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次执行都会返回一个结果，并且返回的结果是变化的，可能会返回“Task2”也可是“Task1”或者其它。</p><ul><li>nvokeAll(…)</li></ul><p>invokeAll(…)与 invokeAny(…)类似也是接收一个Callable集合，但是前者执行之后会返回一个Future的List，其中对应着每个Callable任务执行后的Future对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> callables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Task 1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Task 2"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Task 3"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span>callables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">:</span> futures<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future.get = "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>List&lt;Callable&lt;String&gt;&gt; callables</code> 返回的结果集是无序的。</p><h3 id="ExecutorService的关闭">ExecutorService的关闭</h3><p>当我们使用完成ExecutorService之后应该关闭它，否则它里面的线程会一直处于运行状态。</p><ul><li><p>void shutdown()</p></li><li><p>List<runnable> shutdownNow()</runnable></p></li></ul><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220725112237287-1667231117133-90.png" alt="image-20220725112237287"></p><h2 id="Executors工具">Executors工具</h2><p><strong>利用：ThreadPoolExecutor(int corePoolSize, int maximumPoolSize,  long keepAliveTime, TimeUnit unit, BlockingQueue<runnable> workQueue,  ThreadFactory threadFactory, RejectedExecutionHandler handler)</runnable></strong></p><table><thead><tr><th>Executors模板方法</th><th>特性</th><th>corePoolSize</th><th>maximumPoolSize</th><th>keepAliveTime</th><th>unit</th><th>workQueue</th><th>threadFactory</th><th>handler</th></tr></thead><tbody><tr><td>newFixedThreadPool(int  nThreads)</td><td>线程池中的线程不会被销毁</td><td>nThreads</td><td>nThreads</td><td>0L</td><td>TimeUnit.MILLISECONDS</td><td><font color="red"> new LinkedBlockingQueue<runnable>(Integer.MAX_VALUE)</runnable></font></td><td>Executors.defaultThreadFactory()</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newFixedThreadPool(int  nThreads, ThreadFactory threadFactory)</td><td>线程池中的线程不会被销毁</td><td>nThreads</td><td>nThreads</td><td>0L</td><td>TimeUnit.MILLISECONDS</td><td>new LinkedBlockingQueue<runnable>(Integer.MAX_VALUE)</runnable></td><td>Executors.defaultThreadFactory()</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newSingleThreadExecutor</td><td>可以保留单线程需要执行的任务队列,并且将ThreadPoolExecutor中的方法屏蔽</td><td>1</td><td>1</td><td>0L</td><td>TimeUnit.MILLISECONDS</td><td>new LinkedBlockingQueue<runnable>(Integer.MAX_VALUE)</runnable></td><td>Executors.defaultThreadFactory()</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newSingleThreadExecutor(ThreadFactory  threadFactory)</td><td>可以保留单线程需要执行的任务队列,并且将ThreadPoolExecutor中的方法屏蔽</td><td>1</td><td>1</td><td>0L</td><td>TimeUnit.MILLISECONDS</td><td>new LinkedBlockingQueue<runnable>(Integer.MAX_VALUE)</runnable></td><td>threadFactory</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newCachedThreadPool()</td><td>每提交一个任务,创建一个线程</td><td>0</td><td>Integer.MAX_VALUE</td><td>60L</td><td>TimeUnit.SECONDS</td><td><font color="red">new SynchronousQueue<runnable>()</runnable></font></td><td>Executors.defaultThreadFactory()</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newCachedThreadPool(ThreadFactory  threadFactory)</td><td>每提交一个任务,创建一个线程</td><td>0</td><td>Integer.MAX_VALUE</td><td>60L</td><td>TimeUnit.SECONDS</td><td>new SynchronousQueue<runnable>()</runnable></td><td>threadFactory</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newSingleThreadScheduledExecutor()</td><td></td><td>0</td><td>Integer.MAX_VALUE</td><td>60L</td><td>TimeUnit.SECONDS</td><td>new DelayedWorkQueue()</td><td>Executors.defaultThreadFactory()</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newSingleThreadScheduledExecutor(ThreadFactory  threadFactory)</td><td></td><td>0</td><td>Integer.MAX_VALUE</td><td>60L</td><td>TimeUnit.SECONDS</td><td><font color="red">new DelayedWorkQueue()</font></td><td>threadFactory</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newScheduledThreadPool(int  corePoolSize)</td><td></td><td>corePoolSize</td><td>Integer.MAX_VALUE</td><td>0</td><td>TimeUnit.NANOSECONDS</td><td>new DelayedWorkQueue()</td><td>Executors.defaultThreadFactory()</td><td>defaultHandler（new  AbortPolicy()）</td></tr><tr><td>newScheduledThreadPool(int  corePoolSize, ThreadFactory threadFactory)</td><td></td><td>corePoolSize</td><td>Integer.MAX_VALUE</td><td>0</td><td>TimeUnit.NANOSECONDS</td><td>new DelayedWorkQueue()</td><td>threadFactory</td><td>defaultHandler（new  AbortPolicy()）</td></tr></tbody></table><p><strong>利用ForkJoinPool(int parallelism,  ForkJoinWorkerThreadFactory factory,  UncaughtExceptionHandler handler,  boolean asyncMode)</strong></p><table><thead><tr><th>Executors模板方法</th><th>int parallelism</th><th>ForkJoinWorkerThreadFactory  factory</th><th>UncaughtExceptionHandler handler</th><th>boolean asyncMode</th></tr></thead><tbody><tr><td>newWorkStealingPool()</td><td>Runtime.getRuntime().availableProcessors()</td><td>ForkJoinPool.defaultForkJoinWorkerThreadFactory</td><td>null</td><td>TRUE</td></tr><tr><td>newWorkStealingPool(int  parallelism)</td><td>parallelism</td><td>ForkJoinPool.defaultForkJoinWorkerThreadFactory</td><td>null</td><td>TRUE</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hots<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>executor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorsExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token function">getTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringCallable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"Task:"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> stringCallable<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ThreadPoolExecutor">ThreadPoolExecutor</h2><h3 id="四个内置拒绝策略">四个内置拒绝策略</h3><ul><li>继承自RejectedExecutionHandler</li></ul><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220725171152798-1667231117133-91.png" alt="image-20220725171152798"></p><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td>AbortPolicy</td><td>抛出RejectedExecutionException异常</td></tr><tr><td>DiscardPolicy</td><td>默默地丢弃被拒绝的任务</td></tr><tr><td>DiscardOldestPolicy</td><td>丢弃最早的未处理请求，然后重试执行请求任务。若任务已被关闭，则丢弃任务</td></tr><tr><td>CallerRunsPolicy</td><td>直接在执行方法的调用线程中运行被拒绝的任务。若任务已被关闭，则丢弃任务</td></tr></tbody></table><h3 id="自定义ThreadFactory">自定义ThreadFactory</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> <span class="token constant">SEQ</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FailedAction</span><span class="token punctuation">&gt;</span></span> failed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Factory-"</span> <span class="token operator">+</span> <span class="token constant">SEQ</span><span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 保留异常信息</span>            failed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FailedAction</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FailedAction</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">;</span>        <span class="token class-name">FailedAction</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>throwable <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadFactoryTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThreadFactory</span> myThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> myThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThreadFactory<span class="token punctuation">.</span><span class="token function">getFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="允许回收执行线程：allowCoreThreadTimeOut">允许回收执行线程：allowCoreThreadTimeOut</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> allowCoreThreadTimeOut<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllowCoreThreadTimeOutTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolExecutor</span> executorService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">setKeepAliveTime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># <span class="token number">10</span>秒后线程池被销毁，测试进程退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllowCoreThreadTimeOutTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolExecutor</span> executorService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">setKeepAliveTime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># 测试进程无法退出，executorService保有<span class="token number">2</span>个活跃的执行线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除任务：remove">删除任务：remove</h3><p>适用于<code>executorService.execute(e) </code>提交的任务，而<code>executorService.submit(e)</code> 提交的任务，无法移除。submit 提交的任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolExecutor</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> runnableList <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task:"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" with "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        runnableList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>runnableList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"remove result : "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="prestartCoreThread-：-启动一个执行线程">prestartCoreThread ： 启动一个执行线程</h3><h3 id="prestartAllCoreThreads：启动所有执行线程">prestartAllCoreThreads：启动所有执行线程</h3><h3 id="beforeExecute-afterExecute">beforeExecute/afterExecute</h3><p>自定义ThreadPoolExecutor的子类，覆写。</p><h2 id="Future与FutureTask">Future与FutureTask</h2><h3 id="Future-接口">Future 接口</h3><table><thead><tr><th>接口方法</th></tr></thead><tbody><tr><td>V get() throws InterruptedException, ExecutionException;</td></tr><tr><td>V get(long timeout, TimeUnit unit)     throws InterruptedException, ExecutionException, TimeoutException;</td></tr><tr><td>boolean isDone();</td></tr><tr><td>boolean cancel(boolean mayInterruptIfRunning);</td></tr><tr><td>boolean isCancelled();</td></tr></tbody></table><ul><li><code>cancel</code>：取消任务，如果取消任务成功则返回true，如果取消任务失败则返回false。参数<code>mayInterruptIfRunning</code>表示是否允许取消正在执行却没有执行完毕的任务：<ol><li>如果设置true，则表示可以取消正在执行过程中的任务</li><li>如果任务已经完成，则无论mayInterruptIfRunning为true还是false，此方法肯定返回false</li><li>如果任务正在执行，若mayInterruptIfRunning设置为true，则返回true，若mayInterruptIfRunning设置为false，则返回false</li><li>如果任务还没有执行，则无论mayInterruptIfRunning为true还是false，肯定返回true</li></ol></li><li><code>isCancelled</code>：方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 true</li><li><code>isDone</code>：判断任务是否已经完成，已完成则返回true；</li><li><code>get()</code>：获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；</li><li><code> get(long timeout, TimeUnit unit)</code>：用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token comment">/** * boolean cancel(boolean mayInterruptIfRunning); */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token string">"done"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FutureTask类">FutureTask类</h3><p>FutureTask类实现了RunnableFuture接口，RunnableFuture接口又继承了Runable和Future，可见，FutureTask既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。</p><p>FutureTask类图如下</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1620-1667231117133-93.png" alt="img"></p><p>FutureTask两个构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用FutureTask来实现Future多线程获取任务结果的场景</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MyFutureTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFutureTask</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>            executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyFutureTask</span> <span class="token keyword">extends</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">MyFutureTask</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"完成："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> time<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"启动："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>启动：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">26</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>启动：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">26</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span>启动：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">26</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>完成：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">32</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span>完成：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">33</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>完成：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">34</span> <span class="token constant">CST</span> <span class="token number">2019</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CompletionService接口">CompletionService接口</h2><p>我们知道，通过 Future 和 FutureTask 可以获得线程任务的执行结果，但它们有一定的缺陷：</p><ul><li>Future：多个线程任务的执行结果，我们可以通过轮询的方式去获取，但普通轮询会有被阻塞的可能，升级轮询会非常消耗cpu</li><li>FutureTask：虽然我们可以调用 done 方法，在线程任务执行结束后立即返回或做其他处理，但对批量线程任务结果的管理方面有所不足</li></ul><p>为了更好地应对大量线程任务结果处理的问题，JDK提供了功能强大的 CompletionService。CompletionService是一个接口，使用创建时提供的 Executor 对象（通常是线程池）来执行任务，并在内部维护了一个阻塞队列<code>QueueingFuture</code>，当任务执行结束就把任务的执行结果的<code>Future</code>对象加入到阻塞队列中。</p><p>该接口只有一个实现类： <code>ExecutorCompletionService</code></p><blockquote><p>ExecutorCompletionService  的构造函数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Creates an ExecutorCompletionService using the supplied * executor for base task execution and a * {@link LinkedBlockingQueue} as a completion queue. * * @param executor the executor to use * @throws NullPointerException if executor is {@code null} */</span><span class="token keyword">public</span> <span class="token class-name">ExecutorCompletionService</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>aes <span class="token operator">=</span> <span class="token punctuation">(</span>executor <span class="token keyword">instanceof</span> <span class="token class-name">AbstractExecutorService</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">(</span><span class="token class-name">AbstractExecutorService</span><span class="token punctuation">)</span> executor <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>completionQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Creates an ExecutorCompletionService using the supplied * executor for base task execution and the supplied queue as its * completion queue. * * @param executor the executor to use * @param completionQueue the queue to use as the completion queue *        normally one dedicated for use by this service. This *        queue is treated as unbounded -- failed attempted *        {@code Queue.add} operations for completed tasks cause *        them not to be retrievable. * @throws NullPointerException if executor or completionQueue are {@code null} */</span><span class="token keyword">public</span> <span class="token class-name">ExecutorCompletionService</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> completionQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> completionQueue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>aes <span class="token operator">=</span> <span class="token punctuation">(</span>executor <span class="token keyword">instanceof</span> <span class="token class-name">AbstractExecutorService</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">(</span><span class="token class-name">AbstractExecutorService</span><span class="token punctuation">)</span> executor <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>completionQueue <span class="token operator">=</span> completionQueue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个构造方法都需要传入一个线程池，如果不指定 <code>completionQueue</code>，那么默认会使用无界的 <code>LinkedBlockingQueue</code>。任务执行结果的 Future 对象就是加入到 completionQueue 中。</p><blockquote><p>CompletionService 接口方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">//提交线程任务</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//提交线程任务</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//阻塞等待</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">//非阻塞等待</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//带时间的非阻塞等待</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>submit(Callable task)：提交线程任务，交由 Executor 对象去执行，并将结果放入阻塞队列；</li><li>take()：在阻塞队列中获取并移除一个元素，该方法是阻塞的，即获取不到的话线程会一直阻塞；</li><li>poll()：在阻塞队列中获取并移除一个元素，该方法是非阻塞的，获取不到即返回 null ；</li><li>poll(long timeout, TimeUnit unit)：从阻塞队列中非阻塞地获取并移除一个元素，在设置的超时时间内获取不到即返回 null ；</li></ul><p>接下来，我们重点看一下submit 的源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>   executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueueingFuture</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从submit 方法的源码中可以确认两点：</p><ol><li>线程任务确实是由 Executor 对象执行的；</li><li>提交某个任务时，该任务首先将被包装为一个QueueingFuture。</li></ol><p>继续追查 <code>QueueingFuture</code>，可以发现： 该类重写了 FutureTask 的done方法，当计算完成时，把Executor执行的计算结果放入BlockingQueue中，而==放入结果是按任务完成顺序来进行==的，即先完成的任务先放入阻塞队列。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/**   * FutureTask extension to enqueue upon completion   */</span>  <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">QueueingFuture</span> <span class="token keyword">extends</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      <span class="token class-name">QueueingFuture</span><span class="token punctuation">(</span><span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> completionQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此，CompletionService 实现了生产者提交任务和消费者获取结果的解耦，任务的完成顺序由 CompletionService 来保证，消费者一定是按照任务完成的先后顺序来获取执行结果。</p><blockquote><p>CompletionService 使用示例</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletionServiceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 此线程池运行5个线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>            cs<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" 启动："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> index <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> name<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 结果："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">15</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">17</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">19</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">21</span> <span class="token constant">CST</span> <span class="token number">2019</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">23</span> <span class="token constant">CST</span> <span class="token number">2019</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ScheduledExecutorService">ScheduledExecutorService</h2><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220726163319524-1667231117133-92.png" alt="image-20220726163319524"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 1秒后开始执行任务，每2秒执行一回*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledExecutorServiceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//scheduledExecutorService.schedule(() -&gt; System.out.println(Thread.currentThread().getName()), 1, TimeUnit.SECONDS);</span>        <span class="token class-name">AtomicLong</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            time<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5001</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5001</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5000</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5001</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5000</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5001</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5001</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5000</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5001</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>ScheduledThreadPoolExecutor </code>特殊参数说明</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 允许现有周期性任务在Shutdown之后继续执行 */</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> continueExistingPeriodicTasksAfterShutdown<span class="token punctuation">;</span><span class="token comment">/** * 允许现有延时任务在Shutdown之后继续执行 */</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> executeExistingDelayedTasksAfterShutdown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledExecutorServiceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledThreadPoolExecutor</span> scheduledThreadPool <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduledThreadPool<span class="token punctuation">.</span><span class="token function">setExecuteExistingDelayedTasksAfterShutdownPolicy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//scheduledThreadPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(true);</span>        <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduledThreadPool<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            time<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduledThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>CompletableFuture</h1><h3 id="创建对象">创建对象</h3><h4 id="runAsync">runAsync</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="supplyAsync">supplyAsync</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>runAsync 方法以Runnable函数式接口类型为参数，没有返回结果，</p><p>supplyAsync 方法Supplier函数式接口类型为参数，返回结果类型为U；</p><p>没有指定Executor的方法会使用ForkJoinPool.commonPool() 作为它的线程池执行异步代码。如果指定线程池，则使用指定的线程池运行</p><h3 id="结果处理">结果处理</h3><blockquote><p>当CompletableFuture的计算结果完成，或者抛出异常的时候，我们可以执行特定的 Action</p></blockquote><h4 id="whenComplete">whenComplete</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">whenCompleteAsync</span><span class="token punctuation">(</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">whenCompleteAsync</span><span class="token punctuation">(</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="exceptionally">exceptionally</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Action的类型是BiConsumer&lt;? super T,? super Throwable&gt;，它可以处理正常的计算结果，或者异常情况。</li><li>方法不以Async结尾，意味着Action使用相同的线程执行，而Async可能会使用其它的线程去执行(如果使用相同的线程池，也可能会被同一个线程选中执行。</li><li><strong>这几个方法都会返回CompletableFuture。当Action执行完毕后，<font color="red">返回原始的CompletableFuture的计算结果或者返回异常</font>。</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureExample2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：数据-"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Void</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        future<span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：执行失败，"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常执行结束</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：执行结束<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：执行完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>抛出异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：数据<span class="token operator">-</span><span class="token number">6</span><span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：执行失败，<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArithmeticException</span><span class="token operator">:</span> <span class="token operator">/</span> by zero<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：执行完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="handle">handle</h4><ul><li>当原先的CompletableFuture的值计算完成或者抛出异常的时候，由BiFunction参数计算，<font color="red">产生新的CompletableFuture</font></li></ul><p>这组方法兼有whenComplete和转换的两个功能（whenComplete and reture）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleAsync</span><span class="token punctuation">(</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleAsync</span><span class="token punctuation">(</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试DEMO：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一阶段："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> exception<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">int</span> result <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二阶段："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">一阶段：<span class="token number">100</span>二阶段：<span class="token number">300</span>最终结果：<span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="结果转换（Function）">结果转换（Function）</h3><p>所谓结果转换，就是将上一段任务的执行结果作为下一阶段任务的入参参与重新计算，<font color="red">产生新的结果</font></p><h4 id="thenApply">thenApply</h4><ol><li><p><code>thenApply</code> 接收一个函数作为参数，使用该函数处理上一个CompletableFuture 调用的结果，并返回一个具有处理结果的Future对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一阶段："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>number <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二阶段："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">一阶段：<span class="token number">100</span>二阶段：<span class="token number">300</span>最终结果：<span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="thenCompose">thenCompose</h4><ol><li><p><code>thenCompose</code>的参数为一个返回 CompletableFuture 实例的函数，该函数的参数是先前计算步骤的结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCompose</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenComposeAsync</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenComposeAsync</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> number <span class="token operator">=</span> param <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> number<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果: "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么 <code>thenApply </code>和<code>thenCompose </code>有何区别呢：</p><ul><li><code>thenApply </code>转换的是泛型中的类型，返回的是同一个CompletableFuture；</li><li><code>thenCompose</code> 使用上一个CompletableFutre 调用的结果在下一步的 CompletableFuture 调用中进行运算，是生成一个内部构造的新的CompletableFuture。</li></ul><p>下面用一个例子对对比：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>param <span class="token operator">-&gt;</span> param <span class="token operator">+</span> <span class="token string">" World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result2 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span>param <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> param <span class="token operator">+</span> <span class="token string">" World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="结果消费（Consumer）">结果消费（Consumer）</h3><p>与结果处理和结果转换系列函数返回一个新的 CompletableFuture 不同，结果消费系列函数只对结果执行Action，而<font color="red">不返回新的计算值</font>。</p><p>根据对结果的处理方式，结果消费函数又分为：</p><ul><li><code>thenAccept</code>系列：对单个结果进行消费</li><li><code>thenAcceptBoth</code>系列：对两个结果进行消费</li><li><code>thenRun</code>系列：不关心结果，只对结果执行Action</li></ul><h4 id="thenAccept">thenAccept</h4><p>通过观察该系列函数的参数类型可知，它们是函数式接口Consumer，这个接口只有输入，没有返回值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token class-name">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture<span class="token punctuation">&lt;</span>Void<span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token keyword">int</span></span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>number <span class="token operator">-&gt;</span> System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="thenAcceptBoth">thenAcceptBoth</h4><p>thenAcceptBoth 函数的作用是，当两个 CompletionStage 都正常完成计算的时候，就会执行提供的action，消费两个异步的结果。没有返回值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> futrue1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    futrue1<span class="token punctuation">.</span><span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span> <span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="thenRun">thenRun</h4><p>thenRun 也是对线程任务结果的一种消费函数，与thenAccept不同的是，thenRun 会在上一阶段 CompletableFuture 计算完成的时候执行一个Runnable，但是不使用该 CompletableFuture 计算的结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenRunAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenRunAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thenRun 执行"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果组合">结果组合</h3><h4 id="thenCombine">thenCombine</h4><p>thenCombine 方法，合并两个线程任务的结果，并进一步处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCombine</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCombineAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCombineAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span> <span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="任务交互">任务交互</h3><p>线程交互，是指将两个线程任务获取结果的速度相比较，按一定的规则进行下一步处理。</p><h4 id="applyToEither（转换）">applyToEither（转换）</h4><p>两个线程任务相比较，先获得执行结果的，就对该结果进行下一步的转换操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">applyToEither</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">applyToEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">applyToEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    future1<span class="token punctuation">.</span><span class="token function">applyToEither</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最快结果："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="acceptEither（消费）">acceptEither（消费）</h4><p>两个线程任务相比较，先获得执行结果的，就对该结果进行下一步的消费操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">acceptEither</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">acceptEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">acceptEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    future1<span class="token punctuation">.</span><span class="token function">acceptEither</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最快结果："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="runAfterEither">runAfterEither</h4><p>两个线程任务相比较，有任何一个执行完成，就进行下一步操作，不关心运行结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterEither</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Supplier</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> number<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> number<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        future1<span class="token punctuation">.</span><span class="token function">runAfterEither</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经有一个任务完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="runAfterBoth">runAfterBoth</h4><p>两个线程任务相比较，两个全部执行完成，才进行下一步操作，不关心运行结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterBothAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterBothAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Supplier</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段：1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段：2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        future1<span class="token punctuation">.</span><span class="token function">runAfterBoth</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上面两个任务都执行完成了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="anyOf">anyOf</h4><p>anyOf 方法的参数是多个给定的 CompletableFuture，当其中的任何一个完成时，返回这个任务的 CompletableFuture</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="allOf">allOf</h4><p>allOf方法用来实现监听 多个 CompletableFuture 的全部完成。</p><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future1完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"future1完成！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future2完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"future2完成！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> combindFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        combindFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future1: "</span> <span class="token operator">+</span> future1<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，future2: "</span> <span class="token operator">+</span> future2<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CompletableFuture：其他">CompletableFuture：其他</h3><h4 id="getNow：提交任务继续运行">getNow：提交任务继续运行</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token class-name">T</span> valueIfAbsent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureExample4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 任务继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" HELLO"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" WORLD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" main exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># <span class="token class-name">Console</span>输出<span class="token number">1659410799621</span> <span class="token constant">WORLD</span><span class="token number">1659410802622</span> 任务继续执行<span class="token number">1659411545079</span> main exit<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="complete：提交任务不会继续运行">complete：提交任务不会继续运行</h4><p>如果尚未完成，则将 get() 和相关方法返回的值设置为给定值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureExample5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 任务继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" HELLO"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> status <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" WORLD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" main exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># <span class="token class-name">Console</span>输出<span class="token number">1659410986243</span> <span class="token boolean">true</span><span class="token number">1659410986243</span> <span class="token constant">WORLD</span><span class="token number">1659410991249</span> main exit<span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="completeExceptionally">completeExceptionally</h4><p>如果任务尚未完成，则导致调用 get() 和相关方法抛出给定的异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">completeExceptionally</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureExample6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 任务继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" HELLO"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> status <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"等不及返回结果"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 抛出异常</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 不会执行</span>        <span class="token comment">//result.thenAccept((e) -&gt; {</span>        <span class="token comment">//    System.out.println("-------------");</span>        <span class="token comment">//});</span>        <span class="token comment">// 不会执行</span>        <span class="token comment">//result.thenApply(e -&gt; "-----");</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" main exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1659412396003</span> <span class="token boolean">true</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ExecutionException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> 等不及返回结果at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span><span class="token punctuation">.</span><span class="token function">reportGet</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">357</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1895</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">hots<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>future<span class="token punctuation">.</span></span>CompletableFutureExample6</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">CompletableFutureExample6</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> 等不及返回结果at <span class="token class-name"><span class="token namespace">hots<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>future<span class="token punctuation">.</span></span>CompletableFutureExample6</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">CompletableFutureExample6</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>并发集合</h1><p>JDK中并发队列提供了两种实现,一种是高性能队列ConcurrentLinkedQueue,一种是阻塞队列BlockingQueue,两种都继承自Queue:</p><h2 id="BlockingQueue集合类关系图">BlockingQueue集合类关系图</h2><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/BlockingDeque-1667231117133-94.png" alt="BlockingDeque"></p><h2 id="BlockingQueue的7个子类">BlockingQueue的7个子类</h2><ul><li>Queue 方法概述</li></ul><table><thead><tr><th></th><th>Throws exception</th><th>Returns special value</th><th></th></tr></thead><tbody><tr><td>Insert</td><td>add(e)</td><td>offer(e)：【@return：true if the element was added to this queue, else false】</td><td></td></tr><tr><td>Remove</td><td>remove()</td><td>poll()：【@return：the head of this queue, or null if the specified waiting time elapses before an element is available】</td><td></td></tr><tr><td>Examine</td><td>element()</td><td>peek()：【@return：the head of this queue, or null if this queue is empty】</td><td></td></tr></tbody></table><ul><li>BlockingQueue 方法概述</li></ul><table><thead><tr><th></th><th>Throws exception</th><th>Returns special value</th><th>Blocks</th><th>Times out</th></tr></thead><tbody><tr><td>Insert</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e, time, unit)</td></tr><tr><td>Remove</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time, unit)</td></tr><tr><td>Examine</td><td>element()</td><td>peek()</td><td>—</td><td>—</td></tr></tbody></table><ul><li>说明</li></ul><ol><li><p>ArrayBlockingQueue</p><p>​ <strong>基于数组的阻塞队列实现</strong>，在ArrayBlockingQueue内部，维护了一个定长数组，以便缓存队列中的数据对象，这是一个常用的阻塞队列，除了一个定长数组外，ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。<strong>ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象</strong>，<strong>由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；</strong> 按照实现原理来分析，ArrayBlockingQueue完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。  <strong>ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。而在创建ArrayBlockingQueue时，我们还可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。</strong></p></li><li><p>LinkedBlockingQueue</p><ul><li><strong>基于链表的阻塞队列</strong>，同ArrayBlockingQueue类似，其内部也维持着一个数据缓冲队列（该队列由一个链表构成）。当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。而LinkedBlockingQueue之所以能够高效的处理并发数据，<strong>还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。</strong></li><li><strong>作为开发者，我们需要注意的是，如果构造一个LinkedBlockingQueue对象，而没有指定其容量大小，LinkedBlockingQueue会默认一个类似无限大小的容量（Integer.MAX_VALUE），这样的话，如果生产者的速度一旦大于消费者的速度，也许还没有等到队列满阻塞产生，系统内存就有可能已被消耗殆尽了</strong></li><li>ArrayBlockingQueue和LinkedBlockingQueue是两个最普通也是最常用的阻塞队列，一般情况下，在处理多线程间的生产者消费者问题，使用这两个类足以</li></ul></li><li><p>PriorityBlockingQueue</p><p>​基于优先级的阻塞队列（优先级的判断通过构造函数传入的Compator对象来决定），但需要注意的是PriorityBlockingQueue并不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者。因此使用的时候要特别注意，生产者生产数据的速度绝对不能快于消费者消费数据的速度，否则时间一长，会最终耗尽所有的可用堆内存空间。在实现PriorityBlockingQueue时，<strong>内部控制线程同步的锁采用的是公平锁</strong></p></li><li><p>DelayQueue</p><p>​DelayQueue中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</p><p>​DelayQueue使用场景较少，但都相当巧妙，常见的例子比如使用一个DelayQueue来管理一个超时未响应的连接队列。</p></li><li><p>SynchronousQueue</p><p>​一种无缓冲的等待队列，生产者产生的数据直接会被消费者获取并消费， 类似于无中介的直接交易，有点像原始社会中的生产者和消费者，生产者拿着产品去集市销售给产品的最终消费者，而消费者必须亲自去集市找到所要商品的直接生产者，如果一方没有找到合适的目标，那么对不起，大家都在集市等待。相对于有缓冲的BlockingQueue来说，少了一个中间经销商的环节（缓冲区），如果有经销商，生产者直接把产品批发给经销商，而无需在意经销商最终会将这些产品卖给那些消费者，由于经销商可以库存一部分商品，因此相对于直接交易模式，总体来说采用中间经销商的模式会吞吐量高一些（可以批量买卖）；但另一方面，又因为经销商的引入，使得产品从生产者到消费者中间增加了额外的交易环节，单个产品的及时响应性能可能会降低。</p><p>​声明一个SynchronousQueue有两种不同的方式，它们之间有着不太一样的行为。</p><p>公平模式和非公平模式的区别:</p><ul><li><p>如果采用公平模式：SynchronousQueue会采用公平锁，并<strong>配合一个FIFO队列</strong>来阻塞多余的生产者和消费者，从而体系整体的公平策略；</p></li><li><p>但如果是非公平模式（SynchronousQueue默认）：SynchronousQueue采用非公平锁，同时<strong>配合一个LIFO队列</strong>来管理多余的生产者和消费者，而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。</p></li></ul></li><li><p>LinkedTransferQueue</p><p>传入的数据，需要担保被使用了。否则放入失败/阻塞</p><pre class="line-numbers language-none"><code class="language-none">private static final int NOW   = 0; // for untimed poll, tryTransferprivate static final int ASYNC = 1; // for offer, put, addprivate static final int SYNC  = 2; // for transfer, takeprivate static final int TIMED = 3; // for timed poll, tryTransfer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><table><thead><tr><th></th><th>ArrayBlockingQueue</th><th>PriorityBlockingQueue</th><th>LinkedBlockingQueue</th><th>LinkedBlockingDeque</th><th>SynchronousQueue</th><th>DelayQueue</th><th>LinkedTransferQueue</th></tr></thead><tbody><tr><td><strong>bounded（边界）</strong></td><td>Y</td><td>N</td><td>Optional</td><td>Optional</td><td>Y</td><td>N</td><td>N</td></tr><tr><td><strong>add</strong></td><td>添加成功：返回<code>true</code>；<br>添加失败（已满）：抛出<code>IllegalStateException</code><br></td><td>调用<code>offer</code>，返回结果同offer</td><td>调用<code>offer</code><br>添加成功：返回<code>true</code>；<br>添加失败（false）：抛出<code>IllegalStateException</code><br></td><td><font color="orange"><strong>由<code>addLast</code>执行</strong></font><br><br>调用<code>offerLast</code><br>添加成功：返回<code>true</code>；<br>添加失败（false）：抛出<code>IllegalStateException</code><br></td><td>调用<code>offer</code><br>添加成功：返回<code>true</code>；<br>添加失败（已满）：抛出<code>IllegalStateException</code><br></td><td>同<code>offer</code></td><td>在尾部插入元素<br>无边界Queue，不会抛出IllegalStateException，或者false。<br>添加成功：返回<code>true</code>；<br></td></tr><tr><td><font color="red"><strong>offer</strong></font></td><td>添加成功：返回<code>true</code>；<br>添加失败(已满)：返回<code>false</code><br></td><td>添加成功，返回<code>true</code>；<br>无边界，不存在已满<br>抛出异常：元素无法compare<br></td><td>队尾添加成功：返回<code>true</code>；<br>添加失败(已满)：返回<code>false</code><br></td><td><font color="orange"><strong>同<code>offerLast</code></strong></font><br><br>队尾添加成功：返回<code>true</code>；<br>添加失败(已满)：返回<code>false</code><br></td><td>如果另一个线程正在等待接收，则将指定元素插入此队列，返回<code>true</code>;<br>没有接收线程，返回<code>false</code></td><td>在尾部插入元素<br>添加成功，返回<code>true</code>；<br>无边界Queue，不存在已满<br></td><td>同 <code>add</code></td></tr><tr><td><font color="blue"><strong>put（阻塞）</strong></font></td><td>将指定元素插入此队列的==尾部==，如果队列已满，则==等待空间可用==</td><td>同<code>offer</code>。无边界，无需阻塞。</td><td>在此队列的尾部插入指定元素，如有必要，则==等待空间可用==。</td><td><font color="orange"><strong>同<code>putLast</code></strong></font><br><br>在此队列的尾部插入指定元素，如有必要，则==等待空间可用==。</td><td>将指定元素添加到此队列中，阻塞，等待另一个线程接收它。</td><td>同<code>offer</code></td><td>同<code>add</code></td></tr><tr><td><strong>remove</strong></td><td><code>poll</code>头部元素，如果为null，则会抛出异常</td><td><code>poll</code>头部元素，如果为null，则会抛出异常</td><td><code>poll</code>头部元素，如果为null，则会抛出异常</td><td><font color="orange"> <strong>同<code>removeFirst</code></strong> </font> <br><br><code>pollFirst</code>头部元素，如果为null，则会抛出异常</td><td><code>poll</code>头部元素，如果为null，则会抛出异常</td><td><code>poll</code>头部元素，如果为null，则会抛出异常</td><td><code>poll</code>头部元素，如果为null，则会抛出异常</td></tr><tr><td><font color="red"><strong>poll</strong></font></td><td>移除头部元素并返回<br>无元素返回<code>null</code></td><td>移除头部元素并返回<br>无元素返回<code>null</code></td><td>移除头部元素并返回<br>无元素返回<code>null</code></td><td><font color="orange"> <strong>同<code>pollFirst</code></strong> </font> <br><br>移除头部元素并返回<br>无元素返回<code>null</code></td><td>移除头部元素并返回<br>如果没有可用元素，则返回 <code>null</code><br>无元素返回<code>null</code></td><td>移除头部元素并返回<br>如果此队列没有具有过期延迟的元素，则返回<code>null</code><br>无元素返回<code>null</code></td><td>移除头部元素并返回<br>无元素返回<code>null</code></td></tr><tr><td><strong>element</strong></td><td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td><td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td><td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td><td>**<code>peekFirst</code>**头部元素<br><br>若结果为null，则抛出异常<code>NoSuchElementException</code></td><td><code>peek </code>头部元素<br>永远抛出<code>NoSuchElementException</code></td><td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td><td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td></tr><tr><td><strong>peek</strong></td><td>获取头部元素<br>不会删除元素</td><td>获取头部元素<br>不会删除元素</td><td>获取头部元素<br>不会删除元素</td><td>**<code>peekFirst</code>**头部元素<br><br>获取头部元素<br>不会删除元素</td><td>直接 <code>return null</code></td><td>获取头部元素<br>不会删除元素</td><td>获取头部元素<br>不会删除元素</td></tr><tr><td><font color="blue"><strong>take（阻塞）</strong></font></td><td>移除头部元素并返回<br>队列无元素，则阻塞等待<br></td><td>移除头部元素并返回<br>队列无元素，则阻塞等待<br></td><td>移除头部元素并返回<br>队列无元素，则阻塞等待<br></td><td>同**<code>takeFirst</code>**<br><br>移除头部元素并返回<br>队列无元素，则阻塞等待<br></td><td>一直等待，直到有另一个线程<code>transfer</code>元素</td><td>一直等待，直到有线程放进元素，且头部元素过期</td><td>一直等待，直到有线程放进元素</td></tr><tr><td><strong>transfer</strong></td><td>无</td><td>无</td><td>无</td><td>无</td><td>无</td><td>无</td><td>在队列尾部插入元素，若没有被消费，则一直等待</td></tr></tbody></table><ul><li><p>ConcurrentHashMap</p></li><li><p>ConcurrentSkipListMap</p></li><li><p>ConcurrentSkipListSet</p></li><li><p>ConcurrentLinkedQueue</p></li><li><p>ConcurrentLinkedDeque</p></li><li><p>CopyOnWriteArrayList</p></li><li><p>CopyOnWriteArraySet</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Atomic包&lt;/h1&gt;
&lt;h2 id=&quot;CAS-Compare-And-Swap-：比较并交换&quot;&gt;CAS(Compare And Swap)：比较并交换&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CAS&lt;/code&gt;即&lt;code&gt;Compare And Swap&lt;/code&gt;的缩写，</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://hmxyl.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
