<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alisa&#39;s Home</title>
  
  <subtitle>Alisa&#39;s Home</subtitle>
  <link href="https://hmxyl.github.io/atom.xml" rel="self"/>
  
  <link href="https://hmxyl.github.io/"/>
  <updated>2025-06-19T06:29:23.328Z</updated>
  <id>https://hmxyl.github.io/</id>
  
  <author>
    <name>Alisa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux系统文件操作命令</title>
    <link href="https://hmxyl.github.io/20250616/44c28660.html"/>
    <id>https://hmxyl.github.io/20250616/44c28660.html</id>
    <published>2025-06-16T09:48:34.000Z</published>
    <updated>2025-06-19T06:29:23.328Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>chown ：更改文件或目录所有者和所属组</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="built_in">chown</span> [选项] [新所有者][:新组] 文件或目录...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选项</span></span><br><span class="line">-R递归处理，更改目录及其下所有内容的所有权</span><br><span class="line">-v显示详细的处理信息</span><br><span class="line">-c类似 -v，但仅在发生更改时报告</span><br><span class="line">-f不显示错误信息</span><br><span class="line">--reference=参考文件（使用参考文件的所有者和组，而不是显式指定）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改文件所有者</span></span><br><span class="line"><span class="built_in">chown</span> username filename</span><br><span class="line"><span class="comment"># 同时更改所有者和组</span></span><br><span class="line"><span class="built_in">chown</span> username:groupname filename</span><br><span class="line"><span class="comment"># 只更改文件所属组（两种等效方式）：</span></span><br><span class="line"><span class="built_in">chown</span> :groupname filename</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">chgrp</span> groupname filename</span><br><span class="line"><span class="comment">#递归更改目录及其内容的所有权：</span></span><br><span class="line"><span class="built_in">chown</span> -R username:groupname directory/</span><br><span class="line"><span class="comment"># 使用用户ID和组ID（数字形式）</span></span><br><span class="line"><span class="built_in">chown</span> 1000:1000 filename</span><br><span class="line"><span class="comment"># 复制其他文件的所有权设置：</span></span><br><span class="line"><span class="built_in">chown</span> --reference=source_file target_file</span><br></pre></td></tr></tbody></table></figure><h1>chmod：更改文件或目录权限</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="built_in">chmod</span> [选项] 模式 文件或目录...</span><br><span class="line"><span class="comment"># 常用选项</span></span><br><span class="line">-R递归处理，更改目录及其下所有内容的权限</span><br><span class="line">-v显示详细的处理信息</span><br><span class="line">-c类似 -v，但仅在发生更改时报告</span><br><span class="line">-f不显示错误信息</span><br></pre></td></tr></tbody></table></figure><ul><li><p>权限表示方法：字母表示法（u/g/o/a +/-/= r/w/x）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">符号含义</span><br><span class="line">u文件所有者(user)</span><br><span class="line">g文件所属组(group)</span><br><span class="line">o其他用户(others)</span><br><span class="line">a所有用户(all)</span><br><span class="line">+添加权限</span><br><span class="line">-移除权限</span><br><span class="line">=设置权限</span><br></pre></td></tr></tbody></table></figure><p>范例</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给所有者添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> u+x filename</span><br><span class="line"><span class="comment"># 给组和其他用户移除写权限</span></span><br><span class="line"><span class="built_in">chmod</span> go-w filename</span><br><span class="line"><span class="comment"># 设置所有用户只有读权限</span></span><br><span class="line"><span class="built_in">chmod</span> a=r filename</span><br><span class="line"><span class="comment"># 给所有者读写执行，组读执行，其他用户无权限</span></span><br><span class="line"><span class="built_in">chmod</span> u=rwx,g=rx,o= filename</span><br></pre></td></tr></tbody></table></figure></li><li><p>权限表示方法：数字表示法（八进制数）。三位数字分别表示：所有者、组、其他用户的权限</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数字权限</span><br><span class="line">4读(r)</span><br><span class="line">2写(w)</span><br><span class="line">1执行(x)</span><br><span class="line">0无权限(-)</span><br></pre></td></tr></tbody></table></figure><p>范例</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置权限为 rwxr-xr-- (754)：所有者读写执行(4+2+1 = rwx)，组读执行(4+1 = r-x)，其他用户读(4 = r--)</span></span><br><span class="line"><span class="built_in">chmod</span> 754 filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用权限设置</span></span><br><span class="line"><span class="comment"># 所有者读写，组和其他用户只读</span></span><br><span class="line"><span class="built_in">chmod</span> 644 filename  </span><br><span class="line"><span class="comment"># 所有者完全控制，组和其他用户读执行</span></span><br><span class="line"><span class="built_in">chmod</span> -R 755 directory </span><br><span class="line"><span class="comment"># 仅所有者可读写（保护敏感文件）</span></span><br><span class="line"><span class="built_in">chmod</span> 600 private_file </span><br></pre></td></tr></tbody></table></figure></li></ul><h1>truncate：清空文件</h1><blockquote><p>清空正在使用的 catalina.out文件：<code>truncate -s 0 catalina.out</code></p></blockquote><ul><li><p>使用 truncate 命令清空文件</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -s 参数是设置文件的大小，清空文件的话，就设定为0</span></span><br><span class="line"><span class="built_in">truncate</span> -s 0 catalina.out</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用 echo 命令清空文件</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">" "</span> &gt; catalina.out  </span><br></pre></td></tr></tbody></table></figure></li></ul><h1>tree：树形结构查看文件</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install tree</span><br><span class="line">或者</span><br><span class="line">yum install tree</span><br></pre></td></tr></tbody></table></figure><h1>du：查看占用的磁盘空间</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="built_in">du</span> [选项] [文件]</span><br><span class="line">参数:</span><br><span class="line">    -a或-all 显示目录中个别文件的大小</span><br><span class="line">    -b或-bytes 显示目录或文件大小时，以byte为单位</span><br><span class="line">    -c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和</span><br><span class="line">    -k或--kilobytes 以KB(1024bytes)为单位输出</span><br><span class="line">    -m或--megabytes 以MB为单位输出</span><br><span class="line">    -s或--summarize 仅显示总计，只列出最后加总的值</span><br><span class="line">    -h或--human-readable 以K，M，G为单位，提高信息的可读性</span><br><span class="line">    -x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过</span><br><span class="line">    -L&lt;符号链接&gt;或--dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小</span><br><span class="line">    -S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小</span><br><span class="line">    -X&lt;文件&gt;或--exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件</span><br><span class="line">    --exclude=&lt;目录或文件&gt; 略过指定的目录或文件</span><br><span class="line">    -D或--dereference-args 显示指定符号链接的源文件大小</span><br><span class="line">    -H或--si 与-h参数相同，但是K，M，G是以1000为换算单位</span><br><span class="line">    -l或--count-links 重复计算硬件链接的文件。</span><br><span class="line">范例：<span class="built_in">du</span> -hm 目录名称</span><br></pre></td></tr></tbody></table></figure><h1>find ：查找文件</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式 : find [path...] [expression]</span><br><span class="line">说明 : 将符合 expression 的文件列出来。                    </span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>全称</th><th>作用</th></tr></thead><tbody><tr><td><code> -atime n</code></td><td>access minute</td><td>在过去 <strong>n 天</strong>被读取过的文件</td></tr><tr><td><code> -ctime n</code></td><td>change time</td><td>在过去 <strong>n 天</strong>文件状态（权限变更、所有者变更、链接数变更等元数据修改）被修改的文件</td></tr><tr><td><code>-mtime n</code></td><td>modify time</td><td>在过去 <strong>n 天</strong>文件内容被修改的文件<br><code>-mtime n</code>：精确匹配 <strong>n 天前</strong>修改的文件<br><code>-mtime +n</code>：查找修改时间<strong>超过 n 天</strong>的文件<br><code>-mtime -n</code>：查找修改时间在 <strong>n 天内</strong>的文件</td></tr><tr><td><code> -amin n</code></td><td>access minute</td><td>在过去 <strong>n 分钟</strong>内被读取过的文件</td></tr><tr><td><code> -cmin n</code></td><td>change time</td><td>在过去 <strong>n 分钟</strong>文件状态（权限变更、所有者变更、链接数变更等元数据修改）被修改的文件</td></tr><tr><td><code>-mmin n</code></td><td>modify minute</td><td>在过去 <strong>n 分钟</strong>文件内容被修改的文件</td></tr><tr><td><code> -anewer file</code></td><td></td><td>比文件 file 更晚被读取过的文件</td></tr><tr><td><code> -cnewer file</code></td><td></td><td>比文件 file 更新的文件</td></tr><tr><td><code> -name filename</code><br><code>-iname filename</code></td><td></td><td>符合 filename 的文件。iname 会忽略大小写</td></tr><tr><td><code> -size n</code></td><td></td><td>文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k表示 kilo bytes，w 是二个位元组。</td></tr><tr><td><code> -type c</code></td><td></td><td>文件类型是 c 的档案。</td></tr></tbody></table><p>范例:</p><ol><li><p>将当前目录及其子目录下所有扩展名是 c 的文件列出来：<code>find . -name "*.c"</code></p></li><li><p>将当前目录及其子目录下所有最近 20 分钟内更新过的文件列出：<code>find . -cmin -20</code></p></li><li><p>查找包含字符串的文件：<code>find /opt/Tomcat7  -name "system.properties"|xargs grep -ri "BASCI_UPDATE"</code></p></li><li><p>将/usr/local/backups目录下10天前修改过的，名称包含localhost的文件删除：<code>find /usr/local/backups -mtime +10 -name "*localhost*.*" |xargs rm -rf</code></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find /usr/local/backups -mtime +10 -name <span class="string">"*.*"</span> |xargs <span class="built_in">rm</span> -rf</span><br><span class="line">或者</span><br><span class="line">find /usr/local/backups -mtime +10 -name <span class="string">"*.*"</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf {} \;</span><br><span class="line"></span><br><span class="line">说明： 　　</span><br><span class="line">find：linux的查找命令，用户查找指定条件的文件 　　</span><br><span class="line">/usr/local/backups：想要进行清理的任意目录 　　</span><br><span class="line">-mtime：标准语句写法 　　</span><br><span class="line">＋10：查找10天前的文件，这里用数字代表天数，＋30表示查找30天前的文件</span><br><span class="line"><span class="string">"*.*"</span>：希望查找的数据类型，<span class="string">"*.jpg"</span>表示查找扩展名为jpg的所有文件，<span class="string">"*"</span>表示查找所有文件，这个可以灵活运用，举一反三 　　</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-<span class="built_in">exec</span> <span class="built_in">rm</span> -rf {} \; ：find发现的结果一次性传给<span class="built_in">exec</span>选项，删除</span><br><span class="line">|xargs <span class="built_in">rm</span> -rf : 分批次的处理删除（推荐）</span><br></pre></td></tr></tbody></table></figure></li></ol><h1>grep： 搜索文件内字符串</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：grep [-no] pattern files</span><br><span class="line">参数：</span><br><span class="line">     -n 显示行号</span><br><span class="line">     -o 只显示匹配的串</span><br></pre></td></tr></tbody></table></figure><p>范例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">grep  <span class="built_in">printf</span> *</span><br><span class="line">    file1.c:   <span class="built_in">printf</span>(<span class="string">"\nHello\n"</span>);</span><br><span class="line">    file2.c:   <span class="built_in">printf</span>(<span class="string">"\nSample\n"</span>);</span><br><span class="line"></span><br><span class="line">grep -n  <span class="built_in">printf</span> *</span><br><span class="line">    file1.c:4   <span class="built_in">printf</span>(<span class="string">"\nHello\n"</span>);</span><br><span class="line">    file2.c:9   <span class="built_in">printf</span>(<span class="string">"\nSample\n"</span>);</span><br><span class="line"></span><br><span class="line">grep -o  <span class="built_in">printf</span> *</span><br><span class="line">   file1.c:   <span class="built_in">printf</span></span><br><span class="line">   file2.c:   <span class="built_in">printf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果搜索的串中有空格，则用引号括起来</span></span><br><span class="line">grep <span class="string">"asd abc"</span> *</span><br></pre></td></tr></tbody></table></figure><h1>wc：统计指定文件中的字节数、字数、行数</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="built_in">wc</span> [选项] 文件名称</span><br><span class="line">选项 ：</span><br><span class="line">   -c 统计字节数。</span><br><span class="line">   -l 统计行数。</span><br><span class="line">   -m 统计字符数。这个标志不能与 -c 标志一起使用。</span><br><span class="line">   -w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。</span><br><span class="line">   -L 打印最长行的长度。</span><br><span class="line">   -<span class="built_in">help</span> 显示帮助信息</span><br><span class="line">   --version 显示版本信息</span><br></pre></td></tr></tbody></table></figure><h1>cp：拷贝文件</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="built_in">cp</span> [-arf] <span class="built_in">source</span> dest</span><br><span class="line">参数:</span><br><span class="line">   -a  将文件状态、权限等信息都照原状予以复制。</span><br><span class="line">   -r  若 <span class="built_in">source</span> 中含有目录名，则将目录下的文件顺序拷贝至目的地。</span><br><span class="line">   -f  若目的地已经有相同的文件名存在，则在复制前先予以删除再行复制。</span><br></pre></td></tr></tbody></table></figure><p>范例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 将文件 aaa 复制一份名字为 bbb 的文件:         </span></span><br><span class="line"><span class="built_in">cp</span> aaa bbb   </span><br><span class="line"><span class="comment"># 2. 将当前目录下的所有C程序拷贝到当前目录下的Finished 子目录中：</span></span><br><span class="line"><span class="built_in">cp</span> *.c Finished</span><br><span class="line"><span class="comment"># 3. 将souce目录拷贝到当前目录下</span></span><br><span class="line"><span class="built_in">cp</span> -arf <span class="built_in">source</span> .</span><br></pre></td></tr></tbody></table></figure><h1>mv：移动文件（文件改名）</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="built_in">mv</span> [-i] <span class="built_in">source</span> dest</span><br><span class="line">参数：-i 若目的地已有同名文件，则先询问是否覆盖旧文件</span><br></pre></td></tr></tbody></table></figure><p>范例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 将文件 aaa 改名为 bbb :</span></span><br><span class="line"><span class="built_in">mv</span> aaa bbb</span><br><span class="line"><span class="comment"># 2. 将所有的C程序移至当前目录下的 target 子目录中：</span></span><br><span class="line"><span class="built_in">mv</span> -i *.c  target</span><br></pre></td></tr></tbody></table></figure><h1>rm：删除文件及目录</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="built_in">rm</span> [-ifr] name...</span><br><span class="line">参数：</span><br><span class="line">   -i  删除前逐一询问确认。</span><br><span class="line">   -f  即使原文件属性设为只读，也直接删除，无需逐一确认。</span><br><span class="line">   -r  将目录及以下之文件逐一删除。</span><br></pre></td></tr></tbody></table></figure><p>范例</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.  删除所有C程序文件并删除前逐一询问确认 :</span></span><br><span class="line"><span class="built_in">rm</span> -i *.c</span><br><span class="line"><span class="comment"># 2. 将 Finished 子目录及子目录中所有文件删除 :</span></span><br><span class="line"><span class="built_in">rm</span> -r Finished</span><br></pre></td></tr></tbody></table></figure><h1>tail：条件查看文件内容</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="built_in">tail</span> [ -f ] [ -c Number | -n Number | -m Number | -b Number | -k Number ]  文件名称</span><br><span class="line">参数：</span><br><span class="line">-f：（follow）该参数用于监视File文件增长。</span><br><span class="line">-n  Number：从 Number 行位置读取指定文件。</span><br><span class="line">-c  Number：从 Number 字节位置读取指定文件</span><br><span class="line">-m  Number：从 Number 多字节字符位置读取指定文件，比方你的文件假设包括中文字，假设指定-c参数，可能导致截断，但使用-m则会避免该问题。</span><br><span class="line">-b  Number：从 Number 表示的512字节块位置读取指定文件。</span><br><span class="line">-k  Number：从 Number 表示的1KB块位置读取指定文件。</span><br><span class="line"></span><br><span class="line">上述命令中，都涉及到number，假设不指定，默认显示10行。</span><br><span class="line">Number前面可使用正负号，表示该偏移从顶部还是从尾部開始计算。</span><br><span class="line"><span class="built_in">tail</span>可运行文件一般在/usr/bin/以下。</span><br></pre></td></tr></tbody></table></figure><p>示例</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、监视filename文件的尾部内容（默认10行，相当于增加参数 -n 10），刷新显示在屏幕上。退出，按下CTRL+C。 </span></span><br><span class="line"><span class="built_in">tail</span> -f filename </span><br><span class="line"><span class="comment"># 2、显示filename最后20行</span></span><br><span class="line"><span class="built_in">tail</span> -n 20 filename </span><br><span class="line"><span class="comment"># 3、实时查看 Nginx 日志中出现的 40</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/nginx/access.log | grep <span class="string">"404"</span></span><br></pre></td></tr></tbody></table></figure><h1>cat： 查看文件（文件拼接）</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="built_in">cat</span> [-AbeEnstTuv] [--<span class="built_in">help</span>] [--version] fileName</span><br><span class="line">说明：把文件串连接后输出到荧幕或加 &gt; fileName 到另一个档案</span><br><span class="line">参数：</span><br><span class="line">    -A 等价于 -vET</span><br><span class="line">    -n或 --number 由 1 开始对所有输出的行数编号</span><br><span class="line">    -b或 --number-nonblank和 -n 相似，只不过对于空白行不编号</span><br><span class="line">    -e 等价于 –vE</span><br><span class="line">    -E 每行末尾显示一个$符号</span><br><span class="line">    -s或 --squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行</span><br><span class="line">    -t 等价于 –vT</span><br><span class="line">    -T 显示制表符为 ^I</span><br><span class="line">    -v或 --show-nonprinting,  dos格式的回车换行显示为^M</span><br></pre></td></tr></tbody></table></figure><p>范例：<code>&gt; 为重定向操作符</code>（文件存在，覆盖内容）， <code>&gt;&gt;为重定向追加操作符</code>（文件存在，追加）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.把 textfile1 的文件内容加上行号后输入到textfile2 文件里：</span></span><br><span class="line"><span class="built_in">cat</span> -n textfile1 &gt; textfile2</span><br><span class="line"><span class="comment"># 2.把 textfile1 和 textfile2 的文件内容加上行号（空白行不加）之后将内容附加到 textfile3 </span></span><br><span class="line"><span class="built_in">cat</span> -b textfile1 textfile2 &gt;&gt; textfile3</span><br></pre></td></tr></tbody></table></figure><h1>more：文件查看</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：more  [-num] [+linenum] [fileNames..]</span><br><span class="line">说明：类似 <span class="built_in">cat</span> ，不过是以一页一页的方式显示。而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</span><br><span class="line">参数：</span><br><span class="line">    -num 一次显示的行数</span><br><span class="line">    +linenum 从第 num 行开始显示</span><br><span class="line">    fileNames 欲显示内容的文件，可为多个文件</span><br></pre></td></tr></tbody></table></figure><p>范例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从第 20 行开始，每页10行显示 testfile 文件内容</span></span><br><span class="line">more -10 +20 testfile</span><br></pre></td></tr></tbody></table></figure><h1>less：文件查看</h1><p><code>less</code> 是 Linux 系统中一个功能强大的文件查看工具，比传统的 <code>more</code> 命令更加强大和灵活。它允许用户向前或向后浏览文件内容，支持搜索、标记等多种功能</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">格式： less [选项] filename</span><br><span class="line">说明： less 的作用与 more 十分相似，都可以用来浏览文本文件的内容，不同的是 less 允许使用者往回卷动（PageUp PageDown）以浏览已经看过的部份，同时因为 less 并未在一开始就读入整个文件，因此在遇上大型文件的开启时，会比一般的文本编辑器(如vi)来的快速。</span><br><span class="line"></span><br><span class="line">常用选项：</span><br><span class="line">-N显示行号</span><br><span class="line">-i忽略搜索时的大小写</span><br><span class="line">-I强制忽略大小写</span><br><span class="line">-F如果文件内容少于一屏，自动退出</span><br><span class="line">-X退出时不清理屏幕</span><br><span class="line">-S截断长行而不是换行显示</span><br><span class="line">-r显示控制字符</span><br><span class="line">-M显示更详细的提示信息</span><br></pre></td></tr></tbody></table></figure><ul><li>常见操作命令</li></ul><table><thead><tr><th>操作分类</th><th>功能</th></tr></thead><tbody><tr><td>浏览操作</td><td><code>空格键</code> 或 <code>f</code>：向下翻一页<br><code>b</code>：向上翻一页<br><code>回车键</code> 或 <code>e</code>：向下翻一行<br><code>y</code> 或 <code>k</code>：向上翻一行<br><code>d</code>：向下翻半页<br><code>u</code>：向上翻半页<br><code>g</code>：跳到文件开头<br><code>G</code>：跳到文件末尾<br><code>50%</code>：跳到文件50%的位置<br><code>Ctrl+F</code>：向前滚动一屏<br><code>Ctrl+B</code>：向后滚动一屏</td></tr><tr><td>搜索功能</td><td><code>/</code>：向前搜索（输入模式）<br><code>?</code>：向后搜索（输入模式）<br><code>n</code>：重复上一次搜索（同方向）<br><code>N</code>：重复上一次搜索（反方向）</td></tr><tr><td>标记位置</td><td><code>m + 字母</code>：用字母标记当前位置<br><code>' + 字母</code>：跳转到标记位置</td></tr><tr><td>文件操作</td><td><code>:e 文件名</code>：打开新文件<br><code>:n</code>：查看下一个文件（多文件打开时）<br><code>:p</code>：查看上一个文件（多文件打开时）</td></tr><tr><td>其他功能</td><td><code>v</code>：使用默认编辑器编辑当前文件<br><code>h</code>：显示帮助信息<br><code>q</code>：退出 less</td></tr></tbody></table><h1>touch：新建文件</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> 文件名</span><br></pre></td></tr></tbody></table></figure><h1>mkdir：创建目录</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 目录名</span><br><span class="line"></span><br><span class="line">常用选项：</span><br><span class="line">-p递归创建目录，如果父目录不存在则一并创建 <span class="built_in">mkdir</span> -p project/src/main/java</span><br><span class="line">-m设置目录权限，如 <span class="built_in">mkdir</span> -m 755 <span class="built_in">dirname</span></span><br><span class="line">-v显示创建目录的详细信息 </span><br></pre></td></tr></tbody></table></figure><p>范例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批量创建多个目录结构：</span></span><br><span class="line"><span class="built_in">mkdir</span> -p project/{src,<span class="built_in">test</span>}/{main,<span class="built_in">test</span>}/{java,resources}</span><br><span class="line"><span class="comment"># 创建带空格的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="string">"my folder"</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意事项：</p><ol><li>如果目录已存在，<code>mkdir</code> 会报错，使用 <code>-p</code> 选项可以避免这个错误</li><li>需要有父目录的写权限才能创建子目录</li><li>目录名区分大小写</li><li>目录名可以包含空格，但需要用引号括起来： <code>mkdir "my folder"</code></li></ol></blockquote><h1>ln：创建软链接</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s [源文件或目录] [链接名称]</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">ln</span> -sf [源文件或目录] [链接名称]</span><br><span class="line"></span><br><span class="line">说明：使用 -f 选项可以强制覆盖已存在的链接</span><br></pre></td></tr></tbody></table></figure><p>范例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录创建软连接： </span></span><br><span class="line"><span class="built_in">ln</span> -s /etc/passwd mypasswd</span><br><span class="line"><span class="comment"># 创建文件软连接：</span></span><br><span class="line"><span class="built_in">ln</span> -s /path/to/original/file /path/to/link</span><br><span class="line"><span class="comment"># 创建目录软连接</span></span><br><span class="line"><span class="built_in">ln</span> -s /path/to/original/directory /path/to/link</span><br><span class="line"><span class="comment"># 创建相对路径的软连接（推荐）：</span></span><br><span class="line"><span class="built_in">ln</span> -s ../original/file link_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本切换（通过切换软连接指向）使用 -f 选项可以强制覆盖已存在的链接</span></span><br><span class="line"><span class="built_in">ln</span> -sf /opt/software/v2.0 /opt/software/current</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看软链接的实际地址</span></span><br><span class="line"><span class="built_in">realpath</span> /path/to/link</span><br><span class="line"><span class="comment"># 查看软连接：输出中箭头 -&gt; 指向源文件</span></span><br><span class="line"><span class="built_in">ls</span> -l /path/to/link</span><br><span class="line"><span class="comment"># 查看软链接</span></span><br><span class="line">file /path/to/link</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除软链接（不要加 / 在末尾，否则会删除源文件内容）</span></span><br><span class="line"><span class="built_in">rm</span> /path/to/link</span><br></pre></td></tr></tbody></table></figure><p>软链接验证</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">root@hots-Lenovo:/data# apt install tree</span><br><span class="line">root@hots-Lenovo:/data# tree</span><br><span class="line">.</span><br><span class="line">├── link-real</span><br><span class="line">│   ├── a-real</span><br><span class="line">│   └── b-real</span><br><span class="line">│       └── test.txt</span><br><span class="line">└── link-soft</span><br><span class="line"></span><br><span class="line">4 directories, 1 file</span><br><span class="line">root@hots-Lenovo:/data# <span class="built_in">ln</span> -s /data/link-real/a-real  /data/link-soft/a-soft</span><br><span class="line">root@hots-Lenovo:/data# </span><br><span class="line">root@hots-Lenovo:/data# <span class="built_in">ln</span> -s /data/link-real/b-real  /data/link-soft/b-soft</span><br><span class="line">root@hots-Lenovo:/data# tree</span><br><span class="line">.</span><br><span class="line">├── link-real</span><br><span class="line">│   ├── a-real</span><br><span class="line">│   └── b-real</span><br><span class="line">│       └── test.txt</span><br><span class="line">└── link-soft</span><br><span class="line">    ├── a-soft -&gt; /data/link-real/a-real</span><br><span class="line">    └── b-soft -&gt; /data/link-real/b-real</span><br><span class="line"></span><br><span class="line">6 directories, 1 file</span><br><span class="line">root@hots-Lenovo:/data# <span class="built_in">realpath</span> /data/link-soft/a-soft</span><br><span class="line">/data/link-real/a-real</span><br><span class="line">root@hots-Lenovo:/data# <span class="built_in">realpath</span> /data/link-soft/b-soft</span><br><span class="line">/data/link-real/b-real</span><br><span class="line">root@hots-Lenovo:/data/link-soft/b-soft# <span class="built_in">ls</span> /data/link-soft/b-soft</span><br><span class="line">test.txt</span><br><span class="line">root@hots-Lenovo:/data# file /data/link-soft/a-soft</span><br><span class="line">/data/link-soft/a-soft: symbolic <span class="built_in">link</span> to /data/link-real/a-real</span><br></pre></td></tr></tbody></table></figure><ul><li><p>注意事项</p><blockquote><ol><li>创建软连接时最好使用绝对路径，避免移动后失效</li><li>不要创建循环链接（A指向B，B指向A）</li><li>删除软连接时不要加 <code>/</code> 后缀</li><li>软连接的权限不影响源文件的权限</li><li>使用 <code>-f</code> 选项可以强制覆盖已存在的链接</li></ol></blockquote></li><li><p>软连接 vs 硬链接</p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">软连接</th><th style="text-align:left">硬链接</th></tr></thead><tbody><tr><td style="text-align:left">创建命令</td><td style="text-align:left"><code>ln -s</code></td><td style="text-align:left"><code>ln</code></td></tr><tr><td style="text-align:left">跨文件系统</td><td style="text-align:left">支持</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">链接目录</td><td style="text-align:left">支持</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">原始文件删除</td><td style="text-align:left">链接失效</td><td style="text-align:left">仍然有效</td></tr><tr><td style="text-align:left">inode</td><td style="text-align:left">与源文件不同</td><td style="text-align:left">与源文件相同</td></tr><tr><td style="text-align:left">文件类型</td><td style="text-align:left">特殊文件（l）</td><td style="text-align:left">普通文件</td></tr></tbody></table></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;chown ：更改文件或目录所有者和所属组&lt;/h1&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa</summary>
      
    
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/categories/Linux/"/>
    
    <category term="基础命令" scheme="https://hmxyl.github.io/categories/Linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看系统信息命令</title>
    <link href="https://hmxyl.github.io/20250616/b2009fa9.html"/>
    <id>https://hmxyl.github.io/20250616/b2009fa9.html</id>
    <published>2025-06-16T09:46:02.000Z</published>
    <updated>2025-06-19T06:29:23.326Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>综合信息工具</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inxi -Fxz           <span class="comment"># 显示完整系统信息 (需安装 inxi)</span></span><br><span class="line">screenfetch         <span class="comment"># 显示美观的系统信息 (需安装)</span></span><br><span class="line">neofetch            <span class="comment"># 另一种美观的系统信息工具 (需安装)</span></span><br></pre></td></tr></tbody></table></figure><h1>Linux机器是32位还是64位</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></tbody></table></figure><h1>查看系统发行版：lsb_release</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示发行版详细信息</span></span><br><span class="line"><span class="built_in">cat</span> /etc/os-release  </span><br><span class="line"><span class="comment"># 显示 LSB (Linux Standard Base) 信息</span></span><br><span class="line">lsb_release -a       </span><br><span class="line"> </span><br><span class="line"><span class="comment">#############################################</span></span><br><span class="line"><span class="comment"># 特定发行版命令</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line"><span class="built_in">cat</span> /etc/centos-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line"><span class="built_in">cat</span> /etc/debian_version</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></tbody></table></figure><h1>显示主机名和系统信息</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl</span><br></pre></td></tr></tbody></table></figure><h1>查看系统基本信息：uname</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a  <span class="comment"># 显示所有信息</span></span><br><span class="line"><span class="built_in">uname</span> -s  <span class="comment"># 内核名称</span></span><br><span class="line"><span class="built_in">uname</span> -n  <span class="comment"># 网络节点主机名</span></span><br><span class="line"><span class="built_in">uname</span> -r  <span class="comment"># 内核发行版本</span></span><br><span class="line"><span class="built_in">uname</span> -m  <span class="comment"># 机器硬件名称</span></span><br></pre></td></tr></tbody></table></figure><h1>查看内核信息</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/version     <span class="comment"># 内核版本和编译器信息</span></span><br><span class="line">dmesg | grep Linux    <span class="comment"># 从内核环缓冲区查看启动信息</span></span><br></pre></td></tr></tbody></table></figure><h1>查看 CPU 信息</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lscpu                <span class="comment"># 显示 CPU 架构信息</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo    <span class="comment"># 详细 CPU 信息</span></span><br><span class="line"><span class="built_in">nproc</span>                <span class="comment"># 显示 CPU 核心数</span></span><br></pre></td></tr></tbody></table></figure><h1>系统磁盘信息：df</h1><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df -h               # 显示磁盘空间使用情况</span><br><span class="line">lsblk               # 显示块设备信息</span><br><span class="line">fdisk -l            # 显示磁盘分区表</span><br></pre></td></tr></tbody></table></figure><h1>系统内存条信息</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt install dmidecode</span></span><br><span class="line">dmidecode -t memory</span><br></pre></td></tr></tbody></table></figure><h1>查看内存使用情况</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free -h             <span class="comment"># 以易读格式显示内存使用情况</span></span><br><span class="line"><span class="built_in">cat</span> /proc/meminfo   <span class="comment"># 详细内存信息</span></span><br><span class="line">vmstat -s           <span class="comment"># 显示内存统计</span></span><br></pre></td></tr></tbody></table></figure><h1>查看网络信息</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip a                <span class="comment"># 显示所有网络接口</span></span><br><span class="line">ifconfig            <span class="comment"># 较旧的网络接口信息工具</span></span><br><span class="line">netstat -tulnp      <span class="comment"># 显示网络连接和监听端口</span></span><br><span class="line">ss -tulnp           <span class="comment"># 更现代的 socket 统计工具</span></span><br></pre></td></tr></tbody></table></figure><h1>进程状态：ps</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：ps [options] [--<span class="built_in">help</span>]</span><br><span class="line">参数：</span><br><span class="line">-A 列出所有的线程</span><br><span class="line">-e 列出所有的进程</span><br><span class="line">-f 显示详细的信息（包括命令行参数）</span><br><span class="line"></span><br><span class="line">例子: 查看java进程信息</span><br><span class="line">ps -ef|grep java</span><br></pre></td></tr></tbody></table></figure><h1>查看系统用户信息：who</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">格式 : <span class="built_in">who</span> -[husfV] [user]</span><br><span class="line">说明 : 显示有哪些用户登录到系统中，显示的信息包含用户ID，使用的终端，上线时间，呆滞时间，CPU使用量，动作等等。</span><br><span class="line">参数说明 :</span><br><span class="line">    -H : 显示标题列</span><br><span class="line">    -u : 显示用户的闲置时间</span><br><span class="line">    -s : 使用简短的格式来显示</span><br><span class="line">    --version : 显示程式版本</span><br><span class="line">    -r 查看当前系统运行时间</span><br><span class="line">    -b 查看最后一次系统启动的时间。</span><br><span class="line"></span><br><span class="line">相关命令 : <span class="built_in">who</span> am i  显示当前用户是谁</span><br><span class="line"></span><br><span class="line">例子： 查看最后启动时间</span><br><span class="line">          <span class="built_in">who</span> -b</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;综合信息工具&lt;/h1&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/categories/Linux/"/>
    
    <category term="基础命令" scheme="https://hmxyl.github.io/categories/Linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux日常使用</title>
    <link href="https://hmxyl.github.io/20250614/fb3eb231.html"/>
    <id>https://hmxyl.github.io/20250614/fb3eb231.html</id>
    <published>2025-06-14T08:48:16.000Z</published>
    <updated>2025-06-19T06:29:23.322Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>提高打开文件限制量</h1><ol><li><p>解除 Linux 系统的最大进程数和最大文件打开数限制</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下的行</span></span><br><span class="line"><span class="comment"># 说明：* 代表针对所有用户 noproc 是代表最大进程数 nofile 是代表最大文件打开数</span></span><br><span class="line"></span><br><span class="line"> * soft noproc 11000</span><br><span class="line"> * hard noproc 11000</span><br><span class="line"></span><br><span class="line"> * soft nofile 4100</span><br><span class="line"> * hard nofile 4100</span><br></pre></td></tr></tbody></table></figure></li><li><p>让 SSH 接受 Login 程式的登入，方便在 ssh 客户端查看 <code>ulimit -a </code> 资源限制：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 把 UserLogin 的值改为 yes，并把 # 注释去掉</span></span><br><span class="line"><span class="comment"># 重启 sshd 服务： /etc/init.d/sshd restart</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>修改所有 linux 用户的环境变量文件：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">ulimit -u 10000</span><br><span class="line">ulimit -n 4096</span><br><span class="line">ulimit -d unlimited</span><br><span class="line">ulimit -m unlimited</span><br><span class="line">ulimit -s unlimited</span><br><span class="line">ulimit -t unlimited</span><br><span class="line">ulimit -v unlimited</span><br></pre></td></tr></tbody></table></figure></li></ol><h1>Linux系统增加zysong字体</h1><blockquote><p>背景：在开发项目中，使用到了Jfreechart，在本机环境测试正常，部署到服务器上Linux，发现Jfreechart里面的中文不能正常显示。</p></blockquote><ol><li>首先确认你的服务器上的<code>javahome</code> ，执行命令<code> echo $JAVA_HOME</code> ,显示出java的目录</li><li>将zysong.ttf文件拷贝到<code>%JavaHome%/jre/lib/fonts</code>目录下 <code>zysong.ttf</code> 需要网上下载</li><li>在<code>%JavaHome%/jre/lib/fonts</code>目录下执行<code>"ttmkfdir -o fonts.dir"</code>命令,重新生成<code>fonts.dir</code>文件</li><li>确认<code>/usr/share/zh_CN/TrueType</code>目录存在,如果不存在则<code>mkdir</code>创建 ，，一般开始是没有的，所有这样执行：到<code>/usr/share/fonts</code>下，<code>mkdir zh_CN</code> 命令创建 <code>zh_CN</code>文件夹，到zh_CN目录下 <code>mkdir TrueType</code>命令创建<code>TrueType</code>文件夹</li><li>把<code>zysong.ttf</code>文件拷贝到<code>TrueType</code>下</li><li>在<code>%JavaHome%/jre/lib</code>目录下,执行<code> cp fontconfig.RedHat.3.properties.src fontconfig.properties</code></li><li>重新启动<code>tomcat</code>（resin等web容器）,现在再看看，中文显示正常了</li></ol><h1>VMware安装Centos虚拟机</h1><p>==安装系统==</p><ol><li><p>准备安装VMware和下载Centos</p></li><li><p>虚拟网络说明</p></li></ol><ul><li><p>VMNet1</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用的是host-only的链接模式，即虚拟机只能与主机构成内部通信，无法对外网进行访问。</span><br></pre></td></tr></tbody></table></figure></li><li><p>VMNet0</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">模式：使用桥接模式，安装VM后，在VM里建立虚拟机 默认 就是该模式。</span><br><span class="line">场景：如果你只是需要一台虚拟机可以和宿主互通，并可以访问外网，此模式即可。</span><br><span class="line">描述：安装虚拟机系统后不需要调整网络，物理网络中的 “路由” 所包含的DHCP服务器会自动识别该虚拟机并为其分配IP地址；</span><br><span class="line">如果没有路由，可以自己手动在系统分配，原则是和宿主机在同一网段并指向相同的网关即可通信。</span><br></pre></td></tr></tbody></table></figure></li><li><p>VMNet8</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模式：NAT网络模式</span><br><span class="line">场景：在宿主机安装多台虚拟机，和宿主组成一个小局域网，宿主机，虚拟机之间都可以互相通信，虚拟机也可访问外网，例如 搭建 hadoop 集群，分布式服务</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="3"><li>下载虚拟机Centos：<a href="https://www.centos.org/download/">https://www.centos.org/download/</a></li></ol><p>==系统基础配置==</p><ul><li><p>修改 hotsname</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl --static set-hostname 名称 </span><br><span class="line"></span><br><span class="line">vi /etc/hostname(缓存？)，要先把这个改好了，下面的配置文件才会生效。 </span><br><span class="line">vi  /etc/sysconfig/network（重启，永久） </span><br><span class="line"><span class="built_in">echo</span> hostname &gt; /proc/sys/kernel/hostname（即时生效，临时）</span><br></pre></td></tr></tbody></table></figure></li><li><p>基础工具安装</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget   (wget)</span><br><span class="line">yum -y install net-tools   (ifconfig)</span><br><span class="line">yum -y install lrzsz   (sz和rz)</span><br><span class="line">yum -y install tree</span><br></pre></td></tr></tbody></table></figure></li></ul><p>==虚拟机之间，SSH免密连接==</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br><span class="line">cd /root/.ssh</span><br><span class="line">mv id_rsa.pub authorized_keys_master.pub</span><br><span class="line"></span><br><span class="line">scp  authorized_keys_node1.pub root@master:/root/.ssh</span><br><span class="line">scp  authorized_keys_node2.pub root@master:/root/.ssh</span><br><span class="line"></span><br><span class="line">cat authorized_keys_master.pub&gt;&gt; authorized_keys</span><br><span class="line">cat authorized_keys_node1.pub&gt;&gt; authorized_keys</span><br><span class="line">cat authorized_keys_node2.pub&gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line">scp authorized_keys  root@node1:/root/.ssh</span><br><span class="line">scp authorized_keys  root@node2:/root/.ssh</span><br></pre></td></tr></tbody></table></figure><p>==默认ROOT用户登录==</p><p>使用root账户进入系统后，打开<code>/etc/gdm/custom.conf</code>文件，在[daemon]下添加两行：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AutomaticLoginEnable=True</span><br><span class="line">AutomaticLogin=root</span><br></pre></td></tr></tbody></table></figure><p>==Centos8 时钟同步==</p><ol><li><p>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</p></li><li><p>vim /etc/chrony.conf</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注释掉 </span><br><span class="line">  pool 2.centos.pool.ntp.org iburst  </span><br><span class="line">加入新的的时间服务器</span><br><span class="line">  server 210.72.145.44 iburst</span><br><span class="line">  server ntp.aliyun.com iburst</span><br></pre></td></tr></tbody></table></figure></li><li><p>重启服务，此时时间已经与网络时间同步</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart chronyd.service</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置开机自启</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable chronyd.service</span><br></pre></td></tr></tbody></table></figure></li></ol><p>==安装图形界面==</p><ul><li><p>命令安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall "X Window System"</span><br><span class="line"></span><br><span class="line">yum groupinstall "GNOME Desktop"</span><br></pre></td></tr></tbody></table></figure></li><li><p>进入图形界面</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx 或者 init 5 </span><br></pre></td></tr></tbody></table></figure></li><li><p>修改图形界面为默认启动方式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令行输入命令后重启系统 </span><br><span class="line"></span><br><span class="line">systemctl set-default graphical.target </span><br></pre></td></tr></tbody></table></figure></li><li><p>安装中文支持</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall "Chinese Support" -y </span><br></pre></td></tr></tbody></table></figure></li><li><p>修改系统默认语言为中文</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令行输入命令后重启系统</span><br><span class="line"></span><br><span class="line">localectl set-locale LANG=zh_CN.UTF-8 </span><br></pre></td></tr></tbody></table></figure></li><li><p>图形界面想要卸载</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupremove "GNOME Desktop Environment"</span><br><span class="line">yum groupremove "X Window System"</span><br></pre></td></tr></tbody></table></figure></li></ul><p>==问题记录：网络连接图标消失==</p><ul><li><p>原因一：查看相关服务是否启动</p><p>进入<code>计算机管理——&gt;服务</code>查看这一块是不是有被关闭了的，有的话就开启</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/566c0aa61ae444b6984c948fb7c650b1.png" alt="img"></p></li><li><p>原因二：NetworkManager 未运行</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动NetworkManager</span></span><br><span class="line">systemctl start NetworkManager</span><br><span class="line"><span class="comment"># 查看 NetworkManager 的运行状态。 如果显示Active: inactive (dead)，则表示 NetworkManager 未运行。</span></span><br><span class="line">systemctl status NetworkManager</span><br><span class="line"><span class="comment"># 将 NetworkManager 设为开机自启：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager</span><br><span class="line"><span class="comment"># 查看是否开机启动：</span></span><br><span class="line">systemctl is-enabled NetworkManager</span><br></pre></td></tr></tbody></table></figure></li><li><p>原因三：<code>NetworkManager 未接管网络（此方法解决）</code></p><p>在终端中输入以下命令，查看 NetworkManager 是否接管了网络：<code>nmcli networking</code>如果输出 disabled，则表示 NetworkManager 未接管网络，网络图标消失也是由此导致的。<br>这时候查看网卡，会提示“未托管”：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# nmcli device status </span><br><span class="line">DEVICE      TYPE      STATE   CONNECTION    </span><br><span class="line">ens33       ethernet  未托管  -- </span><br></pre></td></tr></tbody></table></figure><p>连接网卡（以 ens33 网卡为例），会提示失败：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# nmcli device connect ens33</span><br><span class="line">错误：添加/激活新连接失败：Connection <span class="string">'ens33'</span> is not available on device ens33 because device is strictly unmanaged</span><br></pre></td></tr></tbody></table></figure><p>解决办法：只需要一条命令就能搞定，在终端中输入：<code>nmcli networking on</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;提高打开文件限制量&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解除 Linux 系统的最大进程数和最大文件打开数限制&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/categories/Linux/"/>
    
    <category term="日常使用" scheme="https://hmxyl.github.io/categories/Linux/%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统命令行工具</title>
    <link href="https://hmxyl.github.io/20250611/f0a9e559.html"/>
    <id>https://hmxyl.github.io/20250611/f0a9e559.html</id>
    <published>2025-06-11T14:48:07.000Z</published>
    <updated>2025-06-19T06:29:23.329Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>curl：用于通过 URL 传输数据</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl [选项] [URL...]</span><br></pre></td></tr></tbody></table></figure><ul><li><p>常用选项：请求相关</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-X</code>/<code>--request</code></td><td style="text-align:left">指定 HTTP 请求方法 (GET, POST, PUT, DELETE 等)</td></tr><tr><td style="text-align:left"><code>-H</code>/<code>--header</code></td><td style="text-align:left">添加 HTTP 请求头</td></tr><tr><td style="text-align:left"><code>-d</code>/<code>--data</code></td><td style="text-align:left">发送 POST 请求数据</td></tr><tr><td style="text-align:left"><code>-G</code>/<code>--get</code></td><td style="text-align:left">将 -d 数据作为 URL 查询参数发送 (GET)</td></tr><tr><td style="text-align:left"><code>-F</code>/<code>--form</code></td><td style="text-align:left">发送 multipart/form-data 数据 (文件上传)</td></tr><tr><td style="text-align:left"><code>-b</code>/<code>--cookie</code></td><td style="text-align:left">发送 Cookie</td></tr><tr><td style="text-align:left"><code>-A</code>/<code>--user-agent</code></td><td style="text-align:left">设置 User-Agent</td></tr></tbody></table></li><li><p>常用选项：输出控制</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-i</code>/<code>--include</code></td><td style="text-align:left">输出包含响应头</td></tr><tr><td style="text-align:left"><code>-I</code>/<code>--head</code></td><td style="text-align:left">只获取响应头</td></tr><tr><td style="text-align:left"><code>-o</code>/<code>--output</code></td><td style="text-align:left">（小写）将输出保存到文件</td></tr><tr><td style="text-align:left"><code>-O</code>/<code>--remote-name</code></td><td style="text-align:left">（大写）使用远程文件名保存输出</td></tr><tr><td style="text-align:left"><code>-s</code>/<code>--silent</code></td><td style="text-align:left">静默模式 (不显示进度/错误)</td></tr><tr><td style="text-align:left"><code>-v</code>/<code>--verbose</code></td><td style="text-align:left">显示详细操作信息</td></tr><tr><td style="text-align:left"><code>-c/--cookie-jar</code></td><td style="text-align:left">保存服务器返回的 Cookie</td></tr></tbody></table></li><li><p>常用选项：连接设置</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-L</code>/<code>--location</code></td><td style="text-align:left">跟随重定向</td></tr><tr><td style="text-align:left"><code>-k</code>/<code>--insecure</code></td><td style="text-align:left">允许不安全的 SSL 连接</td></tr><tr><td style="text-align:left"><code>--connect-timeout</code></td><td style="text-align:left">设置连接超时时间</td></tr><tr><td style="text-align:left"><code>--retry</code></td><td style="text-align:left">失败重试次数</td></tr></tbody></table></li><li><p>范例：基本请求</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 发送 GET 请求， 获取请求内容</span></span><br><span class="line">curl https://www.baidu.com</span><br><span class="line">curl -X GET https://www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取响应头</span></span><br><span class="line">curl -I https://www.baidu.com</span><br><span class="line"><span class="comment"># 3. 获取完整响应（包含头和请求内容）,并将输出内容存储到本地文件</span></span><br><span class="line">curl -i https://www.baidu.com -o /opt/test.txt</span><br><span class="line"><span class="comment"># 4. 测试 API</span></span><br><span class="line">curl -X GET <span class="string">"https://api.example.com/users?id=123"</span> -H <span class="string">"Accept: application/json"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>范例：数据交互</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 发送 POST 请求</span></span><br><span class="line">curl -X POST -d <span class="string">'key1=value1&amp;key2=value2'</span> https://example.com/api</span><br><span class="line"><span class="comment"># 2. 发送 JSON 数据</span></span><br><span class="line">curl -X POST -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">-d <span class="string">'{"key1":"value1", "key2":"value2"}'</span> \</span><br><span class="line">https://example.com/api</span><br><span class="line"><span class="comment"># 3. 发送表单数据（文件上传）</span></span><br><span class="line">curl -F <span class="string">"file=@/path/to/file"</span> -F <span class="string">"name=file_name"</span> https://example.com/upload</span><br><span class="line"><span class="comment"># 4. 登录并保存 Cookie</span></span><br><span class="line">curl -c cookies.txt -d <span class="string">"user=admin&amp;pass=123"</span> https://example.com/login</span><br><span class="line">curl -X POST -c cookies.txt -d <span class="string">"username=test&amp;password=123"</span> https://example.com/login</span><br><span class="line"><span class="comment"># 5. 使用保存的 Cookie 访问需要认证的页面</span></span><br><span class="line">curl -b cookies.txt https://example.com/profile</span><br><span class="line"><span class="comment"># 6. 从标准输入读取 Cookie</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"name=value"</span> | curl -b - https://example.com</span><br><span class="line"><span class="comment"># 7. 清除会话（使用空 Cookie 文件）</span></span><br><span class="line">curl -b empty_cookies.txt https://example.com/logout</span><br></pre></td></tr></tbody></table></figure></li><li><p>范例：认证与安全</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 基本认证</span></span><br><span class="line">curl -u username:password https://example.com</span><br><span class="line"><span class="comment"># 2. Bearer Token 认证</span></span><br><span class="line">curl -H <span class="string">"Authorization: Bearer token_string"</span> https://example.com/api</span><br><span class="line"><span class="comment"># 3. 忽略 SSL 证书验证（测试用）</span></span><br><span class="line">curl -k https://example.com</span><br></pre></td></tr></tbody></table></figure></li><li><p>范例：下载文件</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载文件并保存</span></span><br><span class="line">curl -o local_filename https://example.com/remote_file</span><br><span class="line"><span class="comment"># 2.使用远程文件名保存</span></span><br><span class="line">curl -O https://example.com/filename.ext</span><br><span class="line"><span class="comment"># 3.断点续传（从中断处继续）</span></span><br><span class="line">curl -C - -O https://example.com/large_file</span><br><span class="line"><span class="comment"># 4.从第1000字节开始下载</span></span><br><span class="line">curl -C 1000 -O http://example.com/largefile.zip</span><br><span class="line"><span class="comment"># 5.显示进度条</span></span><br><span class="line">curl -C - --progress-bar -O http://example.com/largefile.zip</span><br><span class="line"><span class="comment"># 6.并行下载多个文件</span></span><br><span class="line">curl -O https://example.com/file1 -O https://example.com/file2</span><br><span class="line"><span class="comment"># 7. 限制下载速度（字节/秒）</span></span><br><span class="line">curl --limit-rate 100K -O https://example.com/large_file</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>范例（高级用法）：代理访问</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过代理访问</span></span><br><span class="line">curl -x [代理地址]:[端口] [目标URL]</span><br><span class="line"><span class="comment"># 使用HTTP代理</span></span><br><span class="line">curl -x http://proxy.example.com:8080 http://target.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用HTTPS代理</span></span><br><span class="line">curl -x https://secure-proxy.example.com:8443 https://target.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带认证的代理：用户名密码认证</span></span><br><span class="line">curl -x http://username:password@proxy.example.com:8080 http://target.example.com</span><br><span class="line"><span class="comment"># 带认证的代理：用户名密码认证（分开指定）</span></span><br><span class="line">curl -x http://proxy.example.com:8080 -U username:password http://target.example.com</span><br></pre></td></tr></tbody></table></figure></li><li><p>范例：日常使用</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取IP地址</span></span><br><span class="line">curl ipinfo.io/ip</span><br><span class="line">curl cip.cc</span><br></pre></td></tr></tbody></table></figure></li></ul><h1>kill：杀死进程</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">格式： <span class="built_in">kill</span> [ -s signal ] pid ...</span><br><span class="line">      <span class="built_in">kill</span> -l [ signal ]</span><br><span class="line">说明：<span class="built_in">kill</span> 送出一个特定的信号 (signal) 给进程号为 pid 的进程。根据该信号而做特定的动作, 若没有指定,默认是送出终止 (TERM) 信号</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">    -s (signal) : 其中常用的一个信号(9) 杀死进程; 详细的信号可以用 <span class="built_in">kill</span> -l</span><br><span class="line">    -l (signal) : 列出所有可用的信号名称</span><br><span class="line"></span><br><span class="line">范例：</span><br><span class="line">  1. 将 pid 为 323 的进程杀死 ： <span class="built_in">kill</span> -9 323</span><br><span class="line">  2. 将 pid 为 456 的进程重跑 (restart) : <span class="built_in">kill</span> -HUP 456</span><br></pre></td></tr></tbody></table></figure><h1>scp：从其他机器拷贝文件夹</h1><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：scp -r 文件夹名(源) 用户名@机器名:/路径（目的）</span><br><span class="line">之后输入，目标机器的用户密码。</span><br></pre></td></tr></tbody></table></figure><p>范例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /index1/DAYAIR/Lucene/20160930  root@117.122.222.74:/index1/dayalib</span><br></pre></td></tr></tbody></table></figure><h1>sftp：上传文件/下载</h1><ul><li><p>连接到服务器</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 连接到远程服务器</span></span><br><span class="line">sftp username@hostname</span><br><span class="line"><span class="comment"># 2. 指定端口连接 (默认22)</span></span><br><span class="line">sftp -P port_number username@hostname</span><br><span class="line"><span class="comment"># 3. 使用密钥认证连接</span></span><br><span class="line">sftp -i /path/to/private_key username@hostname</span><br></pre></td></tr></tbody></table></figure></li><li><p>连接上服务器之后的常用命令</p><table><thead><tr><th>本地文件操作</th><th style="text-align:left">远程文件操作</th><th style="text-align:left">文件传输</th><th style="text-align:left">其他命令</th></tr></thead><tbody><tr><td><code>lls</code>   ： 列出本地目录内容</td><td style="text-align:left"><code>ls</code>   ： 列出远程目录内容</td><td style="text-align:left"><code>put local_file [remote_path]</code> ： 上传本地文件到远程</td><td style="text-align:left"><code>help</code>      ： 显示帮助信息</td></tr><tr><td><code>lcd</code>   ： 更改本地工作目录</td><td style="text-align:left"><code>cd</code>   ： 更改远程工作目录</td><td style="text-align:left"><code>get remote_file [local_path]</code> ： 下载远程文件到本地</td><td style="text-align:left"><code>exit</code> 或 <code>quit</code> ： 退出SFTP会话</td></tr><tr><td><code>lmkdir</code> ： 在本地创建目录</td><td style="text-align:left"><code>mkdir</code>  ： 在远程创建目录</td><td style="text-align:left"><code>mput local_files</code>       ： 上传多个本地文件</td><td style="text-align:left"><code>!command</code>    ： 在本地执行shell命令</td></tr><tr><td><code>lpwd</code>  ： 显示本地当前目录</td><td style="text-align:left"><code>pwd</code>   ： 显示远程当前目录</td><td style="text-align:left"><code>mget remote_files</code>       ： 下载多个远程文件</td><td style="text-align:left"></td></tr><tr><td></td><td style="text-align:left"><code>rm</code>   ： 删除远程文件</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td></td><td style="text-align:left"><code>rmdir</code>  ： 删除远程目录</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td></td><td style="text-align:left"><code>rename</code> ： 重命名远程文件</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td></td><td style="text-align:left"><code>chmod</code>  ： 更改远程文件权限</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td></td><td style="text-align:left"><code>chown</code>  ： 更改远程文件所有者</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table></li><li><p>实用示例（命令行直接传输）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不进入交互模式,命令行直接传输文件</span></span><br><span class="line"><span class="comment"># 从远程下载文件</span></span><br><span class="line">sftp username@hostname:/remote/file.txt /local/path/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件到远程</span></span><br><span class="line">sftp username@hostname &lt;&lt;&lt; $<span class="string">'put /local/file.txt /remote/path/'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>实用示例（远程连接服务器之后）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># 1. 上传下载文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">sftp&gt; put local_file.txt /remote/path/</span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">sftp&gt; get /remote/path/remote_file.txt ~/downloads/</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># 2. 批量传输</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传所有.txt文件</span></span><br><span class="line">sftp&gt; mput *.txt</span><br><span class="line"><span class="comment"># 下载所有.jpg文件</span></span><br><span class="line">sftp&gt; mget *.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># 3. 目录操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建远程目录</span></span><br><span class="line">sftp&gt; <span class="built_in">mkdir</span> new_folder</span><br><span class="line"><span class="comment"># 切换远程目录</span></span><br><span class="line">sftp&gt; <span class="built_in">cd</span> /path/to/directory</span><br><span class="line"><span class="comment"># 列出远程目录内容</span></span><br><span class="line">sftp&gt; <span class="built_in">ls</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># 4. 保留文件属性传输</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传并保留时间戳</span></span><br><span class="line">sftp&gt; put -p local_file.txt</span><br><span class="line"><span class="comment"># 下载并保留权限</span></span><br><span class="line">sftp&gt; get -P remote_file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>高级用法</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  1. 使用压缩传输</span></span><br><span class="line">sftp -C username@hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 限制带宽</span></span><br><span class="line">sftp -l 100 username@hostname  <span class="comment"># 限制为100 Kbit/s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 使用代理连接</span></span><br><span class="line">sftp -o <span class="string">"ProxyCommand=nc -X connect -x proxy:port %h %p"</span> username@hostname</span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>注意事项:</p><ol><li>SFTP 不同于 FTP，它使用 SSH 端口(默认22)</li><li>文件传输是加密的，比传统FTP更安全</li><li>某些服务器可能限制文件大小或传输速率</li><li>使用密钥认证比密码认证更安全</li></ol></blockquote><h1>top：实时显示系统中各个进程的资源占用状况</h1><p>top是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。比较准确的说，top命令提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表。该命令可以按CPU使用。内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">命令说明</span><br><span class="line">1.  命令格式： top [参数]</span><br><span class="line">2.  命令功能： 显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</span><br><span class="line">3.  命令参数</span><br><span class="line">        -b 批处理</span><br><span class="line">        -c 显示完整的治命令</span><br><span class="line">        -I 忽略失效过程</span><br><span class="line">        -s 保密模式</span><br><span class="line">        -S 累积模式</span><br><span class="line">        -i&lt;时间&gt; 设置更新间隔时间</span><br><span class="line">        -u&lt;用户名&gt; 指定用户名</span><br><span class="line">        -p&lt;进程号&gt; 指定进程</span><br><span class="line">        -n&lt;次数&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>补充top使用技巧：</p><ul><li><p>多核CPU监控在top基本视图中，按键盘数字“1”，可监控每个逻辑CPU的状况：</p></li><li><p>高亮显示当前运行进程敲击键盘“b”（打开/关闭加亮效果 ）</p></li><li><p>通过”shift + &gt;”或”shift + &lt;”可以向右或左改变排序列下图是按一次”shift + &gt;”的效果图,视图现在已经按照%MEM来排序。</p></li></ul></blockquote><p>范例：</p><ul><li><p>实例1：显示指定的进程信息</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -p 2885</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125180715469.png" alt="image-20211125180715469"></p></li><li><p>实例2: 循环显示的次数</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令：  top -n 2</span><br><span class="line">说明：表示更新两次后终止更新显示</span><br></pre></td></tr></tbody></table></figure></li><li><p>实例3：显示进程信息，并具体说明</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20211125181146934.png" alt="20211125181146934"></p></li></ul><p>命令输出的每一行的具体信息：</p><table><thead><tr><th>内容</th><th>具体意义</th></tr></thead><tbody><tr><td>第一行：任务队列信息，同 <strong>uptime</strong> 命令的执行结果</td><td><code>top - 18:10:32 up  2:39,  2 users,  load average: 0.23, 0.11, 0.06</code><br><br><code>18:10:32            </code>： 当前系统时间  <br><code>up  2:39            </code>： 系统已经运行了2小时39分钟（在这期间系统没有重启过） <br><code>2 users             </code>： 当前有2个用户登录系统  <br><code>load average: 0.23, 0.11, 0.06 </code>： load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。<br>load average 数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。<br>如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</td></tr><tr><td>第二行：Tasks — 任务（进程）</td><td><code>Tasks: 213 total,   1 running, 210 sleeping,   0 stopped,   2 zombie</code><br><br>系统现在共有213个进程，其中处于运行中的有1个，210个在休眠，stoped状态的有0个，zombie状态（僵尸）的有2个</td></tr><tr><td>第三行：cpu状态信息</td><td><code>%Cpu(s):  0.7 us,  0.6 sy,  0.0 ni, 98.7 id,  0.0 wa,  0.0 hi,  0.1 si,  0.0 st</code><br><br>在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识<br><code>0.7 us </code>:用户空间占用CPU的百分比。<br><code>0.6 sy </code>:内核空间占用CPU的百分比。<br><code>0.0 ni </code>:改变过优先级的进程占用CPU的百分比<br><code>98.7 id</code>:空闲CPU百分比<br><code>0.0 wa </code>:IO等待占用CPU的百分比<br><code>0.0 hi </code>:硬中断（Hardware IRQ）占用CPU的百分比<br><code>0.1 si </code>:软中断（Software Interrupts）占用CPU的百分比<br><code>0.0 st </code>:虚拟机占用百分比</td></tr><tr><td>第四行：内存状态</td><td><code>KiB Mem : 16212604 total,  4243632 free, 10135032 used,  1833940 buff/cache</code><br><br><code>16212604 total     </code>: 物理内存总量<br><code>10135032 used      </code>: 使用中的内存总量：现在系统内核控制的内存数<br><code>4243632 free       </code>: 空闲内存总量：内核还未纳入其管控范围的数量<br><code>1833940 buff/cache </code>: 缓存的内存量<br><br>纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。<br>若需要计算可用内存数，这里有个近似的计算公式：<code>第四行的free + 第四行的buffers + 第五行的cached/avail Mem</code><br><br>对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了</td></tr><tr><td>第五行：swap交换分区信息</td><td><code>KiB Swap:  8126460 total,  8126460 free,        0 used.  5577340 avail Mem</code><br><br><code>8126460 total     </code>: 交换区总量<br><code>0 used            </code>: 使用的交换区总量<br><code>8126460 free      </code>: 空闲交换区总量<br><code>5577340 avail Mem </code>: 可用交换取总量</td></tr><tr><td>第六行 ：空行</td><td></td></tr><tr><td>第七行以下：各进程（任务）的状态监控：</td><td><code>PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</code><br><code>944 root      20   0  565168  10532   7440 S   0.7  0.1   0:36.70 NetworkManager</code><br><br><code>PID    </code>:进程id<br><code>USER   </code>:进程所有者<br><code>PR     </code>:进程优先级<br><code>NI     </code>:nice值。负值表示高优先级，正值表示低优先级<br><code>VIRT   </code>:进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br><code>RES    </code>:进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br><code>SHR    </code>:共享内存大小，单位kb<br><code>S      </code>:进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程<br><code>%CPU   </code>:上次更新到现在的CPU时间占用百分比<br><code>%MEM   </code>:进程使用的物理内存百分比<br><code>TIME+  </code>:进程使用的CPU时间总计，单位1/100秒<br><code>COMMAND</code>:进程名称（命令名/命令行）</td></tr></tbody></table><h1>netstat：网络工具</h1><p><code>netstat</code> (network statistics) 是一个功能强大的网络工具，用于显示网络连接、路由表、接口统计等信息。虽然在新版 Linux 中逐渐被 <code>ss</code> 命令取代，但仍然是广泛使用的网络诊断工具。</p><ul><li><p>语法</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat [选项]</span><br></pre></td></tr></tbody></table></figure></li><li><p>常用选项</p><table><thead><tr><th>分类</th><th>参数</th></tr></thead><tbody><tr><td>显示网络连接</td><td><code>-c</code>: 每隔一个固定时间，执行该netstat命令。<br><br><code>-a</code>: 显示所有连接（包括监听和非监听）<br><code>-t</code>: 显示 TCP 连接<br><code>-u</code>: 显示 UDP 连接<br><code>-n</code>: 以数字形式显示地址和端口（不解析主机名和服务名）<br><code>-l</code>: 仅显示监听状态的连接<br><code>-p</code>: 显示进程ID和程序名称（需要root权限）<br></td></tr><tr><td>显示路由表</td><td><code>-r</code>：显示内核路由表<br><code>-e</code>：显示扩展信息</td></tr><tr><td>显示接口统计</td><td><code>-i</code>:显示网络接口列表<br><code>-s</code>:显示各协议统计信息</td></tr></tbody></table></li><li><p>范例</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 显示所有网络连接</span></span><br><span class="line">netstat -ap</span><br><span class="line"><span class="comment"># 2. 显示所有TCP连接</span></span><br><span class="line">netstat -atp</span><br><span class="line"><span class="comment"># 3. 显示所有UDP连接</span></span><br><span class="line">netstat -aup</span><br><span class="line"><span class="comment"># 4. 显示所有监听端口</span></span><br><span class="line">netstat -l</span><br><span class="line"><span class="comment"># 5. 显示TCP监听端口(不解析主机名)</span></span><br><span class="line">netstat -ltnp</span><br><span class="line"><span class="comment"># 6. 显示UDP监听端口(带进程信息)</span></span><br><span class="line"><span class="built_in">sudo</span> netstat -lupn</span><br><span class="line"><span class="comment"># 7. 显示路由表</span></span><br><span class="line">netstat -r <span class="comment"># 等同于 route -n</span></span><br><span class="line"><span class="comment"># 8. 显示网络接口统计</span></span><br><span class="line">netstat -i</span><br><span class="line"><span class="comment"># 9. 显示各协议统计信息</span></span><br><span class="line">netstat -s</span><br><span class="line"><span class="comment"># 10. 显示TCP连接及对应进程(需要root)</span></span><br><span class="line"><span class="built_in">sudo</span> netstat -tulp</span><br><span class="line"><span class="comment"># 11. 持续监控网络状态，每秒刷新一次</span></span><br><span class="line">netstat -c</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>输出字段解释</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Active Internet connections：有源TCP连接</span></span><br><span class="line">Proto: 协议类型(TCP/UDP)</span><br><span class="line">Recv-Q: 接收队列中的数据量</span><br><span class="line">Send-Q: 发送队列中的数据量</span><br><span class="line">Local Address: 本地地址和端口</span><br><span class="line">Foreign Address: 远程地址和端口</span><br><span class="line">State: 连接状态(仅TCP)</span><br><span class="line">    LISTEN: 监听状态</span><br><span class="line">    ESTABLISHED: 已建立连接</span><br><span class="line">    TIME_WAIT: 等待结束</span><br><span class="line">    CLOSE_WAIT: 远程已关闭，本地等待关闭</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Active UNIX domain sockets：有源Unix域套接口（和网络套接字一样，但是只能用于本机通信，性能可以提高一倍）</span></span><br><span class="line">Proto  :显示连接使用的协议</span><br><span class="line">RefCnt :表示连接到本套接口上的进程号</span><br><span class="line">Type   :显示套接口的类型</span><br><span class="line">State  :显示套接口当前的状态</span><br><span class="line">Path   :表示连接到套接口的其它进程使用的路径名。</span><br></pre></td></tr></tbody></table></figure></li></ul><h1><code>！</code>命令</h1><p><code>!</code> 符号在 Linux 中不但可以用作否定符号，还可以用来从历史命令记录中取出命令或不加修改的执行之前运行的命令。</p><blockquote><ol><li><strong>空格敏感</strong>：<code>!</code> 与后续字符间通常不能有空格（<code>! cmd</code> 除外）</li><li><strong>历史扩展</strong>：可通过关闭 <code>set +o histexpand</code> 禁用 <code>!</code> 的历史扩展功能</li><li><strong>安全风险</strong>：脚本中避免使用 <code>!</code>，可能意外触发历史命令</li></ol></blockquote><ol><li><p>执行历史命令</p><p><code>!n</code>：执行历史记录中第 n 条命令。如：<code>!203</code>   执行 history 列表中编号为 203 的命令</p><p><code>!!</code>：重复执行上一条命令（相当于 !-1）</p><p><code>sudo !!</code>： 用 sudo 重新运行上条命令</p><p><code>!-n</code>：执行前第 n 条命令。如：<code>!-3</code>    执行当前命令往前数第 3 条命令</p><p><code>!关键字</code>：执行==最近一条以 <code>关键字</code>开头==的命令。如：<code>!curl</code>  执行最近一次以 “curl” 开头的命令</p><p><code>!?关键字?</code>：执行==最近一条任意位置包含 <code>关键字</code>==的命令。</p></li><li><p><strong>组合其他修饰符</strong></p><p><code>:p</code>修饰符： 先预览命令而不直接执行。如：<code>!!:p</code></p></li><li><p>引用历史命令的参数</p><p><code>!:n</code>：引用上条命令的第 n 个参数（从 0 开始，0 是命令本身）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /etc /home</span><br><span class="line"><span class="built_in">echo</span> !:1  <span class="comment"># 输出 "/etc"（上条命令的第1个参数）</span></span><br></pre></td></tr></tbody></table></figure><p><code>!^</code>：上条命令的第一个参数</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> file.txt /backup/</span><br><span class="line"><span class="built_in">ls</span> !^    <span class="comment"># 相当于 ls file.txt </span></span><br></pre></td></tr></tbody></table></figure><p><code>!$</code>：上条命令的最后一个参数</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -czf archive.tar.gz /path/to/dir</span><br><span class="line"><span class="built_in">rm</span> !$    <span class="comment"># 相当于 rm /path/to/dir</span></span><br></pre></td></tr></tbody></table></figure><p><code>!*</code>：上条命令的所有参数</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> dir1 dir2 dir3</span><br><span class="line"><span class="built_in">echo</span> !*  <span class="comment"># 输出 "dir1 dir2 dir3"</span></span><br><span class="line"><span class="comment">##########################################################</span></span><br><span class="line">finsd -name <span class="string">"foo.zip"</span> <span class="comment"># 这里特意输错了find命令</span></span><br><span class="line">find !* <span class="comment"># find -name "foo.zip"</span></span><br></pre></td></tr></tbody></table></figure><p><code>!:-</code>: 去掉上一条命令最后一个参数，再次执行</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> dir1 dir2 dir3</span><br><span class="line"><span class="built_in">echo</span> !:-  <span class="comment"># 输出 "dir1 dir2"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>替换历史命令中的字符串</p><p><code>^old^new</code>：替换上条命令中的==第一个== old 为 new 并执行</p><p><code>!!:gs/old/new</code>: 将上一命令中的==所有==old替换为new</p><p><code>!scp:gs/old/new</code>：将上一个scp命令中的==所有==old替换为new</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/host</span><br><span class="line">^host^hosts  <span class="comment"># 相当于执行 cat /etc/hosts</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>条件执行</p><p><code>! cmd</code>：如果 cmd 的退出状态码 ≠ 0（失败），则执行后续命令</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@TEST:/mnt/c/Users# ! ping -c1 test.com &amp;&amp; <span class="built_in">echo</span> <span class="string">"Ping failed"</span></span><br><span class="line">PING test.com (3.18.255.247) 56(84) bytes of data.</span><br><span class="line"></span><br><span class="line">--- test.com ping statistics ---</span><br><span class="line">1 packets transmitted, 0 received, 100% packet loss, <span class="keyword">time</span> 0ms</span><br><span class="line"></span><br><span class="line">Ping failed</span><br><span class="line">root@TEST:/mnt/c/Users#</span><br></pre></td></tr></tbody></table></figure></li><li><p>取反（逻辑非）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除除了cfg结尾以外的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> !(*.cfg)</span><br></pre></td></tr></tbody></table></figure></li></ol><h1>PS ：显示当前进程的状态</h1><blockquote><p><code>ps</code>（英文全拼：process status）命令用于显示当前进程的状态，类似于 windows 的任务管理器命令的参数系统有些特殊。</p><p><code>ps</code>命令支持三种不同风格的参数：UNIX 风格（单破折号）、BSD 风格（无破折号）和 GNU 风格（双破折号）。</p></blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [选项]</span><br></pre></td></tr></tbody></table></figure><ul><li><p>进程选择参数</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">全称/含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-A</code></td><td style="text-align:left">All</td><td style="text-align:left">显示所有进程</td></tr><tr><td style="text-align:left"><code>-e</code></td><td style="text-align:left">Every</td><td style="text-align:left">等同于 -A</td></tr><tr><td style="text-align:left"><code>a</code></td><td style="text-align:left">All with tty</td><td style="text-align:left">显示所有终端关联的进程</td></tr><tr><td style="text-align:left"><code>-a</code></td><td style="text-align:left">All except session leaders</td><td style="text-align:left">显示除会话首进程外的所有进程</td></tr><tr><td style="text-align:left"><code>r</code></td><td style="text-align:left">Running</td><td style="text-align:left">仅显示运行中的进程</td></tr><tr><td style="text-align:left"><code>x</code></td><td style="text-align:left">Include no tty</td><td style="text-align:left">显示无终端控制的进程（如守护进程）</td></tr><tr><td style="text-align:left"><code>u</code></td><td style="text-align:left">User-oriented</td><td style="text-align:left">以用户为导向的格式显示</td></tr><tr><td style="text-align:left"><code>-u user</code></td><td style="text-align:left">User</td><td style="text-align:left">显示指定用户的进程</td></tr><tr><td style="text-align:left"><code>-p &lt;pid&gt;</code></td><td style="text-align:left">Process ID</td><td style="text-align:left">显示指定PID的进程</td></tr><tr><td style="text-align:left"><code>-C 命令名</code></td><td style="text-align:left">Command</td><td style="text-align:left">显示指定命令名的进程</td></tr></tbody></table></li><li><p>输出格式控制</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">全称/含义</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-f</code></td><td style="text-align:left">Full</td><td style="text-align:left">完整格式显示</td></tr><tr><td style="text-align:left"><code>-F</code></td><td style="text-align:left">Extra full</td><td style="text-align:left">扩展完整格式</td></tr><tr><td style="text-align:left"><code>l</code></td><td style="text-align:left">Long</td><td style="text-align:left">长格式显示</td></tr><tr><td style="text-align:left"><code>j</code></td><td style="text-align:left">Jobs</td><td style="text-align:left">作业格式显示</td></tr><tr><td style="text-align:left"><code>-j</code></td><td style="text-align:left">Job control</td><td style="text-align:left">显示作业控制信息</td></tr><tr><td style="text-align:left"><code>-H</code></td><td style="text-align:left"></td><td style="text-align:left">显示进程层次结构（树状）</td></tr><tr><td style="text-align:left"><code>-o format</code></td><td style="text-align:left">Output format</td><td style="text-align:left">自定义输出格式</td></tr><tr><td style="text-align:left"><code>--sort spec</code></td><td style="text-align:left">Sort by</td><td style="text-align:left">按指定字段排序</td></tr></tbody></table></li><li><p>显示线程</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-L</code></td><td style="text-align:left">显示线程（LWP和NLWP列）</td></tr><tr><td style="text-align:left"><code>-T</code></td><td style="text-align:left">显示线程（SPID列）</td></tr><tr><td style="text-align:left"><code>-m</code></td><td style="text-align:left">在进程后显示线程</td></tr></tbody></table></li><li><p>常用选项组合</p><p><code>ps -ef | grep tomcat</code>:  ==UNIX风格参数（单破折号）==  获取所有进程的完整信息，并查找特定进程</p><p><code>ps aux | grep tomcat</code>: ==BSD风格参数（无破折号）==  获取所有进程的完整信息，并查找特定进程</p><p><code>ps aux --sort=-%mem | head</code>: 按内存使用排序</p><p><code>ps -T -p &lt;PID&gt;</code>：==显示进程的线程==</p><p><code>ps eww -p &lt;PID&gt;</code>：==显示进程的环境变量==</p><p><code>ps -ejH</code> : 显示进程树状结构</p><p><code>ps -eLf</code>：显示线程信息</p></li></ul><h1>ssh：远程登陆</h1><blockquote><p><code>ssh</code> (Secure Shell) 是用于安全远程登录和执行命令的协议和工具，提供加密的通信会话。</p></blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式: ssh 用户名@机器名</span><br><span class="line">范例: ssh rd@build01</span><br></pre></td></tr></tbody></table></figure><p>常用选项</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p &lt;端口&gt;</code></td><td style="text-align:left">指定远程服务器端口（默认22）</td></tr><tr><td style="text-align:left"><code>-i &lt;密钥文件&gt;</code></td><td style="text-align:left">指定身份认证私钥文件</td></tr><tr><td style="text-align:left"><code>-l &lt;用户名&gt;</code></td><td style="text-align:left">指定登录用户名</td></tr><tr><td style="text-align:left"><code>-v</code></td><td style="text-align:left">详细模式（可重复使用增加详细程度：-vv, -vvv）</td></tr><tr><td style="text-align:left"><code>-X</code></td><td style="text-align:left">启用X11转发</td></tr><tr><td style="text-align:left"><code>-Y</code></td><td style="text-align:left">启用可信X11转发</td></tr><tr><td style="text-align:left"><code>-L &lt;本地端口:目标主机:目标端口&gt;</code></td><td style="text-align:left">本地端口转发</td></tr><tr><td style="text-align:left"><code>-R &lt;远程端口:目标主机:目标端口&gt;</code></td><td style="text-align:left">远程端口转发</td></tr><tr><td style="text-align:left"><code>-D &lt;端口&gt;</code></td><td style="text-align:left">动态端口转发（SOCKS代理）</td></tr><tr><td style="text-align:left"><code>-N</code></td><td style="text-align:left">不执行远程命令（仅用于端口转发）</td></tr><tr><td style="text-align:left"><code>-f</code></td><td style="text-align:left">后台运行</td></tr><tr><td style="text-align:left"><code>-C</code></td><td style="text-align:left">压缩数据传输</td></tr><tr><td style="text-align:left"><code>-q</code></td><td style="text-align:left">安静模式（抑制警告和诊断信息）</td></tr></tbody></table><p>基本使用：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 基本登录</span></span><br><span class="line">ssh username@hostname</span><br><span class="line"><span class="comment"># 2. 指定端口登录</span></span><br><span class="line">ssh -p 2222 username@hostname</span><br><span class="line"><span class="comment"># 3. 使用密钥认证登录</span></span><br><span class="line">ssh -i ~/.ssh/id_rsa username@hostname</span><br><span class="line"><span class="comment"># 4. 直接执行远程命令</span></span><br><span class="line">ssh username@hostname <span class="string">"ls -l /tmp"</span></span><br><span class="line"><span class="comment"># 5. 调试连接</span></span><br><span class="line">ssh -vvv username@hostname</span><br></pre></td></tr></tbody></table></figure><p>配置文件配置常用连接</p><blockquote><p><code>~/.ssh/config</code> 配置文件可以保存常用的SSH配置：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host myserver</span><br><span class="line">    HostName server.example.com</span><br><span class="line">    User username</span><br><span class="line">    Port 2222</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    Compression yes</span><br></pre></td></tr></tbody></table></figure><p>配置后可以简化为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver</span><br></pre></td></tr></tbody></table></figure></blockquote><p>密钥管理</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/ssh_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 生成密钥对</span></span><br><span class="line">ssh-keygen -t rsa -b 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 复制公钥到服务器</span></span><br><span class="line">ssh-copy-id username@hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加到ssh-agent</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="subst">$(ssh-agent -s)</span>"</span> <span class="comment"># 启动并设置环境变量</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa  <span class="comment"># 添加密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 列出已加载密钥</span></span><br><span class="line">ssh-add -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 删除密钥</span></span><br><span class="line">ssh-add -d ~/.ssh/id_rsa  <span class="comment"># 删除指定密钥</span></span><br><span class="line">ssh-add -D                <span class="comment"># 删除所有密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 关闭 ssh-agent</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="subst">$(ssh-agent -k)</span>"</span>  <span class="comment"># 正常关闭</span></span><br><span class="line"><span class="built_in">kill</span> <span class="variable">$SSH_AGENT_PID</span>     <span class="comment"># 强制终止</span></span><br></pre></td></tr></tbody></table></figure><h1>systemctl：系统服务</h1><p><code>systemctl</code> 是 systemd 系统和服务管理器的控制工具，用于管理 Linux 系统的服务、挂载点、套接字等单元(unit)。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl [选项] [命令] [单元名称]</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>分类</th><th>命令</th></tr></thead><tbody><tr><td>服务管理常用命令：启动/停止/重启服务</td><td><code>systemctl start &lt;服务名&gt;</code>：启动服务<br><code>systemctl stop &lt;服务名&gt;</code>：停止服务<br><code>systemctl restart &lt;服务名&gt;</code>：重启服务<br><code>systemctl reload &lt;服务名&gt;</code>：重新加载配置(不重启)<br><code>systemctl try-restart &lt;服务名&gt;</code>：仅在服务运行时重启</td></tr><tr><td>服务管理常用命令：开机启用/禁用服务</td><td><code>systemctl enable &lt;服务名&gt;</code>     ： 设置开机自启<br><code>systemctl disable &lt;服务名&gt;</code>    ： 取消开机自启<br><code>systemctl reenable &lt;服务名&gt;</code>   ： 重新设置开机自启<br><code>systemctl is-enabled &lt;服务名&gt;</code> ： 检查是否开机自启</td></tr><tr><td>服务管理常用命令：查看服务状态</td><td><code>systemctl status &lt;服务名&gt;</code>           ： 查看服务详细状态<br><code>systemctl is-active &lt;服务名&gt;</code>        ： 检查服务是否运行<br><code>systemctl list-units --type=service</code> ： 列出所有服务单元<br>`systemctl list-unit-files</td></tr><tr><td>系统管理命令：系统状态</td><td><code>systemctl status</code>       ： 系统整体状态<br><code>systemctl list-units</code>   ： 显示所有活动单元<br><code>systemctl list-sockets</code> ： 显示所有套接字<br><code>systemctl list-timers</code>  ： 显示所有定时器</td></tr><tr><td>系统管理命令：系统控制</td><td><code>systemctl poweroff</code>     ： 关机    <br><code>systemctl reboot</code>       ： 重启    <br><code>systemctl suspend</code>      ： 挂起    <br><code>systemctl hibernate</code>    ： 休眠    <br><code>systemctl hybrid-sleep</code> ： 混合休眠</td></tr><tr><td>日志管理</td><td><code>journalctl -u &lt;服务名&gt;</code>          ： 查看指定服务的日志  <br><code>journalctl -f -u &lt;服务名&gt;</code>       ： 实时跟踪服务日志    <br><code>journalctl --since "2023-01-01"</code> ： 查看指定时间后的日志<br><code>journalctl --disk-usage</code>         ： 查看日志磁盘使用情况</td></tr><tr><td>用户服务管理(需要 <code>--user</code> 参数)</td><td><code>systemctl --user start &lt;服务名&gt;</code>  ： 启动用户服务<br><code>systemctl --user enable &lt;服务名&gt;</code> ： 启用用户服务自启<br><code>systemctl --user list-units</code>      ： 列出用户单元</td></tr><tr><td></td><td></td></tr></tbody></table><p>范例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查看 nginx 服务状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 2. 设置 docker 开机自启并立即启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br><span class="line"><span class="comment"># 3. 查看所有失败的服务</span></span><br><span class="line">systemctl --failed</span><br><span class="line"><span class="comment"># 4. 分析服务启动时间</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br><span class="line"><span class="comment"># 5. 分析服务启动时间</span></span><br><span class="line">systemd-analyze blame</span><br><span class="line"><span class="comment"># 6. 临时修改服务配置(重启后失效):</span></span><br><span class="line">systemctl edit --full &lt;服务名&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>大多数管理命令需要 root 权限</li><li>修改单元文件后需要 <code>daemon-reload</code></li><li>用户服务与系统服务是隔离的</li><li>不同发行版的 systemd 版本可能有差异</li></ol></blockquote><p><code>systemctl</code> 是现代 Linux 系统管理的核心工具，熟练掌握可以高效管理系统服务。</p><h1>openssl： 加密工具包</h1><p>OpenSSL 是一个强大的开源加密工具包，提供了各种加密、证书管理和 SSL/TLS 功能。以下是 OpenSSL 的常用命令和用法。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl [命令] [选项] [参数]</span><br></pre></td></tr></tbody></table></figure><p>举例：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line">openssl rand -<span class="built_in">base64</span> 32  <span class="comment"># 生成 32 字节随机字符串</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;curl：用于通过 URL 传输数据&lt;/h1&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/categories/Linux/"/>
    
    <category term="基础命令" scheme="https://hmxyl.github.io/categories/Linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Cherry书签管理器</title>
    <link href="https://hmxyl.github.io/20250610/b78998f1.html"/>
    <id>https://hmxyl.github.io/20250610/b78998f1.html</id>
    <published>2025-06-10T06:17:04.000Z</published>
    <updated>2025-06-11T07:04:05.620Z</updated>
    
    <content type="html"><![CDATA[<h1>官网地址</h1><p><a href="https://cherry.haishan.me/docs/deploy">https://cherry.haishan.me/docs/deploy</a></p><p><a href="https://github.com/sissbruecker/linkding">https://github.com/sissbruecker/linkding</a></p><h1>Docker上安装</h1><ul><li>参数说明</li></ul><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td><code>JWT_SECRET</code></td><td>加密因子。用 <code>openssl rand -hex 位数</code> 来生成</td></tr><tr><td><code>ENABLE_PUBLIC_REGISTRATION</code></td><td>是否启用注册，默认为 <code>0</code></td></tr><tr><td><code>USE_INSECURE_COOKIE</code></td><td>设置 <code>1</code> 为暂时禁用 <code>Secure cookie</code></td></tr></tbody></table><blockquote><ul><li><code>JWT_SECRET</code>（必需的）：此字符串将用于签署用户的 <code>PAT</code>（个人访问令牌）。<code>PAT</code> 采用 <code>JWT</code>（<code>JSON Web Token</code>）格式，用于验证和识别 <code>Cherry</code> 用户。您应该将<code>JWT_SECRET</code>保密，以防止他人伪造令牌。</li><li><code>ENABLE_PUBLIC_REGISTRATION</code> ：此值确定是否从外部（您的 <code>Cherry Docker</code> 容器实例）启用注册。将其设置 <code>1</code> 为启用注册。默认情况下，或使用其他值，注册被禁用。您很可能希望在全新部署后启用注册，并在创建用户后立即禁用它。</li><li><code>USE_INSECURE_COOKIE</code>：默认情况下，<code>Cherry</code> 使用仅适用于 <code>HTTPS</code> 的 <code>Secure cookie</code> 。但是，如果您想尝试在本地主机上运行 <code>Cherry</code>，您可以将此环境变量设置 <code>1</code> 为暂时禁用 <code>Secure cookie</code>，否则您可能无法登录。</li></ul></blockquote><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">cherry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">haishanh/cherry:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cherry</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5150</span><span class="string">:8000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./cherry:/data</span></span><br><span class="line">    <span class="attr">environment:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">USE_INSECURE_COOKIE:1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JWT_SECRET=some-some-secret-string</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></tbody></table></figure><ul><li>用户操作（容器创建之后创建用户）</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">docker <span class="built_in">exec</span> cherry cherry create-user &lt;email&gt; &lt;password&gt;</span><br><span class="line"><span class="comment"># 更新现有用户密码</span></span><br><span class="line">docker <span class="built_in">exec</span> cherry cherry update-user-password &lt;email&gt; &lt;newPassword&gt;</span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">docker <span class="built_in">exec</span> cherry cherry delete-user &lt;<span class="built_in">id</span>&gt; &lt;email&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据目录为1001用户权限（磁盘数据迁移需要使用到）</span></span><br><span class="line"><span class="built_in">chown</span> 1001 /opt/hots_data/cherry -R</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;官网地址&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://cherry.haishan.me/docs/deploy&quot;&gt;https://cherry.haishan.me/docs/deploy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.co</summary>
      
    
    
    
    <category term="应用推荐" scheme="https://hmxyl.github.io/categories/%E5%BA%94%E7%94%A8%E6%8E%A8%E8%8D%90/"/>
    
    
  </entry>
  
  <entry>
    <title>LinkAce书签管理器</title>
    <link href="https://hmxyl.github.io/20250605/7f395aef.html"/>
    <id>https://hmxyl.github.io/20250605/7f395aef.html</id>
    <published>2025-06-05T10:32:01.000Z</published>
    <updated>2025-06-11T07:04:05.623Z</updated>
    
    <content type="html"><![CDATA[<h1><a href="https://www.linkace.org/docs/v2/setup/setup-with-docker/">Docker安装LinkAce</a></h1><ul><li>磁盘路径准备</li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 磁盘数据</span></span><br><span class="line"><span class="built_in">touch</span> docker-compose.yml</span><br><span class="line"><span class="built_in">mkdir</span> linkace &amp; <span class="built_in">cd</span> linkace </span><br><span class="line"><span class="built_in">touch</span> .<span class="built_in">env</span></span><br><span class="line"><span class="built_in">mkdir</span> database &amp; <span class="built_in">mkdir</span> backups &amp; <span class="built_in">cd</span> database</span><br><span class="line"><span class="comment"># 数据库配置(sqlite数据库)</span></span><br><span class="line"><span class="built_in">touch</span> database.sqlite</span><br><span class="line"><span class="built_in">chmod</span> 0766 database.sqlite</span><br></pre></td></tr></tbody></table></figure><ul><li>.env文件</li></ul><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## LINKACE CONFIGURATION</span><br><span class="line"></span><br><span class="line">## Basic app configuration</span><br><span class="line"># The app key is generated later, please leave it like that</span><br><span class="line">APP_KEY=base64:QaxDvW3pmdJxmPNITFBJHf82JyUn+rK0AUtQTT1jM5c=</span><br><span class="line"></span><br><span class="line">## Configuration of the database connection</span><br><span class="line"># Set the database driver (mysql, pgsql, sqlsrv, sqlite)</span><br><span class="line">DB_CONNECTION=sqlite</span><br><span class="line"># Set the database name (MySQL, Postgres,...) or path (SQLite) here</span><br><span class="line">DB_DATABASE=/app/database/database.sqlite</span><br></pre></td></tr></tbody></table></figure></blockquote><ul><li>docker-compose.yml文件</li></ul><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  linkace:</span><br><span class="line">    container_name: linkace</span><br><span class="line">    image: linkace/linkace:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - ./linkace/.env:/app/.env</span><br><span class="line">      - ./linkace/database/database.sqlite:/app/database/database.sqlite</span><br><span class="line">    environment:</span><br><span class="line">      - PORT=8080</span><br><span class="line">    ports:</span><br><span class="line">      - "8080:8080"</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      - hots</span><br><span class="line">networks:</span><br><span class="line">  hots:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></tbody></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;a href=&quot;https://www.linkace.org/docs/v2/setup/setup-with-docker/&quot;&gt;Docker安装LinkAce&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;磁盘路径准备&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="应用推荐" scheme="https://hmxyl.github.io/categories/%E5%BA%94%E7%94%A8%E6%8E%A8%E8%8D%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows快捷键</title>
    <link href="https://hmxyl.github.io/20250604/459f9e41.html"/>
    <id>https://hmxyl.github.io/20250604/459f9e41.html</id>
    <published>2025-06-04T08:03:38.000Z</published>
    <updated>2025-06-11T07:04:05.624Z</updated>
    
    <content type="html"><![CDATA[<h1>Windows快捷键</h1><h2 id="win-r-可执行的命令">win+r 可执行的命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>mstsc</td><td>打开远程连接</td></tr><tr><td>services.msc</td><td>本地服务设置</td></tr><tr><td>calc</td><td>计算器</td></tr><tr><td>dxdiag</td><td>查看系统配置命令</td></tr><tr><td>regedit</td><td>注册表</td></tr></tbody></table><h2 id="Windows系统快捷键记录">Windows系统快捷键记录</h2><table><thead><tr><th><strong>说明</strong></th><th><strong>快捷键</strong></th></tr></thead><tbody><tr><td>打开任务管理器</td><td>Ctrl+Shift+Esc</td></tr><tr><td>取消当前任务</td><td>Esc</td></tr><tr><td>永久删除所选的项目（删除之后无法从回收站还原）</td><td>Shift+delete</td></tr><tr><td>在选项卡上向后移动</td><td>Ctrl+shiff+tab</td></tr><tr><td>在选项上向后移动</td><td>Tab</td></tr><tr><td>在选项卡上向前移动</td><td>Shift+Tab</td></tr></tbody></table><h2 id="Windows资源管理器中的快捷键">Windows资源管理器中的快捷键</h2><table><thead><tr><th><strong>快捷键</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Alt+P</td><td>显示预览窗格</td></tr><tr><td>Alt+←</td><td>切换到前一次打开的文件夹</td></tr><tr><td>Alt+→</td><td>切换到下一次后打开的文件夹</td></tr><tr><td>Alt+↑</td><td>打开上层文件夹</td></tr><tr><td>Backspace</td><td>打开上层文件夹</td></tr></tbody></table><h2 id="Windows徽标键相关的快捷键">Windows徽标键相关的快捷键</h2><table><thead><tr><th><strong>快捷键</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Win</td><td>打开或者关闭开始菜单</td></tr><tr><td>Win+Pause</td><td>显示系统属性对话框</td></tr><tr><td>Win+d</td><td>显示桌面</td></tr><tr><td>Win+m</td><td>最小化所有窗口</td></tr><tr><td>Win+Shift+m</td><td>还原最小化窗口到桌面上</td></tr><tr><td>Win+E</td><td>打开我的电脑</td></tr><tr><td>Win+F</td><td>搜索文件或文件夹</td></tr><tr><td>Win+L</td><td>锁定您的计算机或切换用户</td></tr><tr><td>Win+R</td><td>打开运行对话框</td></tr><tr><td>Win+↓</td><td>最小化窗口</td></tr><tr><td>Win+↑</td><td>最大化当前窗口</td></tr><tr><td>Win+←</td><td>最大化到窗口左侧的屏幕上</td></tr><tr><td>Win+→</td><td>最大化到窗口右侧的屏幕上</td></tr><tr><td>Win+home</td><td>最小化所有窗口，除了当前激活窗口</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Windows快捷键&lt;/h1&gt;
&lt;h2 id=&quot;win-r-可执行的命令&quot;&gt;win+r 可执行的命令&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mst</summary>
      
    
    
    
    <category term="Windows系统" scheme="https://hmxyl.github.io/categories/Windows%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="快捷键" scheme="https://hmxyl.github.io/categories/Windows%E7%B3%BB%E7%BB%9F/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
    <category term="快捷键" scheme="https://hmxyl.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://hmxyl.github.io/20250520/0.html"/>
    <id>https://hmxyl.github.io/20250520/0.html</id>
    <published>2025-05-20T07:34:49.000Z</published>
    <updated>2025-06-11T07:04:05.625Z</updated>
    
    <content type="html"><![CDATA[<h1>WSL Ubuntu 系统迁移到其他位置的完整指南</h1><h2 id="3-修改-WSL-默认版本（WSL1-或-WSL2）"><strong>3. 修改 WSL 默认版本（WSL1 或 WSL2）</strong></h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2  # 设置新安装的发行版默认用 WSL2</span><br><span class="line">wsl --set-version &lt;发行版名称&gt; 2  # 将现有发行版转换为 WSL2</span><br></pre></td></tr></tbody></table></figure><h2 id="方法一：使用-wsl-export-和-wsl-import-推荐">方法一：使用 <code>wsl --export</code> 和 <code>wsl --import</code> (推荐)</h2><h3 id="1-查看当前安装的-WSL-发行版">1. 查看当前安装的 WSL 发行版</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --verbose</span><br></pre></td></tr></tbody></table></figure><p>记录要迁移的 Ubuntu 发行版名称（如 <code>Ubuntu-24.04</code>）</p><h3 id="2-导出当前系统到-tar-文件">2. 导出当前系统到 tar 文件</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export Ubuntu-24.04 D:\wsl_backup\ubuntu24.04.tar</span><br></pre></td></tr></tbody></table></figure><h3 id="3-注销原系统">3. 注销原系统</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu-24.04</span><br></pre></td></tr></tbody></table></figure><h3 id="4-导入到新位置">4. 导入到新位置</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu-24.04 D:\wsl_system\ubuntu24.04 D:\wsl_backup\ubuntu24.04.tar --version 2</span><br></pre></td></tr></tbody></table></figure><h3 id="5-设置默认用户">5. 设置默认用户</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进入 root 环境</span><br><span class="line">wsl -d Ubuntu-24.04 -u root</span><br><span class="line"></span><br><span class="line"># 设置默认用户（替换 yourusername 为你的用户名）</span><br><span class="line">echo -e "[user]\ndefault=yourusername" &gt;&gt; /etc/wsl.conf</span><br><span class="line"></span><br><span class="line"># 退出</span><br><span class="line">exit</span><br></pre></td></tr></tbody></table></figure><h2 id="6-修改默认发行版"><strong>6. 修改默认发行版</strong></h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --verbose  # 查看所有发行版</span><br><span class="line">wsl --set-default &lt;发行版名称&gt;  # 设置默认启动的发行版</span><br></pre></td></tr></tbody></table></figure><h1>在 WSL 中开放 22 端口 (SSH 服务) 的完整指南</h1><h2 id="方法一：在-WSL-内部配置-SSH-服务">方法一：在 WSL 内部配置 SSH 服务</h2><h3 id="1-安装-SSH-服务器">1. 安装 SSH 服务器</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install openssh-server -y</span><br></pre></td></tr></tbody></table></figure><h3 id="2-配置-SSH-服务">2. 配置 SSH 服务</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure><p>修改以下关键参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Port 22</span><br><span class="line">ListenAddress 0.0.0.0</span><br><span class="line">PermitRootLogin yes           # 允许root登录</span><br><span class="line">PasswordAuthentication yes    # 允许密码认证</span><br></pre></td></tr></tbody></table></figure><h3 id="3-重启-SSH-服务">3. 重启 SSH 服务</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br><span class="line"># 或使用 systemctl (如果启用了 systemd)</span><br><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></tbody></table></figure><h3 id="4-检查服务状态">4. 检查服务状态</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh status</span><br><span class="line"># 或</span><br><span class="line">sudo netstat -tulnp | grep 22</span><br></pre></td></tr></tbody></table></figure><p>测试端口</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装 nc（Alpine）</span><br><span class="line">apt-get install netcat-openbsd</span><br><span class="line"></span><br><span class="line"># 测试端口</span><br><span class="line">nc -zv mysql 3306</span><br></pre></td></tr></tbody></table></figure><h2 id="2-确保-RabbitMQ-管理插件已启用"><strong>2. 确保 RabbitMQ 管理插件已启用</strong></h2><p>RabbitMQ 默认不启用 Web 管理界面，需手动启用：</p><h3 id="进入容器执行命令"><strong>进入容器执行命令</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container_name&gt; bash</span><br></pre></td></tr></tbody></table></figure><h3 id="在容器内启用管理插件"><strong>在容器内启用管理插件</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></tbody></table></figure><h3 id="退出并重启容器"><strong>退出并重启容器</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">docker restart &lt;container_name&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;WSL Ubuntu 系统迁移到其他位置的完整指南&lt;/h1&gt;
&lt;h2 id=&quot;3-修改-WSL-默认版本（WSL1-或-WSL2）&quot;&gt;&lt;strong&gt;3. 修改 WSL 默认版本（WSL1 或 WSL2）&lt;/strong&gt;&lt;/h2&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端日常问题记录</title>
    <link href="https://hmxyl.github.io/20240929/33f402b5.html"/>
    <id>https://hmxyl.github.io/20240929/33f402b5.html</id>
    <published>2024-09-29T11:16:39.000Z</published>
    <updated>2024-09-29T11:19:35.692Z</updated>
    
    <content type="html"><![CDATA[<h1>在SPAN元素上禁用设置属性不会阻止点击事件（jquery）</h1><p>来源：<a href="https://www.jb51.cc/jquery/182333.html">https://www.jb51.cc/jquery/182333.html</a></p><p>一个SPAN元素，在点击事件上做某事。当我禁用它，使用jQuery：<code>$(“span”).attr(“disabled”，true)</code> 无效</p><h3 id="解决方法">解决方法</h3><p>尝试这个：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$("span").css("pointer-events","none");</span><br></pre></td></tr></tbody></table></figure><p>你可以启用这些</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$("span").css("pointer-events","auto");</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;在SPAN元素上禁用设置属性不会阻止点击事件（jquery）&lt;/h1&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://www.jb51.cc/jquery/182333.html&quot;&gt;https://www.jb51.cc/jquery/182333.html&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="日常记录" scheme="https://hmxyl.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    <category term="前端" scheme="https://hmxyl.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="日常记录" scheme="https://hmxyl.github.io/tags/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue3基础</title>
    <link href="https://hmxyl.github.io/20231224/7d2d5550.html"/>
    <id>https://hmxyl.github.io/20231224/7d2d5550.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-09-30T06:28:40.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板语法">模板语法</h2><h3 id="swig￼25-文本"><code>{{ msg }}</code>:文本</h3><p>数据绑定最常见的形式就是使用“Mustache” (双大括号) 语法的文本插值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: {{ msg }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>一般配合<code>js</code> 中的<code>data()</code>设置数据</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">return</span>{</span><br><span class="line">      <span class="attr">msg</span>:<span class="string">"消息提示"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="v-html：原始-HTML"><code>v-html</code>：原始 HTML</h3><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用<code>v-html</code> 指令</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: {{ rawHtml }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">return</span>{</span><br><span class="line">        <span class="attr">rawHtml</span>:<span class="string">"&lt;a href='https://www.itbaizhan.com'&gt;百战&lt;/a&gt;"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="v-bind-：设置属性"><code>v-bind</code>  ：设置属性</h3><p>Mustache 语法不能在 HTML 属性中使用，然而，可以使用 <code>v-bind</code> 指令</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">    <span class="keyword">return</span>{</span><br><span class="line">        <span class="attr">dynamicId</span>:<span class="number">1001</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>温馨提示</strong></p><p><code>v-bind:</code> 可以简写成 <code>:</code></p></blockquote><h3 id="使用-JavaScript-表达式">使用 JavaScript 表达式</h3><p>在我们的模板中，我们一直都只绑定简单的 property 键值，Vue.js 都提供了完全的 JavaScript 表达式支持</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{{ number + <span class="number">1</span> }}</span><br><span class="line"></span><br><span class="line">{{ ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> }}</span><br><span class="line"></span><br><span class="line">{{ message.<span class="title function_">split</span>(<span class="string">''</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">''</span>) }}</span><br></pre></td></tr></tbody></table></figure><p>这些表达式会在当前活动实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  这是语句，不是表达式：--&gt;</span><br><span class="line">{{ <span class="keyword">var</span> a = <span class="number">1</span> }}</span><br><span class="line"></span><br><span class="line">&lt;!-- 流程控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="line">{{ <span class="keyword">if</span> (ok) { <span class="keyword">return</span> message } }}</span><br></pre></td></tr></tbody></table></figure><h2 id="条件渲染">条件渲染</h2><h3 id="v-if">v-if</h3><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 <code>true</code> 值的时候被渲染。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>我是孙猴子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">flag</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="v-else">v-else</h3><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>我是孙猴子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>你是傻猴子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">flag</span>: <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="v-show">v-show</h3><p>另一个用于条件性展示元素的选项是 <code>v-show</code> 指令</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-if-和v-show-的区别"><code>v-if</code> 和<code>v-show</code> 的区别</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。</p><p>因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好</p><h2 id="列表渲染">列表渲染</h2><h3 id="v-for-：把一个数组映射为一组元素"><code>v-for</code> ：把一个数组映射为一组元素</h3><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。</p><p><code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 items 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>{{ item.message }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">items</span>: [{ <span class="attr">message</span>: <span class="string">'Foo'</span> }, { <span class="attr">message</span>: <span class="string">'Bar'</span> }]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="为v-for-提供一个-key-attribute">为<code>v-for</code> 提供一个 <code>key</code> attribute</h3><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用<code>“就地更新”</code>的策略。</p><p>如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一的 <code>key</code> attribute：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span> <span class="attr">:key</span>=<span class="string">"item.id|index"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ item.title }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.avator"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>温馨提示</p><p><code>key</code>时通过<code>v-bind</code>绑定的属性</p><p>建议所有可行的时候，均给 <code>v-for</code> 提供一个 <code>key</code> attribute</p><p><code>key</code> 绑定的值期望是一个基础类型的值，例如字符串或number类型</p></blockquote><h2 id="computed：计算属性"><code>computed</code>：计算属性</h2><p><a href="https://cn.vuejs.org/guide/essentials/computed.html#writable-computed">https://cn.vuejs.org/guide/essentials/computed.html#writable-computed</a></p><p>为避免在模板中使用复杂的表达式，推荐使用<strong>计算属性</strong>来描述依赖响应式状态的复杂逻辑</p><p>计算属性默认是只读的。当你尝试修改一个计算属性时，你会收到一个运行时警告。只在某些特殊场景中你可能才需要用到“可写”的属性，你可以通过同时提供 getter 和 setter 来创建：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">firstName</span>: <span class="string">'John'</span>,</span><br><span class="line">      <span class="attr">lastName</span>: <span class="string">'Doe'</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">computed</span>: {</span><br><span class="line">    <span class="attr">fullName</span>: {</span><br><span class="line">      <span class="comment">// getter</span></span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">' '</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// setter</span></span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) {</span><br><span class="line">        <span class="comment">// 注意：我们这里使用的是解构赋值语法</span></span><br><span class="line">        [<span class="variable language_">this</span>.<span class="property">firstName</span>, <span class="variable language_">this</span>.<span class="property">lastName</span>] = newValue.<span class="title function_">split</span>(<span class="string">' '</span>)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在当你再运行 <code>this.fullName = 'John Doe'</code> 时，setter 会被调用而 <code>this.firstName</code> 和 <code>this.lastName</code> 会随之更新。或者这种使用方式</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">'John'</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">'Doe'</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">computed</span>: {</span><br><span class="line">      <span class="title function_">getfullName</span>(<span class="params"></span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">' '</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>计算属性和方法的区别</p><p><strong>计算属性</strong>: 计算属性值会基于其响应式依赖被缓存。一个计算属性仅会在其响应式依赖更新时才重新计算</p><p><strong>方法</strong>:方法调用总是会在重汇染发生时再次执行函数</p></blockquote><h2 id="Class绑定">Class绑定</h2><p>为了避免复杂的class 属性拼接，Vue 专门为class 的v-bind 用法提供了<strong>特殊的功能增强</strong>。除了字符串外，表达式的值也可以是对象或数组</p><p>绑定一个数组</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">          <span class="attr">activeClass</span>: <span class="string">'active'</span>,</span><br><span class="line">          <span class="attr">errorClass</span>: <span class="string">'text-danger'</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>或者是一个对象</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">:class</span>=<span class="string">"{ active: isActive }"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">          <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">error</span>: <span class="literal">null</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">computed</span>: {</span><br><span class="line">        <span class="title function_">classObject</span>(<span class="params"></span>) {</span><br><span class="line">          <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">error</span>,</span><br><span class="line">            <span class="string">'text-danger'</span>: <span class="variable language_">this</span>.<span class="property">error</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">error</span>.<span class="property">type</span> === <span class="string">'fatal'</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>也可以在数组中嵌套对象：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[{ active: isActive }, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>提示：</p><p>数组和对象嵌套过程中，只能是数组嵌套对象，不能反其道而行</p></blockquote><h2 id="Style绑定">Style绑定</h2><p><a href="https://cn.vuejs.org/guide/essentials/class-and-style.html#binding-inline-styles">https://cn.vuejs.org/guide/essentials/class-and-style.html#binding-inline-styles</a></p><p>类似class绑定。如对象绑定</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">          <span class="attr">styleObject</span>: {</span><br><span class="line">            <span class="attr">color</span>: <span class="string">'red'</span>,</span><br><span class="line">            <span class="attr">fontSize</span>: <span class="string">'13px'</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模板语法&quot;&gt;模板语法&lt;/h2&gt;
&lt;h3 id=&quot;swig￼25-文本&quot;&gt;&lt;code&gt;{{ msg }}&lt;/code&gt;:文本&lt;/h3&gt;
&lt;p&gt;数据绑定最常见的形式就是使用“Mustache” (双大括号) 语法的文本插值&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="前端" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/Vue3/"/>
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>侦听器（watch）</title>
    <link href="https://hmxyl.github.io/20231224/1954b1ff.html"/>
    <id>https://hmxyl.github.io/20231224/1954b1ff.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-09-30T06:28:48.716Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.vuejs.org/guide/essentials/watchers.html">https://cn.vuejs.org/guide/essentials/watchers.html</a></p><p>侦听对象为data中定义的响应式数据+组件数据</p><p>计算属性允许我们声明性地计算衍生值。</p><p>然而在有些情况下，我们需要在状态变化时执行一些“其他操作”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。</p><h1>基本示例</h1><p>在选项式 API 中，我们可以使用 <a href="https://cn.vuejs.org/api/options-state.html#watch"><code>watch</code> 选项</a>在每次响应式属性发生变化时触发一个函数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">question</span>: <span class="string">''</span>,</span><br><span class="line">            <span class="attr">answer</span>: <span class="string">'Questions usually contain a question mark. ;-)'</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>: {</span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">getAnswer</span>(<span class="params"></span>) {</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">answer</span> = <span class="string">'Thinking...'</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">'https://yesno.wtf/api'</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">answer</span> = (<span class="keyword">await</span> res.<span class="title function_">json</span>()).<span class="property">answer</span></span><br><span class="line">            } <span class="keyword">catch</span> (error) {</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">answer</span> = <span class="string">'Error! Could not reach the API. '</span> + error</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">watch</span>: {</span><br><span class="line">        <span class="comment">// 每当 question 改变时，这个函数就会执行，从而回去对应的answer</span></span><br><span class="line">        <span class="title function_">question</span>(<span class="params">newQuestion, oldQuestion</span>) {</span><br><span class="line">            <span class="keyword">if</span> (newQuestion.<span class="title function_">includes</span>(<span class="string">'?'</span>)) {</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">getAnswer</span>()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>watch</code>中定义的函数名称必须和<code>侦听的数据对象</code>一致。</p></blockquote><h1>深层侦听器</h1><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    <span class="comment">// 注意：只能是简单的路径，不支持表达式。</span></span><br><span class="line">    <span class="string">'some.nested.key'</span>(newValue) {</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    <span class="attr">someObject</span>: {</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) {</span><br><span class="line">        <span class="comment">// 注意：在嵌套的变更中，</span></span><br><span class="line">        <span class="comment">// 只要没有替换对象本身，</span></span><br><span class="line">        <span class="comment">// 那么这里的 `newValue` 和 `oldValue` 相同</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><a href="https://cn.vuejs.org/guide/essentials/watchers.html#eager-watchers">即时回调的侦听器</a></h1><p><code>watch</code> 默认是懒执行的：仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。</p><p>举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。</p><p>我们可以用一个对象来声明侦听器，这个对象有 <code>handler</code> 方法和 <code>immediate: true</code> 选项，这样便能强制回调函数立即执行：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    <span class="attr">question</span>: {</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newQuestion</span>) {</span><br><span class="line">        <span class="comment">// 在组件实例创建时会立即调用</span></span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// 强制立即执行回调</span></span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>回调函数的初次执行就发生在 <code>created</code> 钩子之前。Vue 此时已经处理了 <code>data</code>、<code>computed</code> 和 <code>methods</code> 选项，所以这些属性在第一次调用时就是可用的。</p><h1><a href="https://cn.vuejs.org/guide/essentials/watchers.html#callback-flush-timing">回调的触发时机</a></h1><p>当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新<strong>之前</strong>被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的 DOM，你需要指明 <code>flush: 'post'</code> 选项：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">watch</span>: {</span><br><span class="line">    <span class="attr">key</span>: {</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params"></span>) {},</span><br><span class="line">      <span class="attr">flush</span>: <span class="string">'post'</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1><code>created</code>：  <a href="https://cn.vuejs.org/guide/essentials/watchers.html#this-watch">this.$watch()</a></h1><p>我们也可以使用组件实例的 <a href="https://cn.vuejs.org/api/component-instance.html#watch"><code>$watch()</code> 方法</a>来命令式地创建一个侦听器：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">this</span>.$watch(<span class="string">'question'</span>, <span class="function">(<span class="params">newQuestion</span>) =&gt;</span> {</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果要在特定条件下设置一个侦听器，或者只侦听响应用户交互的内容，这方法很有用。它还允许你提前停止该侦听器。</p><h1><a href="https://cn.vuejs.org/guide/essentials/watchers.html#stopping-a-watcher">停止侦听器</a></h1><p>用 <code>watch</code> 选项或者 <code>$watch()</code> 实例方法声明的侦听器，会在宿主组件卸载时自动停止。因此，在大多数场景下，你无需关心怎么停止它。</p><p>在少数情况下，你的确需要在组件卸载之前就停止一个侦听器，这时可以调用 <code>$watch()</code> API 返回的函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unwatch = <span class="variable language_">this</span>.$watch(<span class="string">'foo'</span>, callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...当该侦听器不再需要时</span></span><br><span class="line"><span class="title function_">unwatch</span>()</span><br></pre></td></tr></tbody></table></figure><h1>数组变化的侦测</h1><h2 id="变更方法：原数组发生变化，UI自动更新">变更方法：原数组发生变化，UI自动更新</h2><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h2 id="替换一个数组：原数组不发生变化，UI无法自动更新">替换一个数组：原数组不发生变化，UI无法自动更新</h2><ul><li><code>fliter()</code></li><li><code>concat()</code></li><li><code>slice()</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/guide/essentials/watchers.html&quot;&gt;https://cn.vuejs.org/guide/essentials/watchers.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;侦听对象为data中定义</summary>
      
    
    
    
    <category term="前端" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/Vue3/"/>
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>事件处理</title>
    <link href="https://hmxyl.github.io/20231224/4446b2a4.html"/>
    <id>https://hmxyl.github.io/20231224/4446b2a4.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-09-30T06:29:02.128Z</updated>
    
    <content type="html"><![CDATA[<h1><code>v-on</code> 或者<code>@</code>：监听DOM事件</h1><p>我们可以使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript。</p><p>用法为 <code>v-on:click="methodName"</code> 或使用快捷方式 <code>@click="methodName"</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>{</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">                <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1>事件参数</h1><p>事件参数可以获取<code>event</code>对象和通过事件传递数据</p><p>官方的翻译称呼：内联处理器中的方法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"say('hi')"</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"greet"</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">getNameHandler(item,</span> $<span class="attr">event</span>) <span class="attr">v-for</span>=<span class="string">"(item, index) of names"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">            names : [<span class="string">"赵"</span>,<span class="string">"钱"</span>,<span class="string">"孙"</span>,<span class="string">"李"</span>]</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>: {</span><br><span class="line">        <span class="title function_">say</span>(<span class="params">message</span>) {</span><br><span class="line">            <span class="comment">// message传参</span></span><br><span class="line">            <span class="title function_">alert</span>(message)</span><br><span class="line">        },</span><br><span class="line">        <span class="title function_">greet</span>(<span class="params">e</span>) {</span><br><span class="line">            <span class="comment">// event 是原生 DOM event. </span></span><br><span class="line">            <span class="keyword">if</span> (e) {</span><br><span class="line">                <span class="title function_">alert</span>(e.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">                <span class="comment">// 读取data里面的数据方案：this.count</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">count</span>)</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="title function_">getNameHandler</span>(<span class="params">name, e</span>){</span><br><span class="line">            <span class="comment">// 传参和event同时传递的时候，使用$event传递event</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="事件修饰符"><code>.</code> 事件修饰符</h2><p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。</p><p>Vue.js 通过由点 <code>.</code> 表示的指令后缀来调用修饰符。</p><ul><li><code>.stop</code> - 阻止冒泡</li><li><code>.prevent</code> - 阻止默认事件</li><li><code>.capture</code> - 阻止捕获</li><li><code>.self</code> - 只监听触发该元素的事件</li><li><code>.once</code> - 只触发一次</li><li><code>.left</code> - 左键事件</li><li><code>.right</code> - 右键事件</li><li><code>.middle</code> - 中间滚轮事件</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class="line">&lt;a v-on:click.stop="doThis"&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent="doThat"&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;div v-on:click.capture="doThis"&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class="line">&lt;div v-on:click.self="doThat"&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span><br><span class="line">&lt;a v-on:click.once="doThis"&gt;&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="：按键修饰符"><code>：</code>按键修饰符</h2><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符<code>：</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class="line">&lt;input v-on:keyup.13="submit"&gt;</span><br></pre></td></tr></tbody></table></figure><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 同上 --&gt;</span><br><span class="line">&lt;input v-on:keyup.enter="submit"&gt;</span><br><span class="line">&lt;!-- 缩写语法 --&gt;</span><br><span class="line">&lt;input @keyup.enter="submit"&gt;</span><br></pre></td></tr></tbody></table></figure><p>全部的按键别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;code&gt;v-on&lt;/code&gt; 或者&lt;code&gt;@&lt;/code&gt;：监听DOM事件&lt;/h1&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;v-on&lt;/code&gt; 指令 (通常缩写为 &lt;code&gt;@&lt;/code&gt; 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScri</summary>
      
    
    
    
    <category term="前端" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/Vue3/"/>
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>表单输入绑定（v-model）</title>
    <link href="https://hmxyl.github.io/20231224/9ee367a5.html"/>
    <id>https://hmxyl.github.io/20231224/9ee367a5.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-09-30T06:29:06.537Z</updated>
    
    <content type="html"><![CDATA[<h1>表单输入绑定<code>v-model</code></h1><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。</p><p>它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。</p><p>它负责监听用户的输入事件来更新数据，并在某种极端场景下进行一些特殊处理。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: {{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">message</span>:<span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>v-model</code> 会忽略任何表单元素上初始的 <code>value</code>、<code>checked</code> 或 <code>selected</code> attribute。它将始终将当前绑定的 JavaScript 状态视为数据的正确来源。你应该在 JavaScript 中使用<a href="https://cn.vuejs.org/api/options-state.html#data"><code>data</code></a> 选项来声明该初始值。</p></blockquote><h1>基本用法</h1><h2 id="文本">文本</h2><h1>修饰符</h1><h2 id="lazy"><code>.lazy</code></h2><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件之后进行同步</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: {{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">message</span>:<span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="trim"><code>.trim</code></h2><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"message"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">message</span>:<span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="number"><code>.number</code></h2><p>如果你想让用户输入自动转换为数字，你可以在 <code>v-model</code> 后添加 <code>.number</code> 修饰符来管理输入：如果该值无法被 <code>parseFloat()</code> 处理，那么将返回原始值。</p><p><code>number</code> 修饰符会在输入框有 <code>type="number"</code> 时自动启用。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;表单输入绑定&lt;code&gt;v-model&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;你可以用 &lt;code&gt;v-model&lt;/code&gt; 指令在表单 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 及 &lt;code&gt;&amp;lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/Vue3/"/>
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>其他</title>
    <link href="https://hmxyl.github.io/20231224/6e23c48.html"/>
    <id>https://hmxyl.github.io/20231224/6e23c48.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-09-30T06:29:19.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件生命周期">组件生命周期</h2><p>每个组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会</p><p>为了方便记忆，我们可以将他们分类：</p><p>创建时：<code>beforeCreate</code>、<code>created</code></p><p>渲染时：<code>beforeMount</code>、<code>mounted</code></p><p>更新时：<code>beforeUpdate</code>、<code>updated</code></p><p>卸载时：<code>beforeUnmount</code>、<code>unmounted</code></p><h2 id="Vue引入第三方">Vue引入第三方</h2><p><code>Swiper</code> 开源、免费、强大的触摸滑动插件</p><p><code>Swiper</code> 是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端</p><p><code>Swiper</code> 能实现触屏焦点图、触屏Tab切换、触屏轮播图切换等常用效果</p><blockquote><p><strong>温馨提示</strong></p><p>官方文档：<a href="https://swiperjs.com/vue">https://swiperjs.com/vue</a></p><p>安装指定版本: <code>npm instal --save swiper@8.1.6</code></p></blockquote><h3 id="基础实现">基础实现</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="hello"&gt;</span><br><span class="line">    &lt;swiper class="mySwiper"&gt;</span><br><span class="line">      &lt;swiper-slide&gt;Slide 1&lt;/swiper-slide&gt;</span><br><span class="line">      &lt;swiper-slide&gt;Slide 2&lt;/swiper-slide&gt;</span><br><span class="line">      &lt;swiper-slide&gt;Slide 3&lt;/swiper-slide&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { Swiper, SwiperSlide } from 'swiper/vue';</span><br><span class="line">import 'swiper/css';</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'HelloWorld',</span><br><span class="line">  components: {</span><br><span class="line">    Swiper,</span><br><span class="line">    SwiperSlide,</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="添加指示器">添加指示器</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="hello"&gt;</span><br><span class="line">    &lt;swiper class="mySwiper" :modules="modules" :pagination="{ clickable: true }"&gt;</span><br><span class="line">      &lt;swiper-slide&gt;</span><br><span class="line">        &lt;img src="../assets/logo.png" alt=""&gt;</span><br><span class="line">      &lt;/swiper-slide&gt;</span><br><span class="line">      &lt;swiper-slide&gt;</span><br><span class="line">        &lt;img src="../assets/logo.png" alt=""&gt;</span><br><span class="line">      &lt;/swiper-slide&gt;</span><br><span class="line">      &lt;swiper-slide&gt;</span><br><span class="line">        &lt;img src="../assets/logo.png" alt=""&gt;</span><br><span class="line">      &lt;/swiper-slide&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { Pagination } from 'swiper';</span><br><span class="line">import { Swiper, SwiperSlide } from 'swiper/vue';</span><br><span class="line">import 'swiper/css';</span><br><span class="line">import 'swiper/css/pagination';</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'HelloWorld',</span><br><span class="line">  data(){</span><br><span class="line">    return{</span><br><span class="line">      modules: [ Pagination ]</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    Swiper,</span><br><span class="line">    SwiperSlide,</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="Axios网络请求">Axios网络请求</h2><p>Axios 是一个基于 promise 的网络请求库</p><h3 id="安装">安装</h3><p>Axios的应用是需要单独安装的 <code>npm install --save axios</code></p><h3 id="引入">引入</h3><p>组件中引入: <code>import axios from "axios"</code></p><p>全局引用:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中调用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$axios</span></span><br></pre></td></tr></tbody></table></figure><h3 id="网络请求基本示例">网络请求基本示例</h3><h4 id="get请求">get请求</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>({</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"get"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"http://iwenwiki.com/api/blueberrypai/getChengpinDetails.php"</span></span><br><span class="line">}).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="post请求">post请求</h4><blockquote><p><strong>温馨提示</strong></p><p>post请求参数是需要额外处理的</p><ol><li>安装依赖: <code>npm install --save querystring</code></li><li>转换参数格式: <code>qs.stringify({})</code></li></ol></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>({</span><br><span class="line">    <span class="attr">method</span>:<span class="string">"post"</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">"http://iwenwiki.com/api/blueberrypai/login.php"</span>,</span><br><span class="line">    <span class="attr">data</span>:qs.<span class="title function_">stringify</span>({</span><br><span class="line">        <span class="attr">user_id</span>:<span class="string">"iwen@qq.com"</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">"iwen123"</span>,</span><br><span class="line">        <span class="attr">verification_code</span>:<span class="string">"crfvw"</span></span><br><span class="line">    })</span><br><span class="line">}).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>{</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="快捷方案">快捷方案</h3><h4 id="get请求-2">get请求</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">"http://iwenwiki.com/api/blueberrypai/getChengpinDetails.php"</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>{</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure><h4 id="post请求-2">post请求</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">"http://iwenwiki.com/api/blueberrypai/login.php"</span>, qs.<span class="title function_">stringify</span>({</span><br><span class="line">      <span class="attr">user_id</span>: <span class="string">"iwen@qq.com"</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">"iwen123"</span>,</span><br><span class="line">      <span class="attr">verification_code</span>: <span class="string">"crfvw"</span></span><br><span class="line">    }))</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">      })</span><br></pre></td></tr></tbody></table></figure><h2 id="Axios网络请求封装">Axios网络请求封装</h2><p>在日常应用过程中，一个项目中的网络请求会很多，此时一般采取的方案是将网络请求封装起来</p><p>在<code>src</code>目录下创建文件夹<code>utils</code>，并创建文件<code>request</code>，用来存储网络请求对象 <code>axios</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">"querystring"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">errorHandle</span> = (<span class="params">status,info</span>) =&gt; {</span><br><span class="line">    <span class="keyword">switch</span>(status){</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"语义有误"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"服务器认证失败"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"服务器拒绝访问"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"地址错误"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"服务器遇到意外"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"服务器无响应"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>({</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">5000</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">config</span> =&gt;</span>{</span><br><span class="line">        <span class="keyword">if</span>(config.<span class="property">method</span> === <span class="string">"post"</span>){</span><br><span class="line">            config.<span class="property">data</span> = qs.<span class="title function_">stringify</span>(config.<span class="property">data</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> response.<span class="property">status</span> === <span class="number">200</span> ? <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response) : <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response),</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span>{</span><br><span class="line">        <span class="keyword">const</span> { response } = error;</span><br><span class="line">        <span class="title function_">errorHandle</span>(response.<span class="property">status</span>,response.<span class="property">info</span>)</span><br><span class="line">    }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></tbody></table></figure><p>在<code>src</code>目录下创建文件夹<code>api</code>，并创建文件<code>index</code>和<code>path</code>分别用来存放网络请求方法和请求路径</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path.js</span></span><br><span class="line"><span class="keyword">const</span> base = {</span><br><span class="line">    <span class="attr">baseUrl</span>:<span class="string">"http://iwenwiki.com"</span>,</span><br><span class="line">    <span class="attr">chengpin</span>:<span class="string">"/api/blueberrypai/getChengpinDetails.php"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> base</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"./path"</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"../utils/request"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="title function_">getChengpin</span>(<span class="params"></span>){</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(path.<span class="property">baseUrl</span> + path.<span class="property">chengpin</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在组件中直接调用网络请求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">"../api/index"</span></span><br><span class="line"></span><br><span class="line">api.<span class="title function_">getChengpin</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>{</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="网络请求跨域解决方案">网络请求跨域解决方案</h2><p>JS采取的是同源策略</p><p>同源策略是浏览器的一项安全策略，浏览器只允许js 代码请求和当前所在服务器域名,端口,协议相同的数据接口上的数据,这就是同源策略.</p><p>也就是说，当协议、域名、端口任意一个不相同时，都会产生跨域问题，所以又应该如何解决跨域问题呢</p><h3 id="跨域错误提示信息">跨域错误提示信息</h3><h3 id="目前主流的跨域解决方案有两种：">目前主流的跨域解决方案有两种：</h3><ol><li>后台解决：cors</li><li>前台解决：proxy</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: {</span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">      <span class="string">'/api'</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">'&lt;url&gt;'</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>温馨提示</strong></p><p>解决完跨域配置之后，要记得重启服务器才行哦！</p></blockquote><h2 id="Vue引入路由配置">Vue引入路由配置</h2><p>在Vue中，我们可以通过<code>vue-router</code>路由管理页面之间的关系</p><p>Vue Router 是 Vue.js 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举</p><h3 id="在Vue中引入路由">在Vue中引入路由</h3><p>第一步：安装路由 <code>npm install --save vue-router</code></p><p>第二步：配置独立的路由文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHashHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">'../views/HomeView.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'home'</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/about'</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'about'</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/AboutView.vue'</span>)</span><br><span class="line">  }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure><p>第三步：引入路由到项目</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br></pre></td></tr></tbody></table></figure><p>第四步：指定路由显示入口 <code>&lt;router-view/&gt;</code></p><p>第五步：指定路由跳转</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to="/"&gt;Home&lt;/router-link&gt; |</span><br><span class="line">&lt;router-link to="/about"&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="路由传递参数">路由传递参数</h2><p>页面跳转过程中，是可以携带参数的，这也是很常见的业务</p><p>例如：在一个列表项，点击进入查看每个列表项的详情</p><p>第一步：在路由配置中指定参数的<code>key</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">path</span>:<span class="string">"/list/:name"</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">"list"</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">"../views/ListView.vue"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二步：在跳转过程中携带参数</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;router-link to="/list/内蒙"&gt;内蒙旅游十大景区&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link to="/list/北京"&gt;北京旅游十大景区&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;router-link to="/list/四川"&gt;四川旅游十大景区&lt;/router-link&gt;&lt;/li&gt;</span><br></pre></td></tr></tbody></table></figure><p>第三步：在详情页面读取路由携带的参数</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;{{ $route.params.name }}城市旅游景区详情&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="嵌套路由配置">嵌套路由配置</h2><p>路由嵌套是非常常见的需求</p><p>第一步：创建子路由要加载显示的页面</p><p>第二步：在路由配置文件中添加子路由配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">path</span>:<span class="string">"/news"</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">"news"</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">"/news/baidu"</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">"../views/NewsView.vue"</span>),</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">       {</span><br><span class="line">       <span class="attr">path</span>:<span class="string">"baidu"</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">"../views/NewsList/BaiduNews.vue"</span>),</span><br><span class="line">       },</span><br><span class="line">       {</span><br><span class="line">            <span class="attr">path</span>:<span class="string">"wangyi"</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">"../views/NewsList/WangyiNews.vue"</span>),</span><br><span class="line">       }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第三步：指定子路由显示位置<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><p>第四步：添加子路由跳转链接</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to="/news/baidu"&gt;百度新闻&lt;/router-link&gt; | </span><br><span class="line">&lt;router-link to="/news/wangyi"&gt;网易新闻&lt;/router-link&gt;</span><br></pre></td></tr></tbody></table></figure><p>第五步：重定向配置 <code>redirect:"/news/baidu"</code></p><h2 id="Vue状态管理-Vuex">Vue状态管理(Vuex)</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>简单来说，状态管理可以理解成为了更方便的管理组件之间的数据交互，提供了一个集中式的管理方案，任何组件都可以按照指定的方式进行读取和改变数据</p><img src="imgs/image-20220530160524287.png" alt="image-20220530160524287" style="zoom:50%;"><h3 id="引入Vuex的步骤">引入Vuex的步骤</h3><p>第一步：安装Vuex <code>npm install --save vuex</code></p><p>第二步：配置Vuex文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createStore } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">      <span class="attr">counter</span>:<span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>第三步：在主文件中引入Vuex</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br></pre></td></tr></tbody></table></figure><p>第四步：在组件中读取状态</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;counter:{{ $store.state.counter }}&lt;/p&gt;</span><br><span class="line">// 或者</span><br><span class="line">import { mapState } from 'vuex';</span><br><span class="line">computed:{</span><br><span class="line">    ...mapState(["counter"])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Vue状态管理核心-Vuex">Vue状态管理核心(Vuex)</h2><p>最常用的核心概念包含: <code>State</code>、<code>Getter</code>、<code>Mutation</code>、<code>Action</code></p><h3 id="Getter">Getter</h3><p>对Vuex中的数据进行过滤</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createStore } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">getters</span>: {</span><br><span class="line">    <span class="title function_">getCount</span>(<span class="params">state</span>){</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">counter</span> &gt; <span class="number">0</span> ? state.<span class="property">counter</span> : <span class="string">"counter小于0，不符合要求"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapState,mapGetters } <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="attr">computed</span>:{</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">"getCount"</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Mutation">Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的事件类型 (type)和一个回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createStore } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">getters</span>: {</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">mutations</span>: {</span><br><span class="line">    <span class="title function_">setCounter</span>(<span class="params">state, num</span>) {</span><br><span class="line">      state.<span class="property">counter</span> += num</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapState,mapMutations } <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:{</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">"setCounter"</span>]),</span><br><span class="line">    <span class="title function_">clickHandler</span>(<span class="params"></span>){</span><br><span class="line">      <span class="comment">// this.$store.commit("setCounter",20)</span></span><br><span class="line">  <span class="comment">// 或者</span></span><br><span class="line">      <span class="comment">// this.setCounter(10)</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Action">Action</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态</li><li>Action 可以包含任意异步操作</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createStore } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>({</span><br><span class="line">  <span class="attr">state</span>: {</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">getters</span>: {</span><br><span class="line">    <span class="title function_">getCount</span>(<span class="params">state</span>){</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">counter</span> &gt; <span class="number">0</span> ? state.<span class="property">counter</span> : <span class="string">"counter小于0，不符合要求"</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">mutations</span>: {</span><br><span class="line">    <span class="title function_">setCounter</span>(<span class="params">state, num</span>) {</span><br><span class="line">      state.<span class="property">counter</span> += num</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">actions</span>: {</span><br><span class="line">    <span class="title function_">asyncSetCount</span>(<span class="params">{ commit }</span>){</span><br><span class="line">      axios.<span class="title function_">get</span>(<span class="string">"http://iwenwiki.com/api/generator/list.php"</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>{</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">"setCounter"</span>,res.<span class="property">data</span>[<span class="number">0</span>])</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { mapState,mapMutations,mapGetters,mapActions } <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:{</span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">"asyncSetCount"</span>]),</span><br><span class="line">    <span class="title function_">clickAsyncHandler</span>(<span class="params"></span>){</span><br><span class="line">        <span class="comment">// this.$store.dispatch("asyncSetCount")</span></span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        <span class="comment">// this.asyncSetCount()</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Vue3新特性1">Vue3新特性1</h2><p>Vue3是目前Vue的最新版本，自然也是新增了很多新特性</p><h3 id="六大亮点">六大亮点</h3><ul><li>Performance：性能更比Vue 2.0强。</li><li>Tree shaking support：可以将无用模块“剪辑”，仅打包需要的。</li><li><strong>Composition API：组合API</strong></li><li>Fragment, Teleport, Suspense：“碎片”，Teleport即Protal传送门，“悬念”</li><li>Better TypeScript support：更优秀的Ts支持</li><li>Custom Renderer API：暴露了自定义渲染API</li></ul><h3 id="ref或者reactive">ref或者reactive</h3><p>在2.x中通过组件data的方法来定义一些当前组件的数据</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'iwen'</span>,</span><br><span class="line">    <span class="attr">list</span>: [],</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在3.x中通过ref或者reactive创建响应式对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ref,reactive } <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>){</span><br><span class="line">      <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">"iwen"</span>)</span><br><span class="line">      <span class="keyword">const</span> state = <span class="title function_">reactive</span>({</span><br><span class="line">          <span class="attr">list</span>:[]</span><br><span class="line">      })</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>{</span><br><span class="line">        name,</span><br><span class="line">        state</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="methods中定义的方法写在setup">methods中定义的方法写在setup()</h3><p>在2.x中methods来定义一些当前组件内部方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:{</span><br><span class="line">    <span class="title function_">http</span>(<span class="params"></span>){}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在3.x中直接在setup方法中定义并return</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">http</span> = (<span class="params"></span>)=&gt;{</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      http</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="setup-中使用props和context">setup()中使用props和context</h3><p>在2.x中，组件的方法中可以通过this获取到当前组件的实例，并执行data变量的修改，方法的调用，组件的通信等等，但是在3.x中，setup()在beforeCreate和created时机就已调用，无法使用和2.x一样的this，但是可以通过接收setup(props,ctx)的方法，获取到当前组件的实例和props</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="attr">props</span>: {</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props,ctx</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">name</span>)</span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">'event'</span>)</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Vue3新特性2">Vue3新特性2</h2><h3 id="在setup中使生命周期函">在setup中使生命周期函</h3><p>你可以通过在生命周期钩子前面加上 “on” 来访问组件的生命周期钩子。</p><p>下表包含如何在 setup () 内部调用生命周期钩子</p><table><thead><tr><th>Options API</th><th>Hook inside setup</th></tr></thead><tbody><tr><td>beforeCreate</td><td>Not needed*</td></tr><tr><td>created</td><td>Not needed*</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr></tbody></table><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// mounted</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Component is mounted!'</span>)</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Provide-Inject">Provide / Inject</h3><ul><li>provide() 和 inject() 可以实现嵌套组件之间的数据传递。</li><li>这两个函数只能在 setup() 函数中使用。</li><li>父级组件中使用 provide() 函数向下传递数据。</li><li>子级组件中使用 inject() 获取上层传递过来的数据。</li><li>不限层级</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">import</span> { provide } <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">"customVal"</span>, <span class="string">"我是父组件向子组件传递的值"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">import</span> { inject } <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">const</span> customVal = <span class="title function_">inject</span>(<span class="string">"customVal"</span>);</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      customVal</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Fragment">Fragment</h3><p>Fragment翻译为：“碎片”</p><ul><li>不再限于模板中的单个根节点</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img alt="Vue logo" src="./assets/logo.png"&gt;</span><br><span class="line">  &lt;HelloWorld msg="Welcome to Your Vue.js App" /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="Vue3加载Element-plus">Vue3加载Element-plus</h2><p>Element，一套为开发者、设计师和产品经理准备的基于 <code>Vue 2.0</code> 的桌面端组件库</p><p>Element Plus 基于 <code>Vue 3</code>，面向设计师和开发者的组件库</p><h3 id="安装Element-Plus">安装Element-Plus</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></tbody></table></figure><h3 id="完整引用">完整引用</h3><p>如果你对打包后的文件大小不是很在乎，那么使用完整导入会更方便</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-plus/dist/index.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="按需导入">按需导入</h3><p>按需导入才是我们的最爱，毕竟在真实的应用场景中并不是每个组件都会用到，这会造成不小的浪费</p><p>首先你需要安装<code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code>这两款插件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-<span class="keyword">import</span></span><br></pre></td></tr></tbody></table></figure><p>然后修改<code>vue.config.js</code>配置文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { defineConfig } = <span class="built_in">require</span>(<span class="string">'@vue/cli-service'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AutoImport</span> = <span class="built_in">require</span>(<span class="string">'unplugin-auto-import/webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Components</span> = <span class="built_in">require</span>(<span class="string">'unplugin-vue-components/webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> { <span class="title class_">ElementPlusResolver</span> } = <span class="built_in">require</span>(<span class="string">'unplugin-vue-components/resolvers'</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configureWebpack</span>: {</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="title class_">AutoImport</span>({</span><br><span class="line">        <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">      }),</span><br><span class="line">      <span class="title class_">Components</span>({</span><br><span class="line">        <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">      })</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>最后，可以直接在组件中使用</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>实时效果反馈</strong></p><p><strong>1. 在Vue3项目中引入饿了么UI组件库，下来命令正确的是：</strong></p><p><font style="background-color:rgb(233, 30, 100)">A</font>   <code>npm install --save element-iu</code></p><p><font style="background-color:rgb(255, 197, 10)">B</font>   <code>vue add element</code></p><p><font style="background-color:#8bc34a">C</font>   <code>npm install element-plus --save</code></p><p><font style="background-color:rgb(2, 170, 244);">D</font>   <code>vue add element-plus</code></p><p><strong>答案</strong></p><p>1=&gt;C</p><h2 id="Vue3加载Element-plus的字体图标">Vue3加载Element-plus的字体图标</h2><p><code>Element-plus</code>不仅仅是提供了各种组件，同时还提供了一整套的字体图标方便开发者使用</p><h3 id="安装icons字体图标">安装<code>icons</code>字体图标</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @element-plus/icons-vue</span><br></pre></td></tr></tbody></table></figure><h3 id="全局注册">全局注册</h3><p>在项目根目录下，创建<code>plugins</code>文件夹，在文件夹下创建文件<code>icons.js</code>文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">"@element-plus/icons-vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">install</span>: <span class="function">(<span class="params">app</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> components) {</span><br><span class="line">            <span class="keyword">const</span> componentConfig = components[key];</span><br><span class="line">            app.<span class="title function_">component</span>(componentConfig.<span class="property">name</span>, componentConfig);</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h3 id="引入文件">引入文件</h3><p>在<code>main.js</code>中引入<code>icons.js</code>文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> elementIcon <span class="keyword">from</span> <span class="string">"./plugins/icons"</span>;</span><br><span class="line">app.<span class="title function_">use</span>(elementIcon)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用方式">使用方式</h3><p>接下来就可以直接在组件中引入使用了</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">class</span>=<span class="string">"expand"</span> <span class="attr">color</span>=<span class="string">"#409EFC"</span> <span class="attr">:size</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">expand</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件生命周期&quot;&gt;组件生命周期&lt;/h2&gt;
&lt;p&gt;每个组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做&lt;strong&gt;生命周期钩子&lt;/strong&gt;的函</summary>
      
    
    
    
    <category term="前端" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/Vue3/"/>
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>组件</title>
    <link href="https://hmxyl.github.io/20231224/34778b46.html"/>
    <id>https://hmxyl.github.io/20231224/34778b46.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-09-30T06:29:12.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件基础">组件基础</h2><h3 id="单文件组件">单文件组件</h3><p>Vue 单文件组件（又名 <code>*.vue</code> 文件，缩写为 <strong>SFC</strong>）是一种特殊的文件格式，它允许将 Vue 组件的模板、逻辑 <strong>与</strong> 样式封装在单个文件中</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;单文件组件&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    name:"MyComponent"</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3{</span><br><span class="line">    color: red;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="模板引用（ref）">模板引用（<code>ref</code>）</h2><p><a href="https://cn.vuejs.org/guide/essentials/template-refs.html">https://cn.vuejs.org/guide/essentials/template-refs.html</a></p><p>虽然 Vue 的声明性渲染模型为你抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 <code>ref</code> attribute：</p><p><code>ref</code> 是一个特殊的 attribute， 它允许我们在一个特定的 DOM 元素或子组件实例被挂载后，获得对它的直接引用。</p><p>这可能很有用，比如说在组件挂载时将焦点设置到一个 input 元素上，或在一个元素上初始化一个第三方库。</p><h3 id="访问模板引用">访问模板引用</h3><p>挂载结束后引用都会被暴露在 <code>this.$refs</code> 之上：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  mounted() {</span><br><span class="line">    this.$refs.input.focus()</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input ref="input" /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><p>注意，你只可以<strong>在组件挂载后</strong>才能访问模板引用。如果你想在模板中的表达式上访问 <code>$refs.input</code>，在初次渲染时会是 <code>null</code>。这是因为在初次渲染前这个元素还不存在</p><h3 id="v-for-中的模板引用"><a href="https://cn.vuejs.org/guide/essentials/template-refs.html#refs-inside-v-for"><code>v-for</code> 中的模板引用</a></h3><blockquote><p>需要 v3.2.25 及以上版本</p></blockquote><p>当在 <code>v-for</code> 中使用模板引用时，相应的引用中包含的值是一个数组：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      list: [</span><br><span class="line">        /* ... */</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    console.log(this.$refs.items)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for="item in list" ref="items"&gt;</span><br><span class="line">      {{ item }}</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>应该注意的是，ref 数组<strong>并不</strong>保证与源数组相同的顺序。</p></blockquote><h3 id="函数模板引用"><a href="https://cn.vuejs.org/guide/essentials/template-refs.html#function-refs">函数模板引用</a></h3><p>除了使用字符串值作名字，<code>ref</code> attribute 还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:ref</span>=<span class="string">"(el) =&gt; { /* 将 el 赋值给一个数据属性或 ref 变量 */ }"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意我们这里需要使用动态的 <code>:ref</code> 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 <code>el</code> 参数会是 <code>null</code>。你当然也可以绑定一个组件方法而不是内联函数。</p><h3 id="组件上的-ref">组件上的 ref</h3><h2 id="组件基础-2">组件基础</h2><h3 id="加载组件">加载组件</h3><p>第一步：引入组件 <code>import MyComponentVue from './components/MyComponent.vue'</code></p><p>第二步：挂载组件 <code>components: { MyComponentVue }</code></p><p>第三步：显示组件 <code>&lt;my-componentVue /&gt;</code></p><h3 id="组件的嵌套关系">组件的嵌套关系</h3><p>通常一个应用会以一棵嵌套的组件树的形式来组织</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20231210205035429.png" alt="image-20231210205035429"></p><h2 id="Props组件交互">Props组件交互</h2><p>组件与组件之间是需要存在交互的，否则完全没关系，组件的意义就很小了</p><p><code>Prop</code> 是你可以在组件上注册的一些自定义 attribute</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-componentVue title="标题"/&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;单文件组件&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;{{ title }}&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    name:"MyComponent",</span><br><span class="line">    props:{</span><br><span class="line">        title:{</span><br><span class="line">            type:String,</span><br><span class="line">            default:""</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="Prop-类型">Prop 类型</h3><p>Prop传递参数其实是没有类型限制的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">props: {</span><br><span class="line">  title: String,</span><br><span class="line">  likes: Number,</span><br><span class="line">  isPublished: Boolean,</span><br><span class="line">  commentIds: Array,</span><br><span class="line">  author: Object,</span><br><span class="line">  callback: Function</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>温馨提示</strong></p><p>数据类型为数组或者对象的时候，默认值是需要返回工厂模式</p></blockquote><h2 id="自定义事件组件交互">自定义事件组件交互</h2><p>自定义事件可以在组件中反向传递数据，<code>prop</code> 可以将数据从父组件传递到子组件，那么反向如何操作呢，就可以利用自定义事件实现 <code>$emit</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;单文件组件&lt;/h3&gt;</span><br><span class="line">    &lt;button @click="sendHandle"&gt;发送数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    name: "MyComponent",</span><br><span class="line">    methods:{</span><br><span class="line">        sendHandle(){</span><br><span class="line">            this.$emit("onCustom","数据")</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3 {</span><br><span class="line">    color: red;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;my-componentVue @onCustom="getData" /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import MyComponentVue from './components/MyComponent.vue'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'App',</span><br><span class="line">  components: {</span><br><span class="line">    MyComponentVue</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    getData(data) {</span><br><span class="line">      console.log(data);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件基础&quot;&gt;组件基础&lt;/h2&gt;
&lt;h3 id=&quot;单文件组件&quot;&gt;单文件组件&lt;/h3&gt;
&lt;p&gt;Vue 单文件组件（又名 &lt;code&gt;*.vue&lt;/code&gt; 文件，缩写为 &lt;strong&gt;SFC&lt;/strong&gt;）是一种特殊的文件格式，它允许将 Vue 组件的模板、逻</summary>
      
    
    
    
    <category term="前端" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/%E5%89%8D%E7%AB%AF/Vue3/"/>
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="https://hmxyl.github.io/20231108/c8f562d1.html"/>
    <id>https://hmxyl.github.io/20231108/c8f562d1.html</id>
    <published>2023-11-08T02:49:23.000Z</published>
    <updated>2024-09-30T03:58:46.549Z</updated>
    
    <content type="html"><![CDATA[<h1>定义函数</h1><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_abs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></tbody></table></figure><blockquote><p>函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p><p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p></blockquote><p>如果你已经把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>文件了，那么，可以在该文件的当前目录下启动Python解释器，用<code>from abstest import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abstest</code>是文件名（不含<code>.py</code>扩展名）：</p><h1>函数定义详解</h1><p>函数定义支持可变数量的参数。这里列出三种可以组合使用的形式。</p><h2 id="默认值参数">默认值参数</h2><p>为参数指定默认值是非常有用的方式。调用函数时，可以使用比定义时更少的参数，例如：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;定义函数&lt;/h1&gt;
&lt;p&gt;在Python中，定义一个函数要使用&lt;code&gt;def&lt;/code&gt;语句，依次写出函数名、括号、括号中的参数和冒号&lt;code&gt;:&lt;/code&gt;，然后，在缩进块中编写函数体，函数的返回值用&lt;code&gt;return&lt;/code&gt;语句返回。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="Python" scheme="https://hmxyl.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python内置函数</title>
    <link href="https://hmxyl.github.io/20231106/d59aed63.html"/>
    <id>https://hmxyl.github.io/20231106/d59aed63.html</id>
    <published>2023-11-06T02:49:23.000Z</published>
    <updated>2024-09-30T03:56:10.033Z</updated>
    
    <content type="html"><![CDATA[<h1>range()</h1><p>内置函数 <a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range"><code>range()</code></a> 用于生成等差数列：</p><ol><li><p>定义</p><p><em>class</em> <strong>range</strong>(<em>stop</em>)</p><p><em>class</em> <strong>range</strong>(<em>start</em>, <em>stop</em>[, <em>step</em>])</p></li><li><p>例子</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, -<span class="number">10</span>, -<span class="number">1</span>))</span><br><span class="line">[<span class="number">0</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>, -<span class="number">6</span>, -<span class="number">7</span>, -<span class="number">8</span>, -<span class="number">9</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>))</span><br><span class="line">[]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">[]</span><br></pre></td></tr></tbody></table></figure></li><li><p>说明</p><p><a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range"><code>range()</code></a> 返回的对象在很多方面和列表的行为一样，但其实它和列表不一样。该对象只有在被迭代时才一个一个地返回所期望的列表项，并没有真正生成过一个含有全部项的列表，从而节省了空间。</p></li></ol><h1>type()</h1><h1>isinstance()</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;range()&lt;/h1&gt;
&lt;p&gt;内置函数 &lt;a href=&quot;https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range&quot;&gt;&lt;code&gt;range()&lt;/code&gt;&lt;/a&gt; 用于生成等差数列：&lt;/p&gt;
&lt;ol</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="Python" scheme="https://hmxyl.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://hmxyl.github.io/20231106/99832f47.html"/>
    <id>https://hmxyl.github.io/20231106/99832f47.html</id>
    <published>2023-11-06T02:49:23.000Z</published>
    <updated>2025-01-14T08:39:27.106Z</updated>
    
    <content type="html"><![CDATA[<h1><a href="https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#">语法</a></h1><h2 id="编码声明">编码声明</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></tbody></table></figure><h2 id="运算符">运算符</h2><p>运算符列表</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+       -       *       **      /       //      %      @</span><br><span class="line">&lt;&lt;      &gt;&gt;      &amp;       |       ^       ~       :=</span><br><span class="line">&lt;       &gt;       &lt;=      &gt;=      ==      !=</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>符号</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td></td></tr><tr><td>-</td><td>减法</td><td></td></tr><tr><td>*</td><td>乘法</td><td></td></tr><tr><td>/</td><td>除法，总是返回浮点数</td><td></td></tr><tr><td>x ** y</td><td><em>x</em> 的 <em>y</em> 次幂</td><td>&gt;&gt;&gt; 5 ** 2 25</td></tr><tr><td>x // y</td><td>x 除以 y 的商数</td><td>&gt;&gt;&gt; 5 // 2 2</td></tr><tr><td>x % 5</td><td>x 除以 y 的余数</td><td></td></tr><tr><td>-x</td><td><em>x</em> 取反</td><td></td></tr><tr><td>+x</td><td><em>x</em> 不变</td><td></td></tr></tbody></table><p>交互模式下，上次输出的表达式会赋给变量 <code>_</code>。把 Python 当作计算器时，用该变量实现下一步计算更简单，例如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tax = <span class="number">12.5</span> / <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>price = <span class="number">100.50</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>price * tax</span><br><span class="line"></span><br><span class="line"><span class="number">12.5625</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>price + _</span><br><span class="line"></span><br><span class="line"><span class="number">113.0625</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">round</span>(_, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">113.06</span></span><br></pre></td></tr></tbody></table></figure><p>最好把该变量 <code>_</code>当作只读类型。不要为它显式赋值，否则会创建一个同名独立局部变量，该变量会用它的魔法行为屏蔽内置变量。</p><h2 id="分隔符">分隔符</h2><p>以下形符在语法中为分隔符：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(       )       [       ]       {       }</span><br><span class="line"></span><br><span class="line">,       :       .       ;       @       =       -&gt;</span><br><span class="line"></span><br><span class="line">+=      -=      *=      /=      //=     %=      @=</span><br><span class="line"></span><br><span class="line">&amp;=      |=      ^=      &gt;&gt;=     &lt;&lt;=     **=</span><br></pre></td></tr></tbody></table></figure><p>句点也可以用于浮点数和虚数字面值。</p><p>三个连续句点表示省略符。</p><p>列表后半部分是增强赋值操作符，用作词法分隔符，但也可以执行运算。</p><p>以下 ASCII 字符具有特殊含义，对词法分析器有重要意义：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'       "       #       \</span></span><br></pre></td></tr></tbody></table></figure><p>以下 ASCII 字符不用于 Python。在字符串字面值或注释外使用时，将直接报错：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$       ?       `</span><br></pre></td></tr></tbody></table></figure><h2 id="关键字">关键字</h2><p>关键字、软关键字、保留的标识符类</p><h3 id="关键字-2">关键字</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">False      await      else       import     pass</span><br><span class="line">None       break      except     in         raise</span><br><span class="line">True       class      finally    is         return</span><br><span class="line">and        continue   for        lambda     try</span><br><span class="line">as         def        from       nonlocal   while</span><br><span class="line">assert     del        global     not        with</span><br><span class="line">async      elif       if         or         yield</span><br></pre></td></tr></tbody></table></figure><h3 id="软关键字">软关键字</h3><p>某些标识符仅在特定上下文中被保留。 它们被称为 <em>软关键字</em>。</p><p><code>match</code>, <code>case</code> 和 <code>_</code> 等标识符在模式匹配语句相关的上下文中具有相当于关键字的语义，但这种区分是在解析器层级完成，而不是在形符化的时候。</p><p>作为软关键字，它们能够与模式匹配一起使用，同时仍然保持与使用 <code>match</code>, <code>case</code> 和 <code>_</code> 作为标识符名称的现有代码的兼容性。</p><h3 id="保留的标识符类">保留的标识符类</h3><p>某些标识符类（除了关键字）具有特殊含义。这些类的命名模式以下划线字符开头，并以下划线结尾：</p><table><thead><tr><th>标识符</th><th>说明</th></tr></thead><tbody><tr><td><code>_*</code></td><td>不会被 from module import * 所导入。</td></tr><tr><td><code>_</code></td><td>在 match 语句内部的 case 模式中，_ 是一个 软关键字，它表示 通配符。<br>在此之外，交互式解释器会将最后一次求值的结果放到变量 _ 中。 （它与 print 等内置函数一起被存储于 builtins 模块。）<br>在其他地方，_ 是一个常规标识符。 <br>它常常被用来命名 “特殊” 条目，但对 Python 本身来说毫无特殊之处。如<code>_</code> 常用于连接国际化文本；详见 gettext 模块文档。<br>它还经常被用来命名无需使用的变量。</td></tr><tr><td><code>__*__</code></td><td>系统定义的名称，通常简称为 “dunder” 。这些名称由解释器及其实现（包括标准库）定义。<br>现有系统定义名称相关的论述详见 <a href="https://docs.python.org/zh-cn/3.11/reference/datamodel.html#specialnames">特殊方法名称</a> 等章节。Python 未来版本中还将定义更多此类名称。任何情况下，<em>任何</em> 不显式遵从 <code>__*__</code> 名称的文档用法，都可能导致无警告提示的错误。</td></tr><tr><td><code>__*</code></td><td>类的私有名称。类定义时，此类名称以一种混合形式重写，以避免基类及派生类的 “私有” 属性之间产生名称冲突。详见 标识符（名称）。</td></tr></tbody></table><h1>数据类型和变量</h1><p>Python3 中常见的数据类型有：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>bool（布尔类型）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；</li><li>**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>此外还有一些高级的数据类型，如: 字节数组类型(bytes)。</p><h2 id="整数-int">整数:<a href="https://docs.python.org/zh-cn/3.11/library/functions.html#int"><code>int</code></a></h2><p>Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交互窗口输入（默认10进制）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'输入数字：'</span>)) </span><br><span class="line">输入数字：<span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定2进制数据转化为10进制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">'11'</span>, <span class="number">2</span>) </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><h2 id="浮点数">浮点数</h2><h3 id="float"><a href="https://docs.python.org/zh-cn/3.11/library/functions.html#float"> <code>float</code></a></h3><p>如果该参数是一个字符串，在去除前导和尾随的空格之后，输入必须为符合以下语法的 <code>floatvalue</code> 产生规则:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sign &nbsp; &nbsp; &nbsp;  ::= &nbsp;"+" | "-"</span><br><span class="line">infinity &nbsp;  ::= &nbsp;"Infinity" | "inf"</span><br><span class="line">nan &nbsp; &nbsp; &nbsp; &nbsp; ::= &nbsp;"nan"</span><br><span class="line">digitpart &nbsp; ::= &nbsp;digit (["_"] digit)*</span><br><span class="line">number &nbsp; &nbsp;  ::=  [digitpart] "." digitpart | digitpart ["."]</span><br><span class="line">exponent &nbsp;  ::=  ("e" | "E") ["+" | "-"] digitpart</span><br><span class="line">floatnumber ::= &nbsp;number [exponent]</span><br><span class="line">floatvalue  ::=  [sign] (floatnumber | infinity | nan)</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>符号标记</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>sign ::= “+”</td><td>正，负</td><td>&gt;&gt;&gt; float(‘+1.23’) <br>1.23<br>&gt;&gt;&gt; float(‘-1.23\n’)  <br>-1.23<br>&gt;&gt;&gt; float(‘-123\n’)   <br>-123.0</td></tr><tr><td>(“e” | “E”) [“+” | “-”] 数字部分</td><td>科学计数</td><td>&gt;&gt;&gt; float(1e3)<br>1000.0 <br>&gt;&gt;&gt; float(‘1e3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘1e+3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘+1e3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘-1e3’)<br>-1000.0 <br>&gt;&gt;&gt; float(‘1e-3’)<br>0.001 <br>&gt;&gt;&gt; float(1e-3)<br>0.001 <br>&gt;&gt;&gt; float(1E-3)<br>0.001</td></tr><tr><td>infinity ::= “Infinity” | “inf”</td><td>无穷大<br>1. 大小写不敏感<br>2.  需要为字符串，否则会报错</td><td>&gt;&gt;&gt; float(‘Infinity’)<br>inf<br>&gt;&gt;&gt; float(‘InfinitY’)<br>inf<br>&gt;&gt;&gt; float(‘-Inf’)<br>-inf</td></tr><tr><td>not-a-number</td><td>NaN<br>1. 大小写不敏感<br>2. 需要为字符串，否则会报错</td><td>&gt;&gt;&gt; float(‘NAN’)<br>nan<br>&gt;&gt;&gt; float(‘NaN’)<br>nan<br>&gt;&gt;&gt; float(‘-nan’)<br>nan</td></tr></tbody></table><h3 id="complex-：复数"><a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#typesnumeric"><code>complex</code></a> ：复数</h3><p>后缀 <code>j</code> 或 <code>J</code> 用于表示虚数（例如 <code>3+5j</code> ）</p><table><thead><tr><th></th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>complex(re, im)</td><td>一个带有实部 <em>re</em> 和虚部 <em>im</em> 的复数。 <em>im</em> 默认为0</td><td>&gt;&gt;&gt; complex(3, 2)<br>(3+2j)</td></tr><tr><td>c.conjugate()</td><td>复数 <em>c</em> 的共轭</td><td>&gt;&gt;&gt; complex(3, 2).conjugate()<br>(3-2j)</td></tr></tbody></table><h3 id="Decimal：十进制浮点运算"><a href="https://docs.python.org/zh-cn/3.11/library/decimal.html#decimal-objects"><code>Decimal</code></a>：十进制浮点运算</h3><p><em>class</em> decimal.<strong>Decimal</strong>(<em>value=‘0’</em>, <em>context=None</em>)</p><p><em>value</em> 可以是整数，字符串，元组，<a href="https://docs.python.org/zh-cn/3.11/library/functions.html#float"><code>float</code></a> ，或另一个 <a href="https://docs.python.org/zh-cn/3.11/library/decimal.html#decimal.Decimal"><code>Decimal</code></a> 对象。 如果没有给出 <em>value</em>，则返回 <code>Decimal('0')</code>。</p><p>如果 <em>value</em> 是一个字符串，它应该在前导和尾随空格字符以及下划线被删除之后符合十进制数字字符串语法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为浮点数据的不准确性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="number">1.2</span>)</span><br><span class="line">Decimal(<span class="string">'1.1999999999999999555910790149937383830547332763671875'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过设定有效数字，限定结果样式，保留六个有效数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcontext().prec = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="number">1</span>)/Decimal(<span class="number">7</span>)</span><br><span class="line">Decimal(<span class="string">'0.142857'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="number">1000</span>)/Decimal(<span class="number">7</span>) </span><br><span class="line">Decimal(<span class="string">'142.857'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入，保留两位小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="string">'50.5679'</span>).quantize(Decimal(<span class="string">'0.00'</span>))</span><br><span class="line">Decimal(<span class="string">'50.57'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="string">'50.5'</span>).quantize(Decimal(<span class="string">'0.00'</span>)) &nbsp; &nbsp;</span><br><span class="line">Decimal(<span class="string">'50.50'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decimal 结果转化为string</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(Decimal(<span class="string">'50.5679'</span>).quantize(Decimal(<span class="string">'0.00'</span>))) &nbsp;</span><br><span class="line"><span class="string">'50.57'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">取整问题：</span><br><span class="line">ROUND_CEILING 总是趋向无穷大向上取整</span><br><span class="line">ROUND_DOWN　总是趋向0取整</span><br><span class="line">ROUND_FLOOR 总是趋向负无穷大向下取整</span><br><span class="line">ROUND_HALF_DOWN　如果最后一个有效数字大于或等于5则朝0反方向取整；否则，趋向0取整</span><br><span class="line">ROUND_HALF_EVEN　类似于ROUND_HALF_DOWN，不过，如果最后一个有效数字值为5，则会检查前一位。</span><br><span class="line">偶数值会导致结果向下取整，奇数值导致结果向上取整</span><br><span class="line">ROUND_HALF_UP 类似于ROUND_HALF_DOWN，不过如果最后一位有效数字为5，值会朝0的反方向取整</span><br><span class="line">ROUND_UP　朝0的反方向取整</span><br><span class="line">ROUND_05UP　如果最后一位是0或5，则朝0的反方向取整；否则向0取整</span><br></pre></td></tr></tbody></table></figure><h3 id="fractions-—-分数"><a href="https://docs.python.org/zh-cn/3.11/library/fractions.html#module-fractions"><code>fractions</code></a> — 分数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'1/3'</span>)*Fraction(<span class="string">'3/1'</span>) </span><br><span class="line">Fraction(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(Fraction(<span class="string">'1/3'</span>)*Fraction(<span class="string">'3/1'</span>))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(Fraction(<span class="string">'1/3'</span>)*Fraction(<span class="string">'6/2'</span>)) &nbsp; </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(Fraction(<span class="string">'1/3'</span>)*Fraction(<span class="string">'6/1'</span>))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">16</span>, -<span class="number">10</span>)</span><br><span class="line">Fraction(-<span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(-<span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line">Fraction(-<span class="number">8</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">123</span>)</span><br><span class="line">Fraction(<span class="number">123</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">123</span>, <span class="number">1</span>)</span><br><span class="line">Fraction(<span class="number">123</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction()</span><br><span class="line">Fraction(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">Fraction(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'3/7'</span>)</span><br><span class="line">Fraction(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">Fraction(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">' -3/7 '</span>)</span><br><span class="line">Fraction(-<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(-<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">Fraction(-<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'1.414213 \t\n'</span>)</span><br><span class="line">Fraction(<span class="number">1414213</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">1414213</span>, <span class="number">1000000</span>)</span><br><span class="line">Fraction(<span class="number">1414213</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'-.125'</span>)</span><br><span class="line">Fraction(-<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(-<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">Fraction(-<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'7e-6'</span>)</span><br><span class="line">Fraction(<span class="number">7</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">7</span>, <span class="number">1000000</span>)</span><br><span class="line">Fraction(<span class="number">7</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">2.25</span>)</span><br><span class="line">Fraction(<span class="number">9</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">9</span>, <span class="number">4</span>)</span><br><span class="line">Fraction(<span class="number">9</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">1.1</span>)</span><br><span class="line">Fraction(<span class="number">2476979795053773</span>, <span class="number">2251799813685248</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">2476979795053773</span>, <span class="number">2251799813685248</span>)</span><br><span class="line">Fraction(<span class="number">2476979795053773</span>, <span class="number">2251799813685248</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(Decimal(<span class="string">'1.1'</span>))</span><br><span class="line">Fraction(<span class="number">11</span>, <span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">11</span>, <span class="number">10</span>)</span><br><span class="line">Fraction(<span class="number">11</span>, <span class="number">10</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="字符串：String">字符串：String</h2><p>可以用成对的单引号、双引号、三重引号来表示</p><p>字符串由<a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#str"><code>str</code></a> 类型表示。</p><ol><li><p>如果不希望前置 <code>\</code> 的字符转义成特殊字符，可以使用 <em>原始字符串</em>，在引号前添加 <code>r</code> 即可：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'C:\some\name'</span>)</span><br><span class="line">C:\some</span><br><span class="line">ame</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r'C:\some\name'</span>)</span><br><span class="line">C:\some\name</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll = <span class="built_in">str</span>(<span class="number">12</span>)      </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll</span><br><span class="line"><span class="string">'12'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>原始字符串还有一个微妙的限制：一个原始字符串不能以奇数个 <code>\</code> 字符结束</p><p>以奇数个反斜杠结尾的原始字符串将会转义用于标记字符串的引号</p><p>请参阅 <a href="https://docs.python.org/zh-cn/3.11/faq/programming.html#faq-programming-raw-string-backslash">此 FAQ 条目</a> 了解更多信息及绕过的办法。</p></li><li><p>字符串字面值可以多行。使用三重引号：“”“…”“” 或 ‘’‘…’‘’</p></li></ol><h3 id="格式化字符串">格式化字符串</h3><h4 id="占位符">占位符</h4><p>用<code>%</code>实现。当<code>%</code>作为普通字符时，用<code>%%</code>来表示一个<code>%</code></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只有一个占位符，括号可以省略</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s'</span> % <span class="string">'world'</span></span><br><span class="line"><span class="string">'Hello, world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hi, %s, you have $%d.'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'Hi, %s, you have $%d. %f'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>, <span class="literal">True</span>))</span><br><span class="line">Hi, Michael, you have $<span class="number">1000000.</span> <span class="number">1.000000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'percent: %d%%'</span> % <span class="number">1</span>) &nbsp;</span><br><span class="line">percent: <span class="number">1</span>%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'percent: %.2f%%'</span> % <span class="number">1.345</span>)  </span><br><span class="line">percent: <span class="number">1.34</span>%</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'percent: %.2f%%'</span> % <span class="number">1.346</span>) </span><br><span class="line">percent: <span class="number">1.35</span>%</span><br></pre></td></tr></tbody></table></figure><p>常见的占位符有：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td><code>%s</code>会把任何数据类型转换为字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定浮点数的小数位数，不足补0，超出四舍五入</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'%0.4f'</span> % <span class="number">3.1415926</span>)</span><br><span class="line"><span class="number">3.1416</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'%.2f'</span> % <span class="number">3.1415926</span>)</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定浮点数的小数位数，不足补0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'%.4f'</span> % <span class="number">3.1</span>)</span><br><span class="line"><span class="number">3.1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定整数的最小占位数，不足补空格</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'%2d'</span> % <span class="number">1</span>)</span><br><span class="line"> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定整数的最小占位数，不足补0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">'%02d'</span>%<span class="number">1</span>)</span><br><span class="line">01</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="f-string：格式字符串字面值"><a href="https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#formatted-string-literals">f-string：格式字符串字面值</a></h4><p>是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换.</p><p>指定了转换符时，表达式求值的结果会先转换，再格式化。转换符 <code>'!s'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#str"><code>str()</code></a> 转换求值结果，<code>'!r'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/functions.html#repr"><code>repr()</code></a>，<code>'!a'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/functions.html#ascii"><code>ascii()</code></a>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="number">2.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="number">3.14</span> * r ** <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f'The area of a circle with radius <span class="subst">{r}</span> is <span class="subst">{s:<span class="number">.2</span>f}</span>'</span>)</span><br><span class="line">The area of a circle <span class="keyword">with</span> radius <span class="number">2.5</span> <span class="keyword">is</span> <span class="number">19.62</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用'!r'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">"Fred"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"He said his name is <span class="subst">{name!r}</span>."</span></span><br><span class="line"><span class="string">"He said his name is 'Fred'."</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"He said his name is <span class="subst">{name}</span>."</span>   </span><br><span class="line"><span class="string">'He said his name is Fred.'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> decimal</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>width = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>precision = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = decimal.Decimal(<span class="string">"12.34567"</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"result: <span class="subst">{value:{width}</span>.<span class="subst">{precision}</span>}"</span></span><br><span class="line"><span class="string">'result:      12.35'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number = <span class="number">15</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">{number:#0x}</span>"</span> </span><br><span class="line"><span class="string">'0xf'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化日期</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today = datetime(year=<span class="number">2017</span>, month=<span class="number">1</span>, day=<span class="number">27</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">{today:%B %d, %Y}</span>"</span></span><br><span class="line"><span class="string">'January 27, 2017'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">{today=:%B %d, %Y}</span>"</span> </span><br><span class="line"><span class="string">'today=January 27, 2017'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">"The mill's closed"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">{line}</span>"</span>    </span><br><span class="line"><span class="string">"The mill's closed"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">{line=}</span>"</span> </span><br><span class="line"><span class="string">'line="The mill\'s closed"'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">{line = :<span class="number">20</span>}</span>"</span></span><br><span class="line"><span class="string">"line = The mill's closed   "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">{line = !r:<span class="number">20</span>}</span>"</span></span><br><span class="line"><span class="string">'line = "The mill\'s closed" '</span></span><br></pre></td></tr></tbody></table></figure><h4 id="format">format()</h4><p>使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……</p><h3 id="内置函数">内置函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>len(‘asd’)</td><td>计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数</td></tr><tr><td>ord(‘A’)</td><td>返回单个字符的整数编码</td></tr><tr><td>chr(‘32’)</td><td>整数编码转换为对应的字符</td></tr><tr><td>‘ABC’.encode(‘ascii’)</td><td><code>str</code>转<code>bytes</code></td></tr><tr><td>b’ABC’.decode(‘ascii’)</td><td><code>bytes</code>转<code>str</code></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="布尔值：Bool">布尔值：Bool</h2><p>区分大小写</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><h2 id="空值：None">空值：None</h2><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><h2 id="列表：List">列表：List</h2><p>list是一种有序的集合，可以随时添加和删除其中的元素。可以包含不同类型的元素。列表支持索引和切片查询</p><ol><li><p>定义</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表（创建包含其他列表的列表）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [a, n]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">'b'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>添加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 末尾追加元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.append(<span class="string">'h'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters += <span class="string">'i'</span>      </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把元素插入到指定的位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters  </span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.insert(<span class="number">2</span>, <span class="string">'c'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]          </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters += [<span class="string">'h'</span>, <span class="string">'i'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[<span class="number">2</span>:<span class="number">5</span>] = [<span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[<span class="number">2</span>:<span class="number">5</span>] </span><br><span class="line">[<span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters     </span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片删除元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[<span class="number">2</span>:<span class="number">5</span>] = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters          </span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除末尾元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters          </span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.pop()    </span><br><span class="line"><span class="string">'g'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'f'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定位置元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters.pop(<span class="number">1</span>) </span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters        </span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'f'</span>]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="元组：Tuple">元组：Tuple</h2><p>有序、不可变</p><ol><li><p>定义</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通定义</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个元素（歧义）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test = (<span class="string">'test'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test</span><br><span class="line"><span class="string">'test'</span></span><br><span class="line"><span class="comment"># 一个元素（元组定义）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test = (<span class="string">'test'</span>,) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test</span><br><span class="line">(<span class="string">'test'</span>,)</span><br></pre></td></tr></tbody></table></figure></li><li><p>只有1个元素的tuple定义时必须加一个逗号<code>,</code>，来消除歧义。而显示时，也会带上一个逗号<code>, </code></p></li><li><p>“可变的”tuple：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'X'</span>, <span class="string">'Y'</span>]) </span><br></pre></td></tr></tbody></table></figure><p>当我们把list的元素<code>'A'</code>和<code>'B'</code>修改为<code>'X'</code>和<code>'Y'</code>后，tuple变为：</p><p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。</p><p>tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向<code>'a'</code>，就不能改成指向<code>'b'</code>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的。</p><p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p></li></ol><h2 id="字典：Dictionary">字典：Dictionary</h2><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p><ol><li><p>定义和赋值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = {}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">{}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Jack'</span>] = <span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">{<span class="string">'Jack'</span>: <span class="number">90</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Jack'</span>] = <span class="number">88</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">{<span class="string">'Jack'</span>: <span class="number">88</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">dict</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">'dict'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">dict</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">{}</span><br></pre></td></tr></tbody></table></figure><p>如果key不存在，dict就会报错：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Thomas'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'Thomas'</span></span><br></pre></td></tr></tbody></table></figure><p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>, -<span class="number">1</span>)</span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>注意：返回<code>None</code>的时候Python的交互环境不显示结果。</p><p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除，如果key不存在，一样会报错：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">{<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Bob'</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">'Bob'</span>) </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'Bob'</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="集合：Set">集合：Set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><p>要创建一个set，需要提供一个list作为输入集合：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>{1, 2, 3}</code>只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。</p><p>重复元素在set中自动被过滤：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br></pre></td></tr></tbody></table></figure><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br></pre></td></tr></tbody></table></figure><p>通过<code>remove(key)</code>方法可以删除元素：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}</span><br></pre></td></tr></tbody></table></figure><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">{<span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br></pre></td></tr></tbody></table></figure><p>set和dict的唯一区别仅在于没有存储对应的value，但是，<strong>set的原理和dict一样</strong>，所以，<strong>同样不可以放入可变对象</strong>，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll = {(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="number">4</span>} </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll</span><br><span class="line">{(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="number">4</span>}</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll = {(<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]), <span class="number">4</span>} </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">'list'</span></span><br></pre></td></tr></tbody></table></figure><h1>控制流工具</h1><h2 id="if-语句">if 语句</h2><p>完整结构</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p><code>if</code>判断条件还可以简写，比如写：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'True'</span>)</span><br></pre></td></tr></tbody></table></figure><p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code></p><h2 id="match-语句">match 语句</h2><p>版本3.10之后支持</p><p>模式匹配：只有第一个匹配的模式会被执行，并且它还可以提取值的组成部分（序列的元素或对象的属性）赋给变量。</p><h4 id="字面值匹配">字面值匹配</h4><p>最简单的形式是将一个主语值与一个或多个字面值进行比较：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">http_error</span>(<span class="params">status</span>):</span><br><span class="line">    <span class="keyword">match</span> status:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Bad request"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span> | <span class="number">403</span> | <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Not allowed"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Not found"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">418</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"I'm a teapot"</span></span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Something's wrong with the internet"</span></span><br></pre></td></tr></tbody></table></figure><p>注意最后一个代码块：“变量名” <code>_</code> 被作为 <em>通配符</em> 并必定会匹配成功。</p><p>如果没有 case 匹配成功，则不会执行任何分支。</p><p>你可以使用 <code>|</code> （“ or ”）在一个模式中组合几个字面值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">401</span> | <span class="number">403</span> | <span class="number">404</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Not allowed"</span></span><br></pre></td></tr></tbody></table></figure><p><strong>在case中使用判断语句</strong></p><p>match语句还支持在分支条件中插入判断语句</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> a:</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'case 1'</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">2</span>, x) <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'case 2'</span>, x)</span><br><span class="line">    <span class="keyword">case</span> default:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'case default'</span>, default)</span><br></pre></td></tr></tbody></table></figure><h4 id="解包赋值">解包赋值</h4><p><code>match</code>语句除了可以匹配简单的单个值外，还可以匹配多个值、匹配一定范围，并且把匹配后的值绑定到变量：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># point is an (x, y) tuple</span></span><br><span class="line"><span class="keyword">match</span> point:</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Origin"</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Y=<span class="subst">{y}</span>"</span>)</span><br><span class="line">    <span class="keyword">case</span> (x, <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"X=<span class="subst">{x}</span>"</span>)</span><br><span class="line">    <span class="keyword">case</span> (x, y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"X=<span class="subst">{x}</span>, Y=<span class="subst">{y}</span>"</span>)</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Not a point"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">where_is</span>(<span class="params">point</span>):</span><br><span class="line">    <span class="keyword">match</span> point:</span><br><span class="line">        <span class="keyword">case</span> Point(x=<span class="number">0</span>, y=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"原点"</span>)</span><br><span class="line">        <span class="keyword">case</span> Point(x=<span class="number">0</span>, y=yLine):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"Y轴：Y=<span class="subst">{yLine}</span>"</span>)</span><br><span class="line">        <span class="keyword">case</span> Point(x=xLine, y=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"X轴：X=<span class="subst">{xLine}</span>"</span>)</span><br><span class="line">        <span class="keyword">case</span> Point():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Somewhere else"</span>)</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Not a point"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">where_is(Point(<span class="number">0</span>, <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="序列模式">序列模式</h4><p>与解包赋值类似，元组和列表模式具有完全相同的含义并且实际上都能匹配任意序列，区别是它们不能匹配迭代器或字符串。</p><p>序列模式支持扩展解包：<code>[x, y, *rest]</code> 和 <code>(x, y, *rest)</code> 和相应的解包赋值做的事是一样的。接在 <code>*</code> 后的名称也可以为 <code>_</code>，所以 <code>(x, y, *_)</code> 匹配含至少两项的序列，而不必绑定剩余的项。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match_list</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">match</span> s:</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"None"</span>)</span><br><span class="line">        <span class="keyword">case</span> []:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Empty"</span>)</span><br><span class="line">        <span class="keyword">case</span> [x]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"x={0}"</span>.<span class="built_in">format</span>(x))</span><br><span class="line">        <span class="keyword">case</span> [x, y]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"x={0},y={1}"</span>.<span class="built_in">format</span>(x, y))</span><br><span class="line">        <span class="keyword">case</span> [x, y, *rest]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"x=%s, y=%s, rest=%s"</span> % (x, y, rest))</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Not a list"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">match_list([<span class="number">1</span>])</span><br><span class="line">match_list([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">match_list([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">match_list(<span class="string">"s"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line">x=<span class="number">1</span>,y=<span class="number">2</span></span><br><span class="line">x=<span class="number">1</span>, y=<span class="number">2</span>, rest=[<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">Not a <span class="built_in">list</span></span><br></pre></td></tr></tbody></table></figure><h4 id="映射模式">映射模式</h4><p>映射模式：<code>{"bandwidth": b, "latency": l}</code> 从字典中捕获 <code>"bandwidth"</code> 和 <code>"latency"</code> 的值。额外的键会被忽略，这一点与序列模式不同。<code>**rest</code> 这样的解包也支持。（但 <code>**_</code> 将会是冗余的，故不允许使用。）</p><p>match实现</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch_match</span>(<span class="params">operator, x, y</span>):</span><br><span class="line">    <span class="keyword">match</span> operator:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">            <span class="keyword">return</span> x + y</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'sub'</span>:</span><br><span class="line">            <span class="keyword">return</span> x - y</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'mul'</span>:</span><br><span class="line">          <span class="keyword">return</span> x * y</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'div'</span>:</span><br><span class="line">            <span class="keyword">return</span> x / y</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(dispatch_match(<span class="string">'add'</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(dispatch_match(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure><p>字典实现相同功能</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch_dict</span>(<span class="params">operator, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="string">'add'</span>: <span class="keyword">lambda</span>: x + y,</span><br><span class="line">        <span class="string">'sub'</span>: <span class="keyword">lambda</span>: x - y,</span><br><span class="line">        <span class="string">'mul'</span>: <span class="keyword">lambda</span>: x * y,</span><br><span class="line">        <span class="string">'div'</span>: <span class="keyword">lambda</span>: x / y,</span><br><span class="line">    }.get(operator, <span class="keyword">lambda</span>: <span class="literal">None</span>)()</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dispatch_dict(<span class="string">'add'</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(dispatch_dict(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure><h2 id="循环">循环</h2><ol><li><p>for 语句</p><p>for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Measure some strings:</span></span><br><span class="line">words = [<span class="string">'cat'</span>, <span class="string">'window'</span>, <span class="string">'defenestrate'</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">    <span class="built_in">print</span>(w, <span class="built_in">len</span>(w))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = {<span class="string">"a"</span>: <span class="number">10</span>, <span class="string">"b"</span> : <span class="number">20</span>}</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> p:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(p[x]) </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">a</span><br><span class="line"><span class="number">10</span></span><br><span class="line">b</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></tbody></table></figure><p>很难正确地在迭代多项集的同时修改多项集的内容。更简单的方法是迭代多项集的副本或者创建新的多项集：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a sample collection</span></span><br><span class="line">users = {<span class="string">'Hans'</span>: <span class="string">'active'</span>, <span class="string">'Éléonore'</span>: <span class="string">'inactive'</span>, <span class="string">'景太郎'</span>: <span class="string">'active'</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment"># Strategy:  Iterate over a copy</span></span><br><span class="line"><span class="keyword">for</span> user, status <span class="keyword">in</span> users.copy().items():</span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">'inactive'</span>:</span><br><span class="line">        <span class="keyword">del</span> users[user]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Strategy:  Create a new collection</span></span><br><span class="line">active_users = {}</span><br><span class="line"><span class="keyword">for</span> user, status <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">'active'</span>:</span><br><span class="line">        active_users[user] = statuss</span><br></pre></td></tr></tbody></table></figure></li><li><p>while循环</p><p>要条件满足，就不断循环，条件不满足时退出循环</p></li><li><p>循环中的 break、continue 语句及 else 子句</p><ul><li><p>break 语句将跳出最近的一层 for 或 while 循环</p></li><li><p>for 或 while 循环可以包括 else 子句（完成循环之后执行）</p><p>在 for 循环中，else 子句会在循环成功结束最后一次迭代之后执行。</p><p>在 while 循环中，它会在循环条件变为假值后执行。</p><p>无论哪种循环，如果因为 <a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#break"><code>break</code></a> 而结束，那么 <code>else</code> 子句就 <strong>不会</strong> 执行。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环配合else使用</span></span><br><span class="line">users = {<span class="string">'Hans'</span>: <span class="string">'active'</span>, <span class="string">'Éléonore'</span>: <span class="string">'inactive'</span>, <span class="string">'景太郎'</span>: <span class="string">'active'</span>}</span><br><span class="line"><span class="keyword">for</span> user, status <span class="keyword">in</span> users.copy().items():</span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">'inactive'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1.done&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无论哪种循环，如果因为 break 而结束，那么 else 子句就 不会 执行。</span></span><br><span class="line"><span class="keyword">for</span> user, status <span class="keyword">in</span> users.copy().items():</span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">'inactive'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"2.done&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>done&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">{<span class="string">'Hans'</span>: <span class="string">'active'</span>, <span class="string">'Éléonore'</span>: <span class="string">'inactive'</span>, <span class="string">'景太郎'</span>: <span class="string">'active'</span>}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><h2 id="pass语句">pass语句</h2><p><a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#pass"><code>pass</code></a> 语句不执行任何动作。语法上需要一个语句，但程序毋需执行任何动作时，可以使用该语句。例如：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># Busy-wait for keyboard interrupt (Ctrl+C)</span></span><br></pre></td></tr></tbody></table></figure><p>这常用于创建一个最小的类：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyEmptyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#pass"><code>pass</code></a> 还可用作函数或条件语句体的占位符，让你保持在更抽象的层次进行思考。</p><p><code>pass</code> 会被默默地忽略：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initlog</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">pass</span>   <span class="comment"># Remember to implement this!</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#&quot;&gt;语法&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;编码声明&quot;&gt;编码声明&lt;/h2&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="Python" scheme="https://hmxyl.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch安装</title>
    <link href="https://hmxyl.github.io/20230618/872a239c.html"/>
    <id>https://hmxyl.github.io/20230618/872a239c.html</id>
    <published>2023-06-18T09:33:20.000Z</published>
    <updated>2024-09-29T11:24:11.333Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker</h1><p>参考：<a href="https://new.nanxiangquan.com/2023/04/26/docker%E9%83%A8%E7%BD%B2elk/">https://new.nanxiangquan.com/2023/04/26/docker部署elk/</a></p><h2 id="单机">单机</h2><h3 id="docker-compose">docker-compose</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.9'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch-standalone:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.2.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch-standalone</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=elasticsearch-standalone</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=node01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=["node01"]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># - /opt/docker_data/elasticsearch-standalone/config/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_data/elasticsearch-standalone/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_data/elasticsearch-standalone/config/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_data/elasticsearch-standalone/config/jvm.options:/usr/share/elasticsearch/config/jvm.options</span></span><br><span class="line">      <span class="comment"># - /opt/docker_data/elasticsearch-standalone/config/role_mapping.yml:/usr/share/elasticsearch/config/role_mapping</span></span><br><span class="line">      <span class="comment"># - /opt/docker_data/elasticsearch-standalone/config/roles.yml:/usr/share/elasticsearch/config/roles</span></span><br><span class="line">      <span class="comment"># - /opt/docker_data/elasticsearch-standalone/config/users:/usr/share/elasticsearch/config/users</span></span><br><span class="line">      <span class="comment"># - /opt/docker_data/elasticsearch-standalone/config/users_roles:/usr/share/elasticsearch/config/users_roles</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_data/elasticsearch-standalone/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_data/elasticsearch-standalone/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br></pre></td></tr></tbody></table></figure><p>​         其中的配置文件：</p><ul><li>elasticsearch.yml</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/usr/share/elasticsearch/data</span>  </span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/share/elasticsearch/logs</span>    </span><br><span class="line"></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">http.cors.allow-headers:</span> <span class="string">Authorization</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">discovery.zen.ping_timeout:</span> <span class="string">120s</span></span><br><span class="line"><span class="attr">client.transport.ping_timeout:</span> <span class="string">60s</span></span><br></pre></td></tr></tbody></table></figure><ul><li>jvm.options</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## JVM configuration</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">## IMPORTANT: JVM heap size</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## You should always set the min and max JVM heap</span></span><br><span class="line"><span class="comment">## size to the same value. For example, to set</span></span><br><span class="line"><span class="comment">## the heap to 4 GB, set:</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## -Xms4g</span></span><br><span class="line"><span class="comment">## -Xmx4g</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</span></span><br><span class="line"><span class="comment">## for more information</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line"></span><br><span class="line"><span class="attr">-Xms2g</span></span><br><span class="line"><span class="attr">-Xmx2g</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">## Expert settings</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## All settings below this section are considered</span></span><br><span class="line"><span class="comment">## expert settings. Don't tamper with them unless</span></span><br><span class="line"><span class="comment">## you understand what you are doing</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## GC configuration</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+UseConcMarkSweepGC</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">CMSInitiatingOccupancyFraction=75</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+UseCMSInitiatingOccupancyOnly</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## G1GC Configuration</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> G1GC is only supported on JDK version 10 or later.</span></span><br><span class="line"><span class="comment"># To use G1GC uncomment the lines below.</span></span><br><span class="line"><span class="comment"># 10-:-XX:-UseConcMarkSweepGC</span></span><br><span class="line"><span class="comment"># 10-:-XX:-UseCMSInitiatingOccupancyOnly</span></span><br><span class="line"><span class="comment"># 10-:-XX:+UseG1GC</span></span><br><span class="line"><span class="comment"># 10-:-XX:InitiatingHeapOccupancyPercent=75</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## DNS cache policy</span></span><br><span class="line"><span class="comment"># cache ttl in seconds for positive DNS lookups noting that this overrides the</span></span><br><span class="line"><span class="comment"># JDK security property networkaddress.cache.ttl; set to -1 to cache forever</span></span><br><span class="line"><span class="attr">-Des.networkaddress.cache.ttl</span>=<span class="string">60</span></span><br><span class="line"><span class="comment"># cache ttl in seconds for negative DNS lookups noting that this overrides the</span></span><br><span class="line"><span class="comment"># JDK security property networkaddress.cache.negative ttl; set to -1 to cache</span></span><br><span class="line"><span class="comment"># forever</span></span><br><span class="line"><span class="attr">-Des.networkaddress.cache.negative.ttl</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## optimizations</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># pre-touch memory pages used by the JVM during initialization</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+AlwaysPreTouch</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## basic</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># explicitly set the stack size</span></span><br><span class="line"><span class="attr">-Xss1m</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># set to headless, just in case</span></span><br><span class="line"><span class="attr">-Djava.awt.headless</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ensure UTF-8 encoding by default (e.g. filenames)</span></span><br><span class="line"><span class="attr">-Dfile.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># use our provided JNA always versus the system one</span></span><br><span class="line"><span class="attr">-Djna.nosys</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># turn off a JDK optimization that throws away stack traces for common</span></span><br><span class="line"><span class="comment"># exceptions because stack traces are important for debugging</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">-OmitStackTraceInFastThrow</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># flags to configure Netty</span></span><br><span class="line"><span class="attr">-Dio.netty.noUnsafe</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">-Dio.netty.noKeySetOptimization</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">-Dio.netty.recycler.maxCapacityPerThread</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># log4j 2</span></span><br><span class="line"><span class="attr">-Dlog4j.shutdownHookEnabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">-Dlog4j2.disable.jmx</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">-Djava.io.tmpdir</span>=<span class="string">${ES_TMPDIR}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## heap dumps</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># generate a heap dump when an allocation from the Java heap fails</span></span><br><span class="line"><span class="comment"># heap dumps are created in the working directory of the JVM</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># specify an alternative path for heap dumps; ensure the directory exists and</span></span><br><span class="line"><span class="comment"># has sufficient space</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">HeapDumpPath=data</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># specify an alternative path for JVM fatal error logs</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">ErrorFile=logs/hs_err_pid%p.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## JDK 8 GC logging</span></span><br><span class="line"></span><br><span class="line"><span class="attr">8</span>:<span class="string">-XX:+PrintGCDetails</span></span><br><span class="line"><span class="attr">8</span>:<span class="string">-XX:+PrintGCDateStamps</span></span><br><span class="line"><span class="attr">8</span>:<span class="string">-XX:+PrintTenuringDistribution</span></span><br><span class="line"><span class="attr">8</span>:<span class="string">-XX:+PrintGCApplicationStoppedTime</span></span><br><span class="line"><span class="attr">8</span>:<span class="string">-Xloggc:logs/gc.log</span></span><br><span class="line"><span class="attr">8</span>:<span class="string">-XX:+UseGCLogFileRotation</span></span><br><span class="line"><span class="attr">8</span>:<span class="string">-XX:NumberOfGCLogFiles=32</span></span><br><span class="line"><span class="attr">8</span>:<span class="string">-XX:GCLogFileSize=64m</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JDK 9+ GC logging</span></span><br><span class="line"><span class="attr">9-</span>:<span class="string">-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m</span></span><br><span class="line"><span class="comment"># due to internationalization enhancements in JDK 9 Elasticsearch need to set the provider to COMPAT otherwise</span></span><br><span class="line"><span class="comment"># time/date parsing will break in an incompatible way for some date patterns and locals</span></span><br><span class="line"><span class="attr">9-</span>:<span class="string">-Djava.locale.providers=COMPAT</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>log4j2.properties</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">status</span> = <span class="string">error</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># log action execution errors for easier debugging</span></span><br><span class="line"><span class="attr">logger.action.name</span> = <span class="string">org.elasticsearch.action</span></span><br><span class="line"><span class="attr">logger.action.level</span> = <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.rolling.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="attr">appender.rolling.name</span> = <span class="string">rolling</span></span><br><span class="line"><span class="attr">appender.rolling.layout.type</span> = <span class="string">ESJsonLayout</span></span><br><span class="line"><span class="attr">appender.rolling.layout.type_name</span> = <span class="string">server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rootLogger.level</span> = <span class="string">info</span></span><br><span class="line"><span class="attr">rootLogger.appenderRef.rolling.ref</span> = <span class="string">rolling</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.deprecation_rolling.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.name</span> = <span class="string">deprecation_rolling</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.layout.type</span> = <span class="string">ESJsonLayout</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.layout.type_name</span> = <span class="string">deprecation</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.deprecation.name</span> = <span class="string">org.elasticsearch.deprecation</span></span><br><span class="line"><span class="attr">logger.deprecation.level</span> = <span class="string">warn</span></span><br><span class="line"><span class="attr">logger.deprecation.appenderRef.deprecation_rolling.ref</span> = <span class="string">deprecation_rolling</span></span><br><span class="line"><span class="attr">logger.deprecation.additivity</span> = <span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.name</span> = <span class="string">index_search_slowlog_rolling</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.layout.type</span> = <span class="string">ESJsonLayout</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.layout.type_name</span> = <span class="string">index_search_slowlog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.index_search_slowlog_rolling.name</span> = <span class="string">index.search.slowlog</span></span><br><span class="line"><span class="attr">logger.index_search_slowlog_rolling.level</span> = <span class="string">trace</span></span><br><span class="line"><span class="attr">logger.index_search_slowlog_rolling.appenderRef.index_search_slowlog_rolling.ref</span> = <span class="string">index_search_slowlog_rolling</span></span><br><span class="line"><span class="attr">logger.index_search_slowlog_rolling.additivity</span> = <span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.name</span> = <span class="string">index_indexing_slowlog_rolling</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.layout.type</span> = <span class="string">ESJsonLayout</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.layout.type_name</span> = <span class="string">index_indexing_slowlog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.index_indexing_slowlog.name</span> = <span class="string">index.indexing.slowlog.index</span></span><br><span class="line"><span class="attr">logger.index_indexing_slowlog.level</span> = <span class="string">trace</span></span><br><span class="line"><span class="attr">logger.index_indexing_slowlog.appenderRef.index_indexing_slowlog_rolling.ref</span> = <span class="string">index_indexing_slowlog_rolling</span></span><br><span class="line"><span class="attr">logger.index_indexing_slowlog.additivity</span> = <span class="string">false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="初始化密码">初始化密码</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">进入elasticsearch容器</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it elasticsearch bash</span><br><span class="line"></span><br><span class="line">进入bin目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> bin/</span><br><span class="line"></span><br><span class="line">执行初始化密码</span><br><span class="line"></span><br><span class="line">./elasticsearch-setup-passwords interactive</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Docker&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://new.nanxiangquan.com/2023/04/26/docker%E9%83%A8%E7%BD%B2elk/&quot;&gt;https://new.nanxiangquan.com/2023/04/26</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ElasticSearch" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://hmxyl.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙</title>
    <link href="https://hmxyl.github.io/20230511/e26546c7.html"/>
    <id>https://hmxyl.github.io/20230511/e26546c7.html</id>
    <published>2023-05-11T06:32:10.000Z</published>
    <updated>2025-06-19T06:29:23.325Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>Centos 防火墙</h1><h2 id="firewall服务">firewall服务</h2><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 查看默认防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入，更新防火墙规则</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line"><span class="comment"># 或者关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="firewall配置">firewall配置</h2><ul><li><p>查看防火墙规则</p>  <figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看全部端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="comment"># 全部规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="comment"># 查看指定端口</span></span><br><span class="line">firewall-cmd --zone=public --query-port=3306/tcp</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>查看区域信息</p>  <figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-active-zones</span><br><span class="line">firewall-cmd --list-all-zones</span><br></pre></td></tr></tbody></table></figure></li><li><p>暴露端口</p>  <figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加端口 </span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line"><span class="comment">#删除端口</span></span><br><span class="line">firewall-cmd  -permanent --remove-port=3306/tcp </span><br></pre></td></tr></tbody></table></figure></li><li><p>IP白名单（添加）</p>  <figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加白名单</span></span><br><span class="line">firewall-cmd --permanent --zone=trusted --add-source=10.42.0.15</span><br><span class="line"><span class="comment"># 移除白名单</span></span><br><span class="line">firewall-cmd --permanent --zone=trusted --remove-source=10.42.0.15</span><br><span class="line"><span class="comment"># 更新防火墙规则</span></span><br><span class="line">firewall-cmd  --reload</span><br><span class="line"><span class="comment"># 查看IP白名单</span></span><br><span class="line">firewall-cmd  --zone=trusted --list-all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启某个端口(指定IP可访问)</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-rich-rule=<span class="string">'rule family="ipv4" source address="10.1.1.14/32" port protocol="tcp" port="80" accept'</span></span><br><span class="line"><span class="comment">#删除策略</span></span><br><span class="line">firewall-cmd --permanent --zone=public --remove-rich-rule=<span class="string">'rule family="ipv4" source address="10.1.1.14/32" port protocol="tcp" port="80" accept'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把docker0网卡添加到trusted域</span></span><br><span class="line">firewall-cmd --permanent --zone=trusted --change-interface=docker0</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;Centos 防火墙&lt;/h1&gt;
&lt;h2 id=&quot;firewall服务&quot;&gt;firewall服务&lt;/h2&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://hmxyl.github.io/categories/Linux/"/>
    
    <category term="Linux防火墙" scheme="https://hmxyl.github.io/categories/Linux/Linux%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
    
    <category term="操作系统" scheme="https://hmxyl.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
