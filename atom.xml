<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alisa&#39;s Home</title>
  
  <subtitle>Alisa&#39;s Home</subtitle>
  <link href="https://hmxyl.github.io/atom.xml" rel="self"/>
  
  <link href="https://hmxyl.github.io/"/>
  <updated>2023-12-10T12:51:01.133Z</updated>
  <id>https://hmxyl.github.io/</id>
  
  <author>
    <name>Alisa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://hmxyl.github.io/20231224/0.html"/>
    <id>https://hmxyl.github.io/20231224/0.html</id>
    <published>2023-12-24T07:47:44.867Z</published>
    <updated>2023-12-10T12:51:01.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板语法">模板语法</h2><h3 id="swig￼102-文本"><code>{{ msg }}</code>:文本</h3><p>数据绑定最常见的形式就是使用“Mustache” (双大括号) 语法的文本插值</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Message: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般配合<code>js</code> 中的<code>data()</code>设置数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">"消息提示"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-html：原始-HTML"><code>v-html</code>：原始 HTML</h3><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用<code>v-html</code> 指令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using mustaches: {{ rawHtml }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using v-html directive: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token literal-property property">rawHtml</span><span class="token operator">:</span><span class="token string">"&lt;a href='https://www.itbaizhan.com'&gt;百战&lt;/a&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-bind-：设置属性"><code>v-bind</code>  ：设置属性</h3><p>Mustache 语法不能在 HTML 属性中使用，然而，可以使用 <code>v-bind</code> 指令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamicId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token literal-property property">dynamicId</span><span class="token operator">:</span><span class="token number">1001</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>温馨提示</strong></p><p><code>v-bind:</code> 可以简写成 <code>:</code></p></blockquote><h3 id="使用-JavaScript-表达式">使用 JavaScript 表达式</h3><p>在我们的模板中，我们一直都只绑定简单的 property 键值，Vue.js 都提供了完全的 JavaScript 表达式支持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> ok <span class="token operator">?</span> <span class="token string">'YES'</span> <span class="token operator">:</span> <span class="token string">'NO'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些表达式会在当前活动实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  这是语句，不是表达式：<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 流程控制也不会生效，请使用三元表达式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> message <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件渲染">条件渲染</h2><h3 id="v-if">v-if</h3><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 <code>true</code> 值的时候被渲染。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是孙猴子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-else">v-else</h3><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是孙猴子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>你是傻猴子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-show">v-show</h3><p>另一个用于条件性展示元素的选项是 <code>v-show</code> 指令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="v-if-和v-show-的区别"><code>v-if</code> 和<code>v-show</code> 的区别</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。</p><p>因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好</p><h2 id="列表渲染">列表渲染</h2><h3 id="v-for-：把一个数组映射为一组元素"><code>v-for</code> ：把一个数组映射为一组元素</h3><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。</p><p><code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 items 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ item.message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Bar'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为v-for-提供一个-key-attribute">为<code>v-for</code> 提供一个 <code>key</code> attribute</h3><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用<code>“就地更新”</code>的策略。</p><p>如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一的 <code>key</code> attribute：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id|index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 内容 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ item.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.avator<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>温馨提示</p><p><code>key</code>时通过<code>v-bind</code>绑定的属性</p><p>建议所有可行的时候，均给 <code>v-for</code> 提供一个 <code>key</code> attribute</p><p><code>key</code> 绑定的值期望是一个基础类型的值，例如字符串或number类型</p></blockquote><h2 id="事件处理">事件处理</h2><h3 id="v-on-或者-：监听DOM事件"><code>v-on</code> 或者<code>@</code>：监听DOM事件</h3><p>我们可以使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript。</p><p>用法为 <code>v-on:click="methodName"</code> 或使用快捷方式 <code>@click="methodName"</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter += 1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件参数">事件参数</h3><p>事件参数可以获取<code>event</code>对象和通过事件传递数据</p><p>官方的翻译称呼：内联处理器中的方法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say('hi')<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Say hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>greet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Say what<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>getNameHandler(item,</span> <span class="token attr-name">$event)</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) of names<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token literal-property property">names</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"赵"</span><span class="token punctuation">,</span><span class="token string">"钱"</span><span class="token punctuation">,</span><span class="token string">"孙"</span><span class="token punctuation">,</span><span class="token string">"李"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// message传参</span>            <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// event 是原生 DOM event. </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>                <span class="token comment">// 读取data里面的数据方案：this.count</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">getNameHandler</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 传参和event同时传递的时候，使用$event传递event</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件修饰符"><code>.</code> 事件修饰符</h3><p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。</p><p>Vue.js 通过由点 <code>.</code> 表示的指令后缀来调用修饰符。</p><ul><li><code>.stop</code> - 阻止冒泡</li><li><code>.prevent</code> - 阻止默认事件</li><li><code>.capture</code> - 阻止捕获</li><li><code>.self</code> - 只监听触发该元素的事件</li><li><code>.once</code> - 只触发一次</li><li><code>.left</code> - 左键事件</li><li><code>.right</code> - 右键事件</li><li><code>.middle</code> - 中间滚轮事件</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 阻止单击事件冒泡 --&gt;&lt;a v-on:click.stop="doThis"&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联  --&gt;&lt;a v-on:click.stop.prevent="doThat"&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;&lt;div v-on:click.capture="doThis"&gt;...&lt;/div&gt;&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;&lt;div v-on:click.self="doThat"&gt;...&lt;/div&gt;&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;&lt;a v-on:click.once="doThis"&gt;&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="：按键修饰符"><code>：</code>按键修饰符</h3><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符<code>：</code></p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;&lt;input v-on:keyup.13="submit"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 同上 --&gt;&lt;input v-on:keyup.enter="submit"&gt;&lt;!-- 缩写语法 --&gt;&lt;input @keyup.enter="submit"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>全部的按键别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><h2 id="数组变化的侦测">数组变化的侦测</h2><h3 id="变更方法：原数组发生变化，UI自动更新">变更方法：原数组发生变化，UI自动更新</h3><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h3 id="替换一个数组：原数组不发生变化，UI无法自动更新">替换一个数组：原数组不发生变化，UI无法自动更新</h3><ul><li><code>fliter()</code></li><li><code>concat()</code></li><li><code>slice()</code></li></ul><h2 id="computed：计算属性"><code>computed</code>：计算属性</h2><p><a href="https://cn.vuejs.org/guide/essentials/computed.html#writable-computed">https://cn.vuejs.org/guide/essentials/computed.html#writable-computed</a></p><p>为避免在模板中使用复杂的表达式，推荐使用<strong>计算属性</strong>来描述依赖响应式状态的复杂逻辑</p><p>计算属性默认是只读的。当你尝试修改一个计算属性时，你会收到一个运行时警告。只在某些特殊场景中你可能才需要用到“可写”的属性，你可以通过同时提供 getter 和 setter 来创建：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>      <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Doe'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">// getter</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// setter</span>      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 注意：我们这里使用的是解构赋值语法</span>        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在当你再运行 <code>this.fullName = 'John Doe'</code> 时，setter 会被调用而 <code>this.firstName</code> 和 <code>this.lastName</code> 会随之更新。</p><p>或者这种使用方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>        <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Doe'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">getfullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>计算属性和方法的区别</p><p><strong>计算属性</strong>: 计算属性值会基于其响应式依赖被缓存。一个计算属性仅会在其响应式依赖更新时才重新计算</p><p><strong>方法</strong>:方法调用总是会在重汇染发生时再次执行函数</p></blockquote><h2 id="Class绑定">Class绑定</h2><p>为了避免复杂的class 属性拼接，Vue 专门为class 的v-bind 用法提供了<strong>特殊的功能增强</strong>。除了字符串外，表达式的值也可以是对象或数组</p><p>绑定一个数组</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[activeClass, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token literal-property property">activeClass</span><span class="token operator">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span>          <span class="token literal-property property">errorClass</span><span class="token operator">:</span> <span class="token string">'text-danger'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者是一个对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classObject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ active: isActive }<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token literal-property property">isActive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">classObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">,</span>            <span class="token string-property property">'text-danger'</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'fatal'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在数组中嵌套对象：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[{ active: isActive }, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提示：</p><p>数组和对象嵌套过程中，只能是数组嵌套对象，不能反其道而行</p></blockquote><h2 id="Style绑定">Style绑定</h2><p><a href="https://cn.vuejs.org/guide/essentials/class-and-style.html#binding-inline-styles">https://cn.vuejs.org/guide/essentials/class-and-style.html#binding-inline-styles</a></p><p>类似class绑定</p><p>对象绑定</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styleObject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token literal-property property">styleObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>            <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">'13px'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="watch-侦听器"><code>watch</code>:侦听器</h2><p><a href="https://cn.vuejs.org/guide/essentials/watchers.html">https://cn.vuejs.org/guide/essentials/watchers.html</a></p><p>侦听对象为data中定义的响应式数据+组件数据</p><p>计算属性允许我们声明性地计算衍生值。</p><p>然而在有些情况下，我们需要在状态变化时执行一些“其他操作”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。</p><h3 id="基本示例">基本示例</h3><p>在选项式 API 中，我们可以使用 <a href="https://cn.vuejs.org/api/options-state.html#watch"><code>watch</code> 选项</a>在每次响应式属性发生变化时触发一个函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">answer</span><span class="token operator">:</span> <span class="token string">'Questions usually contain a question mark. ;-)'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">async</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Thinking...'</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://yesno.wtf/api'</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>answer            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Error! Could not reach the API. '</span> <span class="token operator">+</span> error            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 每当 question 改变时，这个函数就会执行，从而回去对应的answer</span>        <span class="token function">question</span><span class="token punctuation">(</span><span class="token parameter">newQuestion<span class="token punctuation">,</span> oldQuestion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newQuestion<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>watch</code>中定义的函数名称必须和<code>侦听的数据对象</code>一致。</p></blockquote><h3 id="深层侦听器">深层侦听器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 注意：只能是简单的路径，不支持表达式。</span>    <span class="token string">'some.nested.key'</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">someObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 注意：在嵌套的变更中，</span>        <span class="token comment">// 只要没有替换对象本身，</span>        <span class="token comment">// 那么这里的 `newValue` 和 `oldValue` 相同</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="即时回调的侦听器"><a href="https://cn.vuejs.org/guide/essentials/watchers.html#eager-watchers">即时回调的侦听器</a></h3><p><code>watch</code> 默认是懒执行的：仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。</p><p>举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。</p><p>我们可以用一个对象来声明侦听器，这个对象有 <code>handler</code> 方法和 <code>immediate: true</code> 选项，这样便能强制回调函数立即执行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newQuestion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在组件实例创建时会立即调用</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// 强制立即执行回调</span>      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调函数的初次执行就发生在 <code>created</code> 钩子之前。Vue 此时已经处理了 <code>data</code>、<code>computed</code> 和 <code>methods</code> 选项，所以这些属性在第一次调用时就是可用的。</p><h3 id="回调的触发时机"><a href="https://cn.vuejs.org/guide/essentials/watchers.html#callback-flush-timing">回调的触发时机</a></h3><p>当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新<strong>之前</strong>被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的 DOM，你需要指明 <code>flush: 'post'</code> 选项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">'post'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="created：-this-watch"><code>created</code>：  <a href="https://cn.vuejs.org/guide/essentials/watchers.html#this-watch">this.$watch()</a></h3><p>我们也可以使用组件实例的 <a href="https://cn.vuejs.org/api/component-instance.html#watch"><code>$watch()</code> 方法</a>来命令式地创建一个侦听器：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newQuestion</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要在特定条件下设置一个侦听器，或者只侦听响应用户交互的内容，这方法很有用。它还允许你提前停止该侦听器。</p><h3 id="停止侦听器"><a href="https://cn.vuejs.org/guide/essentials/watchers.html#stopping-a-watcher">停止侦听器</a></h3><p>用 <code>watch</code> 选项或者 <code>$watch()</code> 实例方法声明的侦听器，会在宿主组件卸载时自动停止。因此，在大多数场景下，你无需关心怎么停止它。</p><p>在少数情况下，你的确需要在组件卸载之前就停止一个侦听器，这时可以调用 <code>$watch()</code> API 返回的函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> unwatch <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token comment">// ...当该侦听器不再需要时</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="v-model-表单输入绑定"><code>v-model</code> 表单输入绑定</h2><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。</p><p>它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。</p><p>它负责监听用户的输入事件来更新数据，并在某种极端场景下进行一些特殊处理。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit me<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Message is: {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修饰符">修饰符</h3><h4 id="lazy"><code>.lazy</code></h4><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件之后进行同步</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Message is: {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="trim"><code>.trim</code></h4><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.number</code></p><p>如果你想让用户输入自动转换为数字，你可以在 <code>v-model</code> 后添加 <code>.number</code> 修饰符来管理输入：如果该值无法被 <code>parseFloat()</code> 处理，那么将返回原始值。</p><p><code>number</code> 修饰符会在输入框有 <code>type="number"</code> 时自动启用。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="组件基础">组件基础</h2><h3 id="单文件组件">单文件组件</h3><p>Vue 单文件组件（又名 <code>*.vue</code> 文件，缩写为 <strong>SFC</strong>）是一种特殊的文件格式，它允许将 Vue 组件的模板、逻辑 <strong>与</strong> 样式封装在单个文件中</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;h3&gt;单文件组件&lt;/h3&gt;&lt;/template&gt;&lt;script&gt;export default {    name:"MyComponent"}&lt;/script&gt;&lt;style scoped&gt;h3{    color: red;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ref模板引用"><code>ref</code>模板引用</h2><p><a href="https://cn.vuejs.org/guide/essentials/template-refs.html">https://cn.vuejs.org/guide/essentials/template-refs.html</a></p><p>虽然 Vue 的声明性渲染模型为你抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 <code>ref</code> attribute：</p><p><code>ref</code> 是一个特殊的 attribute， 它允许我们在一个特定的 DOM 元素或子组件实例被挂载后，获得对它的直接引用。</p><p>这可能很有用，比如说在组件挂载时将焦点设置到一个 input 元素上，或在一个元素上初始化一个第三方库。</p><h3 id="访问模板引用">访问模板引用</h3><p>挂载结束后引用都会被暴露在 <code>this.$refs</code> 之上：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  mounted() {    this.$refs.input.focus()  }}&lt;/script&gt;&lt;template&gt;  &lt;input ref="input" /&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，你只可以<strong>在组件挂载后</strong>才能访问模板引用。如果你想在模板中的表达式上访问 <code>$refs.input</code>，在初次渲染时会是 <code>null</code>。这是因为在初次渲染前这个元素还不存在呢！</p><h3 id="v-for-中的模板引用"><a href="https://cn.vuejs.org/guide/essentials/template-refs.html#refs-inside-v-for"><code>v-for</code> 中的模板引用</a></h3><blockquote><p>需要 v3.2.25 及以上版本</p></blockquote><p>当在 <code>v-for</code> 中使用模板引用时，相应的引用中包含的值是一个数组：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  data() {    return {      list: [        /* ... */      ]    }  },  mounted() {    console.log(this.$refs.items)  }}&lt;/script&gt;&lt;template&gt;  &lt;ul&gt;    &lt;li v-for="item in list" ref="items"&gt;      {{ item }}    &lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>应该注意的是，ref 数组<strong>并不</strong>保证与源数组相同的顺序。</p></blockquote><h3 id="函数模板引用"><a href="https://cn.vuejs.org/guide/essentials/template-refs.html#function-refs">函数模板引用</a></h3><p>除了使用字符串值作名字，<code>ref</code> attribute 还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(el) =&gt; { /* 将 el 赋值给一个数据属性或 ref 变量 */ }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意我们这里需要使用动态的 <code>:ref</code> 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 <code>el</code> 参数会是 <code>null</code>。你当然也可以绑定一个组件方法而不是内联函数。</p><h3 id="组件上的-ref">组件上的 ref</h3><h2 id="组件基础-2">组件基础</h2><h3 id="加载组件">加载组件</h3><p>第一步：引入组件 <code>import MyComponentVue from './components/MyComponent.vue'</code></p><p>第二步：挂载组件 <code>components: { MyComponentVue }</code></p><p>第三步：显示组件 <code>&lt;my-componentVue /&gt;</code></p><h3 id="组件的嵌套关系">组件的嵌套关系</h3><p>通常一个应用会以一棵嵌套的组件树的形式来组织</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20231210205035429.png" alt="image-20231210205035429"></p><h2 id="Props组件交互">Props组件交互</h2><p>组件与组件之间是需要存在交互的，否则完全没关系，组件的意义就很小了</p><p><code>Prop</code> 是你可以在组件上注册的一些自定义 attribute</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;my-componentVue title="标题"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;h3&gt;单文件组件&lt;/h3&gt;    &lt;p&gt;{{ title }}&lt;/p&gt;&lt;/template&gt;&lt;script&gt;export default {    name:"MyComponent",    props:{        title:{            type:String,            default:""        }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Prop-类型">Prop 类型</h3><p>Prop传递参数其实是没有类型限制的</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">props: {  title: String,  likes: Number,  isPublished: Boolean,  commentIds: Array,  author: Object,  callback: Function}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>温馨提示</strong></p><p>数据类型为数组或者对象的时候，默认值是需要返回工厂模式</p></blockquote><h2 id="自定义事件组件交互">自定义事件组件交互</h2><p>自定义事件可以在组件中反向传递数据，<code>prop</code> 可以将数据从父组件传递到子组件，那么反向如何操作呢，就可以利用自定义事件实现 <code>$emit</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;h3&gt;单文件组件&lt;/h3&gt;    &lt;button @click="sendHandle"&gt;发送数据&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {    name: "MyComponent",    methods:{        sendHandle(){            this.$emit("onCustom","数据")        }    }}&lt;/script&gt;&lt;style scoped&gt;h3 {    color: red;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;my-componentVue @onCustom="getData" /&gt;&lt;/template&gt;&lt;script&gt;import MyComponentVue from './components/MyComponent.vue'export default {  name: 'App',  components: {    MyComponentVue  },  methods: {    getData(data) {      console.log(data);    }  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件生命周期">组件生命周期</h2><p>每个组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会</p><p>为了方便记忆，我们可以将他们分类：</p><p>创建时：<code>beforeCreate</code>、<code>created</code></p><p>渲染时：<code>beforeMount</code>、<code>mounted</code></p><p>更新时：<code>beforeUpdate</code>、<code>updated</code></p><p>卸载时：<code>beforeUnmount</code>、<code>unmounted</code></p><h2 id="Vue引入第三方">Vue引入第三方</h2><p><code>Swiper</code> 开源、免费、强大的触摸滑动插件</p><p><code>Swiper</code> 是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端</p><p><code>Swiper</code> 能实现触屏焦点图、触屏Tab切换、触屏轮播图切换等常用效果</p><blockquote><p><strong>温馨提示</strong></p><p>官方文档：<a href="https://swiperjs.com/vue">https://swiperjs.com/vue</a></p><p>安装指定版本: <code>npm instal --save swiper@8.1.6</code></p></blockquote><h3 id="基础实现">基础实现</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="hello"&gt;    &lt;swiper class="mySwiper"&gt;      &lt;swiper-slide&gt;Slide 1&lt;/swiper-slide&gt;      &lt;swiper-slide&gt;Slide 2&lt;/swiper-slide&gt;      &lt;swiper-slide&gt;Slide 3&lt;/swiper-slide&gt;    &lt;/swiper&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { Swiper, SwiperSlide } from 'swiper/vue';import 'swiper/css';export default {  name: 'HelloWorld',  components: {    Swiper,    SwiperSlide,  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加指示器">添加指示器</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="hello"&gt;    &lt;swiper class="mySwiper" :modules="modules" :pagination="{ clickable: true }"&gt;      &lt;swiper-slide&gt;        &lt;img src="../assets/logo.png" alt=""&gt;      &lt;/swiper-slide&gt;      &lt;swiper-slide&gt;        &lt;img src="../assets/logo.png" alt=""&gt;      &lt;/swiper-slide&gt;      &lt;swiper-slide&gt;        &lt;img src="../assets/logo.png" alt=""&gt;      &lt;/swiper-slide&gt;    &lt;/swiper&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { Pagination } from 'swiper';import { Swiper, SwiperSlide } from 'swiper/vue';import 'swiper/css';import 'swiper/css/pagination';export default {  name: 'HelloWorld',  data(){    return{      modules: [ Pagination ]    }  },  components: {    Swiper,    SwiperSlide,  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Axios网络请求">Axios网络请求</h2><p>Axios 是一个基于 promise 的网络请求库</p><h3 id="安装">安装</h3><p>Axios的应用是需要单独安装的 <code>npm install --save axios</code></p><h3 id="引入">引入</h3><p>组件中引入: <code>import axios from "axios"</code></p><p>全局引用:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$axios <span class="token operator">=</span> axiosapp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">// 在组件中调用</span><span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络请求基本示例">网络请求基本示例</h3><h4 id="get请求">get请求</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://iwenwiki.com/api/blueberrypai/getChengpinDetails.php"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="post请求">post请求</h4><blockquote><p><strong>温馨提示</strong></p><p>post请求参数是需要额外处理的</p><ol><li>安装依赖: <code>npm install --save querystring</code></li><li>转换参数格式: <code>qs.stringify({})</code></li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"http://iwenwiki.com/api/blueberrypai/login.php"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">user_id</span><span class="token operator">:</span><span class="token string">"iwen@qq.com"</span><span class="token punctuation">,</span>        <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">"iwen123"</span><span class="token punctuation">,</span>        <span class="token literal-property property">verification_code</span><span class="token operator">:</span><span class="token string">"crfvw"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快捷方案">快捷方案</h3><h4 id="get请求-2">get请求</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://iwenwiki.com/api/blueberrypai/getChengpinDetails.php"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="post请求-2">post请求</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://iwenwiki.com/api/blueberrypai/login.php"</span><span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">user_id</span><span class="token operator">:</span> <span class="token string">"iwen@qq.com"</span><span class="token punctuation">,</span>      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">"iwen123"</span><span class="token punctuation">,</span>      <span class="token literal-property property">verification_code</span><span class="token operator">:</span> <span class="token string">"crfvw"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Axios网络请求封装">Axios网络请求封装</h2><p>在日常应用过程中，一个项目中的网络请求会很多，此时一般采取的方案是将网络请求封装起来</p><p>在<code>src</code>目录下创建文件夹<code>utils</code>，并创建文件<code>request</code>，用来存储网络请求对象 <code>axios</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">"querystring"</span><span class="token keyword">const</span> <span class="token function-variable function">errorHandle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"语义有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">401</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">403</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器拒绝访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">404</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"地址错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">500</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器遇到意外"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">502</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器无响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">config</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            config<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> response <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">;</span>        <span class="token function">errorHandle</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>response<span class="token punctuation">.</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> instance<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>src</code>目录下创建文件夹<code>api</code>，并创建文件<code>index</code>和<code>path</code>分别用来存放网络请求方法和请求路径</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// path.js</span><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span><span class="token string">"http://iwenwiki.com"</span><span class="token punctuation">,</span>    <span class="token literal-property property">chengpin</span><span class="token operator">:</span><span class="token string">"/api/blueberrypai/getChengpinDetails.php"</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"./path"</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"../utils/request"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">getChengpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>baseUrl <span class="token operator">+</span> path<span class="token punctuation">.</span>chengpin<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中直接调用网络请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">"../api/index"</span>api<span class="token punctuation">.</span><span class="token function">getChengpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络请求跨域解决方案">网络请求跨域解决方案</h2><p>JS采取的是同源策略</p><p>同源策略是浏览器的一项安全策略，浏览器只允许js 代码请求和当前所在服务器域名,端口,协议相同的数据接口上的数据,这就是同源策略.</p><p>也就是说，当协议、域名、端口任意一个不相同时，都会产生跨域问题，所以又应该如何解决跨域问题呢</p><h3 id="跨域错误提示信息">跨域错误提示信息</h3><h3 id="目前主流的跨域解决方案有两种：">目前主流的跨域解决方案有两种：</h3><ol><li>后台解决：cors</li><li>前台解决：proxy</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'&lt;url&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>温馨提示</strong></p><p>解决完跨域配置之后，要记得重启服务器才行哦！</p></blockquote><h2 id="Vue引入路由配置">Vue引入路由配置</h2><p>在Vue中，我们可以通过<code>vue-router</code>路由管理页面之间的关系</p><p>Vue Router 是 Vue.js 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举</p><h3 id="在Vue中引入路由">在Vue中引入路由</h3><p>第一步：安装路由 <code>npm install --save vue-router</code></p><p>第二步：配置独立的路由文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> HomeView <span class="token keyword">from</span> <span class="token string">'../views/HomeView.vue'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> HomeView  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/AboutView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：引入路由到项目</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第四步：指定路由显示入口 <code>&lt;router-view/&gt;</code></p><p>第五步：指定路由跳转</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to="/"&gt;Home&lt;/router-link&gt; |&lt;router-link to="/about"&gt;About&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="路由传递参数">路由传递参数</h2><p>页面跳转过程中，是可以携带参数的，这也是很常见的业务</p><p>例如：在一个列表项，点击进入查看每个列表项的详情</p><p>第一步：在路由配置中指定参数的<code>key</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/list/:name"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"list"</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/ListView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：在跳转过程中携带参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li&gt;&lt;router-link to="/list/内蒙"&gt;内蒙旅游十大景区&lt;/router-link&gt;&lt;/li&gt;&lt;li&gt;&lt;router-link to="/list/北京"&gt;北京旅游十大景区&lt;/router-link&gt;&lt;/li&gt;&lt;li&gt;&lt;router-link to="/list/四川"&gt;四川旅游十大景区&lt;/router-link&gt;&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三步：在详情页面读取路由携带的参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;p&gt;{{ $route.params.name }}城市旅游景区详情&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="嵌套路由配置">嵌套路由配置</h2><p>路由嵌套是非常常见的需求</p><p>第一步：创建子路由要加载显示的页面</p><p>第二步：在路由配置文件中添加子路由配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/news"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"news"</span><span class="token punctuation">,</span>    <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">"/news/baidu"</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/NewsView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>       <span class="token punctuation">{</span>       <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"baidu"</span><span class="token punctuation">,</span>            <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/NewsList/BaiduNews.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">{</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"wangyi"</span><span class="token punctuation">,</span>            <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/NewsList/WangyiNews.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：指定子路由显示位置<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><p>第四步：添加子路由跳转链接</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to="/news/baidu"&gt;百度新闻&lt;/router-link&gt; | &lt;router-link to="/news/wangyi"&gt;网易新闻&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第五步：重定向配置 <code>redirect:"/news/baidu"</code></p><h2 id="Vue状态管理-Vuex">Vue状态管理(Vuex)</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>简单来说，状态管理可以理解成为了更方便的管理组件之间的数据交互，提供了一个集中式的管理方案，任何组件都可以按照指定的方式进行读取和改变数据</p><img src="imgs/image-20220530160524287.png" alt="image-20220530160524287" style="zoom:50%;"><h3 id="引入Vuex的步骤">引入Vuex的步骤</h3><p>第一步：安装Vuex <code>npm install --save vuex</code></p><p>第二步：配置Vuex文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：在主文件中引入Vuex</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第四步：在组件中读取状态</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;p&gt;counter:{{ $store.state.counter }}&lt;/p&gt;// 或者import { mapState } from 'vuex';computed:{    ...mapState(["counter"])}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue状态管理核心-Vuex">Vue状态管理核心(Vuex)</h2><p>最常用的核心概念包含: <code>State</code>、<code>Getter</code>、<code>Mutation</code>、<code>Action</code></p><h3 id="Getter">Getter</h3><p>对Vuex中的数据进行过滤</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> state<span class="token punctuation">.</span>counter <span class="token operator">:</span> <span class="token string">"counter小于0，不符合要求"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"getCount"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mutation">Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的事件类型 (type)和一个回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> num    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"setCounter"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// this.$store.commit("setCounter",20)</span>  <span class="token comment">// 或者</span>      <span class="token comment">// this.setCounter(10)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Action">Action</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态</li><li>Action 可以包含任意异步操作</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> state<span class="token punctuation">.</span>counter <span class="token operator">:</span> <span class="token string">"counter小于0，不符合要求"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> num    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">asyncSetCount</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://iwenwiki.com/api/generator/list.php"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"setCounter"</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapMutations<span class="token punctuation">,</span>mapGetters<span class="token punctuation">,</span>mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"asyncSetCount"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">clickAsyncHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// this.$store.dispatch("asyncSetCount")</span>        <span class="token comment">// 或者</span>        <span class="token comment">// this.asyncSetCount()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue3新特性1">Vue3新特性1</h2><p>Vue3是目前Vue的最新版本，自然也是新增了很多新特性</p><h3 id="六大亮点">六大亮点</h3><ul><li>Performance：性能更比Vue 2.0强。</li><li>Tree shaking support：可以将无用模块“剪辑”，仅打包需要的。</li><li><strong>Composition API：组合API</strong></li><li>Fragment, Teleport, Suspense：“碎片”，Teleport即Protal传送门，“悬念”</li><li>Better TypeScript support：更优秀的Ts支持</li><li>Custom Renderer API：暴露了自定义渲染API</li></ul><h3 id="ref或者reactive">ref或者reactive</h3><p>在2.x中通过组件data的方法来定义一些当前组件的数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'iwen'</span><span class="token punctuation">,</span>    <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在3.x中通过ref或者reactive创建响应式对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span>reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"iwen"</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">list</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        name<span class="token punctuation">,</span>        state    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="methods中定义的方法写在setup">methods中定义的方法写在setup()</h3><p>在2.x中methods来定义一些当前组件内部方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在3.x中直接在setup方法中定义并return</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">http</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token comment">// do something</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      http    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setup-中使用props和context">setup()中使用props和context</h3><p>在2.x中，组件的方法中可以通过this获取到当前组件的实例，并执行data变量的修改，方法的调用，组件的通信等等，但是在3.x中，setup()在beforeCreate和created时机就已调用，无法使用和2.x一样的this，但是可以通过接收setup(props,ctx)的方法，获取到当前组件的实例和props</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue3新特性2">Vue3新特性2</h2><h3 id="在setup中使生命周期函">在setup中使生命周期函</h3><p>你可以通过在生命周期钩子前面加上 “on” 来访问组件的生命周期钩子。</p><p>下表包含如何在 setup () 内部调用生命周期钩子</p><table><thead><tr><th>Options API</th><th>Hook inside setup</th></tr></thead><tbody><tr><td>beforeCreate</td><td>Not needed*</td></tr><tr><td>created</td><td>Not needed*</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// mounted</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Component is mounted!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Provide-Inject">Provide / Inject</h3><ul><li>provide() 和 inject() 可以实现嵌套组件之间的数据传递。</li><li>这两个函数只能在 setup() 函数中使用。</li><li>父级组件中使用 provide() 函数向下传递数据。</li><li>子级组件中使用 inject() 获取上层传递过来的数据。</li><li>不限层级</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"customVal"</span><span class="token punctuation">,</span> <span class="token string">"我是父组件向子组件传递的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> customVal <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"customVal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      customVal    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Fragment">Fragment</h3><p>Fragment翻译为：“碎片”</p><ul><li>不再限于模板中的单个根节点</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;img alt="Vue logo" src="./assets/logo.png"&gt;  &lt;HelloWorld msg="Welcome to Your Vue.js App" /&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue3加载Element-plus">Vue3加载Element-plus</h2><p>Element，一套为开发者、设计师和产品经理准备的基于 <code>Vue 2.0</code> 的桌面端组件库</p><p>Element Plus 基于 <code>Vue 3</code>，面向设计师和开发者的组件库</p><h3 id="安装Element-Plus">安装Element-Plus</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install element<span class="token operator">-</span>plus <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="完整引用">完整引用</h3><p>如果你对打包后的文件大小不是很在乎，那么使用完整导入会更方便</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按需导入">按需导入</h3><p>按需导入才是我们的最爱，毕竟在真实的应用场景中并不是每个组件都会用到，这会造成不小的浪费</p><p>首先你需要安装<code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code>这两款插件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">-</span><span class="token constant">D</span> unplugin<span class="token operator">-</span>vue<span class="token operator">-</span>components unplugin<span class="token operator">-</span>auto<span class="token operator">-</span><span class="token keyword">import</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改<code>vue.config.js</code>配置文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/cli-service'</span><span class="token punctuation">)</span><span class="token keyword">const</span> AutoImport <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'unplugin-auto-import/webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Components <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'unplugin-vue-components/webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> ElementPlusResolver <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'unplugin-vue-components/resolvers'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">resolvers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">resolvers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，可以直接在组件中使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span><span class="token punctuation">&gt;</span></span>Default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Primary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实时效果反馈</strong></p><p><strong>1. 在Vue3项目中引入饿了么UI组件库，下来命令正确的是：</strong></p><p><font style="background-color:rgb(233, 30, 100)">A</font>   <code>npm install --save element-iu</code></p><p><font style="background-color:rgb(255, 197, 10)">B</font>   <code>vue add element</code></p><p><font style="background-color:#8bc34a">C</font>   <code>npm install element-plus --save</code></p><p><font style="background-color:rgb(2, 170, 244);">D</font>   <code>vue add element-plus</code></p><p><strong>答案</strong></p><p>1=&gt;C</p><h2 id="Vue3加载Element-plus的字体图标">Vue3加载Element-plus的字体图标</h2><p><code>Element-plus</code>不仅仅是提供了各种组件，同时还提供了一整套的字体图标方便开发者使用</p><h3 id="安装icons字体图标">安装<code>icons</code>字体图标</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install @element<span class="token operator">-</span>plus<span class="token operator">/</span>icons<span class="token operator">-</span>vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="全局注册">全局注册</h3><p>在项目根目录下，创建<code>plugins</code>文件夹，在文件夹下创建文件<code>icons.js</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> components <span class="token keyword">from</span> <span class="token string">"@element-plus/icons-vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function-variable function">install</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> components<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> componentConfig <span class="token operator">=</span> components<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>componentConfig<span class="token punctuation">.</span>name<span class="token punctuation">,</span> componentConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入文件">引入文件</h3><p>在<code>main.js</code>中引入<code>icons.js</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> elementIcon <span class="token keyword">from</span> <span class="token string">"./plugins/icons"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>elementIcon<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用方式">使用方式</h3><p>接下来就可以直接在组件中引入使用了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>expand<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#409EFC<span class="token punctuation">"</span></span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>expand</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模板语法&quot;&gt;模板语法&lt;/h2&gt;
&lt;h3 id=&quot;swig￼102-文本&quot;&gt;&lt;code&gt;{{ msg }}&lt;/code&gt;:文本&lt;/h3&gt;
&lt;p&gt;数据绑定最常见的形式就是使用“Mustache” (双大括号) 语法的文本插值&lt;/p&gt;
&lt;pre class=&quot;line-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows 将jar注册成windows服务</title>
    <link href="https://hmxyl.github.io/20231121/124a5165.html"/>
    <id>https://hmxyl.github.io/20231121/124a5165.html</id>
    <published>2023-11-21T07:39:23.000Z</published>
    <updated>2023-11-21T14:25:50.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载Windows-Service-Wrapper">下载Windows Service Wrapper</h2><p>下载地址：<a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1242201-20191226150203417-575070520.png" alt="img"></p><h2 id="安装windows服务">安装windows服务</h2><ol><li><p>将java jar包和下载的WinSW.NET4.exe放在同一个文件夹目录下面</p></li><li><p>重命名WinSW.NET4.exe为MyApp.exe(这个可以任意取)，新建个MyApp.xml(这个必须和前者的exe文件名字相同)</p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5C1242201-20191226150309464-1767183682-1700576177250-7.png" alt="img"></p></li><li><p>编辑MyApp.xml文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>MyApp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>MyApp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>This is MyApp.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executable</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executable</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">&gt;</span></span>-jar C:\Users\tanhw119214\Desktop\MyApp\MyApp.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开机启动 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>startmode</span><span class="token punctuation">&gt;</span></span>Automatic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>startmode</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logpath</span><span class="token punctuation">&gt;</span></span>C:\Users\tanhw119214\Desktop\MyApp\logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logpath</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roll-by-time<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>yyyyMMdd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C:\Users\tanhw119214\Desktop\MyApp 为你要要注册服务的文件的父路径</p></li><li><p>进入根目录下面，执行以下cmd命令，注册服务。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">MyApp.exe install <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>然后在服务里面就能找到这个实例了</p><pre class="line-numbers language-none"><code class="language-none">启动命令net start MyApp停止命令net stop MyApp卸载命令sc delete MyApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载Windows-Service-Wrapper&quot;&gt;下载Windows Service Wrapper&lt;/h2&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/winsw/winsw/releases&quot;&gt;https://github.c</summary>
      
    
    
    
    <category term="操作系统" scheme="https://hmxyl.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Windows" scheme="https://hmxyl.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="https://hmxyl.github.io/20231108/c8f562d1.html"/>
    <id>https://hmxyl.github.io/20231108/c8f562d1.html</id>
    <published>2023-11-08T02:49:23.000Z</published>
    <updated>2023-11-08T06:34:33.709Z</updated>
    
    <content type="html"><![CDATA[<h1>定义函数</h1><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p><p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p></blockquote><p>如果你已经把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>文件了，那么，可以在该文件的当前目录下启动Python解释器，用<code>from abstest import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abstest</code>是文件名（不含<code>.py</code>扩展名）：</p><h1>函数定义详解</h1><p>函数定义支持可变数量的参数。这里列出三种可以组合使用的形式。</p><h2 id="默认值参数">默认值参数</h2><p>为参数指定默认值是非常有用的方式。调用函数时，可以使用比定义时更少的参数，例如：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;定义函数&lt;/h1&gt;
&lt;p&gt;在Python中，定义一个函数要使用&lt;code&gt;def&lt;/code&gt;语句，依次写出函数名、括号、括号中的参数和冒号&lt;code&gt;:&lt;/code&gt;，然后，在缩进块中编写函数体，函数的返回值用&lt;code&gt;return&lt;/code&gt;语句返回。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/Python/"/>
    
    
    <category term="Python基础" scheme="https://hmxyl.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python内置函数</title>
    <link href="https://hmxyl.github.io/20231106/d59aed63.html"/>
    <id>https://hmxyl.github.io/20231106/d59aed63.html</id>
    <published>2023-11-06T02:49:23.000Z</published>
    <updated>2023-11-08T03:54:46.916Z</updated>
    
    <content type="html"><![CDATA[<h1>range()</h1><p>内置函数 <a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range"><code>range()</code></a> 用于生成等差数列：</p><ol><li><p>定义</p><p><em>class</em> <strong>range</strong>(<em>stop</em>)</p><p><em>class</em> <strong>range</strong>(<em>start</em>, <em>stop</em>[, <em>step</em>])</p></li><li><p>例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>说明</p><p><a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range"><code>range()</code></a> 返回的对象在很多方面和列表的行为一样，但其实它和列表不一样。该对象只有在被迭代时才一个一个地返回所期望的列表项，并没有真正生成过一个含有全部项的列表，从而节省了空间。</p></li></ol><h1>type()</h1><h1>isinstance()</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;range()&lt;/h1&gt;
&lt;p&gt;内置函数 &lt;a href=&quot;https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range&quot;&gt;&lt;code&gt;range()&lt;/code&gt;&lt;/a&gt; 用于生成等差数列：&lt;/p&gt;
&lt;ol</summary>
      
    
    
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/Python/"/>
    
    
    <category term="Python基础" scheme="https://hmxyl.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://hmxyl.github.io/20231106/99832f47.html"/>
    <id>https://hmxyl.github.io/20231106/99832f47.html</id>
    <published>2023-11-06T02:49:23.000Z</published>
    <updated>2023-11-08T03:54:07.005Z</updated>
    
    <content type="html"><![CDATA[<h1><a href="https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#">语法</a></h1><h2 id="编码声明">编码声明</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="运算符">运算符</h2><p>运算符列表</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">+       -       *       **      /       //      %      @&lt;&lt;      &gt;&gt;      &amp;       |       ^       ~       :=&lt;       &gt;       &lt;=      &gt;=      ==      !=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>符号</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td></td></tr><tr><td>-</td><td>减法</td><td></td></tr><tr><td>*</td><td>乘法</td><td></td></tr><tr><td>/</td><td>除法，总是返回浮点数</td><td></td></tr><tr><td>x ** y</td><td><em>x</em> 的 <em>y</em> 次幂</td><td>&gt;&gt;&gt; 5 ** 2 25</td></tr><tr><td>x // y</td><td>x 除以 y 的商数</td><td>&gt;&gt;&gt; 5 // 2 2</td></tr><tr><td>x % 5</td><td>x 除以 y 的余数</td><td></td></tr><tr><td>-x</td><td><em>x</em> 取反</td><td></td></tr><tr><td>+x</td><td><em>x</em> 不变</td><td></td></tr></tbody></table><p>交互模式下，上次输出的表达式会赋给变量 <code>_</code>。把 Python 当作计算器时，用该变量实现下一步计算更简单，例如：</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tax <span class="token operator">=</span> <span class="token number">12.5</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">=</span> <span class="token number">100.50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">*</span> tax<span class="token number">12.5625</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">+</span> _<span class="token number">113.0625</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">round</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">113.06</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最好把该变量 <code>_</code>当作只读类型。不要为它显式赋值，否则会创建一个同名独立局部变量，该变量会用它的魔法行为屏蔽内置变量。</p><h2 id="分隔符">分隔符</h2><p>以下形符在语法中为分隔符：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">(       )       [       ]       {       },       :       .       ;       @       =       -&gt;+=      -=      *=      /=      //=     %=      @=&amp;=      |=      ^=      &gt;&gt;=     &lt;&lt;=     **=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>句点也可以用于浮点数和虚数字面值。</p><p>三个连续句点表示省略符。</p><p>列表后半部分是增强赋值操作符，用作词法分隔符，但也可以执行运算。</p><p>以下 ASCII 字符具有特殊含义，对词法分析器有重要意义：</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python">'       "       <span class="token comment">#       \</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下 ASCII 字符不用于 Python。在字符串字面值或注释外使用时，将直接报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$       ?       `<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关键字">关键字</h2><p>关键字、软关键字、保留的标识符类</p><h3 id="关键字-2">关键字</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">False      await      else       import     passNone       break      except     in         raiseTrue       class      finally    is         returnand        continue   for        lambda     tryas         def        from       nonlocal   whileassert     del        global     not        withasync      elif       if         or         yield<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="软关键字">软关键字</h3><p>某些标识符仅在特定上下文中被保留。 它们被称为 <em>软关键字</em>。</p><p><code>match</code>, <code>case</code> 和 <code>_</code> 等标识符在模式匹配语句相关的上下文中具有相当于关键字的语义，但这种区分是在解析器层级完成，而不是在形符化的时候。</p><p>作为软关键字，它们能够与模式匹配一起使用，同时仍然保持与使用 <code>match</code>, <code>case</code> 和 <code>_</code> 作为标识符名称的现有代码的兼容性。</p><h3 id="保留的标识符类">保留的标识符类</h3><p>某些标识符类（除了关键字）具有特殊含义。这些类的命名模式以下划线字符开头，并以下划线结尾：</p><table><thead><tr><th>标识符</th><th>说明</th></tr></thead><tbody><tr><td><code>_*</code></td><td>不会被 from module import * 所导入。</td></tr><tr><td><code>_</code></td><td>在 match 语句内部的 case 模式中，_ 是一个 软关键字，它表示 通配符。<br>在此之外，交互式解释器会将最后一次求值的结果放到变量 _ 中。 （它与 print 等内置函数一起被存储于 builtins 模块。）<br>在其他地方，_ 是一个常规标识符。 <br>它常常被用来命名 “特殊” 条目，但对 Python 本身来说毫无特殊之处。如<code>_</code> 常用于连接国际化文本；详见 gettext 模块文档。<br>它还经常被用来命名无需使用的变量。</td></tr><tr><td><code>__*__</code></td><td>系统定义的名称，通常简称为 “dunder” 。这些名称由解释器及其实现（包括标准库）定义。<br>现有系统定义名称相关的论述详见 <a href="https://docs.python.org/zh-cn/3.11/reference/datamodel.html#specialnames">特殊方法名称</a> 等章节。Python 未来版本中还将定义更多此类名称。任何情况下，<em>任何</em> 不显式遵从 <code>__*__</code> 名称的文档用法，都可能导致无警告提示的错误。</td></tr><tr><td><code>__*</code></td><td>类的私有名称。类定义时，此类名称以一种混合形式重写，以避免基类及派生类的 “私有” 属性之间产生名称冲突。详见 标识符（名称）。</td></tr></tbody></table><h1>数据类型和变量</h1><p>Python3 中常见的数据类型有：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>bool（布尔类型）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；</li><li>**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>此外还有一些高级的数据类型，如: 字节数组类型(bytes)。</p><h2 id="整数-int">整数:<a href="https://docs.python.org/zh-cn/3.11/library/functions.html#int"><code>int</code></a></h2><p>Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 交互窗口输入（默认10进制）</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 输入数字：<span class="token number">123</span><span class="token number">123</span><span class="token comment"># 指定2进制数据转化为10进制</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮点数">浮点数</h2><h3 id="float"><a href="https://docs.python.org/zh-cn/3.11/library/functions.html#float"> <code>float</code></a></h3><p>如果该参数是一个字符串，在去除前导和尾随的空格之后，输入必须为符合以下语法的 <code>floatvalue</code> 产生规则:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sign        ::=  "+" | "-"infinity    ::=  "Infinity" | "inf"nan         ::=  "nan"digitpart   ::=  digit (["_"] digit)*number      ::=  [digitpart] "." digitpart | digitpart ["."]exponent    ::=  ("e" | "E") ["+" | "-"] digitpartfloatnumber ::=  number [exponent]floatvalue  ::=  [sign] (floatnumber | infinity | nan)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>符号标记</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>sign ::= “+”</td><td>正，负</td><td>&gt;&gt;&gt; float(‘+1.23’) <br>1.23<br>&gt;&gt;&gt; float(‘-1.23\n’)  <br>-1.23<br>&gt;&gt;&gt; float(‘-123\n’)   <br>-123.0</td></tr><tr><td>(“e” | “E”) [“+” | “-”] 数字部分</td><td>科学计数</td><td>&gt;&gt;&gt; float(1e3)<br>1000.0 <br>&gt;&gt;&gt; float(‘1e3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘1e+3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘+1e3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘-1e3’)<br>-1000.0 <br>&gt;&gt;&gt; float(‘1e-3’)<br>0.001 <br>&gt;&gt;&gt; float(1e-3)<br>0.001 <br>&gt;&gt;&gt; float(1E-3)<br>0.001</td></tr><tr><td>infinity ::= “Infinity” | “inf”</td><td>无穷大<br>1. 大小写不敏感<br>2.  需要为字符串，否则会报错</td><td>&gt;&gt;&gt; float(‘Infinity’)<br>inf<br>&gt;&gt;&gt; float(‘InfinitY’)<br>inf<br>&gt;&gt;&gt; float(‘-Inf’)<br>-inf</td></tr><tr><td>not-a-number</td><td>NaN<br>1. 大小写不敏感<br>2. 需要为字符串，否则会报错</td><td>&gt;&gt;&gt; float(‘NAN’)<br>nan<br>&gt;&gt;&gt; float(‘NaN’)<br>nan<br>&gt;&gt;&gt; float(‘-nan’)<br>nan</td></tr></tbody></table><h3 id="complex-：复数"><a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#typesnumeric"><code>complex</code></a> ：复数</h3><p>后缀 <code>j</code> 或 <code>J</code> 用于表示虚数（例如 <code>3+5j</code> ）</p><table><thead><tr><th></th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>complex(re, im)</td><td>一个带有实部 <em>re</em> 和虚部 <em>im</em> 的复数。 <em>im</em> 默认为0</td><td>&gt;&gt;&gt; complex(3, 2)<br>(3+2j)</td></tr><tr><td>c.conjugate()</td><td>复数 <em>c</em> 的共轭</td><td>&gt;&gt;&gt; complex(3, 2).conjugate()<br>(3-2j)</td></tr></tbody></table><h3 id="Decimal：十进制浮点运算"><a href="https://docs.python.org/zh-cn/3.11/library/decimal.html#decimal-objects"><code>Decimal</code></a>：十进制浮点运算</h3><p><em>class</em> decimal.<strong>Decimal</strong>(<em>value=‘0’</em>, <em>context=None</em>)</p><p><em>value</em> 可以是整数，字符串，元组，<a href="https://docs.python.org/zh-cn/3.11/library/functions.html#float"><code>float</code></a> ，或另一个 <a href="https://docs.python.org/zh-cn/3.11/library/decimal.html#decimal.Decimal"><code>Decimal</code></a> 对象。 如果没有给出 <em>value</em>，则返回 <code>Decimal('0')</code>。</p><p>如果 <em>value</em> 是一个字符串，它应该在前导和尾随空格字符以及下划线被删除之后符合十进制数字字符串语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> decimal <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 因为浮点数据的不准确性</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.1999999999999999555910790149937383830547332763671875'</span><span class="token punctuation">)</span><span class="token comment"># 通过设定有效数字，限定结果样式，保留六个有效数字</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>Decimal<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.142857'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span>Decimal<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> Decimal<span class="token punctuation">(</span><span class="token string">'142.857'</span><span class="token punctuation">)</span><span class="token comment"># 四舍五入，保留两位小数</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token string">'50.5679'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Decimal<span class="token punctuation">(</span><span class="token string">'50.57'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token string">'50.5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Decimal<span class="token punctuation">(</span><span class="token string">'50.50'</span><span class="token punctuation">)</span><span class="token comment"># Decimal 结果转化为string</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'50.5679'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token string">'50.57'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">取整问题：ROUND_CEILING 总是趋向无穷大向上取整ROUND_DOWN　总是趋向0取整ROUND_FLOOR 总是趋向负无穷大向下取整ROUND_HALF_DOWN　如果最后一个有效数字大于或等于5则朝0反方向取整；否则，趋向0取整ROUND_HALF_EVEN　类似于ROUND_HALF_DOWN，不过，如果最后一个有效数字值为5，则会检查前一位。偶数值会导致结果向下取整，奇数值导致结果向上取整ROUND_HALF_UP 类似于ROUND_HALF_DOWN，不过如果最后一位有效数字为5，值会朝0的反方向取整ROUND_UP　朝0的反方向取整ROUND_05UP　如果最后一位是0或5，则朝0的反方向取整；否则向0取整<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fractions-—-分数"><a href="https://docs.python.org/zh-cn/3.11/library/fractions.html#module-fractions"><code>fractions</code></a> — 分数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> fractions <span class="token keyword">import</span> Fraction<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'3/1'</span><span class="token punctuation">)</span> Fraction<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'3/1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'6/2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'6/1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'3/7'</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">' -3/7 '</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'1.414213 \t\n'</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'-.125'</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'7e-6'</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">2.25</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串：String">字符串：String</h2><p>可以用成对的单引号、双引号、三重引号来表示</p><p>字符串由<a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#str"><code>str</code></a> 类型表示。</p><ol><li><p>如果不希望前置 <code>\</code> 的字符转义成特殊字符，可以使用 <em>原始字符串</em>，在引号前添加 <code>r</code> 即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C:\some\name'</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\someame<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'C:\some\name'</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\some\name<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>      <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll<span class="token string">'12'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>原始字符串还有一个微妙的限制：一个原始字符串不能以奇数个 <code>\</code> 字符结束</p><p>以奇数个反斜杠结尾的原始字符串将会转义用于标记字符串的引号</p><p>请参阅 <a href="https://docs.python.org/zh-cn/3.11/faq/programming.html#faq-programming-raw-string-backslash">此 FAQ 条目</a> 了解更多信息及绕过的办法。</p></li><li><p>字符串字面值可以多行。使用三重引号：“”“…”“” 或 ‘’‘…’‘’</p></li></ol><h3 id="格式化字符串">格式化字符串</h3><h4 id="占位符">占位符</h4><p>用<code>%</code>实现。当<code>%</code>作为普通字符时，用<code>%%</code>来表示一个<code>%</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 只有一个占位符，括号可以省略</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> <span class="token string">'world'</span><span class="token string">'Hello, world'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hi, %s, you have $%d.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token string">'Hi, Michael, you have $1000000.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, %s, you have $%d. %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hi<span class="token punctuation">,</span> Michael<span class="token punctuation">,</span> you have $<span class="token number">1000000.</span> <span class="token number">1.000000</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %d%%'</span> <span class="token operator">%</span> <span class="token number">1</span><span class="token punctuation">)</span>  percent<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">%</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %.2f%%'</span> <span class="token operator">%</span> <span class="token number">1.345</span><span class="token punctuation">)</span>  percent<span class="token punctuation">:</span> <span class="token number">1.34</span><span class="token operator">%</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %.2f%%'</span> <span class="token operator">%</span> <span class="token number">1.346</span><span class="token punctuation">)</span> percent<span class="token punctuation">:</span> <span class="token number">1.35</span><span class="token operator">%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见的占位符有：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td><code>%s</code>会把任何数据类型转换为字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定浮点数的小数位数，不足补0，超出四舍五入</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%0.4f'</span> <span class="token operator">%</span> <span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token number">3.1416</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.2f'</span> <span class="token operator">%</span> <span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token number">3.14</span><span class="token comment"># 指定浮点数的小数位数，不足补0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.4f'</span> <span class="token operator">%</span> <span class="token number">3.1</span><span class="token punctuation">)</span><span class="token number">3.1000</span><span class="token comment"># 指定整数的最小占位数，不足补空格</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%2d'</span> <span class="token operator">%</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 指定整数的最小占位数，不足补0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%02d'</span><span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="f-string：格式字符串字面值"><a href="https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#formatted-string-literals">f-string：格式字符串字面值</a></h4><p>是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换.</p><p>指定了转换符时，表达式求值的结果会先转换，再格式化。转换符 <code>'!s'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#str"><code>str()</code></a> 转换求值结果，<code>'!r'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/functions.html#repr"><code>repr()</code></a>，<code>'!a'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/functions.html#ascii"><code>ascii()</code></a>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> <span class="token number">2.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The area of a circle with radius </span><span class="token interpolation"><span class="token punctuation">{</span>r<span class="token punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>The area of a circle <span class="token keyword">with</span> radius <span class="token number">2.5</span> <span class="token keyword">is</span> <span class="token number">19.62</span><span class="token comment">#使用'!r'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">"Fred"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"He said his name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">."</span></span><span class="token string">"He said his name is 'Fred'."</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"He said his name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">."</span></span>   <span class="token string">'He said his name is Fred.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> decimal<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> width <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> precision <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> value <span class="token operator">=</span> decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">"12.34567"</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"result: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token punctuation">{</span>width<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>precision<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token string">'result:      12.35'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">:</span><span class="token format-spec">#0x</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> <span class="token string">'0xf'</span><span class="token comment"># 格式化日期</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> today <span class="token operator">=</span> datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>today<span class="token punctuation">:</span><span class="token format-spec">%B %d, %Y</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token string">'January 27, 2017'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>today<span class="token operator">=</span><span class="token punctuation">:</span><span class="token format-spec">%B %d, %Y</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> <span class="token string">'today=January 27, 2017'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> line <span class="token operator">=</span> <span class="token string">"The mill's closed"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line<span class="token punctuation">}</span></span><span class="token string">"</span></span>    <span class="token string">"The mill's closed"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> <span class="token string">'line="The mill\'s closed"'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token format-spec">20</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token string">"line = The mill's closed   "</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line <span class="token operator">=</span> <span class="token conversion-option punctuation">!r</span><span class="token punctuation">:</span><span class="token format-spec">20</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token string">'line = "The mill\'s closed" '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="format">format()</h4><p>使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……</p><h3 id="内置函数">内置函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>len(‘asd’)</td><td>计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数</td></tr><tr><td>ord(‘A’)</td><td>返回单个字符的整数编码</td></tr><tr><td>chr(‘32’)</td><td>整数编码转换为对应的字符</td></tr><tr><td>‘ABC’.encode(‘ascii’)</td><td><code>str</code>转<code>bytes</code></td></tr><tr><td>b’ABC’.decode(‘ascii’)</td><td><code>bytes</code>转<code>str</code></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="布尔值：Bool">布尔值：Bool</h2><p>区分大小写</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; not TrueFalse&gt;&gt;&gt; not FalseTrue&gt;&gt;&gt; not 1 &gt; 2True&gt;&gt;&gt; 5 &gt; 3 and 3 &gt; 1True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="空值：None">空值：None</h2><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><h2 id="列表：List">列表：List</h2><p>list是一种有序的集合，可以随时添加和删除其中的元素。可以包含不同类型的元素。列表支持索引和切片查询</p><ol><li><p>定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token comment"># 嵌套列表（创建包含其他列表的列表）</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> n<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 末尾追加元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">+=</span> <span class="token string">'i'</span>      <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span class="token comment"># 把元素插入到指定的位置</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters  <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span class="token comment"># 合并操作</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>          <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token comment"># 修改元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters     <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token comment"># 切片删除元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters          <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token comment"># 删除末尾元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters          <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token string">'g'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token comment"># 删除指定位置元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">'b'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters        <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="元组：Tuple">元组：Tuple</h2><p>有序、不可变</p><ol><li><p>定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通定义</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> classmates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">)</span><span class="token comment"># 空</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> classmates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 一个元素（歧义）</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test<span class="token string">'test'</span><span class="token comment"># 一个元素（元组定义）</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只有1个元素的tuple定义时必须加一个逗号<code>,</code>，来消除歧义。而显示时，也会带上一个逗号<code>, </code></p></li><li><p>“可变的”tuple：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Y'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cspaces%2FgYzJOgqycOATew45KSSW%2Fuploads%2FAj60qA8UyPKxQFTtmmXx%2Fimage.png" alt="初始定义的tuple"></p><p>当我们把list的元素<code>'A'</code>和<code>'B'</code>修改为<code>'X'</code>和<code>'Y'</code>后，tuple变为：</p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cspaces%2FgYzJOgqycOATew45KSSW%2Fuploads%2FOYV5J5oQeGAYKW8rTnod%2Fimage.png" alt="修改后的tuple"></p><p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。</p><p>tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向<code>'a'</code>，就不能改成指向<code>'b'</code>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的。</p><p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p></li></ol><h2 id="字典：Dictionary">字典：Dictionary</h2><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p><ol><li><p>定义和赋值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">{</span><span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">{</span><span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token builtin">dict</span>  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果key不存在，dict就会报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">[</span><span class="token string">'Thomas'</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token string">'Thomas'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Thomas'</span> <span class="token keyword">in</span> d<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Thomas'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Thomas'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：返回<code>None</code>的时候Python的交互环境不显示结果。</p><p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除，如果key不存在，一样会报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token number">75</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">{</span><span class="token string">'Michael'</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Bob'</span> <span class="token keyword">in</span> d<span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token string">'Bob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="集合：Set">集合：Set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><p>要创建一个set，需要提供一个list作为输入集合：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>{1, 2, 3}</code>只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。</p><p>重复元素在set中自动被过滤：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>remove(key)</code>方法可以删除元素：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">&amp;</span> s2<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">|</span> s2<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>set和dict的唯一区别仅在于没有存储对应的value，但是，<strong>set的原理和dict一样</strong>，所以，<strong>同样不可以放入可变对象</strong>，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> unhashable <span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>控制流工具</h1><h2 id="if-语句">if 语句</h2><p>完整结构</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">&gt;</span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">&gt;</span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">&gt;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>if</code>判断条件还可以简写，比如写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code></p><h2 id="match-语句">match 语句</h2><p>版本3.10之后支持</p><p>模式匹配：只有第一个匹配的模式会被执行，并且它还可以提取值的组成部分（序列的元素或对象的属性）赋给变量。</p><h4 id="字面值匹配">字面值匹配</h4><p>最简单的形式是将一个主语值与一个或多个字面值进行比较：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def http_error(status):    match status:        case 400:            return "Bad request"        case 401 | 403 | 404:            return "Not allowed"        case 404:            return "Not found"        case 418:            return "I'm a teapot"        case _:            return "Something's wrong with the internet"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意最后一个代码块：“变量名” <code>_</code> 被作为 <em>通配符</em> 并必定会匹配成功。</p><p>如果没有 case 匹配成功，则不会执行任何分支。</p><p>你可以使用 <code>|</code> （“ or ”）在一个模式中组合几个字面值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">case</span> <span class="token number">401</span> <span class="token operator">|</span> <span class="token number">403</span> <span class="token operator">|</span> <span class="token number">404</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Not allowed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>在case中使用判断语句</strong></p><p>match语句还支持在分支条件中插入判断语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">match</span> a<span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'case 1'</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token keyword">if</span> flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'case 2'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token keyword">case</span> default<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'case default'</span><span class="token punctuation">,</span> default<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解包赋值">解包赋值</h4><p><code>match</code>语句除了可以匹配简单的单个值外，还可以匹配多个值、匹配一定范围，并且把匹配后的值绑定到变量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># point is an (x, y) tuple</span><span class="token keyword">match</span> point<span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Y=</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"X=</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"X=</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">, Y=</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Not a point"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token keyword">def</span> <span class="token function">where_is</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> point<span class="token punctuation">:</span>        <span class="token keyword">case</span> Point<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原点"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> Point<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span>yLine<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Y轴：Y=</span><span class="token interpolation"><span class="token punctuation">{</span>yLine<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">case</span> Point<span class="token punctuation">(</span>x<span class="token operator">=</span>xLine<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"X轴：X=</span><span class="token interpolation"><span class="token punctuation">{</span>xLine<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">case</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Somewhere else"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Not a point"</span><span class="token punctuation">)</span>where_is<span class="token punctuation">(</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列模式">序列模式</h4><p>与解包赋值类似，元组和列表模式具有完全相同的含义并且实际上都能匹配任意序列，区别是它们不能匹配迭代器或字符串。</p><p>序列模式支持扩展解包：<code>[x, y, *rest]</code> 和 <code>(x, y, *rest)</code> 和相应的解包赋值做的事是一样的。接在 <code>*</code> 后的名称也可以为 <code>_</code>，所以 <code>(x, y, *_)</code> 匹配含至少两项的序列，而不必绑定剩余的项。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">match_list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> s<span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"None"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Empty"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x={0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x={0},y={1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">*</span>rest<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x=%s, y=%s, rest=%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Not a list"</span><span class="token punctuation">)</span>match_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>match_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>match_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>match_list<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token comment"># 输出</span>x<span class="token operator">=</span><span class="token number">1</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> rest<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>Not a <span class="token builtin">list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="映射模式">映射模式</h4><p>映射模式：<code>{"bandwidth": b, "latency": l}</code> 从字典中捕获 <code>"bandwidth"</code> 和 <code>"latency"</code> 的值。额外的键会被忽略，这一点与序列模式不同。<code>**rest</code> 这样的解包也支持。（但 <code>**_</code> 将会是冗余的，故不允许使用。）</p><p>match实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dispatch_match</span><span class="token punctuation">(</span>operator<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> operator<span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">'add'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> y        <span class="token keyword">case</span> <span class="token string">'sub'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">-</span> y        <span class="token keyword">case</span> <span class="token string">'mul'</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> x <span class="token operator">*</span> y        <span class="token keyword">case</span> <span class="token string">'div'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">/</span> y        <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span>dispatch_match<span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dispatch_match<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token number">3</span><span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字典实现相同功能</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dispatch_dict</span><span class="token punctuation">(</span>operator<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">'add'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span>        <span class="token string">'sub'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">-</span> y<span class="token punctuation">,</span>        <span class="token string">'mul'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span>        <span class="token string">'div'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">/</span> y<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>operator<span class="token punctuation">,</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>dispatch_dict<span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dispatch_dict<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token number">3</span><span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环">循环</h2><ol><li><p>for 语句</p><p>for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Measure some strings:</span>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'window'</span><span class="token punctuation">,</span> <span class="token string">'defenestrate'</span><span class="token punctuation">]</span><span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> x<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"b"</span> <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">for</span> x <span class="token keyword">in</span> p<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 输出</span>a<span class="token number">10</span>b<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很难正确地在迭代多项集的同时修改多项集的内容。更简单的方法是迭代多项集的副本或者创建新的多项集：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Create a sample collection</span>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Hans'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token string">'Éléonore'</span><span class="token punctuation">:</span> <span class="token string">'inactive'</span><span class="token punctuation">,</span> <span class="token string">'景太郎'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span class="token comment"># Strategy:  Iterate over a copy</span><span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'inactive'</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> users<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token comment"># Strategy:  Create a new collection</span>active_users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'active'</span><span class="token punctuation">:</span>        active_users<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> statuss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>while循环</p><p>要条件满足，就不断循环，条件不满足时退出循环</p></li><li><p>循环中的 break、continue 语句及 else 子句</p><ul><li><p>break 语句将跳出最近的一层 for 或 while 循环</p></li><li><p>for 或 while 循环可以包括 else 子句（完成循环之后执行）</p><p>在 for 循环中，else 子句会在循环成功结束最后一次迭代之后执行。</p><p>在 while 循环中，它会在循环条件变为假值后执行。</p><p>无论哪种循环，如果因为 <a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#break"><code>break</code></a> 而结束，那么 <code>else</code> 子句就 <strong>不会</strong> 执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 循环配合else使用</span>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Hans'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token string">'Éléonore'</span><span class="token punctuation">:</span> <span class="token string">'inactive'</span><span class="token punctuation">,</span> <span class="token string">'景太郎'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'inactive'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.done&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><span class="token punctuation">)</span><span class="token comment"># 无论哪种循环，如果因为 break 而结束，那么 else 子句就 不会 执行。</span><span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'inactive'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.done&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>done<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">{</span><span class="token string">'Hans'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token string">'Éléonore'</span><span class="token punctuation">:</span> <span class="token string">'inactive'</span><span class="token punctuation">,</span> <span class="token string">'景太郎'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="pass语句">pass语句</h2><p><a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#pass"><code>pass</code></a> 语句不执行任何动作。语法上需要一个语句，但程序毋需执行任何动作时，可以使用该语句。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>  <span class="token comment"># Busy-wait for keyboard interrupt (Ctrl+C)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这常用于创建一个最小的类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyEmptyClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#pass"><code>pass</code></a> 还可用作函数或条件语句体的占位符，让你保持在更抽象的层次进行思考。</p><p><code>pass</code> 会被默默地忽略：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">initlog</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>   <span class="token comment"># Remember to implement this!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#&quot;&gt;语法&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;编码声明&quot;&gt;编码声明&lt;/h2&gt;
&lt;pre class=&quot;line-numbe</summary>
      
    
    
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/Python/"/>
    
    
    <category term="Python基础" scheme="https://hmxyl.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch安装</title>
    <link href="https://hmxyl.github.io/20230618/872a239c.html"/>
    <id>https://hmxyl.github.io/20230618/872a239c.html</id>
    <published>2023-06-18T09:33:20.000Z</published>
    <updated>2023-08-16T08:29:22.078Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker</h1><p>参考：<a href="https://new.nanxiangquan.com/2023/04/26/docker%E9%83%A8%E7%BD%B2elk/">https://new.nanxiangquan.com/2023/04/26/docker部署elk/</a></p><h2 id="单机">单机</h2><h3 id="docker-compose">docker-compose</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.9'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch-standalone</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.2.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>standalone    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> TZ=Asia/Shanghai      <span class="token punctuation">-</span> cluster.name=elasticsearch<span class="token punctuation">-</span>standalone      <span class="token punctuation">-</span> node.name=node01      <span class="token punctuation">-</span> cluster.initial_master_nodes=<span class="token punctuation">[</span><span class="token string">"node01"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore</span>      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/log4j2.properties<span class="token punctuation">:</span>/usr/share/elasticsearch/config/log4j2.properties      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/jvm.options<span class="token punctuation">:</span>/usr/share/elasticsearch/config/jvm.options      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/role_mapping.yml:/usr/share/elasticsearch/config/role_mapping</span>      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/roles.yml:/usr/share/elasticsearch/config/roles</span>      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/users:/usr/share/elasticsearch/config/users</span>      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/users_roles:/usr/share/elasticsearch/config/users_roles</span>      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/logs<span class="token punctuation">:</span>/usr/share/elasticsearch/logs    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9200<span class="token punctuation">:</span><span class="token number">9200</span>      <span class="token punctuation">-</span> 9300<span class="token punctuation">:</span><span class="token number">9300</span>    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         其中的配置文件：</p><ul><li>elasticsearch.yml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9300</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /usr/share/elasticsearch/data  <span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /usr/share/elasticsearch/logs    <span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token key atrule">http.cors.allow-headers</span><span class="token punctuation">:</span> Authorization<span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">xpack.security.transport.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">discovery.zen.ping_timeout</span><span class="token punctuation">:</span> 120s<span class="token key atrule">client.transport.ping_timeout</span><span class="token punctuation">:</span> 60s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>jvm.options</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">## JVM configuration</span><span class="token comment">################################################################</span><span class="token comment">## IMPORTANT: JVM heap size</span><span class="token comment">################################################################</span><span class="token comment">##</span><span class="token comment">## You should always set the min and max JVM heap</span><span class="token comment">## size to the same value. For example, to set</span><span class="token comment">## the heap to 4 GB, set:</span><span class="token comment">##</span><span class="token comment">## -Xms4g</span><span class="token comment">## -Xmx4g</span><span class="token comment">##</span><span class="token comment">## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</span><span class="token comment">## for more information</span><span class="token comment">##</span><span class="token comment">################################################################</span><span class="token comment"># Xms represents the initial size of total heap space</span><span class="token comment"># Xmx represents the maximum size of total heap space</span>-Xms2g-Xmx2g<span class="token comment">################################################################</span><span class="token comment">## Expert settings</span><span class="token comment">################################################################</span><span class="token comment">##</span><span class="token comment">## All settings below this section are considered</span><span class="token comment">## expert settings. Don't tamper with them unless</span><span class="token comment">## you understand what you are doing</span><span class="token comment">##</span><span class="token comment">################################################################</span><span class="token comment">## GC configuration</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+UseConcMarkSweepGC</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">CMSInitiatingOccupancyFraction=75</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+UseCMSInitiatingOccupancyOnly</span><span class="token comment">## G1GC Configuration</span><span class="token comment"># NOTE: G1GC is only supported on JDK version 10 or later.</span><span class="token comment"># To use G1GC uncomment the lines below.</span><span class="token comment"># 10-:-XX:-UseConcMarkSweepGC</span><span class="token comment"># 10-:-XX:-UseCMSInitiatingOccupancyOnly</span><span class="token comment"># 10-:-XX:+UseG1GC</span><span class="token comment"># 10-:-XX:InitiatingHeapOccupancyPercent=75</span><span class="token comment">## DNS cache policy</span><span class="token comment"># cache ttl in seconds for positive DNS lookups noting that this overrides the</span><span class="token comment"># JDK security property networkaddress.cache.ttl; set to -1 to cache forever</span><span class="token key attr-name">-Des.networkaddress.cache.ttl</span><span class="token punctuation">=</span><span class="token value attr-value">60</span><span class="token comment"># cache ttl in seconds for negative DNS lookups noting that this overrides the</span><span class="token comment"># JDK security property networkaddress.cache.negative ttl; set to -1 to cache</span><span class="token comment"># forever</span><span class="token key attr-name">-Des.networkaddress.cache.negative.ttl</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token comment">## optimizations</span><span class="token comment"># pre-touch memory pages used by the JVM during initialization</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+AlwaysPreTouch</span><span class="token comment">## basic</span><span class="token comment"># explicitly set the stack size</span>-Xss1m<span class="token comment"># set to headless, just in case</span><span class="token key attr-name">-Djava.awt.headless</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment"># ensure UTF-8 encoding by default (e.g. filenames)</span><span class="token key attr-name">-Dfile.encoding</span><span class="token punctuation">=</span><span class="token value attr-value">UTF-8</span><span class="token comment"># use our provided JNA always versus the system one</span><span class="token key attr-name">-Djna.nosys</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment"># turn off a JDK optimization that throws away stack traces for common</span><span class="token comment"># exceptions because stack traces are important for debugging</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">-OmitStackTraceInFastThrow</span><span class="token comment"># flags to configure Netty</span><span class="token key attr-name">-Dio.netty.noUnsafe</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">-Dio.netty.noKeySetOptimization</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">-Dio.netty.recycler.maxCapacityPerThread</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span class="token comment"># log4j 2</span><span class="token key attr-name">-Dlog4j.shutdownHookEnabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">-Dlog4j2.disable.jmx</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">-Djava.io.tmpdir</span><span class="token punctuation">=</span><span class="token value attr-value">${ES_TMPDIR}</span><span class="token comment">## heap dumps</span><span class="token comment"># generate a heap dump when an allocation from the Java heap fails</span><span class="token comment"># heap dumps are created in the working directory of the JVM</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+HeapDumpOnOutOfMemoryError</span><span class="token comment"># specify an alternative path for heap dumps; ensure the directory exists and</span><span class="token comment"># has sufficient space</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">HeapDumpPath=data</span><span class="token comment"># specify an alternative path for JVM fatal error logs</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">ErrorFile=logs/hs_err_pid%p.log</span><span class="token comment">## JDK 8 GC logging</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCDetails</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCDateStamps</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintTenuringDistribution</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCApplicationStoppedTime</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-Xloggc:logs/gc.log</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+UseGCLogFileRotation</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:NumberOfGCLogFiles=32</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:GCLogFileSize=64m</span><span class="token comment"># JDK 9+ GC logging</span><span class="token key attr-name">9-</span><span class="token punctuation">:</span><span class="token value attr-value">-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m</span><span class="token comment"># due to internationalization enhancements in JDK 9 Elasticsearch need to set the provider to COMPAT otherwise</span><span class="token comment"># time/date parsing will break in an incompatible way for some date patterns and locals</span><span class="token key attr-name">9-</span><span class="token punctuation">:</span><span class="token value attr-value">-Djava.locale.providers=COMPAT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>log4j2.properties</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">status</span> <span class="token punctuation">=</span> <span class="token value attr-value">error</span><span class="token comment"># log action execution errors for easier debugging</span><span class="token key attr-name">logger.action.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.elasticsearch.action</span><span class="token key attr-name">logger.action.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">debug</span><span class="token key attr-name">appender.rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span><span class="token key attr-name">appender.rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">rolling</span><span class="token key attr-name">appender.rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span><span class="token key attr-name">appender.rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">server</span><span class="token key attr-name">rootLogger.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">info</span><span class="token key attr-name">rootLogger.appenderRef.rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">rolling</span><span class="token key attr-name">appender.deprecation_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span><span class="token key attr-name">appender.deprecation_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation_rolling</span><span class="token key attr-name">appender.deprecation_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span><span class="token key attr-name">appender.deprecation_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation</span><span class="token key attr-name">logger.deprecation.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.elasticsearch.deprecation</span><span class="token key attr-name">logger.deprecation.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">warn</span><span class="token key attr-name">logger.deprecation.appenderRef.deprecation_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation_rolling</span><span class="token key attr-name">logger.deprecation.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span class="token key attr-name">appender.index_search_slowlog_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span><span class="token key attr-name">appender.index_search_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog_rolling</span><span class="token key attr-name">appender.index_search_slowlog_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span><span class="token key attr-name">appender.index_search_slowlog_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog</span><span class="token key attr-name">logger.index_search_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index.search.slowlog</span><span class="token key attr-name">logger.index_search_slowlog_rolling.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">trace</span><span class="token key attr-name">logger.index_search_slowlog_rolling.appenderRef.index_search_slowlog_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog_rolling</span><span class="token key attr-name">logger.index_search_slowlog_rolling.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span class="token key attr-name">appender.index_indexing_slowlog_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span><span class="token key attr-name">appender.index_indexing_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog_rolling</span><span class="token key attr-name">appender.index_indexing_slowlog_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span><span class="token key attr-name">appender.index_indexing_slowlog_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog</span><span class="token key attr-name">logger.index_indexing_slowlog.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index.indexing.slowlog.index</span><span class="token key attr-name">logger.index_indexing_slowlog.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">trace</span><span class="token key attr-name">logger.index_indexing_slowlog.appenderRef.index_indexing_slowlog_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog_rolling</span><span class="token key attr-name">logger.index_indexing_slowlog.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化密码">初始化密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">进入elasticsearch容器<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> elasticsearch <span class="token function">bash</span>进入bin目录<span class="token builtin class-name">cd</span> bin/执行初始化密码./elasticsearch-setup-passwords interactive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Docker&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://new.nanxiangquan.com/2023/04/26/docker%E9%83%A8%E7%BD%B2elk/&quot;&gt;https://new.nanxiangquan.com/2023/04/26</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="ElasticSearch" scheme="https://hmxyl.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring全家桶</title>
    <link href="https://hmxyl.github.io/20230319/6a5a5c18.html"/>
    <id>https://hmxyl.github.io/20230319/6a5a5c18.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.131Z</updated>
    
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础</title>
    <link href="https://hmxyl.github.io/20230319/d607e27b.html"/>
    <id>https://hmxyl.github.io/20230319/d607e27b.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring的特性和优势">Spring的特性和优势</h3><blockquote><p>Spring Framework有哪些特性，用了这个框架对开发而言有什么好处呢？</p></blockquote><p>从Spring 框架的<strong>特性</strong>来看：</p><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>控制反转：<code>IOC——Inversion of Control</code>，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：<code>DI——Dependency Injection</code>，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：<code>Aspect Oriented Programming——AOP</code></li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><p>从使用Spring 框架的<strong>好处</strong>看：</p><ul><li>Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。</li><li>Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了。</li><li>Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。</li><li>测试一个用 Spring 编写的应用程序很容易，因为环境相关的代码被移动到这个框架中。此外，通过使用 JavaBean-style POJOs，它在使用依赖注入注入测试数据时变得更容易。</li><li>Spring 的 web 框架是一个设计良好的 web MVC 框架，它为比如 Structs 或者其他工程上的或者不怎么受欢迎的 web 框架提供了一个很好的供替代的选择。MVC 模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。模型(Model)封装了应用程序数据，通常它们将由 POJO 类组成。视图(View)负责渲染模型数据，一般来说它生成客户端浏览器可以解释 HTML 输出。控制器(Controller)负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。</li><li>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</li><li>轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。</li><li>Spring 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Spring的特性和优势&quot;&gt;Spring的特性和优势&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Framework有哪些特性，用了这个框架对开发而言有什么好处呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从Spring 框架的&lt;strong&gt;特性&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础-AOP</title>
    <link href="https://hmxyl.github.io/20230319/28678f43.html"/>
    <id>https://hmxyl.github.io/20230319/28678f43.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.138Z</updated>
    
    <content type="html"><![CDATA[<h1>拦截器类型</h1><ul><li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li><li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li><li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li><li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li><li>@Around：能完全控制目标代码是否执行，并可以在<strong>执行前后、抛异常后执行任意拦截代码</strong>，可以说是包含了上面所有功能</li></ul><h1>使用注解装配AOP的DEMO</h1><ol><li><p>依赖引入</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>spring-aop：AOP核心功能，例如代理工厂等</p><p>aspectjweaver：支持切入点表达式等</p><p>aspectjrt：支持aop相关注解等</p><p>aspectjweaver包含aspectjrt的内容，所以我们只需要引入aspectjweaver依赖包就可以了</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230319183014032.png" alt="aspectjweaver包含aspectjrt的内容"></p></blockquote></li><li><p>定义一个性能监控的注解</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MetricTime</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义切面</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MetricTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Instant</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(metricTime)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">metric</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">,</span> <span class="token class-name">MetricTime</span> metricTime<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around.begin............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Instant</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> spend <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Metrics][%s]-消耗：%d 毫秒"</span><span class="token punctuation">,</span> metricTime<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spend<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around.end............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在需要被监控的关键方法上标注该注解</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MetricTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@MetricTime</span><span class="token punctuation">(</span><span class="token string">"aop"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/aop/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">testAopSpend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingLong</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动类上标注<code>@EnableAspectJAutoProxy</code></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>AspectJ定义AOP装配规则</h1><table><thead><tr><th>装配规则</th><th>说明</th></tr></thead><tbody><tr><td>“execution(public * com.itranswarp.learnjava.service.<em>.</em>(…))”</td><td>某个service包下面的所有Bean的所有方法都会被拦截</td></tr><tr><td>“execution(public * update*(…))”</td><td>方法名前缀进行拦截。<br>这种非精准打击误伤面更大，因为从方法前缀区分是否是数据库操作是非常不可取的。</td></tr><tr><td></td><td></td></tr></tbody></table><h1>AOP 可能造成的空指针</h1><p>参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1339039378571298">https://www.liaoxuefeng.com/wiki/1252599548343744/1339039378571298</a></p><blockquote><p>Spring通过CGLIB创建的代理类，不会初始化代理类自身继承的任何成员变量，包括final类型的成员变量！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;拦截器类型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；&lt;/li&gt;
&lt;li&gt;@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；&lt;/li&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java命名规范</title>
    <link href="https://hmxyl.github.io/20230317/1761bce2.html"/>
    <id>https://hmxyl.github.io/20230317/1761bce2.html</id>
    <published>2023-03-17T09:44:04.000Z</published>
    <updated>2023-05-11T06:38:33.133Z</updated>
    
    <content type="html"><![CDATA[<h1>Java命名规范</h1><h2 id="泛型类">泛型类</h2><p>在书写泛型类时，通常做以下的约定：</p><ul><li>E表示Element，通常用在集合中；</li><li>ID用于表示对象的唯一标识符类型</li><li>T表示Type(类型)，通常指代类；</li><li>K表示Key(键), 通常用于Map中；</li><li>V表示Value(值),通常用于Map中，与K结对出现；</li><li>N表示Number,通常用于表示数值类型；</li><li>？表示不确定的Java类型；</li><li>X用于表示异常；</li><li>U,S表示任意的类型。</li></ul><h2 id="速记Java开发中的各种O">速记Java开发中的各种O</h2><p>通过一张表和图快速对Java中的<code>BO</code>,<code>DTO</code>,<code>DAO</code>,<code>PO</code>,<code>POJO</code>,<code>VO</code>之间的含义，区别以及联系进行梳理。</p><table><thead><tr><th>名称</th><th>使用范围</th><th>解释说明</th></tr></thead><tbody><tr><td>BO</td><td>用于Service,Manager,Business等业务相关类的命名</td><td>Business Object业务处理对象，主要作用是把业务逻辑封装成一个对象。</td></tr><tr><td>DTO</td><td>经过加工后的PO对象，其内部属性可能增加或减少</td><td>Data Transfer  Object数据传输对象，主要用于远程调用等需要大量传输数据的地方，例如，可以将一个或多个PO类的部分或全部属性封装为DTO进行传输</td></tr><tr><td>DAO</td><td>用于对数据库进行读写操作的类进行命名</td><td>Data Access  Object数据访问对象，主要用来封装对数据库的访问，通过DAO可以将POJO持久化为PO，也可以利用PO封装出VO和DTO</td></tr><tr><td>PO</td><td>Bean,Entity等类的命名</td><td>Persistant  Object持久化对象，数据库表中的数据在Java对象中的映射状态，可以简单的理解为一个PO对象即为数据库表中的一条记录</td></tr><tr><td>POJO</td><td>POJO是DO/DTO/BO/VO的统称</td><td>Plain Ordinary Java Object  简单Java对象，它是一个简单的普通Java对象，禁止将类命名为XxxxPOJO</td></tr><tr><td>VO</td><td>通常是视图控制层和模板引擎之间传递的数据对象</td><td>Value Object  值对象，主要用于视图层，视图控制器将视图层所需的属性封装成一个对象，然后用一个VO对象在视图控制器和视图之间进行数据传输。</td></tr><tr><td>AO</td><td>应用层对象</td><td>Application Object，在Web层与Service层之间抽象的复用对象模型，很少用。</td></tr></tbody></table><p>下面将通过一张图来理解上述几种O之间相互转换的关系：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/eae992c8-ce71-47df-ae94-eca9bc91dac0-1679046277720-1.jpg" alt="微信图片_20211213004837"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Java命名规范&lt;/h1&gt;
&lt;h2 id=&quot;泛型类&quot;&gt;泛型类&lt;/h2&gt;
&lt;p&gt;在书写泛型类时，通常做以下的约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E表示Element，通常用在集合中；&lt;/li&gt;
&lt;li&gt;ID用于表示对象的唯一标识符类型&lt;/li&gt;
&lt;li&gt;T表示Type(类型)</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://hmxyl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成Redis</title>
    <link href="https://hmxyl.github.io/20230302/f677ab49.html"/>
    <id>https://hmxyl.github.io/20230302/f677ab49.html</id>
    <published>2023-03-02T11:10:19.000Z</published>
    <updated>2023-06-29T10:43:44.523Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。</p><p>可以参考 <a href="https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.6/spring-boot-dependencies-2.6.6.pom">https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.6/spring-boot-dependencies-2.6.6.pom</a> 查看版本依赖</p></blockquote><h1>基于RedisTemplate+Jedis的数据操作</h1><blockquote><p>Jedis是Redis的Java客户端，在SpringBoot 1.x版本中也是默认的客户端。在SpringBoot 2.x版本中默认客户端是Luttuce。</p></blockquote><h2 id="实现DEMO">实现DEMO</h2><ol><li><p>POM.xml</p><p>引入spring-boot-starter-data-redis包，SpringBoot2中默认的客户端是Lettuce, 所以需要exclude掉lettuce-core包，并引入jedis的包。</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>redis.yml 配置</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.163.128    <span class="token key atrule">password</span><span class="token punctuation">:</span> dHcphufFGcSaJLMK    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisConfig配置</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入JedisConnectionFactory：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315153558460.png" alt="注入JedisConnectionFactory"></p></li><li></li><li><p>测试Redis连接</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DatabaseApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"server.port=80"</span><span class="token punctuation">,</span>                <span class="token string">"spring.application.name=configuration"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.server-addr=native.virtual.com:8848"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.file-extension=yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.group=DEFAULT_GROUP"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].data-id=redis.yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].refresh=true"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>基于RedisTemplate+Lettuce的数据操作</h1><h2 id="Lettuce-说明">Lettuce 说明</h2><p><a href="https://github.com/lettuce-io/lettuce-core">Github（lettuce-core）</a></p><p>Lettuce 是一个可伸缩线程安全的 Redis 客户端。多个线程可以共享同一个 RedisConnection。它利用优秀 netty NIO 框架来高效地管理多个连接。</p><p>Lettuce 从一开始就按照非阻塞式 IO 进行设计，是一个纯异步客户端，对异步和反应式 API 的支持都很全面。即使是同步命令，底层的通信过程仍然是异步模型，只是通过阻塞调用线程来模拟出同步效果而已。</p><blockquote><p>在SpringBoot 2.x版本中Redis默认客户端是Lettuce，本文主要介绍SpringBoot 和默认的Lettuce的整合案例</p></blockquote><h2 id="Lettuce-特性">Lettuce 特性</h2><ul><li>支持 同步、异步、响应式 的方式</li><li>支持 Redis Sentinel</li><li>支持 Redis Cluster</li><li>支持 SSL 和 Unix Domain Socket 连接</li><li>支持 Streaming API</li><li>支持 CDI 和 Spring 的集成</li><li>支持 Command Interfaces</li><li>兼容 Java 8+ 以上版本</li></ul><p><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:connectors:lettuce">Lettuce  和 Jedis 对比官方说明</a></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315150902635.png" alt="image-20230315150902635"></p><h2 id="实现DEMO-2">实现DEMO</h2><ol><li><p>POM.xml</p><p>引入spring-boot-starter-data-redis包，SpringBoot2中默认的客户端是Lettuce, 所以需要exclude掉lettuce-core包，并引入jedis的包。</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>redis.yml 配置</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.163.128    <span class="token key atrule">password</span><span class="token punctuation">:</span> dHcphufFGcSaJLMK    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">200</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisConfig配置（代码和Jedis注入一样 ，只是装配的 <code>connectionFactory</code>  实现类不一样 ）</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入JedisConnectionFactory：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315154313840.png" alt="注入LettuceConnectionFactory"></p></li><li><p>测试Redis连接</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DatabaseApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"server.port=80"</span><span class="token punctuation">,</span>                <span class="token string">"spring.application.name=configuration"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.server-addr=native.virtual.com:8848"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.file-extension=yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.group=DEFAULT_GROUP"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].data-id=redis.yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].refresh=true"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="基于RedisTemplate-Lettuce数据类封装">基于RedisTemplate+Lettuce数据类封装</h2><p>原文：<a href="https://pdai.tech/md/spring/springboot/springboot-x-redis-lettuce-wrap.html">https://pdai.tech/md/spring/springboot/springboot-x-redis-lettuce-wrap.html</a></p><blockquote><p>RedisTemplate中的操作和方法众多，为了程序保持方法使用的一致性，屏蔽一些无关的方法以及对使用的方法进一步封装。</p></blockquote><ol><li><p>RedisService接口类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deleteSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> redisCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisService的实现类</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">import com.local.service.IRedisService;import org.springframework.data.redis.core.RedisCallback;import org.springframework.data.redis.core.RedisTemplate;import javax.annotation.Resource;import java.util.Collection;import java.util.Set;import java.util.concurrent.TimeUnit;public class RedisServiceImpl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> implements IRedisService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> {    @Resource(name = "redisTemplate")    private RedisTemplate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">T</span><span class="token punctuation">&gt;</span></span> redisTemplate;    @Override    public void set(String key, T value, long time) {        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);    }    @Override    public void set(String key, T value) {        redisTemplate.opsForValue().set(key, value);    }    @Override    public T get(String key) {        return redisTemplate.opsForValue().get(key);    }    @Override    public void delete(String key) {        redisTemplate.delete(key);    }    @Override    public void delete(Collection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span> keys) {        redisTemplate.delete(keys);    }    @Override    public boolean expire(String key, long time) {        return redisTemplate.expire(key, time, TimeUnit.SECONDS);    }    @Override    public Long getExpire(String key) {        return redisTemplate.getExpire(key, TimeUnit.SECONDS);    }    @Override    public boolean hasKey(String key) {        return redisTemplate.hasKey(key);    }    @Override    public Long increment(String key, long delta) {        return redisTemplate.opsForValue().increment(key, delta);    }    @Override    public Long decrement(String key, long delta) {        return redisTemplate.opsForValue().decrement(key);    }    @Override    public void addSet(String key, T value) {        redisTemplate.opsForSet().add(key, value);    }    @Override    public Set<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> getSet(String key) {        return redisTemplate.opsForSet().members(key);    }    @Override    public void deleteSet(String key, T value) {        redisTemplate.opsForSet().remove(key, value);    }    @Override    public T execute(RedisCallback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> redisCallback) {        return redisTemplate.execute(redisCallback);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。&lt;/p&gt;
&lt;p&gt;可以参考 &lt;a href=&quot;https://repo1.maven.org/maven2/org/springframework/boo</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="SpringBoot" scheme="https://hmxyl.github.io/tags/SpringBoot/"/>
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Nacos 使用示例</title>
    <link href="https://hmxyl.github.io/20230301/d8cb1733.html"/>
    <id>https://hmxyl.github.io/20230301/d8cb1733.html</id>
    <published>2023-03-01T02:19:20.000Z</published>
    <updated>2023-05-18T02:49:56.490Z</updated>
    
    <content type="html"><![CDATA[<h1>配置中心示例</h1><p>源码地址：<a href="https://github.com/hmxyl/nacosdemo.git">https://github.com/hmxyl/nacosdemo.git</a></p><h2 id="准备Nacos配置文件">准备Nacos配置文件</h2><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510164730428.png" alt="image-20230510164730428"></p><h2 id="使用-application-yml-配置（推荐）">使用 application.yml 配置（推荐）</h2><blockquote><ol><li>版本号<br>从 2021.0.1.0 开始，Spring Cloud Alibaba  版本将会对应 Spring Cloud 版本，<br>前三位为 Spring Cloud 版本，最后一位为扩展版本</li><li>弃用 <code>bootstrap.yml</code> 文件（Spring Cloud 在Spring boot 2.4以后无法应用BootStrap.yml）</li><li>源码： configuration 模块</li></ol></blockquote><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8801</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">import</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>text.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>code.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动时 配置 active profiles 为 <code>dev</code></p></li><li><p>启动 ConfigurationOldApplication</p></li><li><p>访问 <a href="http://localhost:8801/config/info">http://localhost:8801/config/info</a> 获取配置信息</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">ConfigInfo</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> configInfo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Junit 单元测试</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">ConfigInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ConfigurationOldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ConfigurationOldApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ConfigInfo</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token string">"configuration_test"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>参考[1]：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sca-upgrade-guide.adoc">https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sca-upgrade-guide.adoc</a></p><p>参考[2]：<a href="https://developer.aliyun.com/article/897341#slide-12">https://developer.aliyun.com/article/897341#slide-12</a></p><h2 id="使用-bootstrap-yml-配置（不推荐）">使用 bootstrap.yml 配置（不推荐）</h2><blockquote><p>源码： configuration_old 模块</p></blockquote><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SpringCloud2020及以后的版本默认不启用 bootstrap 配置，我们需要在pom里面显式地引入：--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：我们使用的 Spring Cloud 2020 版本默认不启用 bootstrap，若想要在应用启动时加载 bootstrap 配置（例如 bootstrap.yml 或 bootstrap.properties），就需要我们在 pom.xml 中显式的引入 spring-cloud-starter-bootstrap 依赖。</p></blockquote></li><li><p>bootstrap.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8802</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration_old  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP        <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration.yml        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml        extension<span class="token punctuation">-</span>configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token key atrule">data-id</span><span class="token punctuation">:</span> text.yml          <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        extension<span class="token punctuation">-</span>configs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token key atrule">data-id</span><span class="token punctuation">:</span> code.yml          <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>config配置的dataID组成: ${prefix}-${spring.profiles.active}.${file-extension}</p><ul><li>${prefix}：默认取值为微服务的服务名，即配置文件中 <a href="http://spring.application.name">spring.application.name</a> 的值，我们可以在配置文件中通过配置 <code>spring.cloud.nacos.config.prefix</code> 来指定。</li><li>${spring.profiles.active}：表示当前环境对应的 Profile，例如 dev、test、prod 等。当没有指定环境的 Profile 时，其对应的连接符也将不存在， dataId 的格式变成${prefix}.${file-extension}。</li><li>${file-extension}：表示配置内容的数据格式，我们可以在配置文件中通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置，例如 properties 和 yaml。</li></ul></blockquote><p>问题记录：</p><ul><li><p><strong>若文件名称不为 bootstrap.yml， 则在启动时，会先加载默认配置。server-addr 为127.0.0.1:8848，而正确的配置，在注解参数读取完成之后，才能读取到。因此BEAN 创建失败</strong></p><p><code>com.alibaba.cloud.nacos.NacosConfigManager</code>、<code>com.alibaba.cloud.nacos.NacosConfigProperties</code></p></li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span>BeanCreationException</span><span class="token operator">:</span> <span class="token class-name">Error</span> creating bean <span class="token keyword">with</span> <span class="token namespace">name</span> 'scopedTarget<span class="token punctuation">.</span>configInfo'<span class="token operator">:</span> <span class="token class-name">Injection</span> of autowired dependencies failed<span class="token punctuation">;</span> nested exception is <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalArgumentException</span><span class="token operator">:</span> <span class="token class-name">Could</span> not resolve placeholder 'config<span class="token punctuation">.</span>text' in value <span class="token string">"${config.text}"</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">405</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.3</span><span class="token number">.18</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.3</span><span class="token number">.18</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动时 配置 active profiles 为 <code>dev</code></p></li><li><p>启动 ConfigurationOldApplication</p></li><li><p>访问 <a href="http://localhost:8802/config/info">http://localhost:8802/config/info</a> 获取配置信息。同上。</p></li><li><p>Junit测试。同上。</p></li></ol><h1>注册中心示例</h1><p>目的：将不同的服务，注册到<code>服务列表</code>中，如下图所示</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510183445711.png" alt="image-20230510183445711"></p><table><thead><tr><th>字段</th><th>说明</th><th></th></tr></thead><tbody><tr><td>服务名</td><td>注册的服务名称<code>spring.cloud.nacos.discovery.service</code> 默认配置的是：<code>spring.application.name</code></td><td></td></tr><tr><td>触发保护阈值</td><td>保护阈值：可以设置为0-1之间的浮点数，它其实是⼀个⽐例值（当前服务健康实例数/当前服务总实例数）<br><br>⼀般流程下， nacos是服务注册中⼼，服务消费者要从nacos获取某⼀个服务的可⽤实例信息，对于服务实例有健康/不健康状态之分， nacos在返回给消费者实例信息的时候，会返回健康实例。这个时候在⼀些⾼并发、⼤流量场景下会存在⼀定的问题：<br><br>如果服务A有100个实例， 98个实例都不健康了，只有2个实例是健康的，如果nacos只返回这两个健康实例的信息的话，那么后续消费者的请求将全部被分配到这两个实例，流量洪峰到来， 2个健康的实例也扛不住了，整个服务A 就扛不住，上游的微服务也会导致崩溃，产⽣雪崩效应。<br><br><strong>保护阈值的意义在于</strong>：当服务A健康实例数/总实例数 &lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触发（状态<strong>true</strong>）<br>nacos将会把该服务所有的实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也⽐造成雪崩要好，牺牲了⼀些请求，保证了整个系统的⼀个可⽤</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><ul><li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li><li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li><li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><h2 id="注册服务提供者">注册服务提供者</h2><blockquote><p>producer_a、producer_a 两个模块，模拟两个服务提供者实例</p></blockquote><h3 id="producer-a">producer_a</h3><ol><li><p>pom.xml</p> <pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> producer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>        <span class="token key atrule">register-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>配置</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>spring.cloud.nacos.discovery.service</td><td>${<a href="http://spring.application.name">spring.application.name</a>}</td><td>注册服务名称</td></tr><tr><td>spring.cloud.nacos.discovery.register-enabled</td><td>true</td><td>是否注册服务</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>启动类上，使用 <code>@EnableDiscoveryClient</code> 注解开启 Nacos 服务发现功能</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerA</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProducerA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供服务的业务方法（测试类）</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.application.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"服务名："</span> <span class="token operator">+</span> serverName <span class="token operator">+</span> <span class="token string">"&lt;br /&gt; 端口号： "</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">"&lt;br /&gt; 传入的参数："</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动模块, 提示  <strong>register finished</strong> 注册完成。查看Nacos服务列表，此时 producer  服务已注册，实例数为1。</p></li><li><p>使用浏览器访问http://localhost:8001/nacos/1 验证实例是否正常提供服务</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510181828965.png" alt="image-20230510181828965"></p></li></ol><h3 id="producer-b">producer_b</h3><ol><li><p>pom.xml ：同 producer_a</p></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8002</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> producer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动类上，使用 <code>@EnableDiscoveryClient</code> 注解开启 Nacos 服务发现功能</p></li><li><p>提供服务的业务方法（测试类）</p></li><li><p>启动模块。查看Nacos服务列表，此时 producer  服务已注册，实例数为2。</p></li><li><p>使用浏览器访问http://localhost:8002/nacos/1 验证实例是否正常提供服务</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510182034079.png" alt="image-20230510182034079"></p></li></ol><h2 id="注册服务消费者">注册服务消费者</h2><h3 id="consumer">consumer</h3><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--由于 Netflix Ribbon 进入停更维护阶段，因此新版本的 Nacos discovery 都已经移除了 Ribbon ，此时我们需要引入 loadbalancer 代替 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8101</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">register-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//producer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个<code>配置类</code>，使用 @LoadBalanced 注解与 Ribbon 进行集成开启负载均衡功能</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">LoadBalanced</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//与 Ribbon 集成，并开启负载均衡功能</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建消费者测试类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service-url.nacos-user-service}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverURL<span class="token punctuation">;</span> <span class="token comment">//服务提供者的服务名</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverURL <span class="token operator">+</span> <span class="token string">"/nacos/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动consumer模块</p></li><li><p>使用浏览器多次访问 <code>http://localhost:8101/consumer/nacos/1</code>。</p><p>浏览器地址不变，4次请求结果如下</p><table><thead><tr><th>请求次数</th><th>返回结果</th></tr></thead><tbody><tr><td>1</td><td>服务名：producer<br>端口号： 8001<br>传入的参数：1</td></tr><tr><td>2</td><td>服务名：producer<br>端口号： 8002<br>传入的参数：1</td></tr><tr><td>3</td><td>服务名：producer<br>端口号： 8001<br>传入的参数：1</td></tr><tr><td>4</td><td>服务名：producer<br>端口号： 8002<br>传入的参数：1</td></tr></tbody></table></li></ol><h2 id="问题记录">问题记录</h2><ol><li>nacos服务部署时， 配置的默认路径由  <code>server.servlet.contextPath=/nacos</code> 修改为  <code>server.servlet.contextPath=/</code>  API 查询结果404</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;配置中心示例&lt;/h1&gt;
&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/hmxyl/nacosdemo.git&quot;&gt;https://github.com/hmxyl/nacosdemo.git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;准备Nacos配置文件&quot;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Nacos" scheme="https://hmxyl.github.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>Nacos</title>
    <link href="https://hmxyl.github.io/20230301/c383a3c4.html"/>
    <id>https://hmxyl.github.io/20230301/c383a3c4.html</id>
    <published>2023-03-01T02:19:20.000Z</published>
    <updated>2023-05-26T01:42:37.820Z</updated>
    
    <content type="html"><![CDATA[<p>Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台（参考自 <a href="https://nacos.io/zh-cn/index.html">Nacos 官网</a>）。</p><p>英文全称为 Dynamic Naming and Configuration Service，是一个由阿里巴巴团队使用 Java 语言开发的开源项目。Nacos 的命名是由 3 部分组成：</p><table><thead><tr><th>组成部分</th><th>全称</th><th>描述</th></tr></thead><tbody><tr><td>Na</td><td>naming/nameServer</td><td>即服务注册中心，与 Spring Cloud Eureka 的功能类似。</td></tr><tr><td>co</td><td>configuration</td><td>即配置中心，与 Spring Cloud Config+Spring Cloud Bus 的功能类似。</td></tr><tr><td>s</td><td>service</td><td>即服务，表示 Nacos 实现的服务注册中心和配置中心都是以服务为核心的。</td></tr></tbody></table><p>我们可以将 Nacos 理解成服务注册中心和配置中心的组合体。</p><ul><li>它可以替换 <a href="http://c.biancheng.net/springcloud/eureka.html">Eureka</a> 作为服务注册中心，实现服务的注册与发现；</li><li>可以替换 <a href="http://c.biancheng.net/springcloud/config.html">Spring Cloud Config</a> 作为配置中心，实现配置的动态刷新。</li></ul><p>Nacos 支持几乎所有主流类型“服务”的发现、配置和管理：</p><ul><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">Kubernetes Service</a></li><li><a href="https://grpc.io/docs/what-is-grpc/core-concepts#service-definition">gRPC </a>&amp; <a href="https://dubbo.apache.org/zh/">Dubbo RPC Service</a></li><li>Spring Cloud RESTful Service</li></ul><h1>Nacos 的特性</h1><p>Nacos 提供了一系列简单易用的特性，能够帮助我们快速地实现动态服务发现、服务配置等功能。</p><h2 id="服务发现">服务发现</h2><p>Nacos 支持基于 DNS 和 RPC 的服务发现。</p><p>当服务提供者使用原生 SDK、OpenAPI 或一个独立的 Agent TODO 向 Nacos 注册服务后，服务消费者可以在 Nacos 上通过 DNS TODO 或 HTTP&amp;API 查找、发现服务。</p><h2 id="服务健康监测">服务健康监测</h2><p>Nacos 提供对服务的实时健康检查，能够阻止请求发送到不健康主机或服务实例上。Nacos 还提供了一个健康检查仪表盘，能够帮助我们根据健康状态管理服务的可用性及流量。</p><h2 id="动态配置服务">动态配置服务</h2><p>动态配置服务可以让我们以中心化、外部化和动态化的方式，管理所有环境的应用配置和服务配置。</p><p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效、敏捷。</p><p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>Nacos 提供了一个简洁易用的 UI 帮助我们管理所有服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助我们更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p><h2 id="动态-DNS-服务">动态 DNS 服务</h2><p>Nacos 提供了动态 DNS 服务，能够让我们更容易地实现负载均衡、流量控制以及数据中心内网的简单 DNS 解析服务。</p><p>Nacos 提供了一些简单的 DNS APIs TODO，可以帮助我们管理服务的关联域名和可用的 IP:PORT 列表。</p><h2 id="服务及其元数据管理">服务及其元数据管理</h2><p>Nacos 能让我们从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及 metrics 统计数据。</p><h1>Nacos 两大组件</h1><p>与 Eureka 类似，Nacos 也采用 CS（Client/Server，客户端/服务器）架构，它包含两大组件，如下表。</p><ol><li><p>Nacos Server</p><p>描述：</p><ul><li>Nacos 服务端，与 Eureka Server 不同，Nacos Server 由阿里巴巴团队使用 Java 语言编写并将 Nacos Server 的下载地址给用户，用户只需要直接下载并运行即可。</li></ul><p>功能：</p><ul><li>Nacos Server 可以作为服务注册中心，帮助 Nacos Client 实现服务的注册与发现。</li><li>Nacos Server 可以作为配置中心，帮助 Nacos Client 在不重启的情况下，实现配置的动态刷新。</li></ul></li><li><p>Nacos Client</p><p>描述：</p><ul><li>Nacos 客户端，通常指的是微服务架构中的各个服务，由用户自己搭建，可以使用多种语言编写。</li></ul><p>功能：</p><ul><li><p>Nacos Client 通过添加依赖 spring-cloud-starter-alibaba-nacos-discovery，在服务注册中心（Nacos Server）中实现服务的注册与发现</p></li><li><p>Nacos Client 通过添加依赖 spring-cloud-starter-alibaba-nacos-config，在配置中心（Nacos Server）中实现配置的动态刷新。</p></li></ul></li></ol><h1>Nacos 服务注册中心</h1><p>Nacos 作为服务注册中心可以实现服务的注册与发现，流程如下图。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1022563360-0.png" alt="Nacos 服务注册与发现"></p><p>在图 1 中共涉及到以下 3 个角色：</p><ul><li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li><li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li><li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><p>Nacos 实现服务注册与发现的流程如下：</p><ol><li>从 Nacos 官方提供的下载页面中，下载 Nacos Server 并运行。</li><li>服务提供者 Nacos Client 启动时，会把服务以服务名（<a href="http://spring.application.name">spring.application.name</a>）的方式注册到服务注册中心（Nacos Server）；</li><li>服务消费者 Nacos Client 启动时，也会将自己的服务注册到服务注册中心；</li><li>服务消费者在注册服务的同时，它还会从服务注册中心获取一份服务注册列表信息，该列表中包含了所有注册到服务注册中心上的服务的信息（包括服务提供者和自身的信息）；</li><li>在获取了服务提供者的信息后，服务消费者通过 HTTP 或消息中间件远程调用服务提供者提供的服务。</li></ol><h1>默认端口说明</h1><table><thead><tr><th>端口</th><th>与主端口的偏移量</th><th>描述</th><th>版本</th></tr></thead><tbody><tr><td>8848</td><td>0</td><td>主端口</td><td></td></tr><tr><td>9848</td><td>1000</td><td>客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求</td><td></td></tr><tr><td>9849</td><td>1001</td><td>服务端gRPC请求服务端端口，用于服务间同步等</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Common-property-configuration">Common property configuration</h2><table><thead><tr><th>name</th><th>description</th><th>option</th></tr></thead><tbody><tr><td>MODE</td><td>cluster/standalone</td><td>cluster/standalone default <strong>cluster</strong></td></tr><tr><td>NACOS_SERVERS</td><td>nacos cluster address</td><td>eg. ip1:port1 ip2:port2 ip3:port3</td></tr><tr><td>PREFER_HOST_MODE</td><td>Whether hostname are supported</td><td>hostname/ip default <strong>ip</strong></td></tr><tr><td>NACOS_APPLICATION_PORT</td><td>nacos server port</td><td>default <strong>8848</strong></td></tr><tr><td>NACOS_SERVER_IP</td><td>custom nacos server ip when network was mutil-network</td><td></td></tr><tr><td>SPRING_DATASOURCE_PLATFORM</td><td>standalone support mysql</td><td>mysql / empty default empty</td></tr><tr><td>MYSQL_SERVICE_HOST</td><td>mysql host</td><td></td></tr><tr><td>MYSQL_SERVICE_PORT</td><td>mysql database port</td><td>default : <strong>3306</strong></td></tr><tr><td>MYSQL_SERVICE_DB_NAME</td><td>mysql database name</td><td></td></tr><tr><td>MYSQL_SERVICE_USER</td><td>username of database</td><td></td></tr><tr><td>MYSQL_SERVICE_PASSWORD</td><td>password of database</td><td></td></tr><tr><td>MYSQL_DATABASE_NUM</td><td>It indicates the number of database</td><td>default :<strong>1</strong></td></tr><tr><td>MYSQL_SERVICE_DB_PARAM</td><td>Database url parameter</td><td>default : <strong>characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</strong></td></tr><tr><td>JVM_XMS</td><td>-Xms</td><td>default :1g</td></tr><tr><td>JVM_XMX</td><td>-Xmx</td><td>default :1g</td></tr><tr><td>JVM_XMN</td><td>-Xmn</td><td>default :512m</td></tr><tr><td>JVM_MS</td><td>-XX:MetaspaceSize</td><td>default :128m</td></tr><tr><td>JVM_MMS</td><td>-XX:MaxMetaspaceSize</td><td>default :320m</td></tr><tr><td>NACOS_DEBUG</td><td>enable remote debug</td><td>y/n default :n</td></tr><tr><td>TOMCAT_ACCESSLOG_ENABLED</td><td>server.tomcat.accesslog.enabled</td><td>default :false</td></tr><tr><td>NACOS_AUTH_SYSTEM_TYPE</td><td>The auth system to use, currently only ‘nacos’ is supported</td><td>default :nacos</td></tr><tr><td>NACOS_AUTH_ENABLE</td><td>If turn on auth system</td><td>default :false</td></tr><tr><td>NACOS_AUTH_TOKEN_EXPIRE_SECONDS</td><td>The token expiration in seconds</td><td>default :18000</td></tr><tr><td>NACOS_AUTH_TOKEN</td><td>The default token</td><td>default :SecretKey012345678901234567890123456789012345678901234567890123456789</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</td><td>default : false</td></tr><tr><td>MEMBER_LIST</td><td>Set the cluster list with a configuration file or command-line argument</td><td>eg:192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809</td></tr><tr><td>EMBEDDED_STORAGE</td><td>Use embedded storage in cluster mode without mysql</td><td><code>embedded</code> default : none</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>nacos.core.auth.caching.enabled</td><td>default : false</td></tr><tr><td>NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE</td><td>nacos.core.auth.enable.userAgentAuthWhite</td><td>default : false</td></tr><tr><td>NACOS_AUTH_IDENTITY_KEY</td><td>nacos.core.auth.server.identity.key</td><td>default : serverIdentity</td></tr><tr><td>NACOS_AUTH_IDENTITY_VALUE</td><td>nacos.core.auth.server.identity.value</td><td>default : security</td></tr><tr><td>NACOS_SECURITY_IGNORE_URLS</td><td>nacos.security.ignore.urls</td><td>default : <code>/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</code></td></tr></tbody></table><p>参考</p><ul><li><a href="http://c.biancheng.net/springcloud/nacos.html">http://c.biancheng.net/springcloud/nacos.html</a></li><li><a href="https://www.jb51.net/article/235057.htm">https://www.jb51.net/article/235057.htm</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台（参考自 &lt;a href=&quot;https://nacos.io/zh-cn/index.html&quot;&gt;Nacos 官网&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;英文全称为 Dynamic Naming and Con</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Nacos" scheme="https://hmxyl.github.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>2023年问题记录</title>
    <link href="https://hmxyl.github.io/20230223/65e80ab3.html"/>
    <id>https://hmxyl.github.io/20230223/65e80ab3.html</id>
    <published>2023-02-23T11:52:44.000Z</published>
    <updated>2023-05-22T03:13:26.492Z</updated>
    
    <content type="html"><![CDATA[<h1>response.sendRedirect丢失请求地址的HTTPS协议</h1><ul><li><p>问题描述：</p><p><code>response.sendRedirect</code> 默认采用的HTTP协议GET请求，导致在重定向之后，原先的HTTPS请求变为HTTP请求</p></li><li><p>解决</p><ol><li><p>在响应信息中设置<code>HTTP状态码</code>和<code>location</code>头信息</p><p>当状态码为302时，表明资源位置临时发生了改变，需要进行重定向，location头信息标识了资源转向的位置，该地址写相对地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> consultUser<span class="token punctuation">.</span><span class="token function">getSession_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/dept_sub_consult/source/notice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用转发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>consultUser<span class="token punctuation">.</span><span class="token function">getSession_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/intermediate/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul><h1>JUnit测试提示Java.lang.Exception: No runnable methods</h1><ul><li><p>问题描述：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315103150697.png" alt="image-20230315103150697"></p></li><li><p>解决</p><p>@Test导入的包错了，spring-test 需要的Junit是org.junit.Test，但是在@Test有两个包，另一个是org.junit.jupiter.api.Test，</p></li></ul><h1>jquery – 在SPAN元素上禁用设置属性不会阻止点击事件</h1><p>来源：<a href="https://www.jb51.cc/jquery/182333.html">https://www.jb51.cc/jquery/182333.html</a></p><p>一个SPAN元素，在点击事件上做某事。当我禁用它，使用jQuery：<code>$(“span”).attr(“disabled”，true)</code> 无效</p><h3 id="解决方法">解决方法</h3><p>尝试这个：</p><pre class="line-numbers language-none"><code class="language-none">$("span").css("pointer-events","none");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以启用这些</p><pre class="line-numbers language-none"><code class="language-none">$("span").css("pointer-events","auto");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;response.sendRedirect丢失请求地址的HTTPS协议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;response.sendRedirect&lt;/code&gt; 默认采用的HTTP协议GET请求，导致在重定向之后，原先的HTTPS</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="点滴" scheme="https://hmxyl.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
    <category term="Java" scheme="https://hmxyl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Windows VPN连接报错</title>
    <link href="https://hmxyl.github.io/20230216/ede6579e.html"/>
    <id>https://hmxyl.github.io/20230216/ede6579e.html</id>
    <published>2023-02-16T02:39:23.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>问题描述</p><p>确认VPN信息正确的条件下，选择<code>PPTP</code>协议连接，提示 “不能建立到远程计算机的连接。你可能需要更改此连接的网络设置” 的错误</p></li><li><p>问题排除</p><p><code>event</code> 打开 <code>事件查看器</code>，获取VPN连接失败错误代码</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230216100057902.png" alt="image-20230216100057902"></p></li><li><p>搜索对应的问题描述：<a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/networking/troubleshoot-error-720-when-establishing-a-vpn-connection">尝试建立 VPN 连接时出现“失败后返回的错误代码为 720”</a></p></li><li><p>最终解决方案：重新安装 WAN 微型端口 (IP) 接口驱动程序</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述&lt;/p&gt;
&lt;p&gt;确认VPN信息正确的条件下，选择&lt;code&gt;PPTP&lt;/code&gt;协议连接，提示 “不能建立到远程计算机的连接。你可能需要更改此连接的网络设置” 的错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题排除&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ev</summary>
      
    
    
    
    <category term="操作系统" scheme="https://hmxyl.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="点滴" scheme="https://hmxyl.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
    <category term="Windows" scheme="https://hmxyl.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows 命令行命令记录</title>
    <link href="https://hmxyl.github.io/20230216/92ff07c.html"/>
    <id>https://hmxyl.github.io/20230216/92ff07c.html</id>
    <published>2023-02-16T02:39:23.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>说明</th><th>命令</th></tr></thead><tbody><tr><td>ipconfig /flushdns</td><td>Windows刷新DNS命令</td></tr><tr><td>wmic memphysical get maxcapacity</td><td>查看支持的最大内存容量</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ipconfig /flushdns&lt;/td&gt;
&lt;td&gt;Windows刷新DNS命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;</summary>
      
    
    
    
    <category term="操作系统" scheme="https://hmxyl.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Windows" scheme="https://hmxyl.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Redis-ACL</title>
    <link href="https://hmxyl.github.io/20230210/4be8fe93.html"/>
    <id>https://hmxyl.github.io/20230210/4be8fe93.html</id>
    <published>2023-02-10T07:14:01.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。</p><p>Redis AUTH命令在Redis 6中进行了扩展，所以现在可以以双参数形式使用它:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUTH <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里有一个旧形式的例子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUTH <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所发生的情况是，用于身份验证的用户名是“default”，因此仅指定密码就意味着我们希望根据默认用户进行身份验证。这提供了向后兼容性。</p><p>如果该用户具有 <code>nopass</code>规则，那么新的连接将立即作为“默认”用户进行身份验证，而不需要通过AUTH命令提供任何密码。</p><p>如果“默认”用户没有标记为<code>nopass</code>，则连接将在未验证的状态下启动，并将需要AUTH(或HELLO命令AUTH选项)才能进行身份验证并开始工作。</p><h1>使用场景</h1><ol><li>您希望通过限制对命令和密钥的访问来提高安全性，这样不受信任的客户机就没有访问权限，而受信任的客户机只有执行所需工作所需的最低级别的数据库访问权限。例如，某些客户端可能只能执行只读命令。</li><li>您希望提高操作安全性，以便访问Redis的进程或人员不允许由于软件错误或手动错误而损坏数据或配置。例如，从Redis获取延迟作业的worker没有理由能够调用FLUSHALL命令。</li></ol><h1>配置ACL</h1><p>Redis ACL用户的定义格式如下: <code>user &lt;username&gt; ... acl rules ...</code> 如<code> worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</code></p><p>默认情况下，只定义了一个名为default的用户。我们可以使用ACL LIST命令来检查当前活动的ACL，并验证一个新启动的、默认配置的Redis实例的配置是什么:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>每行的前两个单词是“user”，后面跟着用户名。下一个单词是描述不同事物的ACL规则。我们将详细说明这些规则是如何工作的，但现在只需要说明默认用户被配置为活动(on)，不需要密码(nopass)，可以访问每个可能的密钥(~<em>)和发布/订阅通道(&amp;</em>)，并且能够调用每个可能的命令(+@all)。</p><p>此外，在默认用户的特殊情况下，使用<code>nopass</code>规则意味着新连接将自动使用默认用户进行身份验证，而不需要任何显式的AUTH调用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> ACL SETUSER aliceOK<span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user alice off resetchannels -@all"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span class="token comment"># 这样的用户完全没用。让我们尝试定义用户，使其处于活动状态，具有密码，并且只能使用GET命令访问以字符串“cached:”开头的键名。</span><span class="token operator">&gt;</span> ACL SETUSER alice on <span class="token operator">&gt;</span>p1pp0 ~cached:* +getOK<span class="token operator">&gt;</span> AUTH alice p1pp0OK<span class="token operator">&gt;</span> GET foo<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to access one of the keys used as arguments<span class="token operator">&gt;</span> GET cached:1234<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token operator">&gt;</span> SET cached:1234 zap<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to run the <span class="token string">'set'</span> <span class="token builtin class-name">command</span><span class="token comment"># ACL GETUSER 是 ACL LIST的替代方案，方便阅读</span><span class="token operator">&gt;</span> ACL GETUSER alice<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"flags"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"on"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"passwords"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"2d9c75..."</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"commands"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"-@all +get"</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"keys"</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"~cached:*"</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"channels"</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">""</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"selectors"</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token comment"># 使用另一个ACL SETUSER命令(来自不同的用户，因为alice不能运行ACL命令)，我们可以向用户添加多个模式:</span><span class="token operator">&gt;</span> ACL SETUSER alice ~objects:* ~items:* ~public:*OK<span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user alice on #2d9c75... ~cached:* ~objects:* ~items:* ~public:* resetchannels -@all +get"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>ACL规则</h1><p>ACL规则可以以任意顺序指定：例如，可以从密码开始，然后是标志或密钥模式。但是请注意，加法和减法规则将根据顺序改变含义。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 例如，请看下面的例子:</span><span class="token comment">#</span><span class="token comment">#   user alice on +@all -DEBUG ~* &gt;somepassword</span><span class="token comment">#</span><span class="token comment"># 这将允许“alice”使用除DEBUG命令之外的所有命令,因为 +@all将所有命令添加到alice可以使用的命令集，后来DEBUG被删除。</span><span class="token comment"># 然而，如果我们颠倒两个ACL规则的顺序，结果将是不同的:</span><span class="token comment">#</span><span class="token comment">#   user alice on -DEBUG +@all ~* &gt;somepassword</span><span class="token comment">#</span><span class="token comment"># 现在，当alice在允许的命令集中还没有命令时，DEBUG被删除，之后所有的命令都被添加，所以用户将能够执行所有的命令。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本上ACL规则是从左到右处理的。</p><p>下面是有效的ACL规则列表。某些规则只是单个单词，用于激活或删除标志，或执行对用户ACL的给定更改。其他规则是与命令或类别名称、键模式等连接在一起的字符前缀。</p><ul><li><p>启用和禁用用户</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>on</td><td>启用用户：可以作为该用户进行身份验证。</td></tr><tr><td>off</td><td>禁止该用户：不再可能对该用户进行身份验证；但是，以前经过身份验证的连接仍然可以工作。<br>注意，如果默认用户被标记为关闭，那么新的连接将作为未验证启动，并且将要求用户发送带有AUTH选项的AUTH或HELLO，以便以某种方式进行身份验证，而不管默认用户配置如何。</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>allow和disallow命令</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead></table></li></ul><p>|+<command> | 将该命令添加到用户可以调用的命令列表中。可以与<code>|</code>一起使用以允许子命令（例如<code>+config|get</code>)。 |<br>| -<command> | 将该命令移到用户可以调用的命令列表中。从Redis 7.0开始，它可以与<code>|</code>一起用于阻塞子命令（例如<code>+config|get</code>)。 |<br>| +@<category> | 添加该类别中所有用户调用的命令，有效类别为@admin， @set， @sortedset，…诸如此类， <code>ACL CAT </code>命令查看完整的列表。<br>特殊类别@all表示所有命令，包括当前存在于服务器中的命令，以及将来将通过模块加载的命令。 |<br>| -@<category> | 类似<code> +@&lt;category&gt;</code> 但是从客户端可以调用的命令列表中删除命令。 |<br>| +<command>|first-arg（弃用） | 允许在其他情况下禁用命令的特定第一个参数<br>它只支持没有子命令的命令，并且不允许作为<code>-SELECT|1</code>这样的负形式，只支持以<code>+</code>开头的加法。 |<br>| allcommands | <code> +@all</code>另外一种书写形式.  注意，它意味着能够执行通过模块系统加载的所有未来命令。 |<br>| nocommands | <code> -@all</code>另外一种书写形式 |</command></category></category></command></command></p><ul><li><p>允许和禁止某些密钥和密钥权限</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>~<pattern></pattern></td><td>可以作为命令的一部分, 添加一个键的模式 <br>例如<code>~*</code> 允许所有的键 。该模式是一个全局样式的模式，类似于KEYS的模式。可以指定多个模式。</td></tr><tr><td>%R~<pattern></pattern></td><td>(版本<code>7.0</code>之后)  添加键读取模式，指定可以从哪些键读取。<br>它的行为类似于常规键模式，但只授予从匹配给定模式的键读取的权限. <br>有关更多信息，请参阅关键权限。</td></tr><tr><td>%W~<pattern></pattern></td><td>(版本<code>7.0</code>之后)  添加指定的写键模式。指定可以写入哪些键。<br>它的行为类似于常规键模式，但只授予写入匹配给定模式的键的权限。<br>有关更多信息，请参阅关键权限。</td></tr><tr><td>%RW~<pattern></pattern></td><td>(版本<code>7.0</code>之后) <code> ~&lt;pattern&gt;</code>另外一种书写形式</td></tr><tr><td>allkeys</td><td><code>~*</code>另外一种书写形式</td></tr><tr><td>resetkeys</td><td>刷新允许的键模式列表。 <br>例如<code>ACL ~foo:* ~bar:* resetkeys ~objects:*</code>，将只允许客户端访问匹配模式<code>objects:*</code>的键。</td></tr></tbody></table></li><li><p>允许和禁止发布/订阅频道:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>&amp;<pattern></pattern></td><td>(版本<code>6.2</code>之后) 添加用户可以访问的 <code>Pub/Sub</code> 通道的全局样式模式。可以指定多个通道模式。<br>注意：模式匹配只对<code>PUBLISH</code>和<code>SUBSCRIBE</code>提到的通道进行, 而<code>PSUBSCRIBE</code>要求它的通道模式和用户允许的通道模式之间的文字匹配</td></tr><tr><td>allchannels</td><td><code>&amp;*</code>另外一种书写形式，允许用户访问所有Pub/Sub通道。</td></tr><tr><td>resetchannels</td><td>刷新允许的通道模式列表，如果用户的发布/订阅客户端不再能够访问各自的通道 和/或 通道模式，则断开这些客户端。</td></tr></tbody></table></li><li><p>为用户配置有效密码</p><p>如果一个用户没有标记为nopass，并且没有有效密码列表，那么该用户实际上是不可能使用的，因为无法以该用户身份登录</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>&gt;<password></password></td><td>将此密码添加到用户的有效密码列表中。例如，<code>&gt;mypass</code>会将<code>mypass</code>添加到有效密码列表中。<br>该指令清除<code>nopass</code>标志(参见后面的内容)。每个用户可以有任意数量的密码。</td></tr><tr><td>&lt;<password></password></td><td>从有效密码列表中删除此密码。如果您试图删除的密码实际上没有设置，则会发出一个错误。</td></tr><tr><td>#<hash></hash></td><td>将此SHA-256哈希值添加到用户的有效密码列表中。<br>此哈希值将与为ACL用户输入的密码的哈希值进行比较。这允许用户在acl.conf文件中存储哈希值，而不是存储明文密码。<br>只有SHA-256哈希值被接受，因为密码哈希值必须是64个字符，并且只包含小写的十六进制字符。</td></tr><tr><td>!<hash></hash></td><td>从有效密码列表中删除此散列值。<br>当您不知道由哈希值指定的密码，但希望从用户中删除密码时，这很有用。</td></tr><tr><td>nopass</td><td>该用户设置的所有密码都被删除，并且该用户被标记为不需要密码：这意味着每个密码都适用于该用户。<br>如果此指令用于默认用户<code>default</code>，则每个新连接将立即使用默认用户进行身份验证，而不需要任何显式的<code>AUTH</code>命令。<br>注意，resetpass 指令将清除此条件。</td></tr><tr><td>resetpass</td><td>清除允许的密码列表并删除<code>nopass</code>状态。<br>在<code>resetpass</code>之后，用户没有关联的密码，如果不添加一些密码（或者稍后将其设置为nopass）就无法进行身份验证。</td></tr></tbody></table></li><li><p>为用户配置选择器</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>(<rule list="">)</rule></td><td>(版本<code>7.0</code>之后) 创建一个新的选择器来匹配规则。<br>用括号中指定的选项创建一个新的选择器，并将其附加到用户。每个选项应该用空格隔开。第一个字符必须是<code>(</code>最后一个字符必须是<code>)</code><br>选择器在用户权限之后计算，并根据它们定义的顺序计算。如果一个命令匹配用户权限或任何选择器，它就被允许。<br>去 <a href="https://redis.io/docs/management/security/acl/#selectors">selectors</a> 查看更多信息</td></tr><tr><td>clearselectors</td><td>(版本<code>7.0</code>之后) 删除所有附加到用户的选择器</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>重置用户:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>reset</td><td>执行以下操作:<code>resetpass, resetkeys, resetchannels, allchannels(如果设置了acl-pubsub-default)， off, clearselectors， -@all</code><br>用户将返回到创建后立即具有的相同状态。</td></tr></tbody></table></li></ul><h1>命令分类</h1><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>admin</td><td>管理命令。普通应用程序永远不需要使用这些. <br>Includes REPLICAOF, CONFIG, DEBUG, SAVE, MONITOR, ACL, SHUTDOWN, etc.</td></tr><tr><td>blocking</td><td>可能阻塞连接，直到另一个命令释放</td></tr><tr><td>connection</td><td>影响连接或其他连接的命令. 包含 AUTH, SELECT, COMMAND, CLIENT, ECHO, PING, 等</td></tr><tr><td>dangerous</td><td>有潜在危险(由于各种原因，每一种都应谨慎考虑). 包含 FLUSHALL, MIGRATE, RESTORE, SORT, KEYS, CLIENT, DEBUG, INFO, CONFIG, SAVE, REPLICAOF, 等</td></tr><tr><td>fast</td><td>Fast O(1) 命令. 可以循环参数的数量，但不是键中的元素数量。</td></tr><tr><td>keyspace</td><td>以类型不可知的方式从键、数据库或其元数据中写入或读取。包括DEL, RESTORE, DUMP, RENAME, EXISTS, DBSIZE, KEYS, EXPIRE, TTL, FLUSHALL等。<br>可能修改键空间、键或元数据的命令也将有<code>写</code>类别<br>只读取键空间、键或元数据的命令将具有<code>read</code>类别</td></tr><tr><td>pubsub</td><td>PubSub相关命令</td></tr><tr><td>read</td><td>从键(值或元数据)读取。注意，不与键交互的命令既不能读也不能写。</td></tr><tr><td>scripting</td><td>Scripting相关命令</td></tr><tr><td>slow</td><td>所有不是快速的命令.</td></tr><tr><td>transaction</td><td>WATCH / MULTI / EXEC 相关命令</td></tr><tr><td>write</td><td>写入键(值或元数据)。</td></tr><tr><td>bitmap</td><td>Data type: bitmaps related.</td></tr><tr><td>set</td><td>Data type: sets related.</td></tr><tr><td>sortedset</td><td>Data type: sorted sets related.</td></tr><tr><td>geo</td><td>Data type: geospatial indexes related.</td></tr><tr><td>hash</td><td>Data type: hashes related.</td></tr><tr><td>hyperloglog</td><td>Data type: hyperloglog related.</td></tr><tr><td>stream</td><td>Data type: streams related.</td></tr><tr><td>string</td><td>Data type: strings related.</td></tr><tr><td>list</td><td>Data type: lists related.</td></tr></tbody></table><p>有关ACL配置的更多信息，请参见 <a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。&lt;/p&gt;
&lt;p&gt;Redis AUTH命令在Redis 6中进行了扩展，所以现在可以以双参数形式使用它:&lt;/p&gt;
&lt;pre c</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-配置文件</title>
    <link href="https://hmxyl.github.io/20230208/6b8605c4.html"/>
    <id>https://hmxyl.github.io/20230208/6b8605c4.html</id>
    <published>2023-02-08T10:19:01.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>官方模板文件</h1><p>参考：<a href="https://redis.io/docs/management/config-file/">https://redis.io/docs/management/config-file/</a></p><p>各版本参数变更：<a href="https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/ParameterGroups.Redis.html">https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/ParameterGroups.Redis.html</a></p><h1>具体配置项</h1><h2 id="INCLUDES：引入自定义配置文件">INCLUDES：引入自定义配置文件</h2><p>如果你有一个适用于所有Redis服务器的标准模板，但也需要自定义一些每个服务器的设置，可以使用 <code>include </code> 配置</p><p>选项<code>include</code>不会被命令<code>CONFIG REWRITE</code>从管理或Redis哨兵重写。由于Redis总是使用最后处理的行作为配置指令的值，你最好把<code>include</code>放在配置文件的开头，以避免在运行时覆盖配置更改。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## INCLUDES ###################################</span><span class="token comment"># include /path/to/local.conf</span><span class="token comment"># include /path/to/other.conf</span><span class="token comment"># include /path/to/fragments/*.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MODULES">MODULES</h2><p>在启动时加载模块。如果服务器不能加载模块，它将中止。可以使用多个<code>loadmodule</code>指令。</p><p>通过Redis Module可以扩展Redis本身的能力，能够实现一些Redis本身不支持的命令</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## MODULES #####################################</span><span class="token comment"># loadmodule /path/to/my_module.so</span><span class="token comment"># loadmodule /path/to/other_module.so</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="NETWORK：网络配置">NETWORK：网络配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################## NETWORK #####################################</span><span class="token comment"># 默认情况下，如果没有指定bind配置指令，Redis将监听来自主机上所有可用网络接口的连接。</span><span class="token comment"># 可以使用bind配置指令监听一个或多个选定的接口，后面跟着一个或多个IP地址。</span><span class="token comment"># 不可用仅指不对应于任何网络接口的地址。已经在使用的地址将总是失败，不支持的协议将无法访问。</span><span class="token comment"># Examples:</span><span class="token comment">#</span><span class="token comment"># bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses</span><span class="token comment"># bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6</span><span class="token comment"># bind * -::*                     # like the default, all available interfaces</span><span class="token comment">#</span><span class="token comment"># ~~~ WARNING ~~~ </span><span class="token comment"># 如果运行Redis的计算机直接暴露在互联网上，绑定到所有接口是危险的，并将实例暴露给互联网上的每个人。</span><span class="token comment"># 所以默认情况下，我们取消注释下面的bind指令，这将迫使Redis只监听IPv4和IPv6(如果可用)环回接口地址(这意味着Redis将只能接受来自其运行的同一主机的客户端连接)。</span><span class="token comment">#</span><span class="token comment"># 如果您确定希望您的实例侦听所有接口,注释掉下面一行。</span><span class="token comment"># 您还需要设置密码，除非您显式禁用protected模式。</span><span class="token comment"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 -::1<span class="token comment"># 默认情况下，传出连接(从副本到主，从哨兵到实例，集群总线等)不会绑定到特定的本地地址。</span><span class="token comment"># 在大多数情况下，这意味着操作系统将基于路由进行处理和连接通过的接口。</span><span class="token comment">#</span><span class="token comment"># 使用bind-source-addr可以配置要绑定的特定地址,这也可能影响连接的路由方式。举例:</span><span class="token comment"># bind-source-addr 10.0.0.1</span><span class="token comment"># 保护模式是一层安全保护层, 默认启用。</span><span class="token comment"># 为了避免打开的Redis实例在互联网上被访问和利用。当开启保护模式且默认用户没有密码时，服务器会自动关闭。</span>protected-mode <span class="token function">yes</span><span class="token comment"># Redis使用默认的加固安全配置指令来减少攻击无辜用户。因此，几种敏感配置指令是不可变的，一些潜在危险的命令会被阻塞。</span><span class="token comment"># 控制Redis写入文件的配置指令(例如，'dir' 和'dbfilename')，并且通常不会在运行时修改。通过使它们不可变来保护它们。</span><span class="token comment"># 通过设置，这些可以暴露给所有连接，也可以只暴露给本地连接</span><span class="token comment"># 下面列出的每一个配置到这些值中的任意一个:</span><span class="token comment">#</span><span class="token comment"># no    - 阻塞任何连接(保持不可变)</span><span class="token comment"># yes   - 允许任何连接(无保护)</span><span class="token comment"># local - 只允许本地连接. Ones originating from the IPv4 address (127.0.0.1), IPv6 address (::1) or Unix domain sockets.</span><span class="token comment">#</span><span class="token comment"># enable-protected-configs no</span><span class="token comment"># enable-debug-command no</span><span class="token comment"># enable-module-command no</span><span class="token comment"># 接受指定端口上的连接，默认为6379 (IANA #815344).</span><span class="token comment"># IANA: https://www.iana.org 互联网地址编码分配机构</span><span class="token comment"># 如果指定了端口0,Redis将不会监听TCP套接字。</span>port <span class="token number">6379</span><span class="token comment"># TCP listen() backlog.</span><span class="token comment">#</span><span class="token comment"># 在每秒请求数高的环境中，您需要大量的积压，以避免客户端连接速度慢的问题。</span><span class="token comment"># 请注意，Linux内核会将其静默地截断为/proc/sys/net/core/somaxconn的值（cat /proc/sys/net/core/somaxconn）</span><span class="token comment"># 因此请确保同时提高somaxconn和tcp_max_syn_backlog（cat /etc/sysctl.conf）的值，以便获得所需的效果。</span>tcp-backlog <span class="token number">511</span><span class="token comment"># Unix socket.</span><span class="token comment"># 指定用于侦听传入连接的Unix套接字的路径。没有默认值，所以如果没有指定，Redis将不会监听unix套接字。</span><span class="token comment">#</span><span class="token comment"># unixsocket /run/redis.sock</span><span class="token comment"># unixsocketperm 700</span><span class="token comment"># 在客户端空闲N秒后关闭连接(0为禁用)</span><span class="token function">timeout</span> <span class="token number">0</span><span class="token comment"># TCP keepalive.</span><span class="token comment">#</span><span class="token comment"># 如果非零，在没有通信的情况下使用SO_KEEPALIVE向客户端发送TCP ACKs。这很有用，有两个原因:</span><span class="token comment"># 1) 检测失效节点</span><span class="token comment"># 2) 强制中间的网络设备认为连接是活的。</span><span class="token comment">#</span><span class="token comment"># 在Linux操作系统中，该值(单位为秒)为发送ACK的周期。注意，关闭连接需要两倍的时间。在其他内核上，周期取决于内核配置。</span><span class="token comment"># 这个选项的合理值是300秒。从Redis 3.2.1开始，是新的Redis默认值</span>tcp-keepalive <span class="token number">300</span><span class="token comment"># 应用操作系统特有的机制，用指定的ID标记监听套接字，以支持高级路由和过滤功能。</span><span class="token comment">#</span><span class="token comment"># 在Linux上，ID表示一个连接标记</span><span class="token comment"># 在FreeBSD上，ID表示套接字cookie ID。</span><span class="token comment"># 在OpenBSD上，ID表示路由表ID。</span><span class="token comment"># 默认值是0，这意味着不需要标记。</span><span class="token comment"># socket-mark-id 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TLS-SSL">TLS/SSL</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################# TLS/SSL #####################################</span><span class="token comment"># 默认情况下，TLS/SSL协议处于禁用状态。要启用它，可以使用“tls-port”配置指令定义tls侦听端口。port指定了0，则不再监听TCP套接字。</span><span class="token comment"># 在默认端口上启用TLS，请使用:</span><span class="token comment"># port 0</span><span class="token comment"># tls-port 6379</span><span class="token comment"># 配置X.509证书和私钥，用于对连接的客户端、主节点或集群对等体进行服务器身份验证。这些文件应该是PEM格式的。</span><span class="token comment"># tls-cert-file redis.crt</span><span class="token comment"># tls-key-file redis.key</span><span class="token comment"># 如果KEY文件是使用密码短语加密的，那么它也可以包含在这里。</span><span class="token comment"># tls-key-file-pass secret</span><span class="token comment"># 通常Redis对服务器功能(接受连接)和客户端功能(从主服务器复制，建立集群总线连接等)使用相同的证书。</span><span class="token comment"># 有时颁发证书时带有将其指定为仅客户端证书或仅服务器证书的属性。在这种情况下，可能需要对传入(服务器)和传出(客户端)连接使用不同的证书。要做到这一点，请使用以下指令:</span><span class="token comment"># tls-client-cert-file client.crt</span><span class="token comment"># tls-client-key-file client.key</span><span class="token comment"># 如果KEY文件是使用密码短语加密的，那么它也可以包含在这里。</span><span class="token comment"># tls-client-key-file-pass secret</span><span class="token comment"># 配置DH参数文件，开启 DH (Diffie-Hellman) KEY交换功能，这是旧版本OpenSSL(&lt;3.0)的要求。新版本不需要这种配置，建议不要这样做。</span><span class="token comment"># tls-dh-params-file redis.dh</span><span class="token comment"># 配置CA证书包或目录以验证TLS/SSL客户端和对等体。Redis需要至少其中一个的显式配置，并且不会隐式地使用系统范围的配置。</span><span class="token comment"># tls-ca-cert-file ca.crt</span><span class="token comment"># tls-ca-cert-dir /etc/ssl/certs</span><span class="token comment"># 默认情况下，TLS端口上的客户端(包括副本服务器)需要使用有效的客户端证书进行身份验证。</span><span class="token comment"># - no：则不需要且不接受客户端证书。</span><span class="token comment"># - optional：则接受客户端证书，并且在提供时必须有效，但不是必需的。</span><span class="token comment"># tls-auth-clients no</span><span class="token comment"># tls-auth-clients optional</span><span class="token comment"># 默认情况下，Redis副本不会尝试与其主服务器建立TLS连接。使用下面的指令在复制链路上启用TLS。</span><span class="token comment"># tls-replication yes</span><span class="token comment"># 默认情况下，Redis集群总线使用普通TCP连接. 要为总线协议启用TLS，请使用以下指令:</span><span class="token comment"># tls-cluster yes</span><span class="token comment"># 默认情况下，只启用TLSv1.2和TLSv1.3，强烈建议禁用旧的正式弃用版本，以减少攻击面。</span><span class="token comment"># 您可以显式地指定要支持的TLS版本。允许的值不区分大小写，包括 “TLSv1”，“TLSv1.1”，“TLSv1.2”，"TLSv1.3" (OpenSSL &gt;= 1.1.1) 或者任意组合.</span><span class="token comment"># 如果只启用TLSv1.2和TLSv1.3，请使用:</span><span class="token comment"># tls-protocols "TLSv1.2 TLSv1.3"</span><span class="token comment"># 配置允许的密码。有关此字符串语法的更多信息，请参阅 cipher (1ssl) 手册（ 此配置仅适用于&lt;= TLSv1.2）</span><span class="token comment"># tls-ciphers DEFAULT:!MEDIUM</span><span class="token comment"># 配置允许使用的TLSv1.3密码套件。有关此字符串语法的更多信息，特别是关于TLSv1.3密码套件的信息，请参阅 cipher (1ssl) 手册</span><span class="token comment"># tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256</span><span class="token comment">#在选择密码时，使用服务器的首选项而不是客户端首选项。默认情况下，服务器遵循客户端的首选项。</span><span class="token comment"># tls-prefer-server-ciphers yes</span><span class="token comment"># 默认情况下，启用TLS会话缓存，以允许支持TLS会话缓存的客户端更快、更便宜地重新连接。使用下面的指令禁用缓存。</span><span class="token comment"># tls-session-caching no</span><span class="token comment"># 修改TLS缓存的默认会话数。零值将缓存设置为无限大小。默认大小为20480。</span><span class="token comment"># tls-session-cache-size 5000</span><span class="token comment"># 修改TLS缓存会话的默认超时时间。缺省超时时间为300秒。</span><span class="token comment"># tls-session-cache-timeout 60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GENERAL：通用设置">GENERAL：通用设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################# GENERAL #####################################</span><span class="token comment"># 默认情况下，Redis不作为守护进程运行。如果需要，配置为 “yes”</span><span class="token comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><span class="token comment"># 注意，Redis会在文件 /var/run/redis.pid 中写入守护时的 pid</span><span class="token comment"># 当Redis被upstart或systemd监控时，该参数无影响。</span>daemonize no<span class="token comment"># 如果你从upstart或systemd运行Redis, Redis可以与你的supervision tree交互。这些监督方法只是表明“流程已经准备好了”。他们不允许连续的ping回你的supervisor。</span><span class="token comment"># 选项:</span><span class="token comment">#   - no      - no supervision interaction</span><span class="token comment">#   - upstart - signal upstart by putting Redis into SIGSTOP mode requires "expect stop" in your upstart job config</span><span class="token comment">#   - systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET on startup, and updating Redis status on a regular basis.</span><span class="token comment">#   - auto    - detect upstart or systemd method based on UPSTART_JOB or NOTIFY_SOCKET environment variables</span><span class="token comment">#</span><span class="token comment"># 默认为 “no”。要在 upstart/systemd下运行，你可以简单地取消下面这行代码的注释:</span><span class="token comment"># supervised auto</span><span class="token comment"># 如果指定了pid文件，Redis在启动时将其写入指定的位置，并在退出时删除它。</span><span class="token comment">#</span><span class="token comment"># 如果在配置中没有指定pid文件，那么当服务器运行时，不会创建pid文件。</span><span class="token comment"># 当服务器被守护时，即使没有指定pid文件，也会使用pid文件，默认为 "/var/run/redis.pid"。</span><span class="token comment">#</span><span class="token comment"># 正常创建一个pid文件是最好的结果:如果Redis不能创建它，没有什么不好的事情发生，服务器将正常启动和运行。</span><span class="token comment"># 注意，在现代Linux系统中，"/run/redis.pid" 更符合要求，应该用它来代替。</span>pidfile /var/run/redis_6379.pid<span class="token comment"># 指定服务器日志级别</span><span class="token comment"># - debug：有很多信息，对开发/测试很有用</span><span class="token comment"># - verbose：许多极少用到的信息，但不像调试级别那样混乱</span><span class="token comment"># - notice：合理冗余, 但可能是在生产中需要的</span><span class="token comment"># - warning：只记录非常重要/关键的消息</span>loglevel notice<span class="token comment"># 指定日志文件名。</span><span class="token comment"># 空字符串也可以用来强制Redis登录到标准输出。</span><span class="token comment"># 注意，如果使用标准输出进行日志记录，但是使用daemonize，那么日志将被发送到/dev/null</span>logfile <span class="token string">""</span><span class="token comment"># 要启用系统日志记录器，只需将'syslog-enabled'设置为yes，并可选地更新其他系统日志参数以满足您的需要</span><span class="token comment"># syslog-enabled no</span><span class="token comment"># 指定系统日志标识。</span><span class="token comment"># syslog-ident redis</span><span class="token comment"># 系统日志记录的级别，必须为USER或LOCAL0-LOCAL7之间。</span><span class="token comment"># syslog-facility local0</span><span class="token comment"># 要禁用内建的崩溃日志（它可能会在需要时产生更干净的core dumps），取消注释如下:</span><span class="token comment"># crash-log-enabled no</span><span class="token comment"># 要禁用作为崩溃日志一部分的运行时快速内存检查（这可能会让redis更快地终止），取消以下注释:</span><span class="token comment"># crash-memcheck-enabled no</span><span class="token comment">#设置数据库数量。默认数据库是 DB 0，您可以使用select &lt;dbid&gt;在每个连接的基础上选择一个不同的数据库，其中dbid是从0开始计数</span>databases <span class="token number">16</span><span class="token comment"># 默认情况下，Redis只在开始记录到标准输出，并且标准输出是TTY, 系统日志记录被禁用，时显示ASCII艺术徽标</span><span class="token comment"># 基本上，这意味着徽标通常只在交互会话中显示。</span><span class="token comment"># 然而，通过将以下选项设置为yes，可以强制4.0之前的行为，并始终在启动日志中显示ASCII艺术徽标。</span>always-show-logo no<span class="token comment"># 默认情况下，Redis修改进程标题(如'top'和'ps'所示)以提供一些运行时信息。</span><span class="token comment"># 通过将以下设置为no，可以禁用此功能并保留进程名为已执行。</span>set-proc-title <span class="token function">yes</span><span class="token comment"># 当更改流程标题时，Redis使用以下模板来构造修改后的标题。模板变量用花括号指定。支持如下变量:</span><span class="token comment">#</span><span class="token comment"># {title}           父进程时执行的进程名，或子进程的类型</span><span class="token comment"># {listen-addr}     绑定地址或 "*"，后面跟着TCP或TLS端口监听，或Unix套接字(如果有的话)</span><span class="token comment"># {server-mode}     特殊模式, 例如. "[sentinel]" or "[cluster]"</span><span class="token comment"># {port}            TCP监听端口，或0</span><span class="token comment"># {tls-port}        TLS监听端口, or 0.</span><span class="token comment"># {unixsocket}      Unix套接字监听端口, or "".</span><span class="token comment"># {config-file}     使用的配置文件名称.</span><span class="token comment">#</span>proc-title-template <span class="token string">"{title} {listen-addr} {server-mode}"</span><span class="token comment"># 设置用于字符串比较操作的本地环境，也会影响Lua脚本的性能。空字符串表示区域设置是由环境变量派生的。</span><span class="token comment"># Set the local environment which is used for string comparison operations, and  also affect the performance of Lua scripts. </span>locale-collate <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SNAPSHOTTING：快照">SNAPSHOTTING：快照</h2><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230209170518390.png" alt="image-20230209170518390"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ SNAPSHOTTING  ################################</span><span class="token comment"># 将DB数据保存到磁盘</span><span class="token comment"># save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]</span><span class="token comment">#</span><span class="token comment"># 经过给定秒数（seconds），且对DB的写操作超过了给定数量（changes），Redis将保存DB。</span><span class="token comment"># 快照可以通过一个空字符串参数完全禁用，如下例所示:</span><span class="token comment">#</span><span class="token comment"># save ""</span><span class="token comment">#</span><span class="token comment"># 默认情况下Redis会保存DB</span><span class="token comment">#   - 3600 1： 在3600秒(一小时)之后，至少执行了一次更改</span><span class="token comment">#   - 300 100： 在300秒(五分钟)之后，至少执行了100次更改</span><span class="token comment">#   - 60 10000： 在60秒(一分钟)之后，至少执行了10000次更改</span><span class="token comment"># 您可以通过取消注释下面的行显式地设置这些参数</span><span class="token comment"># save 3600 1 300 100 60 10000</span><span class="token comment"># 默认情况下，如果RDB快照启用(至少一个保存点) 并且最近的后台保存失败，Redis将停止接受写入。</span><span class="token comment"># 这将使用户意识到(以一种艰难的方式)数据没有正确地持久化在磁盘上，否则很可能没有人会注意到，从而发生一些灾难。</span><span class="token comment"># 如果后台保存进程重新开始工作，Redis将自动允许再次写入。</span><span class="token comment">#</span><span class="token comment"># 但是，如果你已经设置了适当的Redis服务器监控和持久化，你可能想要禁用这个功能，这样即使有磁盘、权限等问题，Redis也会继续正常工作。</span>stop-writes-on-bgsave-error <span class="token function">yes</span><span class="token comment"># 默认启用：当保存快照文件（RDB数据库）时，使用LZF压缩字符串对象。</span><span class="token comment"># 如果你想在save child中节省一些CPU，将其设置为 "no"，但如果你有可压缩的值或键，数据集可能会更大。</span>rdbcompression <span class="token function">yes</span><span class="token comment"># 从RDB版本5开始，CRC64校验和被放在文件的末尾。</span><span class="token comment"># 这使得格式更能抵抗损坏，但在保存和加载RDB文件时，会有性能损失(大约10%)，因此您可以禁用它以获得最大性能。</span><span class="token comment"># 创建的RDB文件时，禁用校验或者校验和为零，将告诉加载代码跳过该检查</span>rdbchecksum <span class="token function">yes</span><span class="token comment"># loading an RDB or RESTORE payload 时，允许或禁止对 ziplist 或者 listpack 等进行 full sanitization checks</span><span class="token comment"># 这降低了稍后在处理命令时发生断言或崩溃的可能性。</span><span class="token comment"># Options:</span><span class="token comment">#   no         - 从不执行 full sanitization</span><span class="token comment">#   yes        - 总是执行 full sanitization</span><span class="token comment">#   clients    - 仅对用户连接执行full sanitization.</span><span class="token comment">#                排除: RDB 文件, 从主连接接收到的RESTORE命令, 和具有skip-cleanup-payload ACL标志的客户端连接.</span><span class="token comment"># 默认值应该是'clients'，但由于它目前会影响通过MIGRATE进行集群重分片，因此默认情况下暂时设置为'no'。</span><span class="token comment">#</span><span class="token comment"># sanitize-dump-payload no</span><span class="token comment"># 配置快照文件名</span>dbfilename dump.rdb<span class="token comment"># 在未启用持久性的情况下，删除实例中复制使用的RDB文件</span><span class="token comment"># 默认情况下，该选项是禁用的，但是在某些环境下，出于法规或其他安全考虑，应该尽快删除由master保存在磁盘上以提供副本，或由副本存储在磁盘上以加载它们以进行初始同步的RDB文件。</span><span class="token comment"># 注意，此选项仅在同时禁用了AOF和RDB持久性的实例中有效，否则将完全忽略。</span><span class="token comment">#</span><span class="token comment"># 获得相同效果的另一种(有时更好)方法是在主实例和副本实例上使用无磁盘复制。但是，在副本实例的环境下，无磁盘并不总是一种选择。</span>rdb-del-sync-files no<span class="token comment"># 快照工作目录</span><span class="token comment"># dbfilename配置的快照文件，将被写入这个目录中</span><span class="token comment"># Append Only产生的文件也将在此目录中创建。</span><span class="token comment">#</span><span class="token comment"># 注意，这里必须指定目录，而不是文件名。</span><span class="token function">dir</span> ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="REPLICATION：主从复制">REPLICATION：主从复制</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################# REPLICATION #################################</span><span class="token comment"># Master-Replica 复制. 使用replicaof使一个Redis实例成为另一个Redis服务器的副本。 </span><span class="token comment"># 关于Redis复制需要尽快了解的一些事情</span><span class="token comment">#</span><span class="token comment">#   +------------------+      +---------------+</span><span class="token comment">#   |      Master      | ---&gt; |    Replica    |</span><span class="token comment">#   | (receive writes) |      |  (exact copy) |</span><span class="token comment">#   +------------------+      +---------------+</span><span class="token comment">#</span><span class="token comment"># 1) Redis复制是异步的，但是你可以配置一个主服务器，如果它没有与至少给定数量的副本连接，它就会停止接受写操作</span><span class="token comment"># 2) 如果复制链路在相对较短的时间内丢失，Redis副本能够与主服务器执行部分再同步。您可能需要配置复制backlog大小(请参阅此文件的下一节)，并根据您的需要设置合理的值。</span><span class="token comment"># 3) 复制是自动的，不需要用户干预，在网络分区之后，副本会自动尝试重新连接到主节点并与它们重新同步。</span><span class="token comment">#</span><span class="token comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><span class="token comment"># 如果主机有密码保护 ( “requirepass” 配置指令) 可以在启动同步复制进程之前告诉副本进行身份验证, 否则主服务器将拒绝副本请求。</span><span class="token comment">#</span><span class="token comment"># masterauth &lt;master-password&gt;</span><span class="token comment">#</span><span class="token comment"># 然而，如果你正在使用Redis ACL，这是不够的(适用于Redis版本6或更高版本), 默认用户不能执行PSYNC命令和/或复制所需的其他命令。</span><span class="token comment"># 在这种情况下，最好配置一个特殊用户用于复制，并指定主用户配置如下:</span><span class="token comment">#</span><span class="token comment"># masteruser &lt;username&gt;</span><span class="token comment">#</span><span class="token comment"># 当指定了masteruser时，副本将使用新的AUTH表单对其主服务器进行身份验证: AUTH &lt;username&gt; &lt;password&gt;.</span><span class="token comment"># 当一个副本失去了与主服务器的连接，或者当复制仍在进行时，副本可以以两种不同的方式工作:</span><span class="token comment"># 1) 如果 replica-serve-stale-data 配置为"yes"(默认) 副本仍然会回复客户端请求, 可能有过时的数据, 如果这是第一次同步，则数据集可能为空.</span><span class="token comment"># 2) 如果 replica-serve-stale-data 配置为"no", 副本会返回给所有请求一下错误信息："MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to 'no'", 除了以下命令: INFO, REPLICAOF, AUTH, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST, HOST and LATENCY.</span><span class="token comment">#</span><span class="token key attr-name">replica-serve-stale-data</span> <span class="token value attr-value">yes</span><span class="token comment"># 您可以配置副本实例是否接受写操作。</span><span class="token comment"># 针对副本实例写入可能有助于存储一些临时数据(因为写入副本的数据在与主服务器重新同步后很容易被删除)，但如果客户端由于错误配置而写入副本，也可能导致问题。</span><span class="token comment">#</span><span class="token comment"># Redis 2.6 版本之后默认副本是只读的。</span><span class="token comment"># Note: 只读副本不会被设计成暴露给互联网上不受信任的客户端。它只是防止实例被滥用的保护层。</span><span class="token comment"># 默认情况下，只读副本仍然可输出所有管理类命令，如CONFIG、DEBUG等。在有限的范围内，您可以使用'rename-command'来隐藏所有管理的、危险的命令，从而提高只读副本的安全性。</span><span class="token key attr-name">replica-read-only</span> <span class="token value attr-value">yes</span><span class="token comment"># 副本同步策略: 磁盘同步或套接字同步。</span><span class="token comment"># 新的副本和重新连接的副本不能继续复制过程，只是接收差异，需要做所谓的“完全同步”。</span><span class="token comment">#</span><span class="token comment"># RDB文件从主服务器传输到副本。有两种不同的传输方式:</span><span class="token comment"># 1) Disk-backed: Redis主进程创建一个新进程，将RDB文件写入磁盘。随后，父进程将文件增量地传输到副本</span><span class="token comment">#                 当RDB文件生成时，允许更多的副本排队，只要当前生成RDB文件的子进程完成了它的工作，排队的副本们便可以用生成的RDB文件提供服务</span><span class="token comment"># 2) Diskless: Redis主进程创建一个新进程，直接将RDB文件写入复制套接字，而不需要任何磁盘操作。</span><span class="token comment">#              使用无磁盘复制时，一旦传输开始，新的副本将进入队列，当当前传输终止时，新的传输将开始 </span><span class="token comment">#              当使用无盘复制时，主服务器在开始传输之前等待一段可配置的时间(以秒为单位)，希望有多个副本到达，并行传输数据。</span><span class="token comment">#              对于慢磁盘和快速(大带宽)网络，无磁盘复制工作得更好</span><span class="token key attr-name">repl-diskless-sync</span> <span class="token value attr-value">yes</span><span class="token comment"># 当启用无磁盘复制时，为了生成 通过套接字将RDB传输到副本 的子节点，可以配置服务器等待时间</span><span class="token comment"># 这很重要，因为一旦传输开始，就不可能为新的副本提供服务，这些副本将排队等待下一个RDB传输，因此服务器等待延迟以让更多副本到达。</span><span class="token comment">#</span><span class="token comment"># 延迟以秒为单位指定，默认为5秒。要完全禁用它，只需将其设置为0秒，传输将尽快开始。</span><span class="token key attr-name">repl-diskless-sync-delay</span> <span class="token value attr-value">5</span><span class="token comment"># 当使用延迟启用无磁盘复制时，如果期望的最大副本数量已连接，则可以在达到最大延迟之前让复制启动。</span><span class="token comment"># 默认为0意味着没有定义最大副本数量，Redis将等待全部延迟。</span><span class="token key attr-name">repl-diskless-sync-max-replicas</span> <span class="token value attr-value">0</span><span class="token comment"># -----------------------------------------------------------------------------</span><span class="token comment"># WARNING: 由于在这种设置中，副本不会立即在磁盘上存储RDB，因此在故障转移期间可能会导致数据丢失。</span><span class="token comment"># RDB无盘加载+ Redis模块不处理I/O读取可能会导致Redis在与主同步的初始阶段出现I/O错误时中止。</span><span class="token comment"># -----------------------------------------------------------------------------</span><span class="token comment"># Replica可以直接从套接字加载它从复制链路读取的RDB，或者将RDB存储到一个文件中，在从master完全接收到RDB后再读取该文件。</span><span class="token comment">#</span><span class="token comment"># 在许多情况下，磁盘比网络慢，存储和加载RDB文件可能会增加复制时间(甚至增加主服务器的Copy on Write内存和副本缓冲区)。</span><span class="token comment"># 然而，当直接从套接字解析RDB文件时，为了避免数据丢失，只有当新数据集在内存中完全加载时才会安全地刷新当前数据集，从而导致更高的内存使用量。</span><span class="token comment"># 因此，我们有以下选择:</span><span class="token comment">#</span><span class="token comment"># "disabled"    - 不要使用无磁盘加载(先将rdb文件存储到磁盘)</span><span class="token comment"># "swapdb"      - 在直接从套接字解析数据时，将当前db内容保存在RAM中。</span><span class="token comment">#                 在此模式下的副本可以在复制进行时继续服务当前数据集，除非它们无法将主服务器识别为具有来自相同复制历史的数据集</span><span class="token comment">#                 注意，这需要足够的内存，如果没有内存，就有OOM kill的风险</span><span class="token comment"># "on-empty-db" - 仅当当前数据集为空时使用无磁盘加载. </span><span class="token comment">#                 这样更安全，可以避免在复制期间同时加载新旧数据集。</span><span class="token key attr-name">repl-diskless-load</span> <span class="token value attr-value">disabled</span><span class="token comment"># 主机在预定义的时间间隔内向其副本发送ping。可以使用repl_ping_replica_period选项更改这个间隔。缺省值是10秒。</span><span class="token comment">#</span><span class="token comment"># repl-ping-replica-period 10</span><span class="token comment"># 以下选项设置的复制超时时间:</span><span class="token comment"># 1) 从副本的角度来看，同步期间的批量传输I/O</span><span class="token comment"># 2) 从副本(data, ping)的角度看主节点超时</span><span class="token comment"># 3) 从主节点的角度看副本超时(REPLCONF ACK ping)</span><span class="token comment"># 确保这个值大于为repl-ping-replica-period指定的值是很重要的，否则每次在主服务器和副本之间有低流量时都会检测到超时。缺省值是60秒。</span><span class="token comment">#</span><span class="token comment"># repl-timeout 60</span><span class="token comment"># 在SYNC之后禁用副本套接字上的TCP_NODELAY ?</span><span class="token comment">#  - yes： Redis将使用更少的TCP数据包和更少的带宽将数据发送到副本。但是这可能会增加数据在副本端出现的延迟，对于使用默认配置的Linux内核，延迟最长可达40毫秒。</span><span class="token comment">#  - no： 则数据出现在副本端的延迟将减少，但复制将使用更多带宽。</span><span class="token comment"># 默认情况下，我们优化低延迟，但在非常高的流量条件下，或者当主服务器和副本相隔很多跳时，将此选项变为“yes”可能是一个好主意。</span><span class="token key attr-name">repl-disable-tcp-nodelay</span> <span class="token value attr-value">no</span><span class="token comment"># 设置复制backlog大小。backlog是一个缓冲区，当副本断开连接一段时间后，它会积累副本数据，因此当副本想再次重新连接时，通常不需要完全重新同步，部分重新同步就足够了，只需传递断开连接时副本错过的部分数据。</span><span class="token comment"># 复制backlog越大，副本能够忍受断开的时间就越长，并且以后能够执行部分重新同步。</span><span class="token comment"># 只有当至少连接了一个副本时，才分配backlog。</span><span class="token comment">#</span><span class="token comment"># repl-backlog-size 1mb</span><span class="token comment"># 主服务器在一段时间内没有连接的副本后，积压将被释放。</span><span class="token comment"># 下面的选项配置需要经过的秒数，从最后一个副本断开连接的时间开始，以释放积压缓冲区。</span><span class="token comment"># 请注意，副本永远不会因为超时而释放积压，因为它们可能稍后会升级为主副本，并且应该能够正确地与其他副本“部分重新同步”:因此它们应该总是积累积压。</span><span class="token comment">#</span><span class="token comment"># 值为0意味着永远不释放待办事项。</span><span class="token comment">#</span><span class="token comment"># repl-backlog-ttl 3600</span><span class="token comment"># 副本优先级是Redis在INFO输出中发布的整数。它是由Redis哨兵，在主服务器不再正常工作，选择要提升为主服务器的副本时使用</span><span class="token comment"># 优先级低的副本被认为更适合升级，例如，如果有三个优先级为10，100,25的副本，哨兵会选择优先级为10的副本，这是最低的。</span><span class="token comment"># 然而，优先级为0的副本标志着该副本不能执行master角色，因此优先级为0的副本将永远不会被Redis Sentinel选中进行升级。</span><span class="token comment">#</span><span class="token comment"># 缺省情况下，优先级为100。</span><span class="token key attr-name">replica-priority</span> <span class="token value attr-value">100</span><span class="token comment"># 传播错误行为控制了当Redis无法处理来自主机的复制流中正在处理的命令时，它将如何表现。传播过程中发生的错误是意外的，并可能导致数据不一致。然而，在早期版本的Redis中存在一些边缘情况，服务器可能会复制或保留在未来版本中失败的命令。因此，默认行为是忽略此类错误并继续处理命令。</span><span class="token comment"># 如果应用程序希望确保没有数据分歧，则应该将此配置设置为'panic'。该值还可以设置为'panic-on-replicas'，仅当副本在复制流上遇到错误时才恐慌。一旦有足够的安全机制来防止误报崩溃，这两个恐慌值中的一个将成为未来的默认值。</span><span class="token comment">#</span><span class="token comment"># propagation-error-behavior ignore</span><span class="token comment"># 副本忽略磁盘写错误控制副本在无法将从主服务器接收到的写命令持久化到磁盘时的行为。</span><span class="token comment"># 默认情况下，这个配置被设置为'no'，在这种情况下会使副本崩溃。不建议更改这个默认值，但是为了与旧版本的Redis兼容，这个配置可以切换为“yes”，这将只是记录一个警告，并执行从master得到的写命令。</span><span class="token comment">#</span><span class="token comment"># replica-ignore-disk-write-errors no</span><span class="token comment"># -----------------------------------------------------------------------------</span><span class="token comment"># 默认情况下，Redis Sentinel在报告中包含所有副本。一个副本可以排除在Redis哨兵的公告。一个未通知的副本将被'sentinel replicas &lt;master&gt;'命令忽略，并且不会暴露给Redis sentinel的客户端。</span><span class="token comment"># 该选项不会改变复制优先级的行为。即使replica-announce设置为“no”，副本也可以提升为主副本。为了防止这种情况发生，请将replica-priority设置为0。</span><span class="token comment">#</span><span class="token comment"># replica-announced yes</span><span class="token comment"># 如果连接的副本少于N个，主服务器有可能停止接受写操作，延迟小于或等于M秒。也就是N个副本需要处于“online”状态。</span><span class="token comment"># 延迟时间(以秒为单位)必须&lt;=指定的值，是从副本接收到的最后一个ping计算出来的，通常每秒钟发送一次。</span><span class="token comment"># 此选项不保证N个副本将接受写入，但将在没有足够的副本可用的情况下将丢失写入的暴露窗口限制为指定的秒数</span><span class="token comment"># 例如，需要至少3个副本，延迟&lt;= 10秒使用:</span><span class="token comment">#</span><span class="token comment"># min-replicas-to-write 3</span><span class="token comment"># min-replicas-max-lag 10</span><span class="token comment">#</span><span class="token comment"># 将其中一个或另一个设置为0将禁用该特性。</span><span class="token comment"># 默认情况下，min-replica-to-write设置为0(禁用功能)，min-replica-max-lag设置为10。</span><span class="token comment"># Redis主机能够以不同的方式列出附加副本的地址和端口。</span><span class="token comment"># 例如，“INFO replication”部分提供了这些信息，在其他工具中，Redis Sentinel可以使用这些信息来发现副本实例。另一个可用此信息的地方是主机的“ROLE”命令的输出。</span><span class="token comment"># 副本正常上报的列表IP地址和端口可以通过以下方式获取:</span><span class="token comment">#   IP: 通过检查副本用于连接主服务器的套接字的对端地址，可以自动检测该地址。</span><span class="token comment">#   Port: 该端口在复制握手期间由副本通信，并且通常是副本用来侦听连接的端口。</span><span class="token comment">#</span><span class="token comment"># 然而，当使用端口转发或网络地址转换(NAT)时，副本实际上可能通过不同的IP和端口对可达。副本可以使用以下两个选项向其主服务器报告特定的IP和端口集，这样INFO和ROLE都将报告这些值。</span><span class="token comment"># 如果只需要覆盖端口或IP地址，则不需要同时使用这两个选项。</span><span class="token comment">#</span><span class="token comment"># replica-announce-ip 5.5.5.5</span><span class="token comment"># replica-announce-port 1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="KEYS-TRACKING">KEYS TRACKING</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################### KEYS TRACKING #################################</span><span class="token comment"># Redis实现了客户端值缓存的服务器辅助支持。</span><span class="token comment"># 这是使用一个invalidation table来实现的，它使用一个按键名索引的基数键来记住客户端有哪些键。</span><span class="token comment"># 反过来，这用于向客户端发送invalidation messages。请点击本页了解更多功能:</span><span class="token comment">#   https://redis.io/topics/client-side-caching</span><span class="token comment">#</span><span class="token comment"># 当对客户端启用跟踪时，所有的只读查询都被假定为缓存:这将迫使Redis在invalidation table中存储信息。当KEY被修改时，此类信息将被清除，invalidation messages将被发送到客户端。</span><span class="token comment"># 然而，如果工作负载被读操作严重占据，Redis可能会使用越来越多的内存来跟踪多个客户端获取的键。</span><span class="token comment"># </span><span class="token comment"># 因此，可以为无效表配置一个最大填充值。默认情况下，它被设置为1M的键，一旦达到这个限制，Redis将开始从invalidation table中删除键，即使它们没有被修改，只是为了回收内存:这将反过来迫使客户端使缓存的值无效。</span><span class="token comment"># 基本上，表的最大大小是在服务器端用于跟踪谁缓存了什么信息的内存和客户端在内存中保留缓存对象的能力之间进行权衡。</span><span class="token comment"># </span><span class="token comment"># 如果将该值设置为0，则意味着没有限制，并且Redis将在无效表中保留尽可能多的键。</span><span class="token comment"># 在“stats” INFO部分中，您可以找到关于invalidation table中每个给定时刻的键数的信息。</span><span class="token comment">#</span><span class="token comment"># Note: 当在广播模式下使用KEY跟踪时，服务器端不使用内存，因此此设置是无用的。</span><span class="token comment">#</span><span class="token comment"># tracking-table-max-keys 1000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SECURITY：安全配置">SECURITY：安全配置</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## SECURITY ###################################</span><span class="token comment"># 在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。</span><span class="token comment"># Redis ACL用户的定义格式如下:</span><span class="token comment">#   user &lt;username&gt; ... acl rules ...</span><span class="token comment">#</span><span class="token comment"># For example:</span><span class="token comment">#   user worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</span><span class="token comment">#</span><span class="token comment"># 新连接使用特殊用户名“default”。</span><span class="token comment"># 如果该用户具有“nopass”规则，那么新的连接将立即作为“默认”用户进行身份验证，而不需要通过AUTH命令提供任何密码。</span><span class="token comment"># 否则，如果“默认”用户没有标记为“nopass”，则连接将在未验证的状态下启动，并将需要AUTH(或HELLO命令AUTH选项)才能进行身份验证并开始工作。</span><span class="token comment">#</span><span class="token comment"># 基本上ACL规则是从左到右处理的。</span><span class="token comment">#</span><span class="token comment"># ACL日志</span><span class="token comment"># ACL日志跟踪与ACL相关的失败命令和认证事件。ACL日志用于排除被ACL阻塞的命令失败的故障。ACL日志存储在内存中。可以使用ACL LOG RESET回收内存。</span><span class="token comment"># 定义下面ACL日志的最大条目长度。</span><span class="token key attr-name">acllog-max-len</span> <span class="token value attr-value">128</span><span class="token comment"># 使用外部ACL文件</span><span class="token comment"># 不需要在此文件中配置用户，可以使用单独列出用户的文件。两种方法不能混合使用:</span><span class="token comment"># 如果在这里配置用户，同时激活外部ACL文件，服务器将拒绝启动。</span><span class="token comment"># 外部ACL用户文件的格式与redis.conf中用于描述用户的格式完全相同。</span><span class="token comment">#</span><span class="token comment"># aclfile /etc/redis/users.acl</span><span class="token comment"># 重要提示: 从Redis 6开始，“requirepass” 只是一个新的ACL系统之上的兼容层。选项效果将只是为默认用户“default”设置密码。</span><span class="token comment"># 客户端仍然会像往常一样使用AUTH &lt;password&gt;进行身份验证，或者更明确地使用AUTH default &lt;password&gt;，如果他们遵循新协议:两者都可以工作。</span><span class="token comment"># requirepass与aclfile选项和ACL LOAD命令不兼容，这将导致requirepass被忽略。</span><span class="token comment">#</span><span class="token comment"># requirepass foobared</span><span class="token comment"># 默认情况下，新用户初始化具有限制性权限，通过等价于ACL规则'off resetkeys -@all'。</span><span class="token comment"># 从Redis 6.2开始，也可以使用ACL规则管理对Pub/Sub通道的访问。默认的Pub/Sub通道权限如果新用户是由acl-pubsub-default配置指令控制的，该指令接受以下值之一:</span><span class="token comment">#  - allchannels: 允许访问所有的Pub/Sub频道</span><span class="token comment">#  - resetchannels: 撤销对所有发布/订阅频道的访问</span><span class="token comment"># 从Redis 7.0开始，acl-pubsub-default默认为'resetchannels'权限。</span><span class="token comment">#</span><span class="token comment"># acl-pubsub-default resetchannels</span><span class="token comment"># 命令重命名(弃用)。</span><span class="token comment"># ------------------------------------------------------------------------</span><span class="token comment"># WARNING: 尽可能避免使用此选项。相反，使用acl从默认用户中删除命令，只将它们放在您为管理目的而创建的某个管理用户中。</span><span class="token comment"># ------------------------------------------------------------------------</span><span class="token comment"># 可以在共享环境中更改危险命令的名称。例如，CONFIG命令可能会被重命名为难以猜测的内容，以便它仍然对内部使用的工具可用，但对普通客户端不可用。</span><span class="token comment"># 举例：</span><span class="token comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><span class="token comment"># 也可以通过将命令重命名为空字符串来完全终止命令:</span><span class="token comment"># rename-command CONFIG ""</span><span class="token comment">#</span><span class="token comment"># 请注意，更改登录到AOF文件或传输到副本的命令的名称可能会导致问题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CLIENT：客户端">CLIENT：客户端</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################### CLIENTS ####################################</span><span class="token comment"># 设置客户端同时最大连接数。</span><span class="token comment">#  默认情况下，这个限制被设置为10000个客户端，但是如果Redis服务器不能配置进程文件限制，以允许指定的限制，允许的最大客户端数量被设置为当前文件限制-32(因为Redis保留了一些文件描述符供内部使用)</span><span class="token comment"># 一旦达到限制，Redis将关闭所有的新连接，发送一个错误'max number of clients reached'.</span><span class="token comment">#</span><span class="token comment"># 重要说明: 当使用Redis集群时，最大连接数也与集群总线共享:集群中的每个节点将使用两个连接，一个传入连接，另一个传出连接。在非常大的集群的情况下，相应地调整限制是很重要的。</span><span class="token comment">#</span><span class="token comment"># maxclients 10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MEMORY-MANAGEMENT：内存管理">MEMORY MANAGEMENT：内存管理</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################## MEMORY MANAGEMENT ################################</span><span class="token comment"># 将内存使用限制设置为指定的字节数。当达到内存限制时，Redis将尝试根据所选的清除策略(参见maxmemory-policy)删除键。</span><span class="token comment"># 如果Redis不能根据策略删除键，或者如果策略设置为'noeviction'， Redis将开始回复会使用更多内存的命令，如SET, LPUSH等，并将继续回复只读命令，如GET。</span><span class="token comment"># 当使用Redis作为LRU或LFU缓存，或为实例设置硬内存限制(使用'noeviction'策略)时，此选项通常很有用。</span><span class="token comment">#</span><span class="token comment"># maxmemory &lt;bytes&gt;</span><span class="token comment"># MAXMEMORY策略:当达到MAXMEMORY时，Redis如何选择要删除的内容。您可以在以下行为中选择:</span><span class="token comment">#</span><span class="token comment"># volatile-lru -&gt; 使用近似的LRU驱逐，仅具有过期时间的KEY</span><span class="token comment"># allkeys-lru -&gt; 使用近似的LRU驱逐任何键。</span><span class="token comment"># volatile-lfu -&gt; 使用近似LFU驱逐LFU, 仅具有过期时间的KEY</span><span class="token comment"># allkeys-lfu -&gt; 使用近似的LFU驱逐任何键</span><span class="token comment"># volatile-random -&gt; 删除具有过期时间设置的随机KEY</span><span class="token comment"># allkeys-random -&gt; 删除一个随机的任意KEY</span><span class="token comment"># volatile-ttl -&gt; 使用最近的过期时间(小TTL)删除KEY</span><span class="token comment"># noeviction -&gt; 不要清除任何东西，只是在写操作时返回一个错误。</span><span class="token comment">#</span><span class="token comment"># LRU （Least Recently Used）：最近最少使用</span><span class="token comment"># LFU （Least Frequently Used）：最不经常使用的</span><span class="token comment">#</span><span class="token comment"># LRU、LFU和volatile-ttl均采用近似随机化算法实现。</span><span class="token comment">#</span><span class="token comment"># 注意:使用上述任何一种策略，当没有合适的键用于驱逐时，Redis将在需要更多内存的写操作时返回一个错误。</span><span class="token comment"># 这些命令通常用于创建新KEY、添加数据或修改现有KEY。例如:SET、INCR、HSET、LPUSH、SUNIONSTORE、SORT(由于STORE参数)和EXEC(如果事务包含任何需要内存的命令)。</span><span class="token comment"># 默认配置：</span><span class="token comment">#</span><span class="token comment"># maxmemory-policy noeviction</span><span class="token comment"># LRU、LFU和最小TTL算法都不是精确算法，而是近似算法(为了节省内存)，因此您可以调整它的速度或精度。</span><span class="token comment"># 默认情况下，Redis将检查五个键，并选择一个最近使用最少的键，您可以使用以下配置指令更改样本大小。默认值5可以产生足够好的结果。10非常接近真实的LRU，但消耗更多的CPU。3更快，但不是很准确</span><span class="token comment">#</span><span class="token comment"># maxmemory-samples 5</span><span class="token comment"># 驱逐处理被设计为在默认设置下正常工作。</span><span class="token comment"># 如果有一个异常大的写流量，这个值可能需要增加。降低这个值可能会降低延迟，但会影响清除处理的有效性</span><span class="token comment">#   0 = minimum latency, 10 = default, 100 = process without regard to latency</span><span class="token comment">#</span><span class="token comment"># maxmemory-eviction-tenacity 10</span><span class="token comment"># 从Redis 5开始，默认情况下副本将忽略其maxmemory设置(除非在故障转移后或手动将其提升为主内存)。</span><span class="token comment"># 这意味着KEY的删除将仅由主服务器处理，将DEL命令发送到副本，作为主服务器中的KEY删除。</span><span class="token comment"># 这种行为可以确保主副本和副本保持一致，这通常是你想要的，但是如果你的副本是可写的，或者你想让副本有一个不同的内存设置，并且你确定对副本执行的所有写入都是幂等的，那么你可以改变这个默认值(但一定要理解你在做什么)。</span><span class="token comment"># 请注意，由于副本默认情况下不驱逐，因此它最终可能会使用比maxmemory设置的内存更多的内存(副本上的某些缓冲区可能更大，或者数据结构有时可能占用更多内存等等)。因此，请确保监视副本，并确保它们有足够的内存，在主服务器达到配置的maxmemory设置之前不会出现真正的内存不足情况。</span><span class="token comment">#</span><span class="token comment"># replica-ignore-maxmemory yes</span><span class="token comment"># Redis以两种方式回收过期KEY:当这些KEY被发现过期时，在访问时，以及在后台，在所谓的“活动过期KEY”中回收。KEY空间被缓慢地交互式地扫描，寻找要回收的过期KEY，这样就有可能释放过期KEY的内存，并且在短时间内不会再次访问这些KEY。</span><span class="token comment"># 过期周期的默认工作将尽量避免在内存中保留超过10%的过期KEY，并尽量避免消耗总内存的25%以上，并增加系统的延迟。</span><span class="token comment"># 然而，可以将通常设置为“1”的过期“effort”增加到更大的值，直到值“10”。</span><span class="token comment"># 在其最大值时，系统将使用更多的CPU，更长的周期(技术上可能会引入更多的延迟)，并且系统中仍然存在的已经过期的KEY将更少。这是内存、CPU和延迟之间的权衡。</span><span class="token comment">#</span><span class="token comment"># active-expire-effort 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LAZY-FREEING">LAZY FREEING</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################# LAZY FREEING ####################################</span><span class="token comment"># Redis有两个删除键的原语。一个称为DEL，是对对象的阻塞删除。这意味着服务器停止处理新命令，以便以同步方式回收与对象关联的所有内存。</span><span class="token comment"># 如果删除的键与一个小对象相关联，执行DEL命令所需的时间非常小，与Redis中的大多数其他O(1)或O(log_N)命令相当。</span><span class="token comment"># 但是，如果键与包含数百万个元素的聚合值相关联，则服务器可能阻塞很长时间(甚至几秒钟)以完成操作。</span><span class="token comment">#</span><span class="token comment"># 出于上述原因，Redis还提供了非阻塞删除原语，如UNLINK(非阻塞DEL)和FLUSHALL和FLUSHDB命令的ASYNC选项，以便在后台回收内存。这些命令在常数时间内执行。另一个线程将在后台以最快的速度递增地释放对象。</span><span class="token comment">#</span><span class="token comment"># FLUSHALL和FLUSHDB的DEL、UNLINK和ASYNC选项由用户控制.</span><span class="token comment"># 什么时候使用一种或另一种是好主意，这取决于应用程序的设计。</span><span class="token comment"># 然而，Redis服务器有时不得不删除键或刷新整个数据库作为其他操作的副作用。</span><span class="token comment"># 具体来说，Redis在以下场景中独立于用户调用删除对象:</span><span class="token comment">#</span><span class="token comment"># 1) 在清除时，由于maxmemory和maxmemory策略配置，为了为新数据腾出空间，不会超过指定的内存限制.</span><span class="token comment"># 2) 因为过期:当一个键具有相关的生存时间(参见expire命令)时，必须从内存中删除.</span><span class="token comment"># 3) 因为将数据存储在可能已经存在的键上的命令的副作用。</span>     例如，RENAME命令，当它被另一个KEY替换时，可能会删除旧的KEY内容。类似地，带有STORE选项的SUNIONSTORE或SORT可以删除现有的键。     SET命令本身删除指定键的任何旧内容，以便用指定的字符串替换它.<span class="token comment"># 4) 在复制过程中，当一个副本与它的主数据库执行完全重新同步时，整个数据库的内容将被删除，以便加载刚刚传输的RDB文件</span><span class="token comment">#</span><span class="token comment"># 在上述所有情况下，默认是以阻塞方式删除对象，就像调用DEL一样。但是，您可以使用以下配置指令专门配置每种情况，以便像调用UNLINK一样以非阻塞的方式释放内存</span><span class="token key attr-name">lazyfree-lazy-eviction</span> <span class="token value attr-value">no</span><span class="token key attr-name">lazyfree-lazy-expire</span> <span class="token value attr-value">no</span><span class="token key attr-name">lazyfree-lazy-server-del</span> <span class="token value attr-value">no</span><span class="token key attr-name">replica-lazy-flush</span> <span class="token value attr-value">no</span><span class="token comment"># 当用户调用DEL代码替换为UNLINK调用是不容易的情况下，修改DEL命令的默认行为，完全像UNLINK，使用以下配置指令:</span><span class="token key attr-name">lazyfree-lazy-user-del</span> <span class="token value attr-value">no</span><span class="token comment"># FLUSHDB, FLUSHALL, SCRIPT FLUSH and FUNCTION FLUSH 同时支持异步和同步删除, 可以通过将[SYNC|ASYNC]标志传递到命令中来控制。</span><span class="token comment"># 当两个标志都没有传递时，该指令将用于确定是否应该异步删除数据。</span><span class="token key attr-name">lazyfree-lazy-user-flush</span> <span class="token value attr-value">no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="THREADED-I-O">THREADED I/O</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ THREADED I/O ：慢I/O访问线程操作 #################################</span><span class="token comment"># Redis主要是单线程的，但是也有一些线程操作，如UNLINK，慢I/O访问和其他在边线程上执行的事情。</span><span class="token comment">#</span><span class="token comment"># 现在也可以在不同的I/O线程中处理Redis客户端的套接字读写。</span><span class="token comment"># 由于写的很慢，通常Redis用户使用流水线来加快每个核的性能，并生成多个实例来扩展。使用I/O线程，可以轻松地将Redis加速两倍，而无需诉诸于流水线或实例分片。</span><span class="token comment"># 默认情况下线程是禁用的，我们建议只在至少有4个或更多内核的机器上启用它，至少留下一个备用内核。</span><span class="token comment"># 使用超过8个线程不太可能有太大帮助。我们也建议只有当你真的有性能问题时才使用线程I/O，因为Redis实例能够使用相当大比例的CPU时间，否则使用这个特性没有任何意义。</span><span class="token comment">#</span><span class="token comment"># 例如，如果你有一个四核CPU，尝试使用2或3个I/O线程，如果你有一个8核，尝试使用6个线程。为了启用I/O线程，使用以下配置指令:</span><span class="token comment">#</span><span class="token comment"># io-threads 4</span><span class="token comment">#</span><span class="token comment"># 将io-threads设置为1将会像往常一样使用主线程。当I/O线程被启用时，我们只使用线程进行写操作，即执行write(2)系统调用并将客户端缓冲区传输到套接字。</span><span class="token comment"># 然而，也可以使用以下配置指令启用读取线程和协议解析，将其设置为yes:</span><span class="token comment">#</span><span class="token comment"># io-threads-do-reads no</span><span class="token comment">#</span><span class="token comment"># 通常，线程读取没有太大帮助。</span><span class="token comment"># NOTE 1: 这个配置指令不能在运行时通过CONFIG SET修改。此外，当启用SSL时，此特性目前无法工作。</span><span class="token comment"># NOTE 2:如果你想使用red -benchmark测试Redis的加速，确保你也在线程模式下运行基准测试本身，使用——threads选项来匹配Redis线程的数量，否则你将无法注意到这些改进。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="KERNEL-OOM-CONTROL">KERNEL OOM CONTROL</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################ KERNEL OOM CONTROL：内核oom控制 ##############################</span><span class="token comment"># 在Linux上，可以提示内核OOM杀手在内存不足时应该首先杀死哪些进程。</span><span class="token comment"># 启用这个特性可以使Redis主动控制所有进程的oom_score_adj值，这取决于它们的角色。</span><span class="token comment"># 默认分数将尝试在所有其他进程之前杀死后台子进程，并在主进程之前杀死副本。</span><span class="token comment"># Redis支持以下选项:</span><span class="token comment"># - no:       不要更改oom-score-adj(默认值)。</span><span class="token comment"># - yes:      “相对”的别名见下文。</span><span class="token comment"># - absolute: om-score-adj- Values中的值被写入内核。</span><span class="token comment">#- relative:  这些值在服务器启动时相对于oom_score_adj的初始值使用，然后被限制在-1000到1000的范围内。因为初始值通常为0，所以它们通常会与绝对值匹配。</span>oom-score-adj no<span class="token comment"># 当使用oom-score-adj时，该指令控制主进程、副本进程和后台子进程的特定值。数值范围为-2000到2000(越高意味着越有可能被杀死)。</span><span class="token comment"># 没有特权的进程(不是根进程，并且没有CAP_SYS_RESOURCE功能)可以自由地增加其值，但不能将其降低到初始设置以下。</span><span class="token comment"># 这意味着将oom-score-adj设置为“相对”，并将oom-score-adj-values设置为正值总是会成功。</span>oom-score-adj-values <span class="token number">0</span> <span class="token number">200</span> <span class="token number">800</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="KERNEL-transparent-hugepage-CONTROL">KERNEL transparent hugepage CONTROL</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################### KERNEL transparent hugepage CONTROL ###################### </span><span class="token comment"># 通常内核的透明大页面控件设置为“madvise”或者默认为“never”(/sys/kernel/mm/transparent_hugepage/enabled)，这样，此配置无效。</span><span class="token comment"># 在将其设置为“always”的系统中，Redis将为了Redis进程尝试禁用它，为了避免延迟问题（特别是fork(2)和CoW的延迟问题）。</span><span class="token comment"># 如果出于某种原因，您更喜欢保持启用，您可以将此配置设置为“no”，并将内核全局设置为“always”。</span>disable-thp <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="APPEND-ONLY-MODE：追加模式">APPEND ONLY MODE：追加模式</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################## APPEND ONLY MODE ###############################</span><span class="token comment"># 默认情况下，Redis会异步将数据集转储到磁盘上。这种模式在许多应用程序中已经足够好了，但是Redis进程的问题或停电可能会导致几分钟的写入丢失(取决于配置的保存点)。</span><span class="token comment"># 仅追加文件是另一种持久性模式，它提供了更好的持久性。</span><span class="token comment"># 例如，使用默认的数据fsync策略(参见后面的配置文件)，Redis可以在一个意外事件中丢失一秒钟的写操作内容（比如服务器断电，或者如果Redis进程本身发生了一些错误），但Reids程序仍然正常运行。</span><span class="token comment"># AOF和RDB持久性可以同时启用，没有任何问题.</span><span class="token comment"># 如果启动时启用AOF, Redis将加载AOF，这是具有更好的持久性保证的文件。</span><span class="token comment">#</span><span class="token comment"># Please check https://redis.io/topics/persistence for more information.</span>appendonly no<span class="token comment"># 仅附加文件的基本名称</span><span class="token comment"># Redis 7和更新版本使用一组只能追加的文件来持久化数据集和应用于它的更改。使用的文件有两种基本类型:</span><span class="token comment"># - 基本文件，它是表示创建文件时数据集完整状态的快照。 基本文件的形式可以是RDB (binary serialized：二进制序列化) or AOF (textual commands：文本命令).</span><span class="token comment"># - 增量文件，其中包含在前一个文件之后应用于数据集的其他命令。</span><span class="token comment">#</span><span class="token comment"># 此外，清单文件用于跟踪文件及其创建和应用它们的顺序。</span><span class="token comment"># Append-only文件的文件名是由Redis按照特定的模式创建的。文件名的前缀基于“appendfilename”配置参数，后面跟着关于序列和类型的附加信息。</span><span class="token comment"># 例如，如果appendfilename设置为appendonly.aof，可以导出以下文件名:</span><span class="token comment"># - appendonly.aof.1.base.rdb （基本文件）</span><span class="token comment"># - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof （增量文件）</span><span class="token comment"># - appendonly.aof.manifest （清单文件）</span>appendfilename <span class="token string">"appendonly.aof"</span><span class="token comment"># 为了方便起见，Redis将所有持久的仅追加文件存储在专用目录中。目录的名称由appenddirname配置参数决定。</span>appenddirname <span class="token string">"appendonlydir"</span><span class="token comment"># fsync()调用告诉操作系统实际将数据写入磁盘，而不是在输出缓冲区中等待更多数据。</span><span class="token comment"># 有些操作系统真的会在磁盘上刷新数据，其他操作系统会尽快尝试这样做。</span><span class="token comment">#</span><span class="token comment"># Redis支持三种不同的模式:</span><span class="token comment"># - no: 不要fsync，让操作系统在需要的时候刷新数据。快。</span><span class="token comment"># - always: 每次写入仅追加日志后进行fsync。慢，但安全。</span><span class="token comment"># - everysec: 每秒只能进行一次fsync。妥协。</span><span class="token comment">#</span><span class="token comment"># 默认是“everysec”，因为这通常是速度和数据安全之间的正确妥协。</span><span class="token comment"># 这取决于您是否可以将其放宽为“no”，从而让操作系统在需要时刷新输出缓冲区，以获得更好的性能(但如果您可以接受一些数据丢失的想法，请考虑默认的持久性模式快照)，或者相反，使用“always”，它非常慢，但比everysec更安全一些。具体内容参考： http://antirez.com/post/redis-persistence-demystified.html</span><span class="token comment">#</span><span class="token comment"># 如果不确定选择哪种，使用默认的“everysec”。</span><span class="token comment"># appendfsync always</span>appendfsync everysec<span class="token comment"># appendfsync no</span><span class="token comment"># 当AOF的fsync策略设置为always或everysec时，一个后台保存进程(一个后台保存或AOF日志后台重写)正在对磁盘执行大量的I/O，在一些Linux配置中，Redis可能会在fsync()调用上阻塞太长时间。</span><span class="token comment"># 请注意，目前还没有修复这个问题，因为即使在不同的线程中执行fsync也会阻塞同步写(2)调用。</span><span class="token comment">#</span><span class="token comment"># 为了缓解这个问题，可以使用以下选项来防止在BGSAVE或BGREWRITEAOF正在进行时在主进程中调用fsync()。</span><span class="token comment"># 这意味着当另一个子文件正在保存时，Redis的持久性与“appendfsync no”相同。</span><span class="token comment"># 实际上，这意味着在最坏的情况下(使用默认的Linux设置)，可能会丢失长达30秒的日志。</span><span class="token comment">#</span><span class="token comment"># 如果你有延迟问题，把这个改为“是”。否则，从耐久性的角度来看，这是最安全的选择。</span>no-appendfsync-on-rewrite no<span class="token comment"># 自动重写append only文件。</span><span class="token comment"># 当AOF日志大小增长到指定的百分比时，Redis能够隐式地自动重写日志文件，调用BGREWRITEAOF。</span><span class="token comment"># 它是这样工作的: Redis记住最近一次重写后AOF文件的大小(如果重启后没有发生重写，则使用启动时AOF的大小)。</span><span class="token comment">#</span><span class="token comment"># 此基本大小与当前大小进行比较. 如果当前大小大于指定的百分比，则会触发重写. 此外，您还需要指定要重写的AOF文件的最小大小, 这对于避免重写AOF文件很有用，即使达到了百分比增长，但它仍然非常小。</span><span class="token comment"># 指定一个百分数为零以禁用自动AOF重写功能。</span>auto-aof-rewrite-percentage <span class="token number">100</span>auto-aof-rewrite-min-size 64mb<span class="token comment"># 在Redis启动过程中，当AOF数据被加载回内存时，可能会发现AOF文件在结束时被截断。当Redis运行的系统崩溃时，可能会发生这种情况, 特别是当ext4文件系统在没有data=ordered选项的情况下被挂载时(然而，当Redis本身崩溃或中止，但操作系统仍然正常工作时，这就不会发生)。</span><span class="token comment"># 当这种情况发生时，Redis可以退出错误，或者加载尽可能多的数据(现在的默认值)，并在发现AOF文件在结束时被截断时启动。以下选项控制此行为。</span><span class="token comment">#</span><span class="token comment"># 如果aof-load-truncated设置为yes，则加载一个截断的AOF文件，并且Redis服务器开始发送日志来通知用户该事件。</span><span class="token comment"># 否则，如果该选项被设置为no，服务器将终止并报错并拒绝启动。当该选项设置为no时，用户需要在重新启动服务器之前使用“redis-check-aof”实用程序修复AOF文件。</span><span class="token comment">#</span><span class="token comment"># 注意，如果AOF文件在中间被发现损坏，服务器仍然会报错退出。这个选项只适用于当Redis试图从AOF文件读取更多的数据，但没有足够的字节将被发现。</span>aof-load-truncated <span class="token function">yes</span><span class="token comment"># Redis可以创建RDB或AOF格式的只能追加的基本文件. 使用RDB格式总是更快更有效，仅出于向后兼容的目的才支持禁用RDB格式。</span>aof-use-rdb-preamble <span class="token function">yes</span><span class="token comment"># Redis支持在AOF中记录时间戳注释，以支持从特定时间点恢复数据。但是，使用此功能会以一种可能与现有AOF解析器不兼容的方式更改AOF格式。</span>aof-timestamp-enabled no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SHUTDOWN">SHUTDOWN</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ SHUTDOWN #####################################</span><span class="token comment"># 关闭时等待副本的最大时间，以秒为单位。</span><span class="token comment">#</span><span class="token comment"># 在关闭期间，宽限期允许任何滞后的副本在主复制存在之前赶上最新的复制偏移量。这段时间可以防止数据丢失，特别是对于没有配置磁盘备份的部署。</span><span class="token comment"># “shutdown-timeout”值是宽限期的持续时间，单位为秒。它只适用于实例有副本的情况。如果要禁用该特性，请将该值设置为0。</span><span class="token comment">#</span><span class="token comment"># shutdown-timeout 10</span><span class="token comment"># 当Redis接收到SIGINT（中断信号：interrupt）或SIGTERM（终止信号：terminal）时，启动关机，默认情况下，如果配置了保存点，则在阻塞操作中将RDB快照写入磁盘。</span><span class="token comment"># 用于信号关闭的选项可以包括以下值:</span><span class="token comment"># default:  仅当配置保存点时保存RDB快照。等待滞后的副本赶上。</span><span class="token comment"># save:     强制数据库保存操作，即使没有配置保存点。</span><span class="token comment"># nosave:   拒绝数据库保存操作，即使配置了一个或多个保存点。</span><span class="token comment"># now:      跳过等待滞后的副本。</span><span class="token comment"># force:    忽略任何通常会阻止服务器退出的错误。</span><span class="token comment">#</span><span class="token comment"># 只要“save”和“nosave”不同时设置，就允许任何值的组合。例如: "nosave force now"</span><span class="token comment">#</span><span class="token comment"># shutdown-on-sigint default</span><span class="token comment"># shutdown-on-sigterm default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NON-DETERMINISTIC-LONG-BLOCKING-COMMANDS">NON-DETERMINISTIC LONG BLOCKING COMMANDS</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################ NON-DETERMINISTIC LONG BLOCKING COMMANDS： 不确定的长阻塞命令 #####################</span><span class="token comment"># 在Redis开始处理或拒绝其他客户端之前，EVAL脚本、函数和某些情况下模块命令的最大时间(以毫秒为单位)。</span><span class="token comment">#</span><span class="token comment"># 如果达到最大执行时间，Redis将开始回复大多数命令与BUSY错误。</span><span class="token comment"># 在这种状态下，Redis只允许执行少量命令。例如，SCRIPT KILL, FUNCTION KILL, SHUTDOWN NOSAVE，可能还有一些模块特定的'allow-busy'命令。</span><span class="token comment"># SCRIPT KILL和FUNCTION KILL只能停止尚未调用任何写命令的脚本，因此，当用户不想等待脚本的自然终止时，如果脚本已经发出了写命令，则SHUTDOWN NOSAVE可能是停止服务器的唯一方法</span><span class="token comment">#</span><span class="token comment"># 缺省值是5秒。可以将其设置为0或负值来禁用此机制(不间断执行)。注意，在过去这个配置有一个不同的名字，现在是一个别名，所以这两个都是一样的:</span><span class="token comment">#</span><span class="token comment"># lua-time-limit 5000</span><span class="token comment"># busy-reply-threshold 5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="REDIS-CLUSTER：集群配置">REDIS CLUSTER：集群配置</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ REDIS CLUSTER  ###############################</span><span class="token comment"># 普通的Redis实例不能成为Redis集群的一部分，只有作为集群节点启动的节点可以。</span><span class="token comment"># 为了启动一个Redis实例作为一个集群节点，启用集群支持取消注释如下:</span><span class="token comment">#</span><span class="token comment"># cluster-enabled yes</span><span class="token comment"># 每个集群节点都有一个集群配置文件。此文件不建议手动编辑。它由Redis节点创建和更新。</span><span class="token comment"># 每个Redis集群节点都需要不同的集群配置文件。</span><span class="token comment"># 确保在同一系统中运行的实例没有重叠的集群配置文件名。</span><span class="token comment">#</span><span class="token comment"># cluster-config-file nodes-6379.conf</span><span class="token comment"># 集群节点超时时间是指一个节点必须不可达的毫秒数，才会被认为处于故障状态。</span><span class="token comment">#</span><span class="token comment"># cluster-node-timeout 15000</span><span class="token comment"># 集群端口是集群总线侦听入站连接的端口。</span><span class="token comment"># 当设置为默认值0时，绑定到命令端口+10000。设置此值要求您在执行cluster meet时指定集群总线端口。</span><span class="token comment"># cluster-port 0</span><span class="token comment"># 如果发生故障的主服务器的数据看起来太旧，它的副本将避免启动故障转移。</span><span class="token comment"># 对于副本来说，没有简单的方法可以准确测量其“数据年龄”，因此执行以下两个检查:</span><span class="token comment">#</span><span class="token comment"># 1) 如果有多个副本能够进行故障转移，它们将交换消息，以便尝试为副本提供最佳复制偏移(处理来自主服务器的更多数据)。</span><span class="token comment">#     副本将尝试通过偏移量获得它们的排名，并将与它们的排名成比例的延迟应用于故障转移的开始。</span><span class="token comment">#</span><span class="token comment"># 2) 每个副本都计算与主节点最后一次交互的时间. 这可能是接收到的最后一个ping或命令 (如果主服务器仍然处于“已连接”状态), 或者与主服务器断开连接后经过的时间(如果复制链路当前断开)。</span><span class="token comment">#     如果最后一次交互太旧，副本将根本不会尝试故障转移。</span><span class="token comment">#</span><span class="token comment"># 第二点可由用户调整。具体来说，如果自上次与主服务器交互以来，所消耗的时间大于以下情况，副本将不执行故障转移:</span><span class="token comment">#</span><span class="token comment">#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period</span><span class="token comment">#   (节点掉线时间 * 集群副本有效性因子) + 循环PING访问的周期时间</span><span class="token comment">#</span><span class="token comment"># 因此，例如，如果node-timeout是30秒，cluster-replica-validity-factor是10，并且假设默认的repo -ping-replica-period是10秒，那么如果它不能与主服务器对话超过310秒，它就不会尝试故障转移。</span><span class="token comment"># 一个大的cluster-replica-validity-factor可能会允许带有太旧数据的副本故障转移到主节点，而一个太小的值可能会阻止集群完全能够选择一个副本。</span><span class="token comment">#</span><span class="token comment"># 为了获得最大可用性，可以将cluster-replica-validity-factor设置为0，这意味着副本将始终尝试故障转移到主服务器，而不管它们最后一次与主服务器交互是什么时候。</span><span class="token comment"># (然而，他们总是尝试应用一个与他们的偏移等级成比例的延迟)。</span><span class="token comment">#</span><span class="token comment"># 0是唯一能够保证当所有分区恢复时，集群始终能够继续运行的值。</span><span class="token comment">#</span><span class="token comment"># cluster-replica-validity-factor 10</span><span class="token comment"># 集群副本能够迁移到孤立的主服务器，即没有工作副本的主服务器。</span><span class="token comment"># 这提高了集群抵抗故障的能力，否则，如果没有工作副本，孤立的主节点就不能在故障发生时被故障转移。但是，只有当它们的旧主人至少还有一定数量的其他工作副本时，副本才会迁移到孤立的主人。这个数字就是“迁移障碍”。迁移障碍为1意味着一个副本只有在它的主副本至少有一个其他工作副本时才会迁移，以此类推。它通常反映集群中每个主节点所需的副本数量。</span><span class="token comment">#</span><span class="token comment"># 默认值是1(只有当它们的主副本保留至少一个副本时，副本才会迁移)。</span><span class="token comment"># 要禁用迁移，只需将其设置为一个非常大的值或将cluster-allow-replica-migration设置为“no”。可以设置0值，但仅在调试时有用，在生产中是危险的。</span><span class="token comment">#</span><span class="token comment"># cluster-migration-barrier 1</span><span class="token comment"># 关闭此选项允许使用较少的自动集群配置。它既禁止迁移到孤儿的主节点，也禁止从空的主节点迁移。默认是'yes'(允许自动迁移)。</span><span class="token comment">#</span><span class="token comment"># cluster-allow-replica-migration yes</span><span class="token comment"># 默认情况下，如果Redis集群节点检测到至少有一个哈希槽未被发现(没有可用的节点正在为它服务)，它们将停止接受查询。</span><span class="token comment"># 这样，如果集群部分关闭(例如，一系列哈希槽不再被覆盖)，所有集群最终都将不可用。一旦所有插槽被再次覆盖，它就自动返回可用。</span><span class="token comment"># 然而，有时您希望正在工作的集群子集继续接受对仍然覆盖的键空间部分的查询。为此，只需将cluster-require-full-coverage选项设置为no。</span><span class="token comment">#</span><span class="token comment"># cluster-require-full-coverage yes</span><span class="token comment"># 当此选项设置为yes时，将防止副本在主服务器故障时试图将其主服务器故障转移。但是，如果强制执行，副本仍然可以执行手动故障转移。</span><span class="token comment"># 这在不同的场景中都很有用，特别是在多个数据中心操作的情况下，如果不是在DC完全故障的情况下，我们希望其中一方永远不会被提升。</span><span class="token comment">#</span><span class="token comment"># cluster-replica-no-failover no</span><span class="token comment"># 当该选项设置为yes时，允许节点在集群处于down状态时服务读流量，只要节点认为它拥有插槽。</span><span class="token comment"># 这在两种情况下是有用的</span><span class="token comment"># 1. 当应用程序在节点故障或网络分区期间不需要数据一致性时。例如缓存数据。只要节点拥有数据，它就应该能够为其提供服务。</span><span class="token comment"># 2. 此用例用于集群不满足推荐的三个分片，但又希望启用集群模式并在以后扩展的配置。</span><span class="token comment">#    如果没有设置这个选项，1或2个分片配置中的主中断将导致整个集群的读/写中断，如果设置了这个选项，则只会导致写中断。如果没有指定的master，插槽的所有权将不会自动改变。</span><span class="token comment"># </span><span class="token comment"># cluster-allow-reads-when-down no</span><span class="token comment"># 当该选项设置为yes时，允许节点在集群处于down状态时服务发布分片流量，只要节点认为它拥有插槽。</span><span class="token comment"># 如果应用程序即使在集群全局稳定状态不正常的情况下也想使用pubsub特性，那么这是很有用的。如果应用程序想要确保只有一个分片服务于给定的通道，这个特性应该保持为yes。</span><span class="token comment"># </span><span class="token comment"># cluster-allow-pubsubshard-when-down yes</span><span class="token comment"># 设置每个集群总线连接的发送字节缓冲区的内存使用限制，超过限制缓冲区将被清空。</span><span class="token comment"># 这主要是为了防止发送缓冲区在通往慢速连接的链路上无限制地增长(例如PubSub消息被堆积起来)。默认情况下禁用此限制。</span><span class="token comment"># 而当INFO中的'mem_cluster_links' 和/或 'CLUSTER LINKS ' 命令回显中的'send-buffer-allocated'（已分配的发送缓冲区） 项不断增加时，启用该限制。</span><span class="token comment"># 建议设置1gb的最小限制，这样集群链接缓冲区默认情况下至少可以容纳一条PubSub消息。(client-query-buffer-limit默认值为1gb。见 ADVANCED CONFIG)</span><span class="token comment">#</span><span class="token comment"># cluster-link-sendbuf-limit 0</span> <span class="token comment"># 集群可以使用此配置配置其宣布的主机名。</span><span class="token comment"># 对于需要使用TLS服务器名称指示(SNI)或处理基于DNS的路由的应用程序，这是一个常见的用例。</span><span class="token comment"># 默认情况下，该值仅在CLUSTER SLOTS命令中显示为额外的元数据，但可以使用'cluster-preferred-endpoint-type' 更改。该值通过集群总线传递给所有节点，将其设置为空字符串将删除主机名并传播删除。</span><span class="token comment"># cluster-announce-hostname ""</span><span class="token comment"># 集群可以通告客户端如何使用它们的IP地址连接到它们，用户定义主机名，或者声明它们没有端点。</span><span class="token comment"># 通过使用 cluster-preferred-end -type 配置值'ip'、'hostname'或'unknown-endpoint'来设置哪个端点显示为首选端点。</span><span class="token comment"># 这个值控制端点如何返回MOVED/ASKING请求以及CLUSTER插槽的第一个字段。</span><span class="token comment"># 如果首选端点类型设置为主机名，但没有设置宣布的主机名，则'?’将被返回。</span><span class="token comment"># 当集群宣称自己具有未知端点时，这表明服务器不知道客户机如何到达集群。这可能发生在某些网络情况下，其中有多个可能的路由到节点，并且服务器不知道客户端选择了哪一个。</span><span class="token comment"># 在这种情况下，服务器期望客户端通过发出最后一个请求时使用的相同端点进行联系，但是使用响应中提供的端口。</span><span class="token comment">#</span><span class="token comment"># cluster-preferred-endpoint-type ip</span><span class="token comment"># In order to setup your cluster make sure to read the documentation</span><span class="token comment"># available at https://redis.io web site.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CLUSTER-DOCKER-NAT-support：集群配置">CLUSTER DOCKER/NAT support：集群配置</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">########################## CLUSTER DOCKER/NAT support：容器内集群配置  ########################</span><span class="token comment"># 在某些部署中，无法检测到Redis集群节点，因为地址是NAT-ted或因为端口被转发(典型的情况是Docker和其他容器)。</span><span class="token comment"># 为了使Redis集群在Docker容器这样的环境中工作，需要一个静态配置，其中每个节点都知道自己的公共地址。</span><span class="token comment"># 以下四个选项用于此范围，分别是:</span><span class="token comment"># * cluster-announce-ip</span><span class="token comment"># * cluster-announce-port</span><span class="token comment"># * cluster-announce-tls-port</span><span class="token comment"># * cluster-announce-bus-port</span><span class="token comment"># 每个配置都指示节点有关其地址、客户端端口(用于不带TLS和带TLS的连接)和集群消息总线端口。</span><span class="token comment"># 然后在总线包的报头中发布该信息，以便其他节点能够正确地映射发布该信息的节点的地址。</span><span class="token comment"># </span><span class="token comment"># 如果“tls-cluster”设置为“yes”，而“cluster-announce-tls-port”被省略或设置为“0”，则“cluster-announce-port”指的是TLS端口。</span><span class="token comment"># 另请注意，如果“tls-cluster”设置为“no“（默认），则”cluster-announce-tls-port”无效。</span><span class="token comment">#</span><span class="token comment"># 如果不使用上述选项，将使用正常的Redis集群自动检测。</span><span class="token comment"># </span><span class="token comment"># 注意，在重新映射时，总线端口可能不在客户端端口+10000 的固定偏移量上，因此您可以根据重新映射的方式指定任何端口和总线端口。</span><span class="token comment"># 如果没有设置总线端口，将像往常一样使用固定偏移量10000</span><span class="token comment">#</span><span class="token comment"># 例如:</span><span class="token comment">#</span><span class="token comment"># cluster-announce-ip 10.1.1.5</span><span class="token comment"># cluster-announce-tls-port 6379</span><span class="token comment"># cluster-announce-port 0</span><span class="token comment"># cluster-announce-bus-port 6380</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SLOW-LOG：慢查询日志">SLOW  LOG：慢查询日志</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## SLOW LOG ：满查询日志###################################</span><span class="token comment"># Redis Slow Log 是一个记录超过指定执行时间的查询的系统。执行时间不包括I/O操作，如与客户端交谈、发送应答等，而只包括实际执行命令所需的时间(这是命令执行的唯一阶段，线程被阻塞，不能同时服务其他请求)。</span><span class="token comment"># 您可以使用两个参数配置慢速日志: 一个参数告诉Redis要超过多少微秒的执行时间才能记录命令，另一个参数是慢速日志的长度。</span><span class="token comment"># 当记录一个新命令时，最早的命令将从记录的命令队列中删除。</span><span class="token comment"># 下面的时间以微秒表示，因此1000000相当于一秒。请注意，负数禁用慢日志，而值为零则强制记录每个命令。</span><span class="token key attr-name">slowlog-log-slower-than</span> <span class="token value attr-value">10000</span><span class="token comment"># 这个长度没有限制。只是要注意它会消耗内存。</span><span class="token comment"># 可以使用SLOWLOG RESET回收慢日志使用的内存。</span><span class="token key attr-name">slowlog-max-len</span> <span class="token value attr-value">128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LATENCY-MONITOR：延迟监控">LATENCY MONITOR：延迟监控</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ LATENCY MONITOR：延迟监控 ##############################</span><span class="token comment"># The Redis latency monitoring subsystem samples different operations at runtime in order to collect data related to possible sources of latency of a Redis instance.</span><span class="token comment"># Redis延迟监控子系统在运行时对不同的操作进行抽样，以收集与Redis实例的可能延迟来源相关的数据。</span><span class="token comment"># 通过LATENCY命令，用户可以打印图表并获得报告。</span><span class="token comment">#</span><span class="token comment"># 系统只记录执行时间等于或大于通过延迟监视器阈值配置指令指定的毫秒数的操作。</span><span class="token comment"># 当其值设置为0时，将关闭延迟监视器。</span><span class="token comment">#</span><span class="token comment"># 默认情况下，延迟监视是禁用的，因为如果您没有延迟问题，则通常不需要它，并且收集数据会对性能产生影响，尽管影响很小，但可以在大负载下测量。</span><span class="token comment"># 如果需要，可以在运行时使用命令"CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;" 轻松启用延迟监控。</span><span class="token key attr-name">latency-monitor-threshold</span> <span class="token value attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LATENCY-TRACKING：延迟追踪">LATENCY TRACKING：延迟追踪</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ LATENCY TRACKING ##############################</span><span class="token comment"># Redis扩展延迟监控跟踪每个命令的延迟，并通过“INFO latencystats”命令导出百分比分布，并通过LATENCY命令导出累积延迟分布(直方图)。</span><span class="token comment"># 默认情况下，扩展延迟监视是启用的，因为跟踪命令延迟的开销非常小。</span><span class="token comment"># latency-tracking yes</span><span class="token comment"># 缺省情况下，通过INFO latencystats命令导出的延迟百分比为p50、p99和p999。</span><span class="token comment"># latency-tracking-info-percentiles 50 99 99.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EVENT-NOTIFICATION：事件通知">EVENT NOTIFICATION：事件通知</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################# EVENT NOTIFICATION ##############################</span><span class="token comment"># Redis可以通知Pub/Sub客户端在key space中发生的事件。该特性在https://redis.io/topics/notifications上有文档说明</span><span class="token comment"># 例如，如果“notify-keyspace-events”通知被启用，并且客户端对存储在数据库0中的KEY“foo”执行DEL操作，则两条消息将通过Pub/Sub发布:</span><span class="token comment">#</span><span class="token comment"># PUBLISH __keyspace@0__:foo del</span><span class="token comment"># PUBLISH __keyevent@0__:del foo</span><span class="token comment">#</span><span class="token comment"># 可以选择Redis将在一组类中通知的事件。每个类别都由一个单一的字符来标识:</span><span class="token comment">#</span><span class="token comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span><span class="token comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span><span class="token comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span><span class="token comment">#  $     String commands</span><span class="token comment">#  l     List commands</span><span class="token comment">#  s     Set commands</span><span class="token comment">#  h     Hash commands</span><span class="token comment">#  z     Sorted set commands</span><span class="token comment">#  x     Expired events (events generated every time a key expires)</span><span class="token comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span><span class="token comment">#  n     New key events (Note: not included in the 'A' class)</span><span class="token comment">#  t     Stream commands</span><span class="token comment">#  d     Module key type events</span><span class="token comment">#  m     Key-miss events (Note: It is not included in the 'A' class)</span><span class="token comment">#  A     Alias for g$lshzxetd, so that the "AKE" string means all the events</span><span class="token comment">#        (Except key-miss events which are excluded from 'A' due to their</span><span class="token comment">#         unique nature).</span><span class="token comment"># </span><span class="token comment">#  “notify-keyspace-events” 以一个由零个或多个字符组成的字符串作为参数。空字符串表示禁用通知。</span><span class="token comment">#  示例1:要启用列表和通用事件，从事件名称的角度来看，使用: notify-keyspace-events Elg</span><span class="token comment">#  示例2: 获取订阅通道名的过期KEY的流 __keyevent@0__:expired 使用: notify-keyspace-events Ex</span><span class="token comment">#</span><span class="token comment"># 默认情况下，所有通知都是禁用的，因为大多数用户不需要这个功能，而且这个功能有一些开销。注意，如果不指定K或E中的至少一个，则不会传递任何事件。</span><span class="token key attr-name">notify-keyspace-events</span> <span class="token value attr-value">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ADVANCED-CONFIG">ADVANCED CONFIG</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################### ADVANCED CONFIG ###############################</span><span class="token comment"># 当哈希表有少量条目且最大条目不超过给定阈值时，使用内存效率高的数据结构进行编码。</span><span class="token comment"># 可以使用以下指令配置这些阈值。</span><span class="token key attr-name">hash-max-listpack-entries</span> <span class="token value attr-value">512</span><span class="token key attr-name">hash-max-listpack-value</span> <span class="token value attr-value">64</span><span class="token comment"># 列表还以一种特殊的方式进行编码，以节省大量空间。</span><span class="token comment"># 每个内部列表节点允许的条目数可以指定为固定的最大大小或最大元素数。</span><span class="token comment"># 对于固定的最大大小，使用-5到-1，这意味着:</span><span class="token comment"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span><span class="token comment"># -4: max size: 32 Kb  &lt;-- not recommended</span><span class="token comment"># -3: max size: 16 Kb  &lt;-- probably not recommended</span><span class="token comment"># -2: max size: 8 Kb   &lt;-- good</span><span class="token comment"># -1: max size: 4 Kb   &lt;-- good</span><span class="token comment"># 正数意味着每个列表节点存储的元素数量不超过这个数字</span><span class="token comment"># 最高性能选项通常是-2 (8 Kb大小)或-1 (4 Kb大小)，但如果您的用例是唯一的，请根据需要调整设置。</span><span class="token key attr-name">list-max-listpack-size</span> <span class="token value attr-value">-2</span><span class="token comment"># 列表也可以被压缩。</span><span class="token comment"># 压缩深度是从列表的两边排除压缩的quicklist ziplist节点的数量。</span><span class="token comment"># 列表的头部和尾部总是未压缩，以便进行快速的推送/弹出操作。设置:</span><span class="token comment"># 0: 禁用所有列表压缩</span><span class="token comment"># 1: depth 1 means "don't start compressing until after 1 node into the list,</span><span class="token comment">#    going from either the head or tail"</span><span class="token comment">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span><span class="token comment">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span><span class="token comment"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span><span class="token comment">#    2 here means: don't compress head or head-&gt;next or tail-&gt;prev or tail,</span><span class="token comment">#    but compress all nodes between them.</span><span class="token comment"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span><span class="token comment"># etc.</span><span class="token key attr-name">list-compress-depth</span> <span class="token value attr-value">0</span><span class="token comment"># 当一个集合只是由基数为10的64位有符号整数范围内的整数组成时，集合具有特殊的编码。</span><span class="token comment"># 下面的配置设置设置了集合大小的限制，以便使用这种特殊的内存节省编码。</span><span class="token key attr-name">set-max-intset-entries</span> <span class="token value attr-value">512</span><span class="token comment"># 包含非整数值的集合，当它们有少量的条目，并且最大的条目不超过给定的阈值时，也使用内存有效的数据结构进行编码。 </span><span class="token comment"># 可以使用以下指令配置这些阈值。</span><span class="token key attr-name">set-max-listpack-entries</span> <span class="token value attr-value">128</span><span class="token key attr-name">set-max-listpack-value</span> <span class="token value attr-value">64</span><span class="token comment"># 与哈希和列表类似，排序集也经过特殊编码，以节省大量空间。此编码仅在排序集的长度和元素低于以下限制时使用:</span><span class="token key attr-name">zset-max-listpack-entries</span> <span class="token value attr-value">128</span><span class="token key attr-name">zset-max-listpack-value</span> <span class="token value attr-value">64</span><span class="token comment"># HyperLogLog稀疏表示字节限制。限制包括16字节的报头。当使用稀疏表示的HyperLogLog超过该限制时，将被转换为密集表示。</span><span class="token comment"># 大于16000的值是完全无用的，因为此时密集表示的内存效率更高。</span><span class="token comment"># 建议值为~ 3000，以获得空间高效编码的好处，而不会降低太多PFADD的速度，使用稀疏编码时PFADD为O(N)。</span><span class="token comment"># 当不考虑CPU，但考虑空间，并且数据集由基数在0-15000范围内的许多hyperloglog组成时，该值可以提高到~10000。</span><span class="token key attr-name">hll-sparse-max-bytes</span> <span class="token value attr-value">3000</span><span class="token comment"># Streams macro node max size / items.</span><span class="token comment"># 流数据结构是一个大节点的基树，其中编码多个项。使用此配置，可以配置单个节点的字节大小，以及在添加新流条目时切换到新节点之前可以包含的最大项数。</span><span class="token comment"># 如果下列任何设置被设置为0，则该限制将被忽略，因此，例如，可以通过将max-bytes设置为0并将max-entries设置为所需值来设置max-entries限制。</span><span class="token key attr-name">stream-node-max-bytes</span> <span class="token value attr-value">4096</span><span class="token key attr-name">stream-node-max-entries</span> <span class="token value attr-value">100</span><span class="token comment"># 主动rehash每100毫秒使用1毫秒的CPU时间来帮助重哈希主Redis哈希表(将顶级键映射到值的哈希表)。</span><span class="token comment"># Redis使用的哈希表实现(参见dicc .c)执行惰性重哈希:你对哈希表执行的操作越多，执行的重哈希“步骤”就越多，所以如果服务器空闲，重哈希永远不会完成，哈希表会占用更多内存。</span><span class="token comment">#</span><span class="token comment"># 默认情况下，每秒钟使用这个毫秒10次，以便主动重新散列主字典，尽可能释放内存。</span><span class="token comment"># 如果不确定:使用“activerehashing no”，如果你有硬延迟要求，在你的环境中，Redis可以不时地以2毫秒的延迟回复查询，这不是一件好事。</span><span class="token comment"># 如果你没有这样的硬性要求，但想尽快释放内存，请使用"activerehashing yes"。</span><span class="token key attr-name">activerehashing</span> <span class="token value attr-value">yes</span><span class="token comment"># 客户端输出缓冲区限制可用于强制断开由于某些原因(常见原因是Pub/Sub客户端消费消息的速度不及发布者生成消息的速度)而未能足够快地从服务器读取数据的客户端。</span><span class="token comment"># 可以为三种不同类型的客户端设置不同的限制:</span><span class="token comment">#</span><span class="token comment"># normal -&gt; normal clients including MONITOR clients</span><span class="token comment"># replica -&gt; replica clients</span><span class="token comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span><span class="token comment">#</span><span class="token comment"># The syntax of every client-output-buffer-limit directive is the following:</span><span class="token comment">#</span><span class="token comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><span class="token comment">#</span><span class="token comment"># A client is immediately disconnected once the hard limit is reached, or if</span><span class="token comment"># the soft limit is reached and remains reached for the specified number of</span><span class="token comment"># seconds (continuously).</span><span class="token comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span><span class="token comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span><span class="token comment"># if the size of the output buffers reach 32 megabytes, but will also get</span><span class="token comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span><span class="token comment"># the limit for 10 seconds.</span><span class="token comment">#</span><span class="token comment"># By default normal clients are not limited because they don't receive data</span><span class="token comment"># without asking (in a push way), but just after a request, so only</span><span class="token comment"># asynchronous clients may create a scenario where data is requested faster</span><span class="token comment"># than it can read.</span><span class="token comment">#</span><span class="token comment"># Instead there is a default limit for pubsub and replica clients, since</span><span class="token comment"># subscribers and replicas receive data in a push fashion.</span><span class="token comment">#</span><span class="token comment"># Note that it doesn't make sense to set the replica clients output buffer</span><span class="token comment"># limit lower than the repl-backlog-size config (partial sync will succeed</span><span class="token comment"># and then replica will get disconnected).</span><span class="token comment"># Such a configuration is ignored (the size of repl-backlog-size will be used).</span><span class="token comment"># This doesn't have memory consumption implications since the replica client</span><span class="token comment"># will share the backlog buffers memory.</span><span class="token comment">#</span><span class="token comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span><span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">normal 0 0 0</span><span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">replica 256mb 64mb 60</span><span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">pubsub 32mb 8mb 60</span><span class="token comment"># Client query buffers accumulate new commands. They are limited to a fixed</span><span class="token comment"># amount by default in order to avoid that a protocol desynchronization (for</span><span class="token comment"># instance due to a bug in the client) will lead to unbound memory usage in</span><span class="token comment"># the query buffer. However you can configure it here if you have very special</span><span class="token comment"># needs, such us huge multi/exec requests or alike.</span><span class="token comment">#</span><span class="token comment"># client-query-buffer-limit 1gb</span><span class="token comment"># In some scenarios client connections can hog up memory leading to OOM</span><span class="token comment"># errors or data eviction. To avoid this we can cap the accumulated memory</span><span class="token comment"># used by all client connections (all pubsub and normal clients). Once we</span><span class="token comment"># reach that limit connections will be dropped by the server freeing up</span><span class="token comment"># memory. The server will attempt to drop the connections using the most </span><span class="token comment"># memory first. We call this mechanism "client eviction".</span><span class="token comment">#</span><span class="token comment"># Client eviction is configured using the maxmemory-clients setting as follows:</span><span class="token comment"># 0 - client eviction is disabled (default)</span><span class="token comment">#</span><span class="token comment"># A memory value can be used for the client eviction threshold,</span><span class="token comment"># for example:</span><span class="token comment"># maxmemory-clients 1g</span><span class="token comment">#</span><span class="token comment"># A percentage value (between 1% and 100%) means the client eviction threshold</span><span class="token comment"># is based on a percentage of the maxmemory setting. For example to set client</span><span class="token comment"># eviction at 5% of maxmemory:</span><span class="token comment"># maxmemory-clients 5%</span><span class="token comment"># In the Redis protocol, bulk requests, that are, elements representing single</span><span class="token comment"># strings, are normally limited to 512 mb. However you can change this limit</span><span class="token comment"># here, but must be 1mb or greater</span><span class="token comment">#</span><span class="token comment"># proto-max-bulk-len 512mb</span><span class="token comment"># Redis calls an internal function to perform many background tasks, like</span><span class="token comment"># closing connections of clients in timeout, purging expired keys that are</span><span class="token comment"># never requested, and so forth.</span><span class="token comment">#</span><span class="token comment"># Not all tasks are performed with the same frequency, but Redis checks for</span><span class="token comment"># tasks to perform according to the specified "hz" value.</span><span class="token comment">#</span><span class="token comment"># By default "hz" is set to 10. Raising the value will use more CPU when</span><span class="token comment"># Redis is idle, but at the same time will make Redis more responsive when</span><span class="token comment"># there are many keys expiring at the same time, and timeouts may be</span><span class="token comment"># handled with more precision.</span><span class="token comment">#</span><span class="token comment"># The range is between 1 and 500, however a value over 100 is usually not</span><span class="token comment"># a good idea. Most users should use the default of 10 and raise this up to</span><span class="token comment"># 100 only in environments where very low latency is required.</span><span class="token key attr-name">hz</span> <span class="token value attr-value">10</span><span class="token comment"># Normally it is useful to have an HZ value which is proportional to the</span><span class="token comment"># number of clients connected. This is useful in order, for instance, to</span><span class="token comment"># avoid too many clients are processed for each background task invocation</span><span class="token comment"># in order to avoid latency spikes.</span><span class="token comment">#</span><span class="token comment"># Since the default HZ value by default is conservatively set to 10, Redis</span><span class="token comment"># offers, and enables by default, the ability to use an adaptive HZ value</span><span class="token comment"># which will temporarily raise when there are many connected clients.</span><span class="token comment">#</span><span class="token comment"># When dynamic HZ is enabled, the actual configured HZ will be used</span><span class="token comment"># as a baseline, but multiples of the configured HZ value will be actually</span><span class="token comment"># used as needed once more clients are connected. In this way an idle</span><span class="token comment"># instance will use very little CPU time while a busy instance will be</span><span class="token comment"># more responsive.</span><span class="token key attr-name">dynamic-hz</span> <span class="token value attr-value">yes</span><span class="token comment"># When a child rewrites the AOF file, if the following option is enabled</span><span class="token comment"># the file will be fsync-ed every 4 MB of data generated. This is useful</span><span class="token comment"># in order to commit the file to the disk more incrementally and avoid</span><span class="token comment"># big latency spikes.</span><span class="token key attr-name">aof-rewrite-incremental-fsync</span> <span class="token value attr-value">yes</span><span class="token comment"># When redis saves RDB file, if the following option is enabled</span><span class="token comment"># the file will be fsync-ed every 4 MB of data generated. This is useful</span><span class="token comment"># in order to commit the file to the disk more incrementally and avoid</span><span class="token comment"># big latency spikes.</span><span class="token key attr-name">rdb-save-incremental-fsync</span> <span class="token value attr-value">yes</span><span class="token comment"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><span class="token comment"># idea to start with the default settings and only change them after investigating</span><span class="token comment"># how to improve the performances and how the keys LFU change over time, which</span><span class="token comment"># is possible to inspect via the OBJECT FREQ command.</span><span class="token comment">#</span><span class="token comment"># There are two tunable parameters in the Redis LFU implementation: the</span><span class="token comment"># counter logarithm factor and the counter decay time. It is important to</span><span class="token comment"># understand what the two parameters mean before changing them.</span><span class="token comment">#</span><span class="token comment"># The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis</span><span class="token comment"># uses a probabilistic increment with logarithmic behavior. Given the value</span><span class="token comment"># of the old counter, when a key is accessed, the counter is incremented in</span><span class="token comment"># this way:</span><span class="token comment">#</span><span class="token comment"># 1. A random number R between 0 and 1 is extracted.</span><span class="token comment"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><span class="token comment"># 3. The counter is incremented only if R &lt; P.</span><span class="token comment">#</span><span class="token comment"># The default lfu-log-factor is 10. This is a table of how the frequency</span><span class="token comment"># counter changes with a different number of accesses with different</span><span class="token comment"># logarithmic factors:</span><span class="token comment">#</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | 0      | 104        | 255        | 255        | 255        | 255        |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | 1      | 18         | 49         | 255        | 255        | 255        |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | 10     | 10         | 18         | 142        | 255        | 255        |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment"># | 100    | 8          | 11         | 49         | 143        | 255        |</span><span class="token comment"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment">#</span><span class="token comment"># NOTE: The above table was obtained by running the following commands:</span><span class="token comment">#</span><span class="token comment">#   redis-benchmark -n 1000000 incr foo</span><span class="token comment">#   redis-cli object freq foo</span><span class="token comment">#</span><span class="token comment"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span><span class="token comment"># to accumulate hits.</span><span class="token comment">#</span><span class="token comment"># The counter decay time is the time, in minutes, that must elapse in order</span><span class="token comment"># for the key counter to be decremented.</span><span class="token comment">#</span><span class="token comment"># The default value for the lfu-decay-time is 1. A special value of 0 means we</span><span class="token comment"># will never decay the counter.</span><span class="token comment">#</span><span class="token comment"># lfu-log-factor 10</span><span class="token comment"># lfu-decay-time 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ACTIVE-DEFRAGMENTATION">ACTIVE DEFRAGMENTATION</h2><pre><code class="language-properties">########################### ACTIVE DEFRAGMENTATION ######################### What is active defragmentation?# -------------------------------## Active (online) defragmentation allows a Redis server to compact the# spaces left between small allocations and deallocations of data in memory,# thus allowing to reclaim back memory.## Fragmentation is a natural process that happens with every allocator (but# less so with Jemalloc, fortunately) and certain workloads. Normally a server# restart is needed in order to lower the fragmentation, or at least to flush# away all the data and create it again. However thanks to this feature# implemented by Oran Agra for Redis 4.0 this process can happen at runtime# in a "hot" way, while the server is running.## Basically when the fragmentation is over a certain level (see the# configuration options below) Redis will start to create new copies of the# values in contiguous memory regions by exploiting certain specific Jemalloc# features (in order to understand if an allocation is causing fragmentation# and to allocate it in a better place), and at the same time, will release the# old copies of the data. This process, repeated incrementally for all the keys# will cause the fragmentation to drop back to normal values.## Important things to understand:## 1. This feature is disabled by default, and only works if you compiled Redis#    to use the copy of Jemalloc we ship with the source code of Redis.#    This is the default with Linux builds.## 2. You never need to enable this feature if you don't have fragmentation#    issues.## 3. Once you experience fragmentation, you can enable this feature when#    needed with the command "CONFIG SET activedefrag yes".## The configuration parameters are able to fine tune the behavior of the# defragmentation process. If you are not sure about what they mean it is# a good idea to leave the defaults untouched.# Active defragmentation is disabled by default# activedefrag no# Minimum amount of fragmentation waste to start active defrag# active-defrag-ignore-bytes 100mb# Minimum percentage of fragmentation to start active defrag# active-defrag-threshold-lower 10# Maximum percentage of fragmentation at which we use maximum effort# active-defrag-threshold-upper 100# Minimal effort for defrag in CPU percentage, to be used when the lower# threshold is reached# active-defrag-cycle-min 1# Maximal effort for defrag in CPU percentage, to be used when the upper# threshold is reached# active-defrag-cycle-max 25# Maximum number of set/hash/zset/list fields that will be processed from# the main dictionary scan# active-defrag-max-scan-fields 1000# Jemalloc background thread for purging will be enabled by defaultjemalloc-bg-thread yes# It is possible to pin different threads and processes of Redis to specific# CPUs in your system, in order to maximize the performances of the server.# This is useful both in order to pin different Redis threads in different# CPUs, but also in order to make sure that multiple Redis instances running# in the same host will be pinned to different CPUs.## Normally you can do this using the "taskset" command, however it is also# possible to this via Redis configuration directly, both in Linux and FreeBSD.## You can pin the server/IO threads, bio threads, aof rewrite child process, and# the bgsave child process. The syntax to specify the cpu list is the same as# the taskset command:## Set redis server/io threads to cpu affinity 0,2,4,6:# server_cpulist 0-7:2## Set bio threads to cpu affinity 1,3:# bio_cpulist 1,3## Set aof rewrite child process to cpu affinity 8,9,10,11:# aof_rewrite_cpulist 8-11## Set bgsave child process to cpu affinity 1,10,11# bgsave_cpulist 1,10-11# In some cases redis will emit warnings and even refuse to start if it detects# that the system is in bad state, it is possible to suppress these warnings# by setting the following config which takes a space delimited list of warnings# to suppress## ignore-warnings ARM64-COW-BUG</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;官方模板文件&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://redis.io/docs/management/config-file/&quot;&gt;https://redis.io/docs/management/config-file/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各版本参数</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-数据类型（基础）</title>
    <link href="https://hmxyl.github.io/20230103/72ab10c8.html"/>
    <id>https://hmxyl.github.io/20230103/72ab10c8.html</id>
    <published>2023-01-03T12:22:19.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>String</h1><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">SET</td><td style="text-align:left">SET <em>key</em> value <br>SET <em>key</em> value ex seconds</td><td style="text-align:left">增</td><td>储值<br>储值且key在指定秒后过期</td></tr><tr><td style="text-align:left">MSET</td><td style="text-align:left">MSET <em>key</em> value [key value …]</td><td style="text-align:left">增</td><td>同时储多个值</td></tr><tr><td style="text-align:left">SETEX</td><td style="text-align:left">SETEX <em>key</em> seconds value</td><td style="text-align:left">增</td><td>储值，且key在指定秒后过期</td></tr><tr><td style="text-align:left">PSETEX</td><td style="text-align:left">PSETEX <em>key</em> milliseconds value</td><td style="text-align:left">增</td><td>储值，且key在指定毫秒后过期</td></tr><tr><td style="text-align:left">SETNX</td><td style="text-align:left">SETNX <em>key</em> value</td><td style="text-align:left">增</td><td>仅在key不存在时执行</td></tr><tr><td style="text-align:left">MSETNX</td><td style="text-align:left">MSETNX <em>key</em> value [key value …]</td><td style="text-align:left">增</td><td>在所有的key不存在时执行</td></tr><tr><td style="text-align:left">SETRANGE</td><td style="text-align:left">SETRANGE <em>key</em> offset value</td><td style="text-align:left">改</td><td>字符串从offset开始由value替代</td></tr><tr><td style="text-align:left">INCR</td><td style="text-align:left">INCR key</td><td style="text-align:left">改</td><td>key自增</td></tr><tr><td style="text-align:left">DECR</td><td style="text-align:left">DECR key</td><td style="text-align:left">改</td><td>key自减</td></tr><tr><td style="text-align:left">INCRBY</td><td style="text-align:left">INCRBY <em>key</em> increment</td><td style="text-align:left">改</td><td>key增加指定整形量</td></tr><tr><td style="text-align:left">DECRBY</td><td style="text-align:left">DECRBY <em>key</em> decrement</td><td style="text-align:left">改</td><td>key减少指定整形量</td></tr><tr><td style="text-align:left">INCRBYFLOAT</td><td style="text-align:left">INCRBYFLOAT <em>key</em> increment</td><td style="text-align:left">改</td><td>key增加指定浮点量，浮点数为负数则为减少</td></tr><tr><td style="text-align:left">APPEND</td><td style="text-align:left">APPEND <em>key</em> value</td><td style="text-align:left">改</td><td>追加储值</td></tr><tr><td style="text-align:left">GET</td><td style="text-align:left">GET <em>key</em></td><td style="text-align:left">查</td><td>获取key的value</td></tr><tr><td style="text-align:left">MGET</td><td style="text-align:left">MGET key [key …]</td><td style="text-align:left">查</td><td>同时获取多个key</td></tr><tr><td style="text-align:left">GETDEL</td><td style="text-align:left">GETDEL <em>key</em></td><td style="text-align:left">查&amp;删</td><td>获取key的value后删除key</td></tr><tr><td style="text-align:left">GETSET</td><td style="text-align:left">GETSET <em>key</em> value</td><td style="text-align:left">查&amp;改</td><td>set新的value，并返回旧的value</td></tr><tr><td style="text-align:left">GETRANGE</td><td style="text-align:left">GETRANGE <em>key</em> start end</td><td style="text-align:left">查</td><td>获取value的子字符串 （从start到end）</td></tr><tr><td style="text-align:left">SUBSTR</td><td style="text-align:left">SUBSTR <em>key</em> start end</td><td style="text-align:left">查</td><td>获取value的子字符串 （从start到end）</td></tr><tr><td style="text-align:left">STRLEN</td><td style="text-align:left">STRLEN key</td><td style="text-align:left">查</td><td>获取字符串长度</td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th></th><th>发行版本</th><th>命令</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>GETEX</td><td>6.2.0</td><td><strong>GETEX</strong> key [<strong>EX</strong> seconds |<strong>PX</strong> milliseconds |<strong>EXAT</strong> unix-time-seconds |<strong>PXAT</strong> unix-time-milliseconds |<strong>PERSIST</strong>]</td><td>查&amp;删</td><td>- <strong>EX</strong> seconds：指定过期秒数<br>- <strong>PX</strong> milliseconds：指定过期毫秒数<br>- <strong>EXAT</strong> timestamp-seconds：指定unix某时间点后多少秒过期<br>- <strong>PXAT</strong> timestamp-milliseconds：指定unix某时间点后多少毫秒过期<br>- <strong>PERSIST</strong>：删除过期时间</td></tr><tr><td>LCS</td><td>7.0.0</td><td><strong>LCS</strong> key1 key2 [LEN] [<strong>IDX</strong>] [<strong>MINMATCHLEN</strong> len] [<strong>WITHMATCHLEN</strong>]</td><td>查</td><td>实现最长公共子序列算法。匹配是从最后一个key到第一个key产生的。<br><br>[<strong>LEN</strong>]：最长匹配字符串长度<br>[<strong>IDX</strong>]：返回一个数组。其中包含 LCS匹配结果长度、两个字符串匹配上的开始和结束偏移量<br>[<strong>MINMATCHLEN</strong> len] ：最短匹配字符串长度<br>[<strong>WITHMATCHLEN</strong>]：与IDX一起使用，返回最长公共子字符串的长度</td></tr></tbody></table><blockquote><p>详解</p></blockquote><ol><li><p><span id="Order_LCS"><strong>LCS</strong> key1 key2 [LEN] [<strong>IDX</strong>] [<strong>MINMATCHLEN</strong> len] [<strong>WITHMATCHLEN</strong>] （longest contain substring）</span></p><p>LCS 命令实现最长公共子序列算法。请注意，这与最长的常见字符串算法不同，因为字符串中的匹配字符不需要是连续的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> MSET key1 ohmytext key2 mynewtextOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>a. 获取匹配结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2<span class="token string">"mytext"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>b. 有时我们只需要匹配的长度：LEN</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 LEN<span class="token string">"6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>c. 获取匹配的详细情况：IDX（LEN 和 IDX 不可同时存在）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，通常非常有用的是知道每个字符串中的匹配位置：<strong>匹配是从最后一个到第一个产生的</strong></p><p>上面的数组意味着第一个匹配项（数组的第二个元素）在第一个字符串的位置 2-3 和第二个字符串的 0-1 之间。然后是 4-7 和 5-8 之间。</p><p>要将匹配列表限制为给定最小长度的匹配列表：<code>MINMATCHLEN 4</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX MINMATCHLEN <span class="token number">4</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匹配列表展示匹配长度：<code>WITHMATCHLEN</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX MINMATCHLEN <span class="token number">4</span> WITHMATCHLEN<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>如果没有修饰符，则返回表示<strong>最长</strong>公共子字符串的字符串。</p></li><li><p>当<code>LEN</code>给出命令返回最长公共子字符串的长度。</p></li><li><p>当<code>IDX</code>给出该命令时，返回一个数组。</p><p>len：包含 LCS匹配结果长度</p><p>matches：两个字符串匹配上的开始和结束偏移量。当<code>WITHMATCHLEN</code>给出每个表示匹配的数组时，也将具有匹配的长度</p></li></ul></li></ol><h1>List</h1><p>Redis 列表是字符串值的链表。</p><p>Redis 列表经常用于：</p><ul><li>实现堆栈和队列。</li><li>为后台工作系统构建队列管理。</li></ul><p>双向链表：LPUSH命令将一个新元素添加到列表的左侧（头部），而该RPUSH命令将一个新元素添加到列表的右侧（尾部）</p><p>使用列表的技巧</p><ul><li>lpush+lpop = Stack(栈)</li><li>lpush+rpop = Queue（队列）</li><li>lpush+ltrim = Capped Collection（有限集合）</li><li>lpush+brpop = Message Queue（消息队列）</li></ul><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">LPUSH</td><td style="text-align:left">LPUSH <em>key</em> value [value …]</td><td style="text-align:left">增</td><td></td></tr><tr><td style="text-align:left">LPOP</td><td style="text-align:left">LPOP key</td><td style="text-align:left">删</td><td></td></tr><tr><td style="text-align:left">LPUSHX</td><td style="text-align:left">LPUSHX <em>key</em> value [value …]</td><td style="text-align:left">增</td><td>当 key 不存在时不会进行任何操作</td></tr><tr><td style="text-align:left">LSET</td><td style="text-align:left">LSET <em>key</em> index value</td><td style="text-align:left">改</td><td>修改指定位置元素</td></tr><tr><td style="text-align:left">LINSERT</td><td style="text-align:left">LINSERT key &lt;BEFORE |AFTER&gt; pivot element</td><td style="text-align:left">查&amp;增</td><td>功能： 在参考值pivot 之前或之后，将元素插入存储在 key 处的列表中。<br>-  当key不存在时，认为是空列表，不进行任何操作。 <br>- 当key存在，但不包含值pivot 时返回错误。<br><br>返回：  插入操作后列表的长度，或者当未找到值主元时为 -1。<br>举例：<code>LINSERT mylist BEFORE "World" "There"</code></td></tr><tr><td style="text-align:left">LREM</td><td style="text-align:left">LREM <em>key</em> count value</td><td style="text-align:left">删</td><td>删除count个value。count 为负数，从列尾开始计算</td></tr><tr><td style="text-align:left">LTRIM</td><td style="text-align:left">LTRIM <em>key</em> start stop</td><td style="text-align:left">删</td><td>截断列表元素，-1 是列表的最后一个元素</td></tr><tr><td style="text-align:left">LRANGE</td><td style="text-align:left">LRANGE <em>key</em> start stop</td><td style="text-align:left">查</td><td>获取列表指定范围数据：偏移量为负数，表示从列表末尾开始的偏移量。 <br>正整数（正数排名），负整数（倒数排名）<br>例如，-1 是列表的最后一个元素，-2 是倒数第二个元素，依此类推。</td></tr><tr><td style="text-align:left">LLEN</td><td style="text-align:left">LLEN <em>key</em></td><td style="text-align:left">查</td><td>获取列表元素个数</td></tr><tr><td style="text-align:left">LINDEX</td><td style="text-align:left">LINDEX <em>key</em> index</td><td style="text-align:left">查</td><td>获取列表第index个元素，-1 是列表的最后一个元素</td></tr><tr><td style="text-align:left">LPOS</td><td style="text-align:left">LPOS <em>key</em> element [RANK rank] [COUNT num-matches] [MAXLEN len]</td><td style="text-align:left">查</td><td>查找列表元素（发布版本：6.0.6） <br>[RANK rank] ： 指定要返回的第一个元素的“排名”，正整数（正数排名），负整数（倒数排名）。<br>[COUNT num-matches]：总共返回 num-matches个目标元素<br>[MAXLEN len]：最大筛查次数</td></tr><tr><td style="text-align:left">BLPOP</td><td style="text-align:left">BLPOP <em>key [key …]</em> timeout</td><td style="text-align:left">删</td><td>它是 LPOP 的阻塞版本。<br> 当没有任何元素可以从任何给定列表中弹出时，它会阻塞连接，直到超时后返回 null</td></tr><tr><td style="text-align:left">RPUSH</td><td style="text-align:left">RPUSH <em>key</em> value [value …]</td><td style="text-align:left">增</td><td></td></tr><tr><td style="text-align:left">RPUSHX</td><td style="text-align:left">RPUSHX <em>key</em> value [value …]</td><td style="text-align:left">增</td><td>当 key 不存在时不会进行任何操作</td></tr><tr><td style="text-align:left">RPOP</td><td style="text-align:left">RPOP <em>key</em></td><td style="text-align:left">删</td><td></td></tr><tr><td style="text-align:left">RPOPLPUSH</td><td style="text-align:left">RPOPLPUSH <em>source</em> <em>destination</em></td><td style="text-align:left">删</td><td>删除列表中的最后一个元素，将其添加到另一个列表并返回</td></tr><tr><td style="text-align:left">BRPOP</td><td style="text-align:left">BRPOP <em>key [key …]</em> timeout</td><td style="text-align:left">删</td><td>它是 RPOP 的阻塞版本</td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th>命令</th><th>使用</th><th>发行版本</th><th>说明</th></tr></thead><tbody><tr><td>LMOVE</td><td><strong>LMOVE</strong> <em>source  destination</em> <strong>LEFT |RIGHT   LEFT|RIGHT</strong></td><td>6.2.0</td><td>从列表中弹出一个元素，将其推送到另一个列表并返</td></tr><tr><td>LMPOP</td><td><strong>LMPOP</strong> numkeys <em>key [key …]</em> &lt;<strong>LEFT |RIGHT</strong>&gt; [<strong>COUNT</strong> count]</td><td>7.0.0</td><td>从提供的键名列表中的第一个非空列表键中弹出一个或多个元素。</td></tr><tr><td>BLMPOP</td><td><strong>BLMPOP</strong> timeout numkeys <em>key [key …]</em> &lt;<strong>LEFT |RIGHT</strong>&gt; [<strong>COUNT</strong> count]</td><td>7.0.0</td><td>它是 LMPOP 的阻塞版本</td></tr><tr><td>BLMOVE</td><td><strong>BLMOVE</strong>  <em>source  destination</em> &lt;<strong>LEFT |RIGHT</strong>&gt; &lt;<strong>LEFT |RIGHT</strong>&gt; timeout</td><td>6.2.0</td><td>它是 LMOVE 的阻塞版本</td></tr></tbody></table><h1>Hash</h1><p>Redis 哈希是结构为字段值对集合的记录类型。您可以使用散列来表示基本对象并存储计数器分组等。</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">HEXISTS</td><td style="text-align:left">HEXISTS <em>key</em> field</td><td style="text-align:left">查</td><td>查询 key.field 是否存在，存在返回0，不存在返回1</td></tr><tr><td style="text-align:left">HGET</td><td style="text-align:left">HGET <em>key</em> field</td><td style="text-align:left">查</td><td>获取指定键值对</td></tr><tr><td style="text-align:left">HMGET</td><td style="text-align:left">HMGET <em>key</em> field [field …]</td><td style="text-align:left">查</td><td>获取多个字段值</td></tr><tr><td style="text-align:left">HGETALL</td><td style="text-align:left">HGETALL <em>key</em></td><td style="text-align:left">查</td><td>获取所有键值对数据</td></tr><tr><td style="text-align:left">HINCRBY</td><td style="text-align:left">HINCRBY <em>key</em> field increment</td><td style="text-align:left">改</td><td>将hash 的 field字段的整数值增加给定的数字</td></tr><tr><td style="text-align:left">HINCRBYFLOAT</td><td style="text-align:left">HINCRBYFLOAT <em>key</em> field increment</td><td style="text-align:left">改</td><td>将hash 的 field字段的浮点值增加给定的数量</td></tr><tr><td style="text-align:left">HKEYS</td><td style="text-align:left">HKEYS <em>key</em></td><td style="text-align:left">查</td><td>获取hash 中的所有key</td></tr><tr><td style="text-align:left">HLEN</td><td style="text-align:left">HLEN <em>key</em></td><td style="text-align:left">查</td><td>键值对个数</td></tr><tr><td style="text-align:left">HSET</td><td style="text-align:left">HSET <em>key</em> field value</td><td style="text-align:left">增</td><td></td></tr><tr><td style="text-align:left">HMSET</td><td style="text-align:left">HMSET <em>key</em> field value [field value…]</td><td style="text-align:left">增</td><td></td></tr><tr><td style="text-align:left">HSETNX</td><td style="text-align:left">HSETNX <em>key</em> field value [field value…]</td><td style="text-align:left">增</td><td>如果 key field 都已存在时不会进行任何操作</td></tr><tr><td style="text-align:left">HSTRLEN</td><td style="text-align:left">HSTRLEN <em>key</em> field</td><td style="text-align:left">查</td><td>获取 key.field的value的长度</td></tr><tr><td style="text-align:left">HVALS</td><td style="text-align:left">HVALS <em>key</em></td><td style="text-align:left">查</td><td>获取hash 中的所有value</td></tr><tr><td style="text-align:left">HSCAN</td><td style="text-align:left">HSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td><td style="text-align:left">查</td><td>使用方法方法可以参考<a href="#Order_SCAN">SCAN</a></td></tr><tr><td style="text-align:left">HDEL</td><td style="text-align:left">HDEL <em>key</em> field [field …]</td><td style="text-align:left">删</td><td>删除一个或者多个Hash表的键值对</td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th>命令</th><th>发行版本</th><th>使用</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>HRANDFIELD</td><td>6.2.0</td><td><strong>HRANDFIELD</strong> key [count [<strong>WITHVALUES</strong>]]</td><td>查</td><td>从哈希中获取一个或多个随机字段<br>[<strong>WITHVALUES</strong>]：返回结果包含value</td></tr></tbody></table><p>实战场景</p><ul><li>缓存：相比String更节省空间，能直观的维护缓存信息，如用户信息，视频信息等。</li></ul><h1>Set：无序集合</h1><p>Redis 集是唯一字符串（成员）的无序集合。您可以使用 Redis 集高效地：</p><ul><li>跟踪唯一项目（例如，跟踪访问给定博客文章的所有唯一 IP 地址）</li><li>表示关系（例如，具有给定角色的所有用户的集合）</li><li>执行常见的集合运算，例如交集、并集和差集</li></ul><p><strong>实战场景</strong></p><ul><li><strong>标签</strong>（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。</li><li><strong>点赞，或点踩，收藏等</strong>，可以放到set中实现</li></ul><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SADD</td><td style="text-align:left">SADD <em>key</em> member [member …]</td><td style="text-align:left">增</td><td style="text-align:left">向集合中添加一个或多个成员</td></tr><tr><td style="text-align:left">SCARD</td><td style="text-align:left">SCARD <em>key</em></td><td style="text-align:left">查</td><td style="text-align:left">集合中元素个数</td></tr><tr><td style="text-align:left">SDIFF</td><td style="text-align:left">SDIFF <em>key [key …]</em></td><td style="text-align:left">集合：补</td><td style="text-align:left">取多个集合的差分（其他集合中都没有的元素）</td></tr><tr><td style="text-align:left">SDIFFSTORE</td><td style="text-align:left">SDIFFSTORE <em>destination</em> <em>key [key …]</em></td><td style="text-align:left">集合：补&amp;存</td><td style="text-align:left">取多个集合的差分, 并将结果集存储在一个集合中</td></tr><tr><td style="text-align:left">SINTER</td><td style="text-align:left">SINTER <em>key [key …]</em></td><td style="text-align:left">集合：交</td><td style="text-align:left">取多个集合的交集并返回 <br>INTER 为 Intersect /ˌɪntəˈsekt/ 的缩写</td></tr><tr><td style="text-align:left">SINTERSTORE</td><td style="text-align:left">SINTERSTORE <em>destination</em> <em>key [key …]</em></td><td style="text-align:left">集合：交&amp;存</td><td style="text-align:left">取多个集合的交集并将结果集存储在一个集合中（destination）</td></tr><tr><td style="text-align:left">SISMEMBER</td><td style="text-align:left">SISMEMBER <em>key</em> member</td><td style="text-align:left">查</td><td style="text-align:left">检查一个元素是否存在</td></tr><tr><td style="text-align:left">SMEMBERS</td><td style="text-align:left">SMEMBERS <em>key</em></td><td style="text-align:left">查</td><td style="text-align:left">返回所有元素</td></tr><tr><td style="text-align:left">SMOVE</td><td style="text-align:left">SMOVE <em>source destination</em> member</td><td style="text-align:left">查&amp;移动</td><td style="text-align:left">将集合source 中的元素member移动到集合destination中</td></tr><tr><td style="text-align:left">SPOP</td><td style="text-align:left">SPOP key [count]</td><td style="text-align:left">查&amp;删</td><td style="text-align:left">从集合中移除并返回一个或多个（count）随机成员</td></tr><tr><td style="text-align:left">SRANDMEMBER</td><td style="text-align:left">SRANDMEMBER key [count]</td><td style="text-align:left">查</td><td style="text-align:left">从集合中获取一个或多个（count）随机成员，元素在集合中依然存在</td></tr><tr><td style="text-align:left">SREM</td><td style="text-align:left">SREM <em>key</em> member [member …]</td><td style="text-align:left">删</td><td style="text-align:left">从SET中删除一个或者多个元素</td></tr><tr><td style="text-align:left">SUNION</td><td style="text-align:left">SUNION <em>key [key …]</em></td><td style="text-align:left">集合：并</td><td style="text-align:left">取多个集合的并集</td></tr><tr><td style="text-align:left">SUNIONSTORE</td><td style="text-align:left">SUNIONSTORE <em>destination</em> <em>key [key …]</em></td><td style="text-align:left">集合：并&amp;存</td><td style="text-align:left">取多个集合的并集并将结果集存储在一个集合中（destination）</td></tr><tr><td style="text-align:left">SSCAN</td><td style="text-align:left">SSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td><td style="text-align:left">遍历查</td><td style="text-align:left">参考<a href="#Order_SCAN">SCAN</a></td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">发行版本</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SINTERCARD</td><td style="text-align:left">SINTERCARD numkeys <em>key [key …]</em> [LIMIT limit]</td><td style="text-align:left">7.0.0</td><td style="text-align:left">集合：交</td><td style="text-align:left">获取两个集合的交集数量<br>[LIMIT  limit]：最大交集量 <br><code>SINTERCARD 2 testset testset1返回19</code> 两个集合的交集量容量为19 <br><code>SINTERCARD 2 testset testset1 limit 10 </code>返回10</td></tr><tr><td style="text-align:left">SMISMEMBER</td><td style="text-align:left">SMISMEMBER <em>key</em> member [member …]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查</td><td style="text-align:left">返回每个成员是否是存储在 key  集合的成员（多个元素的存在的查询） <br>返回与指定的member顺序一致的数组</td></tr></tbody></table><h1>Zset : 有序集合</h1><p>Redis 排序集是由<strong>相关分数</strong>排序的唯一字符串（成员）的集合。当多个字符串具有相同的分数时，这些字符串按字典顺序排列。排序集的一些用例包括：</p><ul><li><p>排行榜。例如，您可以使用排序集轻松维护大型在线游戏中最高分的有序列表。</p></li><li><p>速率限制器。特别是，您可以使用排序集来构建滑动窗口速率限制器，以防止过多的 API 请求。</p></li></ul><p>Sorted Set 中的每个元素都与一个浮点值相关联，称为<code>score </code>。所以Sorted Set 也是一种Hash结构。</p><p>排序规则：</p><ul><li><p>如果 A 和 B 是具有不同分数的两个元素， A.score &gt; B.score，则 A &gt; B 。</p></li><li><p>如果 A 和 B 具有完全相同的分数，如果 A 字符串<code>在字典顺序上</code>大于 B 字符串，则 A &gt; B。A 和 B 字符串不能相等，因为排序集只有唯一元素</p></li></ul><p>实战场景</p><ul><li><strong>排行榜</strong>：小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</li></ul><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ZADD</td><td style="text-align:left">ZADD <em>key</em> [NX | XX] [GT | LT] [CH] [INCR]  <em>score member [score member   …]</em></td><td style="text-align:left">增</td><td style="text-align:left">为有序集合添加一个/多个元素，若元素存在，则修改元素的score<br> - <strong>XX</strong>:  只更新已经存在的元素。不添加新元素。<br>- <strong>NX</strong>:   只添加新元素。 不要更新已经存在的元素. <br>- <strong>LT</strong>:   如果新分数<strong>小于</strong>当前分数，则仅更新现有元素。 此标志不会阻止添加新元素。<br>- <strong>GT</strong>:  如果新分数<strong>大于</strong>当前分数，则仅更新现有元素。 此标志不会阻止添加新元素。<br>- <strong>CH</strong>:  通常ZADD的返回值只计算添加的新元素的数量，此命令将返回值则为更改的元素总数（CH 是 <em>changed</em> 的缩写），即：<strong>添加的新元素</strong>和<strong>已经存在且分数被更新的元素</strong>。  <br><strong>INCR</strong>:   此命令类似于<code>ZINCRBY</code>。在此模式下只能指定一个分数元素对。<br><br>注意: <strong>GT</strong>、<strong>LT</strong> 和 <strong>NX</strong> 选项是互斥的。</td></tr><tr><td style="text-align:left">ZCARD</td><td style="text-align:left">ZCARD <em>key</em></td><td style="text-align:left">查</td><td style="text-align:left">返回存储在 key 处的有序集合元素数 <br>card: cardinality 基数</td></tr><tr><td style="text-align:left">ZCOUNT</td><td style="text-align:left">ZCOUNT <em>key</em> min max</td><td style="text-align:left">查</td><td style="text-align:left">用给定值内的分数计算有序集合元素数（包含min 和 max）</td></tr><tr><td style="text-align:left">ZINCRBY</td><td style="text-align:left">ZINCRBY <em>key</em> increment member</td><td style="text-align:left">查&amp;改</td><td style="text-align:left">将存储在 key 的有序集合中的成员的分数按增量递增 <br>① 如果成员在排序集中不存在，则将其添加为增量作为其分数（就像它之前的分数是 0.0） <br>② 如果 key 不存在，则创建一个以指定成员为唯一成员的新排序集。</td></tr><tr><td style="text-align:left">ZLEXCOUNT</td><td style="text-align:left">ZLEXCOUNT <em>key</em> min max</td><td style="text-align:left">查</td><td style="text-align:left">该命令返回有序集合中指定字典范围内的元素个数。<br>① 当一个有序集合中的所有元素以相同的分数插入时，强制使用字典顺序<br>② min 和 max 的定义类似 <a href="#ORDER_ZRANGEBYLEX">ZRANGEBYLEX</a></td></tr><tr><td style="text-align:left">ZPOPMAX</td><td style="text-align:left">ZPOPMAX <em>key</em> [count]</td><td style="text-align:left">查&amp;删</td><td style="text-align:left"><code>从一个key，弹出多个成员</code><br>删除并返回存储在排序集（key）中得分最高的 count个成员。</td></tr><tr><td style="text-align:left">BZPOPMAX</td><td style="text-align:left">BZPOPMAX <em>key [key …]</em> timeout</td><td style="text-align:left">查&amp;删</td><td style="text-align:left"><code> 从多个key，弹出一个成员</code><br>从一个或多个排序集（key [key …]）删除并返回得分最高的成员<br>无数据，则阻塞等待，直到有一个key可用。</td></tr><tr><td style="text-align:left">ZPOPMIN</td><td style="text-align:left">ZPOPMIN <em>key</em> [count]</td><td style="text-align:left">查&amp;删</td><td style="text-align:left"><code>从一个key，弹出多个成员</code><br>删除并返回存储在 key 的排序集中得分最低的 count个 成员</td></tr><tr><td style="text-align:left">BZPOPMIN</td><td style="text-align:left">BZPOPMIN <em>key [key …]</em> timeout</td><td style="text-align:left">查&amp;删</td><td style="text-align:left"><code>从多个key，弹出一个成员</code><br>从一个或多个排序集中删除并返回得分最低的成员，或阻止，直到有一个可用</td></tr><tr><td style="text-align:left">ZRANGE</td><td style="text-align:left">ZRANGE <em>key</em> start stop [WITHSCORES]</td><td style="text-align:left">查</td><td style="text-align:left">有序集合，返回指定index范围的元素 <br>[WITHSCORES]：一并返回元素分值 <br>举例： <code>ZRANGE hackers 0 -1 WITHSCORES</code></td></tr><tr><td style="text-align:left">ZRANK</td><td style="text-align:left">ZRANK <em>key</em> member</td><td style="text-align:left">查</td><td style="text-align:left">返回 member 在存储在 key 的有序集合中的排名，分数从低到高排序。<br>排名（或索引）从 0 开始</td></tr><tr><td style="text-align:left">ZREVRANK</td><td style="text-align:left">ZREVRANK <em>key</em> member</td><td style="text-align:left">查</td><td style="text-align:left">返回 member 在存储在 key 的有序集合中的排名，分数从高到低排序。<br>排名（或索引）从 0 开始，这意味着得分最高的成员的排名为 0</td></tr><tr><td style="text-align:left">ZREM</td><td style="text-align:left">ZREM <em>key</em> member [member …]</td><td style="text-align:left">删</td><td style="text-align:left">从存储在 key 的排序集中删除指定的成员<br>不存在的成员将被忽略</td></tr><tr><td style="text-align:left">ZREMRANGEBYLEX</td><td style="text-align:left">ZREMRANGEBYLEX <em>key</em> min max</td><td style="text-align:left">删</td><td style="text-align:left">删除给定字典序范围内的元素（闭区间）</td></tr><tr><td style="text-align:left">ZREMRANGEBYRANK</td><td style="text-align:left">ZREMRANGEBYRANK <em>key</em> start stop</td><td style="text-align:left">删</td><td style="text-align:left">删除指定位置区间内的元素（闭区间）</td></tr><tr><td style="text-align:left">ZREMRANGEBYSCORE</td><td style="text-align:left">ZREMRANGEBYSCORE <em>key</em> min max</td><td style="text-align:left">删</td><td style="text-align:left">删除分数介于 min 和 max 之间的元素 （闭区间）</td></tr><tr><td style="text-align:left">ZSCORE</td><td style="text-align:left">ZSCORE <em>key</em> member</td><td style="text-align:left">查</td><td style="text-align:left">获取与排序集合中给定成员关联的分数</td></tr><tr><td style="text-align:left">ZSCAN</td><td style="text-align:left">ZSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td><td style="text-align:left">查</td><td style="text-align:left">增量迭代排序集元素和相关分数。使用方法可以参考<a href="#Order_SCAN">SCAN</a></td></tr></tbody></table><blockquote><p>集合操作（6.0.6 之前）</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th>功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>ZINTERSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight   [weight …]] [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;]</td><td>交集</td><td style="text-align:left">计算多个有序集合的交集，并保存到destination 中。<br>[<strong>WEIGHTS</strong> weight   [weight …]] ：使用此选项，可以为每个输入排序集指定一个乘法因子。<br>① 每个输入排序集中的每个元素的分数在传递给聚合函数之前都会乘以该因子。<br>② 当未给出 WEIGHTS 时，乘法因子默认为 1。<br>[<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] : <em>destination</em> 中元素的分数的计算方式。默认为求和。</td></tr><tr><td style="text-align:left"><strong>ZUNIONSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight   [weight …]] [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;]</td><td>并集</td><td style="text-align:left">计算多个有序集合的并集，并保存到destination 中。<br>如果destination已经存在，它会被覆盖。<br><br>[<strong>WEIGHTS</strong> weight   [weight …]] ：使用此选项，可以为每个输入排序集指定一个乘法因子<br>① 每个输入排序集中的每个元素的分数在传递给聚合函数之前都会乘以该因子。<br>② 当未给出 WEIGHTS 时，乘法因子默认为 1。<br>[<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] : <em>destination</em> 中元素的分数的计算方式。默认为求和。</td></tr></tbody></table><blockquote><p>集合操作（6.0.6 之后）</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">功能</th><th style="text-align:left">版本</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>ZINTER</strong> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight [weight …]]   [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] [<strong>WITHSCORES</strong>]</td><td style="text-align:left">交集</td><td style="text-align:left">6.2.0</td><td style="text-align:left">计算多个有序集合的交集，并返回</td></tr><tr><td style="text-align:left"><strong>ZUNION</strong> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight [weight …]]   [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] [<strong>WITHSCORES</strong>]</td><td style="text-align:left">并集</td><td style="text-align:left">6.2.0</td><td style="text-align:left">计算多个有序集合的并集，并返回</td></tr><tr><td style="text-align:left"><strong>ZDIFF</strong> numkeys <em>key [key …]</em> [<strong>WITHSCORES</strong>]</td><td style="text-align:left">补集</td><td style="text-align:left">6.2.0</td><td style="text-align:left">计算第一个集合比后面所有集合多出的元素，并返回<br>（比较逻辑和分值无关）</td></tr><tr><td style="text-align:left"><strong>ZDIFFSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em></td><td style="text-align:left">补集</td><td style="text-align:left">6.2.0</td><td style="text-align:left">计算第一个集合比后面所有集合多出的元素，并存入destination<br>（比较逻辑和分值无关）</td></tr></tbody></table><blockquote><p>其他（6.0.6以下版本不支持）</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th style="text-align:left">发行版本</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ZRANDMEMBER</td><td style="text-align:left"><strong>ZRANDMEMBER</strong> key [count [<strong>WITHSCORES</strong>]]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查</td><td style="text-align:left">从有序集合中返回一个或多个元素<br>如果提供的 count 参数为正，则返回不同元素的数组。数组的长度是计数或排序集的基数 (ZCARD)，以较低者为准。<br>如果以负数调用，则行为会发生变化，并且允许该命令多次返回相同的元素。在这种情况下，返回元素的数量是指定计数的绝对值。</td></tr><tr><td style="text-align:left">ZRANGE</td><td style="text-align:left"><strong>ZRANGE</strong> <em>key</em> start  stop [<strong>BYSCORE</strong> |<strong>BYLEX</strong>] [<strong>REV</strong>] [<strong>LIMIT</strong> offset count]   [<strong>WITHSCORES</strong>]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查</td><td style="text-align:left">此命令可以替换以下命令：<br><strong>ZREVRANGE、ZRANGEBYSCORE、ZREVRANGEBYSCORE、ZRANGEBYLEX 和 ZREVRANGEBYLEX</strong><br><br> [<strong>BYSCORE</strong> |<strong>BYLEX</strong>] ：根据分值查找/ 根据字典顺序<br><br><code>zrange hackers  + - bylex rev</code><br></td></tr><tr><td style="text-align:left">ZRANGESTORE</td><td style="text-align:left"><strong>ZRANGESTORE</strong> <em>dst  src</em> min max   [<strong>BYSCORE</strong> | <strong>BYLEX</strong>]   [<strong>REV</strong>]   [<strong>LIMIT</strong> offset   count]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查&amp;存</td><td style="text-align:left">ZRANGE 查询结果结果存储在目标键dst 中</td></tr><tr><td style="text-align:left">ZMSCORE</td><td style="text-align:left"><strong>ZMSCORE</strong> <em>key</em> member [member …]</td><td style="text-align:left">6.2.0</td><td style="text-align:left">查</td><td style="text-align:left">查询指定成员关联的分数<br>对于排序集中不存在的每个成员，返回一个 nil 值。</td></tr><tr><td style="text-align:left">ZINTERCARD</td><td style="text-align:left"><strong>ZINTERCARD</strong> numkeys <em>key [key …]</em> [<strong>LIMIT</strong> limit]</td><td style="text-align:left">7.0.0</td><td style="text-align:left">集合：交</td><td style="text-align:left">返回交集元素总量<br> [LIMIT limit]：默认为 0，表示无限制。<br>如果交集元素总量在计算过程中达到极限，算法将退出并将limit 作为交集总量<br><code>ZINTERCARD 2 zset1 zset2 LIMIT 1</code>:   <code>返回 1</code></td></tr><tr><td style="text-align:left">ZMPOP</td><td style="text-align:left"><strong>ZMPOP</strong> numkeys <em>key [key …]</em> &lt;<strong>MIN | MAX</strong>&gt; [<strong>COUNT</strong> count]</td><td style="text-align:left">7.0.0</td><td style="text-align:left">删</td><td style="text-align:left"><code>从多个key，弹出多个成员</code><br>从提供的键名列表中的第一个非空排序集中弹出一个或多个成员</td></tr><tr><td style="text-align:left">BZMPOP</td><td style="text-align:left"><strong>BZMPOP</strong> timeout numkeys <em>key [key …]</em> &lt;<strong>MIN | MAX&gt;</strong> [<strong>COUNT</strong> count]</td><td style="text-align:left">7.0.0</td><td style="text-align:left">删</td><td style="text-align:left"><code> 从多个key，弹出多个成员</code><br>有序集合中存在数据时返回，不存在时阻塞等待。<br>timeout：double数，时间单位为秒，设置为0时无期限等待</td></tr></tbody></table><blockquote><p>6.2.0之后已被弃用，被合并到ZRANGE</p></blockquote><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>ZREVRANGE</strong>  <em>key</em> start stop [<strong>WITHSCORES</strong>]</td><td style="text-align:left">查</td><td style="text-align:left">按照<strong>分值降序</strong>后，返回有序集合中指定<strong>index</strong>范围的元素</td></tr><tr><td style="text-align:left"><span id="ORDER_ZRANGEBYLEX"><strong>ZRANGEBYLEX</strong> <em>key</em> min max [<strong>LIMIT</strong> offset count]</span></td><td style="text-align:left">查</td><td style="text-align:left">该命令返回有序集合中指定<strong>字典</strong>范围内的元素<br>① 当排序集中的所有元素<strong>以相同的分数</strong>插入时，使用字典顺序，<br>② 此命令返回排序集中的所有元素在 key 处，其值介于 min 和 max 之间。<br>③ 如果排序集中的元素具有不同的分数，则返回的元素是未指定的<br><code> ZRANGEBYLEX  hackers - +</code> <br><code> ZRANGEBYLEX  hackers - + LIMIT 2 3</code>  <br><code>ZRANGEBYLEX  hackers [A [Z</code>：包含<br><code>ZRANGEBYLEX  hackers (A (Z</code>：不包含</td></tr><tr><td style="text-align:left"><strong>ZREVRANGEBYLEX</strong> <em>key</em> max min [<strong>LIMIT</strong> offset count]</td><td style="text-align:left">查</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>ZRANGEBYSCORE</strong> <em>key</em> min max [<strong>WITHSCORES</strong>] [<strong>LIMIT</strong> offset count]</td><td style="text-align:left">查</td><td style="text-align:left">按照<strong>分值降序</strong>后，返回有序集合中指定分值范围的元素<br>举例：<code>zrangebyscore hackers -inf 1950</code><br>==-inf==: 表示负无穷 <strong>infinity</strong> [ɪnˈfɪnəti]</td></tr><tr><td style="text-align:left"><strong>ZREVRANGEBYSCORE</strong> <em>key</em> max min [<strong>WITHSCORES</strong>] [<strong>LIMIT</strong> offset count]</td><td style="text-align:left">查</td><td style="text-align:left"></td></tr></tbody></table><h1>HyperLogLogs（基数统计）</h1><blockquote><p>Redis 2.8.9 版本更新了 Hyperloglog 数据结构</p></blockquote><ul><li><p><strong>什么是基数？</strong></p><p>举个例子，A = {1, 2, 3, 4, 5}， B = {3, 5, 6, 7, 9}；那么基数（不重复的元素）= 1, 2, 4, 6, 7, 9； （允许容错，即可以接受一定误差）</p></li><li><p><strong>HyperLogLogs 基数统计用来解决什么问题</strong>？</p><p>这个结构可以非常省内存的去统计各种计数，比如注册 IP 数、每日访问 IP 数、页面实时UV、在线用户数，共同好友数等。</p></li><li><p><strong>它的优势体现在哪</strong>？</p><p>一个大型的网站，每天 IP 比如有 100 万，粗算一个 IP 消耗 15 字节，那么 100 万个 IP 就是 15M。而 HyperLogLog 在 Redis 中每个键占用的内容都是 12K，理论存储近似接近 2^64 个值，不管存储的内容是什么，它一个基于基数估算的算法，只能比较准确的估算出基数，可以使用少量固定的内存去存储并识别集合中的唯一元素。而且这个估算的基数并不一定准确，是一个带有 0.81% 标准错误的近似值（对于可以接受一定容错的业务场景，比如IP数统计，UV等，是可以忽略不计的）</p></li><li><p><strong>相关命令使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># PFADD key [element [element ...]]</span><span class="token operator">&gt;</span> PFADD key1 a b c d e f g h i<span class="token comment"># 创建第一组元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 统计元素的基数数量</span><span class="token comment"># PFCOUNT key [key ...]</span><span class="token operator">&gt;</span> PFCOUNT key1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">9</span><span class="token comment"># 创建第二组元素</span><span class="token operator">&gt;</span> PFADD key2 c j k l m e g a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token operator">&gt;</span> PFCOUNT key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span><span class="token comment"># 合并两组：key1 key2 -&gt; key3 并集</span><span class="token comment"># PFMERGE destkey sourcekey [sourcekey ...]</span><span class="token operator">&gt;</span> PFMERGE key3 key1 key2OK<span class="token operator">&gt;</span> pfcount key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1>Bitmap （位存储）</h1><blockquote><p>Bitmap 即位图数据结构，都是操作二进制位来进行记录，只有0 和 1 两个状态。</p></blockquote><ul><li><p><strong>用来解决什么问题</strong></p><p>比如：统计用户信息，活跃，不活跃； 登录，未登录；打卡，不打卡； <strong>两个状态的，都可以使用 Bitmaps</strong>！</p><p>如果存储一年的打卡状态需要多少内存呢？ 365 天 = 365 bit 1字节 = 8bit 46 个字节左右</p></li><li><p><strong>相关命令使用</strong></p><p>使用bitmap 来记录 周一到周日的打卡！ 周一：1 周二：0 周三：0 周四：1 …</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># SETBIT key offset value</span><span class="token operator">&gt;</span> setbit sign <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">4</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">5</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">&gt;</span> setbit sign <span class="token number">6</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看某一天是否有打卡</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GETBIT key offset</span><span class="token operator">&gt;</span> getbit sign <span class="token number">3</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token operator">&gt;</span> getbit sign <span class="token number">5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统计操作，统计 打卡的天数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># BITCOUNT key [start end [BYTE | BIT]]</span><span class="token comment"># BITCOUNT 统计的是二进制后的数据</span><span class="token operator">&gt;</span> bitcount sign <span class="token comment"># 统计这周的打卡记录，就可以看到是否有全勤！</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token comment"># 111001101001100010101111</span><span class="token operator">&gt;</span> SET <span class="token builtin class-name">test</span> 谳OK<span class="token operator">&gt;</span> BITCOUNT <span class="token builtin class-name">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li><p>GETBIT key offset</p></li><li><p>SETBIT key offset value</p></li><li><p>BITCOUNT key [start end [BYTE | BIT]]</p></li><li><p>BITOP operation destkey key [key …] ： 在多个键(包含字符串值)之间执行位操作，并将结果存储在目标键中</p><pre class="line-numbers language-none"><code class="language-none">BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyNBITOP OR destkey srckey1 srckey2 srckey3 ... srckeyNBITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyNBITOP NOT destkey srckey<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>BITPOS key bit [start [end [BYTE | BIT]]]   返回字符串中第一个位设置为1或0的位置</p></li></ol><h1>Geospatial (地理位置)</h1><blockquote><p>这个功能可以推算地理位置的信息: 两地之间的距离, 方圆几里的人</p><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul></blockquote><h2 id="GEOADD：添加地理位置">GEOADD：添加地理位置</h2><p><strong>GEOADD</strong> key [NX | XX] [CH] <font color="blue">longitude latitude member </font> <font color="green">[longitude<br>latitude member …]</font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOADD china:city <span class="token number">118.76</span> <span class="token number">32.04</span> nanjing <span class="token number">112.55</span> <span class="token number">37.86</span> taiyuan <span class="token number">123.43</span> <span class="token number">41.80</span> shenyang<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token operator">&gt;</span> GEOADD china:city <span class="token number">144.05</span> <span class="token number">22.52</span> shengzhen <span class="token number">120.16</span> <span class="token number">30.24</span> hangzhou <span class="token number">108.96</span> <span class="token number">34.26</span> xian<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>规则</strong></p><p>两级无法直接添加，我们一般会下载城市数据(这个网址可以查询 GEO： <a href="http://www.jsons.cn/lngcode">http://www.jsons.cn/lngcode</a>)！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span><span class="token operator">&gt;</span> GEOADD china:city <span class="token number">39.90</span> <span class="token number">116.40</span> beijin<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR invalid longitude,latitude pair <span class="token number">39.900000</span>,116.400000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230207154102639-1678135967819-87.png" alt="image-20230207154102639"></p><blockquote><p>存储：将二维的经纬度转换为一维的HASH 值</p></blockquote><h2 id="GEOPOS：获取指定的成员的经度和纬度">GEOPOS：获取指定的成员的经度和纬度</h2><p>获得当前定位, 一定是一个坐标值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOPOS china:city taiyuan nanjing<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GEODIST：计算两点之间的距离">GEODIST：计算两点之间的距离</h2><p><strong>GEODIST</strong> key member1 member2  [M | KM | FT | MI]</p><ul><li>m</li><li>km</li><li>mi 英里</li><li>ft 英尺</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEODIST china:city taiyuan shenyang KM<span class="token string">"1026.4391"</span><span class="token comment"># 位置不存在，返回为空</span><span class="token operator">&gt;</span> GEODIST china:city chengdou shenyang KM<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GEOHASH：-该命令返回11个字符的HASH字符串">GEOHASH： 该命令返回11个字符的HASH字符串</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOHASH china:city taiyuan shenyang<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"ww8p3hhqmp0"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wxrvb9qyxk0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="GEOSEARCH：地理位置查询">GEOSEARCH：地理位置查询</h2><blockquote><p>版本6.2.0 之后新增</p></blockquote><p><strong>GEOSEARCH</strong> key <font color="blue">&lt;<strong>FROMMEMBER</strong> member | <strong>FROMLONLAT</strong> longitude latitude&gt;</font><br><font color="green">&lt;<strong>BYRADIUS</strong> radius &lt;M | KM | FT | MI&gt; | BYBOX width height &lt;M | KM |<br>FT | MI&gt;&gt;</font>  <strong>[ASC | DESC]</strong> <font color="blue"> [<strong>COUNT</strong> count [<strong>ANY</strong>]]</font> [WITHCOORD] [<strong>WITHDIST</strong>]<br>[<strong>WITHHASH</strong>]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span><span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM WITHDIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"859.5256"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1161.7864"</span>   <span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM WITHDIST WITHCOORD<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"859.5256"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1161.7864"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"123.42999905347824097"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"41.79999919077864234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GEOSEARCHSTORE">GEOSEARCHSTORE</h2><p><strong>GEOSEARCHSTORE</strong> destination source  <font color="blue">&lt;<strong>FROMMEMBER</strong> member | <strong>FROMLONLAT</strong> longitude latitude&gt;</font><br><font color="green">&lt;<strong>BYRADIUS</strong> radius &lt;M | KM | FT | MI&gt; | BYBOX width height &lt;M | KM |<br>FT | MI&gt;&gt;</font>  <strong>[ASC | DESC]</strong> <font color="blue"> [<strong>COUNT</strong> count [<strong>ANY</strong>]]</font> [<strong>STOREDIST</strong>]</p><p>此命令类似于<code>GEOSEARCH</code>，但将结果存储在目标键中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOSEARCHSTORE <span class="token builtin class-name">test</span> china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230207161213311-1678135967819-89.png" alt="image-20230207161213311"></p><h2 id="GEORADIUS：获得所有附近的人的地址-定位-通过半径来查询（6-2-0之后弃用）">GEORADIUS：获得所有附近的人的地址, 定位, 通过半径来查询（6.2.0之后弃用）</h2><blockquote><p>从Redis版本6.2.0开始，此命令被认为已弃用。可将其替换为<code>GEOSEARCH</code>和<code>GEOSEARCHSTORE</code>，并使用<code>BYRADIUS</code>参数</p></blockquote><p><strong>GEORADIUS</strong> key longitude latitude radius  <strong>&lt;M | KM | FT | MI&gt;</strong><br>[<strong>WITHCOORD</strong>] [<strong>WITHDIST</strong>] [<strong>WITHHASH</strong>] [<strong>COUNT</strong> count [<strong>ANY</strong>]] [<strong>ASC</strong> | <strong>DESC</strong>]<br>[<strong>STORE</strong> key] [<strong>STOREDIST</strong> key]</p><ul><li><strong>WITHDIST</strong> : 返回距离</li><li><strong>WITHCOORD</strong>：返回坐标</li><li><strong>WITHHASH</strong>：返回坐标的HASH值（ZSET的SCORE值）</li><li><strong>COUNT</strong> count：显示结果的数量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以 100,30 这个坐标为中心, 寻找半径为1000km的城市</span><span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km WITHDIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span><span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km WITHCOORD WITHDIST count <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"864.9816"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GEORADIUSBYMEMBER：-显示与指定成员一定半径范围内的其他成员（6-2-0之后弃用）">GEORADIUSBYMEMBER： 显示与指定成员一定半径范围内的其他成员（6.2.0之后弃用）</h2><blockquote><p>从Redis版本6.2.0开始，此命令被认为已弃用。 可将其替换为<code>GEOSEARCH</code>和<code>GEOSEARCHSTORE</code>，并使用<code>BYRADIUS</code>和<code>FROMMEMBER</code>参数</p></blockquote><p><strong>GEORADIUSBYMEMBER</strong> key member radius <strong>&lt;M | KM | FT | MI&gt;</strong> [<strong>WITHCOORD</strong>]<br>[<strong>WITHDIST</strong>] [<strong>WITHHASH</strong>] [<strong>COUNT</strong> count [<strong>ANY</strong>]] [<strong>ASC</strong> | <strong>DESC</strong>] [<strong>STORE</strong> key]<br>[<strong>STOREDIST</strong> key]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEORADIUSBYMEMBER china:city taiyuan <span class="token number">1000</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token operator">&gt;</span> GEORADIUSBYMEMBER china:city taiyuan <span class="token number">1000</span> km withcoord WITHDIST count <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"514.2264"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Redis Stream</h1><p>Redis Stream 是一种数据结构，其作用类似于<code>an append-only log</code>。您可以使用流实时记录和同步事件。</p><p>Redis Stream 用例的示例包括：</p><ul><li>事件溯源（例如，跟踪用户操作、点击等）</li><li>传感器监控（例如，现场设备的读数）</li><li>通知（例如，将每个用户的通知记录存储在单独的流中）</li></ul><p>Redis 为每个流条目生成一个唯一的 ID。您可以使用这些 ID 稍后检索其关联条目或读取和处理流中的所有后续条</p><table><thead><tr><th style="text-align:left">命令</th><th>使用</th><th>功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><a href="#STREAM_XADD">XADD</a></td><td></td><td>增</td><td style="text-align:left">唯一可以将数据添加到流的 Redis 命令</td></tr><tr><td style="text-align:left"><a href="#STREAM_XRANGE">XRANGE</a>/ <a href="#STREAM_XREVRANGE">XREVRANGE</a></td><td></td><td>查</td><td style="text-align:left">返回流中的一段元素</td></tr><tr><td style="text-align:left"><a href="#STREAM_XREAD">XREAD</a></td><td></td><td>查</td><td style="text-align:left">从一个或多个流中读取数据，只返回 ID 大于调用者报告的最后接收到的 ID 的条目</td></tr><tr><td style="text-align:left"><a href="#STREAM_XTRIM">XTRIM</a></td><td><strong>XTRIM</strong> <em>key</em> &lt;MAXLEN |MINID&gt; [= |~] threshold [LIMIT count]</td><td>删</td><td style="text-align:left">将流修剪到 (如果传入’~'，则大约) 某个大小</td></tr><tr><td style="text-align:left">XDEL</td><td>XDEL <em>key</em> id [id …]</td><td></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><a href="#STREAM_XINFO">XINFO</a></td><td>1. <strong>XINFO STREAM</strong> key [FULL [COUNT count]]<br>2. <strong>XINFO GROUPS</strong> key<br>3. <strong>XINFO CONSUMERS</strong> key groupname <br></td><td>查</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">XLEN</td><td>XLEN key</td><td>查</td><td style="text-align:left">返回流中的条目数</td></tr><tr><td style="text-align:left">XSETID</td><td><strong>XSETID</strong> key last-id  [<strong>ENTRIESADDED</strong> entries_added]  [<strong>MAXDELETEDID</strong> max_deleted_entry_id]</td><td>改</td><td style="text-align:left">XSETID 命令是一个内部命令。 Redis 主服务器使用它来复制最后交付的流 ID。</td></tr><tr><td style="text-align:left"></td><td></td><td></td><td style="text-align:left"></td></tr></tbody></table><p>消息分组</p><table><thead><tr><th style="text-align:left">命令</th><th>使用</th><th>功能</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><a href="#STREAM_XGROUP_CREATE">XGROUP CREATE</a></td><td><strong>XGROUP CREATE</strong> key groupname <font color="blue"> &lt;<strong>id |$</strong> &gt; </font> <font color="green">[<strong>MKSTREAM</strong>]</font> <strong>[ENTRIESREAD entries_read]</strong></td><td>增</td><td style="text-align:left">创建消费者组</td></tr><tr><td style="text-align:left"><a href="#STREAM_XGROUP_CREATECONSUMER">XGROUP CREATECONSUMER</a></td><td><strong>XGROUP CREATECONSUMER</strong> key groupname consumername</td><td>增</td><td style="text-align:left">在消费者组中创建消费者</td></tr><tr><td style="text-align:left"><a href="#STREAM_XGROUP_DELCONSUMER">XGROUP DELCONSUMER</a></td><td><strong>XGROUP DELCONSUMER</strong> key groupname consumername</td><td>删</td><td style="text-align:left">删除消费者</td></tr><tr><td style="text-align:left"><a href="#STREAM_XGROUP_DESTROY">XGROUP DESTROY</a></td><td><strong>XGROUP DESTROY</strong> key groupname</td><td>删</td><td style="text-align:left">消费者组</td></tr><tr><td style="text-align:left"><a href="#STREAM_XGROUP_SETID">XGROUP SETID</a></td><td><strong>XGROUP SETID</strong> key groupname <font color="blue"> &lt;<strong>id |$</strong> &gt; </font> [ENTRIESREAD entries_read]</td><td>改</td><td style="text-align:left">修改消费者组的最后一个交付ID</td></tr><tr><td style="text-align:left"><a href="#STREAM_XREADGROUP">XREADGROUP</a></td><td><strong>XREADGROUP</strong> <strong>GROUP</strong> group consumer [<strong>COUNT</strong> count] <font color="blue"> [<strong>BLOCK</strong> milliseconds]</font>  [<strong>NOACK</strong>] <strong>STREAMS</strong> key [key …] <font color="orange">id [id …]</font></td><td>查/改</td><td style="text-align:left">从消费者组返回新条目，或者访问给定消费者的待处理条目的历史记录</td></tr><tr><td style="text-align:left"><a href="#STREAM_XPENDING">XPENDING</a></td><td><strong>XPENDING</strong> key group [<font color="blue">[IDLE min-idle-time] start end count [consumer]</font>]</td><td>查</td><td style="text-align:left">从消费者组<code>PEL</code>中 返回获取了但从未确认的消息信息和条目</td></tr><tr><td style="text-align:left"><a href="#STREAM_XCLAIM">XCLAIM</a></td><td><strong>XCLAIM</strong>  key group consumer  min-idle-time id [id …] [<strong>IDLE</strong> ms]   [<strong>TIME</strong> unix-time-milliseconds] [<strong>RETRYCOUNT</strong> count] [<strong>FORCE</strong>] [<strong>JUSTID</strong>]   [<strong>LASTID</strong> id]</td><td></td><td style="text-align:left">更改(或获得)使用者组中消息的所有权，就像消息已交付给指定的使用者一样。</td></tr><tr><td style="text-align:left"><a href="#STREAM_XAUTOCLAIM">XAUTOCLAIM</a></td><td></td><td></td><td style="text-align:left">更改(或获取)使用者组中消息的所有权，就像将消息交付给指定的使用者一样。</td></tr><tr><td style="text-align:left"><a href="#STREAM_XACK">XACK</a></td><td><strong>XACK</strong> key group id [id …]</td><td></td><td style="text-align:left">将挂起的消息标记为正确处理，有效地将其从使用者组的挂起条目列表中删除。该命令的返回值是成功确认的消息的数量，也就是说，我们实际上能够在PEL中解析的id。</td></tr></tbody></table><h2 id="span-id-STREAM-XADD-XADD-span"><span id="STREAM_XADD">XADD</span></h2><ul><li><p>命令详情</p><p>XADD key <font color="green"> [<strong>NOMKSTREAM</strong>]</font> <font color="blue"> [&lt;<strong>MAXLEN</strong> | <strong>MINID</strong>&gt; [= | ~] threshold [<strong>LIMIT</strong> <em>count</em>]] </font>  <font color="orange">&lt;* | id&gt;</font>  <em>field value [field value …]</em></p></li><li><p>命令参数解释</p><ol><li><p>可以使用 <code>NOMKSTREAM </code>选项禁用 <em>Stream key</em> 的创建（key不存在时，返回null）</p></li><li><p><font color="orange">&lt;* | id&gt;</font>  id组成方式：<code>&lt;millisecondsTime&gt;-&lt;sequenceNumber&gt;</code></p><ul><li><p>如果指定的 ID 参数是 <code>*</code>字符，XADD 命令将为您自动生成唯一 ID</p><p><code>XADD stream:test:1 * ip 127.0.0.1</code></p></li><li><p>虽然仅在极少数情况下有用，但可以指定格式良好的 ID，以便将使用指定的 ID 精确添加新条目。</p><p><code>XADD stream:test:1 1662020231547-1 ip 127.0.0.2</code></p><p>当用户为 指定显式 ID 时<code>XADD</code>，最小有效 ID 为 <code>0-1</code>，并且用户<em>必须</em>指定一个大于当前流内任何其他 ID 的 ID，否则该命令将失败并返回错误。</p><p>通常，仅当您有另一个系统生成唯一 ID（例如 SQL 表）并且您确实希望 Redis 流 ID 与另一个系统匹配时，才使用特定 ID。</p></li></ul></li><li><p><font color="blue">[&lt;<strong>MAXLEN</strong> | <strong>MINID</strong>&gt; [= | ~] threshold<br>[<strong>LIMIT</strong> count]]</font>    封顶（Capped streams）</p><p><code>MAXLEN</code>：使用 MAXLEN，当达到指定长度时，旧条目会被自动驱逐</p><p><code>~</code>：表示封顶的阈值 count是一个近似值。<code>MAXLEN ~ 1000</code>我真的不需要这正好是 1000 个项目。它可以是 1000 或 1010 或 1030，只要确保至少保存 1000 个项目即可（常用场景）</p><p><code>MINID</code>：驱逐 ID 低于阈值的条目，其中阈值是流 ID</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XADD mystream <span class="token number">1526919030474</span>-55 message <span class="token string">"Hello,"</span> <span class="token operator">&gt;</span> XADD mystream <span class="token number">1526919030474</span>-* message <span class="token string">" World!"</span><span class="token operator">&gt;</span> XADD mystream MAXLEN ~ <span class="token number">1000</span> * <span class="token punctuation">..</span>. entry fields here <span class="token punctuation">..</span>.<span class="token operator">&gt;</span> XADD stest MINID <span class="token operator">=</span> <span class="token number">1670928883730</span>-0 * name zs age <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>版本变更</p><p>版本6.2.0 前：<strong>XADD</strong> key <strong>ID</strong> <em>field string [field string …]</em></p><p>版本6.2.0后 ：添加了 **NOMKSTREAM 、MINID、  LIMIT **</p><p>版本7.0.0 ： 添加了对 显式 ID 形式的支持</p></li></ul><h2 id="span-id-STREAM-XRANGE-XRANGE-span"><span id="STREAM_XRANGE">XRANGE</span></h2><ul><li><p>详细命令</p><p><strong>XRANGE</strong> key <font color="blue">startId endId</font> <font color="orange">[COUNT count]</font></p></li><li><p>命令参数解释</p><ol><li><p><font style="color:blue;font-weight:bold">startId endId</font>:  startId 和 endId 之间为闭区间</p><ul><li><p>-和 + 特殊 ID 分别表示流中可能的最小 ID 和可能的最大 ID，因此以下命令将仅返回流中的所有条目：<code>XRANGE somestream - +</code></p><p><code>-</code>: 可以理解为：0-0</p><p><code>+</code>: 可以理解为：18446744073709551615-18446744073709551615</p></li><li><p>Incomplete IDs</p><p>不完整指定的ID：仅仅指定 UNIX 时间部分：<code>XRANGE somestream 1526985054069 1526985055069</code></p><p>在这种情况下，XRANGE 将使用 -0 自动完成开始间隔，使用 -18446744073709551615 自动完成结束间隔，以便返回在给定毫秒和另一个指定毫秒结束之间生成的所有条目。</p><p>这也意味着<strong>重复相同的毫秒两次，我们得到指定毫秒内的所有条目</strong></p><p>以这种方式使用 XRANGE 作为范围查询命令来获取指定时间内的条目。这对于获取一段时间内的操作历史，非常方便。</p></li><li><p>Exclusive ranges</p><p>开区间范围查询：ID 前加上字符<code>(</code>来指定一个开区间：<code>XRANGE somestream (1526985685298-0 + COUNT 2</code></p></li></ul></li><li><p><font color="orange">[<strong>COUNT</strong> count]</font> : 返回结果的前count条entry</p></li></ol></li><li><p>使用场景介绍</p><ol><li><p>stream 迭代</p><p>a. 上次查询的entry的id 用 开区间 <code>(</code>，作为下次查询的start 。</p><p>b. 我们可以从任何 ID 开始迭代（指定一个不完整的start id）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XRANGE writers - + COUNT <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985676425</span>-0   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Virginia"</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Woolf"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985685298</span>-0   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Jane"</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Austen"</span><span class="token operator">&gt;</span> XRANGE writers <span class="token punctuation">(</span><span class="token number">1526985685298</span>-0 + COUNT <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985691746</span>-0   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Toni"</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Morrison"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985712947</span>-0   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>    <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Agatha"</span>      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>    <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Christie"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取单个项目</p><p>XRANGE 的参数中指定两次 ID：<code>XRANGE mystream 1526984818136-0 1526984818136-0</code></p></li></ol></li></ul><h2 id="span-id-STREAM-XREVRANGE-XREVRANGE-span"><span id="STREAM_XREVRANGE">XREVRANGE</span></h2><ul><li><p>详细命令</p><p>XREVRANGE key end start [COUNT count]</p></li><li><p>举例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XREVRANGE somestream + - COUNT <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="span-id-STREAM-XREAD-XREAD-span"><span id="STREAM_XREAD">XREAD</span></h2><ul><li><p>命令详情</p><p><strong>XREAD</strong> [<strong>COUNT</strong> count] <font color="green">[<strong>BLOCK</strong> milliseconds]</font> <font color="blue"><strong>STREAMS</strong> key [key …] id<br>[id …]</font></p></li><li><p>命令参数解释</p><p><strong>STREAMS</strong> key [key …] id [id …]：指定了一个键列表以及调用消费者已经为每个流看到的相应最大 ID，因此该命令将只向客户端提供 ID  <code>大于</code>我们指定的 ID 的消息。（不包含指定的ID）</p><p>[<strong>BLOCK</strong> milliseconds]：阻塞的毫秒数。若milliseconds 设置为0 ，则表示永远不会超时</p><p>[<strong>COUNT</strong> count]：限定调用将在每个流中最多返回count个元素</p></li><li><p>特殊的ID<code>$</code></p><p><strong>STREAMS</strong> $ :  意味着应该使用已经存储在流中的最大 ID 作为最后一个 ID。</p><p>当阻塞时，有时我们希望只接收从阻塞那一刻开始通过XADD添加到流中的条目。在这种情况下，我们对已经添加的条目的历史不感兴趣。</p><p>对于这个用例，我们必须检查流顶部元素的ID，并在XREAD命令行中使用这样的ID。这是不干净的，需要调用其他命令，所以可以使用特殊的 <code>$</code> 来通知流，我们只想要新的东西。</p><p><strong>仅在第一次调用 XREAD 时使用 $ ID 非常重要。之后迭代的ID应该是流中最后报告的ID，否则您可能会错过中间添加的所有条目。</strong></p><table><thead><tr><th>客户端A</th><th>客户端B</th><th>客户端C</th></tr></thead><tbody><tr><td>&gt; XREAD COUNT 1 block 30000 STREAMS test $</td><td>&gt; XREAD COUNT 1 block 30000 STREAMS test $</td><td></td></tr><tr><td></td><td></td><td>&gt; xadd test * name wangwu age 22<br>1675666852907-0</td></tr><tr><td>test<br>1675666852907-0<br>name<br>wangwu<br>age<br>22</td><td>test<br>1675666852907-0<br>name<br>wangwu<br>age<br>22</td><td></td></tr></tbody></table><blockquote><p>客户端C 发送消息时，阻塞等待的客户端A、客户端B 均接受到了流中新增条目</p></blockquote></li><li><p>使用场景</p><ol><li><p>非阻塞情况：从多个流读取数据（XRANGE 的扩展版本）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD COUNT <span class="token number">2</span> STREAMS mystream writers <span class="token number">0</span>-0 <span class="token number">0</span>-0<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526984818136</span>-0         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"duration"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1532"</span>            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"event-id"</span>            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"5"</span>            <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"user-id"</span>            <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"7782813"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526999352406</span>-0         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"duration"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"812"</span>            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"event-id"</span>            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"9"</span>            <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"user-id"</span>            <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"388234"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"writers"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985676425</span>-0         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Virginia"</span>            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Woolf"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985685298</span>-0         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Jane"</span>            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Austen"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>阻塞情况下：（无返回数据的情况下，等待数据返回）</p><p>消费者第一次迭代：从我们开始收听的时间开始，阻塞等待最新消息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD BLOCK <span class="token number">5000</span> COUNT <span class="token number">100</span> STREAMS mystream $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一旦我们得到一些回复，下一次调用将是这样的：阻塞等待<code>1526999644174-3</code>之后的数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD BLOCK <span class="token number">5000</span> COUNT <span class="token number">100</span> STREAMS mystream <span class="token number">1526999644174</span>-3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>如何为单个流上被阻止的多个客户端提供服务：<strong>FIFO</strong></p><ol><li><p>当新项目可用时，为给定流阻塞的第一个客户端将是第一个被解除阻塞的客户端。因为从等待数据的客户端的角度来看，阻塞流读取是公平的，其语义是 FIFO 风格。（类似于阻塞队列）</p></li><li><p>为客户端提供服务时，不会从流中删除流条目，因此只要 XADD 命令向流提供数据，就会为每个等待的客户端提供服务。（不同于阻塞队列）</p></li></ol></li></ul><h2 id="span-id-STREAM-XTRIM-XTRIM-span"><span id="STREAM_XTRIM"> XTRIM</span></h2><ul><li><p>命令详情</p><p><strong>XTRIM</strong> <em>key</em> &lt;MAXLEN | MINID&gt; [= | ~] threshold [LIMIT count]</p></li><li><p>命令参数解释</p><p>MAXLEN:  只要流的长度超过指定的阈值，就逐出条目，其中阈值是一个正整数。</p><p>MINID: 驱逐 ID 低于阈值的条目，其中阈值是流 ID。</p></li><li><p>返回：成功移除数据量</p></li><li><p>示范</p><ol><li><p>精确修剪<code>=</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XTRIM mystream MAXLEN <span class="token number">1000</span>XTRIM mystream MINID <span class="token number">649085820</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>近乎精确的修剪</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XTRIM mystream MAXLEN ~ <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul><h2 id="span-id-STREAM-XINFO-XINFO-span"><span id="STREAM_XINFO"> XINFO</span></h2><h3 id="XINFO-STREAM">XINFO STREAM</h3><ul><li><p>命令详情</p><p><strong>XINFO STREAM</strong> key [FULL [COUNT count]]：</p></li><li><p>此命令返回有关存储在 <key> 中的流的信息。详细信息是：</key></p><ul><li><strong>length</strong>: 流中的条目数</li><li><strong>radix-tree-keys</strong>: 底层基数数据结构中的键数</li><li><strong>radix-tree-nodes</strong>: 底层基数数据结构中的节点数</li><li><strong>groups</strong>: 底层基数数据结构中的节点数 groups：为流定义的消费者组数</li><li><strong>last-generated-id</strong>:添加到流中的最近条目的 ID</li><li><strong>max-deleted-entry-id</strong>: 从流中删除的最大条目 ID</li><li><strong>entries-added</strong>: 在其生命周期内添加到流中的所有条目的计数</li><li><strong>first-entry</strong>: 流中第一个条目的 ID 和字段值元组</li><li><strong>last-entry</strong>: 流中最后一个条目的 ID 和字段值元组</li></ul></li></ul><h3 id="XINFO-GROUPS">XINFO GROUPS</h3><ul><li><p>命令详情</p><p>XINFO GROUPS key</p></li></ul><h3 id="XINFO-CONSUMERS">XINFO CONSUMERS</h3><ul><li><p>命令详情</p><p>XINFO CONSUMERS key groupname</p></li></ul><h2 id="span-id-STREAM-GROUP-XGROUP-span"><span id="STREAM_GROUP"> XGROUP</span></h2><ul><li><p><strong>XGROUP</strong> 用于创建、销毁和管理消费者组。</p></li><li><p><strong>XREADGROUP</strong> 用于通过消费者组从流中读取。</p></li><li><p><strong>XACK</strong> 是允许消费者将未决消息标记为已正确处理的命令。</p></li></ul><h3 id="span-id-STREAM-XGROUP-CREATE-XGROUP-CREATE-span"><span id="STREAM_XGROUP_CREATE"> XGROUP CREATE</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP CREATE</strong> key groupname  <font color="blue"> &lt;<strong>id | $</strong> &gt; </font>  <font color="green">[<strong>MKSTREAM</strong>]</font>  <strong>[ENTRIESREAD entries_read]</strong></p></li><li><p>参数说明</p><ol><li><p><font color="blue"> &lt;<strong>id | $</strong> &gt; </font> ：从新组的角度指定流中最后传送的条目。</p><p>例如，如果您希望组的消费者从头开始获取整个流，使用零作为消费者组的起始 ID。特殊 ID <code>$</code> 是指流中最后一个条目的 ID</p></li><li><p><font color="green">[<strong>MKSTREAM</strong>]</font>: 流不存在时，自动创建，否则返回 key不存在的异常</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERR The XGROUP subcommand requires the key to exist. Note that <span class="token keyword">for</span> CREATE you may want to use the MKSTREAM option to create an empty stream automatically.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>[ENTRIESREAD entries_read]</strong></p><p>从 指定的 <font color="blue"> &lt;<strong>id | $</strong> &gt;</font>，到最后一个条目，指定读取的条目容量</p></li></ol></li><li><p>功能说明</p><p>创建消费者组</p></li></ul><h3 id="span-id-STREAM-XGROUP-CREATECONSUMER-XGROUP-CREATECONSUMER-span"><span id="STREAM_XGROUP_CREATECONSUMER">XGROUP CREATECONSUMER</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP CREATECONSUMER</strong> key groupname consumername</p></li><li><p>功能说明</p><p>在消费者组中创建消费者</p></li></ul><h3 id="span-id-STREAM-XGROUP-DELCONSUMER-XGROUP-DELCONSUMER-span"><span id="STREAM_XGROUP_DELCONSUMER">XGROUP DELCONSUMER</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP DELCONSUMER</strong> key groupname consumername</p></li><li><p>功能说明</p><p>在消费者组中删除消费者。消费者拥有的任何待处理消息在被删除后将变得不可领取。因此，强烈建议在从组中删除消费者之前声明或确认任何未决消息。</p></li></ul><h3 id="span-id-STREAM-XGROUP-DESTROY-XGROUP-DESTROY-span"><span id="STREAM_XGROUP_DESTROY">XGROUP DESTROY</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP DESTROY</strong> key groupname</p></li><li><p>功能说明</p><p>摧毁一个消费者组。即使有活跃的消费者和待处理的消息，消费者组也会被销毁，因此请确保仅在真正需要时才调用此命令。</p></li></ul><h3 id="span-id-STREAM-XGROUP-SETID-XGROUP-SETID-span"><span id="STREAM_XGROUP_SETID">XGROUP SETID</span></h3><ul><li><p>命令详情</p><p><strong>XGROUP SETID</strong> key groupname  <font color="blue"> &lt;<strong>id | $</strong> &gt; </font>  [ENTRIESREAD entries_read]</p></li><li><p>功能说明</p><p><strong>XGROUP SETID</strong>命令允许修改组的最后一个交付ID，而不必删除和重新创建组。例如，如果你想让消费者组中的消费者重新处理流中的所有消息，你可以将其下一个ID设置为0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XGROUP SETID mystream mygroup <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="span-id-STREAM-XREADGROUP-XREADGROUP-span"><span id="STREAM_XREADGROUP">XREADGROUP</span></h3><ul><li><p>命令详情</p><p><strong>XREADGROUP</strong> <strong>GROUP</strong> group consumer [<strong>COUNT</strong> count] <font color="blue"> [<strong>BLOCK</strong> milliseconds]</font>  [<strong>NOACK</strong>] <strong>STREAMS</strong> key [key …] <font color="orange">id [id …]</font></p></li><li><p>参数说明</p><p><font color="orange">id [id …]</font>：</p><ul><li>若id为 <code>&gt;</code> :  使用者只想接收从未传递给任何其他使用者的消息</li><li>任何其他ID，即 <code>0</code> 或任何其他有效ID或不完整ID（仅为毫秒时间部分），客户端访问的是：传递给它但尚未确认的消息（历史记录的概念）。注意，在这种情况下，BLOCK和NOACK都被忽略。</li></ul></li><li><p>功能说明</p><p>使用 <code>XREADGROUP </code> 可以创建<strong>客户端组</strong>来消费到达给定流的消息的不同部分。例如，如果流获得新的条目 A、B 和 C，并且有两个消费者通过消费者组读取消息，一个客户端将获得消息 A 和 C，另一个客户端将获得消息 B。</p><p>但是要实现多个键中读取，您需要在每个流中创建一个具有相同名称的消费者组（不常见的需求）</p></li><li><p>举例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XGROUP CREATE mystream mygroup $ MKSTREAM<span class="token operator">&gt;</span> XADD mystream * message apple<span class="token operator">&gt;</span> XADD mystream * message orange<span class="token operator">&gt;</span> XADD mystream * message strawberry<span class="token operator">&gt;</span> XADD mystream * message apricot<span class="token operator">&gt;</span> XRANGE mystream - +<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738497958-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498027-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"orange"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498119-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"strawberry"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498206-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span>            <span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token operator">&gt;</span> XADD mystream * message banana<span class="token string">"1675738604129-0"</span><span class="token comment">## 接收条目</span><span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738667048-0"</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span>         <span class="token comment">## 已接收但是未确认的历史消息列表</span><span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738667048-0"</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span>        <span class="token comment">## 确认消息</span><span class="token operator">&gt;</span> XACK mystream mygroup <span class="token number">1675738667048</span>-0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment">## 已接收但是未确认的历史消息列表</span><span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="span-id-STREAM-XACK-XACK-span"><span id="STREAM_XACK"> XACK</span></h3><ul><li><p>命令详情</p><p><strong>XACK</strong> key group id [id …]</p></li><li><p>功能说明</p><p><code>XACK</code>命令从流使用者组的<code>Pending Entries List (PEL)</code>中删除一条或多条消息。</p><p>客户端成功处理了一条消息，之后应该调用<code>XACK</code>，这样该消息就不会再次被处理，同时，关于该消息的 <code>PEL</code>条目也会被清除，从而从Redis服务器释放内存。</p></li></ul><h3 id="span-id-STREAM-XPENDING-XPENDING-span"><span id="STREAM_XPENDING">XPENDING</span></h3><ul><li><p>命令详情</p><p><strong>XPENDING</strong> key group [<font color="blue">[IDLE min-idle-time] start end count [consumer]</font>]</p></li><li><p>功能说明</p><p>从消费者组<code>PEL</code>中 返回获取了但从未确认的消息信息和条目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 前期</span><span class="token operator">&gt;</span> XGROUP CREATE mystream mygroup $ MKSTREAM<span class="token operator">&gt;</span> XADD mystream * message apple<span class="token operator">&gt;</span> XADD mystream * message orange<span class="token operator">&gt;</span> XADD mystream * message strawberry<span class="token operator">&gt;</span> XADD mystream * message apricot<span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span><span class="token comment">## 实验</span><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360459-0"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360459-0"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Alice"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token operator">&gt;</span> XACK mystream mygroup <span class="token number">1675739360459</span>-0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="span-id-STREAM-XCLAIM-XCLAIM-span"><span id="STREAM_XCLAIM"> XCLAIM</span></h3><ul><li><p>命令详情</p><p><strong>XCLAIM</strong>  key group consumer  min-idle-time  id [id …]  [<strong>IDLE</strong> ms]<br>[<strong>TIME</strong> unix-time-milliseconds] [<strong>RETRYCOUNT</strong> count] [<strong>FORCE</strong>] [<strong>JUSTID</strong>]<br>[<strong>LASTID</strong> id]</p></li><li><p>功能说明</p><p>此命令用于更改待处理消息的 所有权。通常情况是这样的</p><ol><li><code>STREAM</code> 存在关联消费者组 <code>group_a</code></li><li>某个<code>consumer_a </code>在<code>group_a</code>的上下文中通过 <code>XREADGROUP</code> 从流中读取消息。</li><li>在<code>group_a</code>的待处理条目列表 (PEL) 中创建了一个待处理的消息条目：这意味着消息已传递给<code>consumer_a </code>，但尚未通过<code> XACK</code> 确认</li><li>然后突然之间，<code>consumer_a </code>永远地失败了</li><li>其他消费者可能会使用<code>XPENDING</code>命令检查挂起的消息列表，这些消息已经过期很长时间了。为了继续处理此类消息，它们使用XCLAIM获取消息的所有权并继续。使用者还可以使用<code>XAUTOCLAIM</code>命令自动扫描和声明过期的待处理消息。</li></ol><p>XCLAIM在以下情况下不会声明消息</p><ol><li>消息在组PEL中不存在(即它从未被任何消费者读取)</li><li>消息存在于组PEL中，但不存在于流本身(即消息被读取但从未被确认，然后通过修剪或XDEL从流中删除)</li></ol></li><li><p>命令参数</p><p>该命令有多个选项，但大多数主要用于内部使用，以便将<code>XCLAIM</code>或其他命令的效果传输到AOF文件中，并将相同的效果传播到副本中。</p><ol><li><p><strong>IDLE <ms></ms></strong>: 设置消息的空闲时间(最后一次发送)。如果没有指定IDLE，则假设IDLE为0，也就是说，时间计数将被重置，因为消息现在有一个新的所有者试图处理它。</p></li><li><p><strong>TIME <ms-unix-time></ms-unix-time></strong>: 这与IDLE相同，但不是相对的毫秒数，它将空闲时间设置为特定的Unix时间(以毫秒为单位)。这对于重写生成<code>XCLAIM</code>命令的AOF文件非常有用。</p></li><li><p><strong>RETRYCOUNT <count></count></strong>: 设置重试次数为指定值。每当再次传递消息时，此计数器都会增加。通常XCLAIM不会改变这个计数器，它只在调用<code>XPENDING</code>命令时提供给客户端:这样客户端就可以检测到异常情况，比如在尝试大量传递后由于某种原因从未处理过的消息。</p></li><li><p><strong>FORCE</strong>: 在PEL中创建挂起的消息条目，即使某些指定的id还没有在分配给不同客户端的PEL中。但是消息必须在流中存在，否则不存在的消息id将被忽略。</p></li><li><p><strong>JUSTID</strong>:  只返回成功声明的消息的id数组，而不返回实际的消息。使用此选项意味着重试计数器不增加。</p></li></ol></li><li><p>使用举例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Alice"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span> <span class="token operator">&gt;</span> XCLAIM mystream mygroup Bob <span class="token number">300</span> <span class="token number">1675739360699</span>-0<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span> <span class="token comment">## 使用 XCLAIM 之后 1675739360699-0 的消费者由 Alice 变更为 Bob</span><span class="token operator">&gt;</span> XPENDING mystream mygroup <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Bob"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="span-id-STREAM-XAUTOCLAIM-XAUTOCLAIM-span"><span id="STREAM_XAUTOCLAIM">XAUTOCLAIM </span></h3><ul><li><p>命令详情</p><p><strong>XAUTOCLAIM</strong> key group consumer  min-idle-time  start [<strong>COUNT</strong> count]<br>[<strong>JUSTID</strong>]</p></li><li><p>功能说明</p><p>从概念上讲，XAUTOCLAIM 等同于调用XPENDING，然后调用XCLAIM</p></li></ul><h1>基础命令：<span id="Order_SCAN">SCAN</span></h1><ul><li><p>命令详情</p><p><strong>SCAN</strong> cursor [<strong>MATCH</strong> pattern] [<strong>COUNT</strong> count] [<strong>TYPE</strong> type]</p></li><li><p>命令参数解释</p><p>cursor ：开始迭代时的光标值为 0 / 上一次调用 SCAN 返回的光标以继续迭代</p><p><strong>TYPE</strong> type：您可以使用 TYPE 选项要求 SCAN 仅返回与给定类型匹配的对象，从而允许您遍历数据库以查找特定类型的键。TYPE 选项仅在整个数据库 SCAN 上可用，而不是 HSCAN 或 ZSCAN 等。</p></li><li><p>使用DEMO</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> foo foobar feelsgood<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sscan myset <span class="token number">0</span> match f*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"0"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"foo"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"feelsgood"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"foobar"</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重要的是要注意<strong>MATCH</strong>过滤器是在从集合中检索到元素之后应用的，就在将数据返回给客户端之前。</p><p>这意味着如果模式匹配集合中的极少元素，<code>SCAN</code>则在大多数迭代中可能不会返回任何元素。一个例子如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">0</span> MATCH *11*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"288"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key:911"</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">288</span> MATCH *11*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"224"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">224</span> MATCH *11*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"80"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">80</span> MATCH *11*<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"176"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">176</span> MATCH *11* COUNT <span class="token number">1000</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"0"</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key:611"</span>    <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"key:711"</span>    <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"key:118"</span>    <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"key:117"</span>    <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"key:311"</span>    <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"key:112"</span>    <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"key:111"</span>    <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"key:110"</span>    <span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"key:113"</span>   <span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"key:211"</span>   <span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"key:411"</span>   <span class="token number">12</span><span class="token punctuation">)</span> <span class="token string">"key:115"</span>   <span class="token number">13</span><span class="token punctuation">)</span> <span class="token string">"key:116"</span>   <span class="token number">14</span><span class="token punctuation">)</span> <span class="token string">"key:114"</span>   <span class="token number">15</span><span class="token punctuation">)</span> <span class="token string">"key:119"</span>   <span class="token number">16</span><span class="token punctuation">)</span> <span class="token string">"key:811"</span>   <span class="token number">17</span><span class="token punctuation">)</span> <span class="token string">"key:511"</span>   <span class="token number">18</span><span class="token punctuation">)</span> <span class="token string">"key:11"</span>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如您所见，大多数调用返回零元素，但最后一次调用使用 COUNT 为 1000 以强制命令对该迭代进行更多扫描</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;String&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;命令&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;使用&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;功能&lt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-命令记录</title>
    <link href="https://hmxyl.github.io/20221103/709af9d4.html"/>
    <id>https://hmxyl.github.io/20221103/709af9d4.html</id>
    <published>2022-11-03T11:19:19.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>KEY的命名</h1><p>用<code>:</code>分隔不同的层次命名空间，如：<code>user:id12345:contact</code></p><p>如果某个对象有<code>字段的字段</code>，用<code>.</code>连接。如<code>user:id12345:contact.mail</code>。</p><h1>基础命令记录</h1><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">使用</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">SWAPDB</td><td style="text-align:left"><span id="Order_SWAPDB"><strong>SWAPDB</strong> index1 index2 </span></td><td>库index1 和 库index2的数据交换</td></tr><tr><td style="text-align:left">EXISTS</td><td style="text-align:left"><span id="Order_EXISTS"><strong>EXISTS</strong> key</span></td><td>判断key是否存在</td></tr><tr><td style="text-align:left">TTL</td><td style="text-align:left"><span id="Order_TTL"><strong>TTL</strong> key</span></td><td>查询key的过期时间</td></tr><tr><td style="text-align:left">EXPIRE</td><td style="text-align:left"><span id="Order_EXPIRE"><strong>EXPIRE</strong> key seconds  /  <strong>EXPIREAT</strong> key timestamp</span></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;KEY的命名&lt;/h1&gt;
&lt;p&gt;用&lt;code&gt;:&lt;/code&gt;分隔不同的层次命名空间，如：&lt;code&gt;user:id12345:contact&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果某个对象有&lt;code&gt;字段的字段&lt;/code&gt;，用&lt;code&gt;.&lt;/code&gt;连接。如&lt;code&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
