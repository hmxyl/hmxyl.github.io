<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alisa&#39;s Home</title>
  
  <subtitle>Alisa&#39;s Home</subtitle>
  <link href="https://hmxyl.github.io/atom.xml" rel="self"/>
  
  <link href="https://hmxyl.github.io/"/>
  <updated>2023-12-28T11:30:54.200Z</updated>
  <id>https://hmxyl.github.io/</id>
  
  <author>
    <name>Alisa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue3基础</title>
    <link href="https://hmxyl.github.io/20231224/7d2d5550.html"/>
    <id>https://hmxyl.github.io/20231224/7d2d5550.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2023-12-28T11:30:54.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板语法">模板语法</h2><h3 id="swig￼25-文本"><code>{{ msg }}</code>:文本</h3><p>数据绑定最常见的形式就是使用“Mustache” (双大括号) 语法的文本插值</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Message: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般配合<code>js</code> 中的<code>data()</code>设置数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">"消息提示"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-html：原始-HTML"><code>v-html</code>：原始 HTML</h3><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用<code>v-html</code> 指令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using mustaches: {{ rawHtml }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using v-html directive: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token literal-property property">rawHtml</span><span class="token operator">:</span><span class="token string">"&lt;a href='https://www.itbaizhan.com'&gt;百战&lt;/a&gt;"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-bind-：设置属性"><code>v-bind</code>  ：设置属性</h3><p>Mustache 语法不能在 HTML 属性中使用，然而，可以使用 <code>v-bind</code> 指令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamicId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token literal-property property">dynamicId</span><span class="token operator">:</span><span class="token number">1001</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>温馨提示</strong></p><p><code>v-bind:</code> 可以简写成 <code>:</code></p></blockquote><h3 id="使用-JavaScript-表达式">使用 JavaScript 表达式</h3><p>在我们的模板中，我们一直都只绑定简单的 property 键值，Vue.js 都提供了完全的 JavaScript 表达式支持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> ok <span class="token operator">?</span> <span class="token string">'YES'</span> <span class="token operator">:</span> <span class="token string">'NO'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些表达式会在当前活动实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  这是语句，不是表达式：<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 流程控制也不会生效，请使用三元表达式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> message <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件渲染">条件渲染</h2><h3 id="v-if">v-if</h3><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 <code>true</code> 值的时候被渲染。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是孙猴子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-else">v-else</h3><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是孙猴子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>你是傻猴子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-show">v-show</h3><p>另一个用于条件性展示元素的选项是 <code>v-show</code> 指令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="v-if-和v-show-的区别"><code>v-if</code> 和<code>v-show</code> 的区别</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。</p><p>因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好</p><h2 id="列表渲染">列表渲染</h2><h3 id="v-for-：把一个数组映射为一组元素"><code>v-for</code> ：把一个数组映射为一组元素</h3><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。</p><p><code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 items 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ item.message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Bar'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为v-for-提供一个-key-attribute">为<code>v-for</code> 提供一个 <code>key</code> attribute</h3><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用<code>“就地更新”</code>的策略。</p><p>如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一的 <code>key</code> attribute：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id|index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 内容 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ item.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.avator<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>温馨提示</p><p><code>key</code>时通过<code>v-bind</code>绑定的属性</p><p>建议所有可行的时候，均给 <code>v-for</code> 提供一个 <code>key</code> attribute</p><p><code>key</code> 绑定的值期望是一个基础类型的值，例如字符串或number类型</p></blockquote><h2 id="computed：计算属性"><code>computed</code>：计算属性</h2><p><a href="https://cn.vuejs.org/guide/essentials/computed.html#writable-computed">https://cn.vuejs.org/guide/essentials/computed.html#writable-computed</a></p><p>为避免在模板中使用复杂的表达式，推荐使用<strong>计算属性</strong>来描述依赖响应式状态的复杂逻辑</p><p>计算属性默认是只读的。当你尝试修改一个计算属性时，你会收到一个运行时警告。只在某些特殊场景中你可能才需要用到“可写”的属性，你可以通过同时提供 getter 和 setter 来创建：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>      <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Doe'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">// getter</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// setter</span>      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 注意：我们这里使用的是解构赋值语法</span>        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在当你再运行 <code>this.fullName = 'John Doe'</code> 时，setter 会被调用而 <code>this.firstName</code> 和 <code>this.lastName</code> 会随之更新。或者这种使用方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>        <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Doe'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">getfullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>计算属性和方法的区别</p><p><strong>计算属性</strong>: 计算属性值会基于其响应式依赖被缓存。一个计算属性仅会在其响应式依赖更新时才重新计算</p><p><strong>方法</strong>:方法调用总是会在重汇染发生时再次执行函数</p></blockquote><h2 id="Class绑定">Class绑定</h2><p>为了避免复杂的class 属性拼接，Vue 专门为class 的v-bind 用法提供了<strong>特殊的功能增强</strong>。除了字符串外，表达式的值也可以是对象或数组</p><p>绑定一个数组</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[activeClass, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token literal-property property">activeClass</span><span class="token operator">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span>          <span class="token literal-property property">errorClass</span><span class="token operator">:</span> <span class="token string">'text-danger'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者是一个对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classObject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ active: isActive }<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token literal-property property">isActive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">classObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">,</span>            <span class="token string-property property">'text-danger'</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'fatal'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在数组中嵌套对象：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[{ active: isActive }, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提示：</p><p>数组和对象嵌套过程中，只能是数组嵌套对象，不能反其道而行</p></blockquote><h2 id="Style绑定">Style绑定</h2><p><a href="https://cn.vuejs.org/guide/essentials/class-and-style.html#binding-inline-styles">https://cn.vuejs.org/guide/essentials/class-and-style.html#binding-inline-styles</a></p><p>类似class绑定。如对象绑定</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styleObject<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token literal-property property">styleObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>            <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">'13px'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模板语法&quot;&gt;模板语法&lt;/h2&gt;
&lt;h3 id=&quot;swig￼25-文本&quot;&gt;&lt;code&gt;{{ msg }}&lt;/code&gt;:文本&lt;/h3&gt;
&lt;p&gt;数据绑定最常见的形式就是使用“Mustache” (双大括号) 语法的文本插值&lt;/p&gt;
&lt;pre class=&quot;line-n</summary>
      
    
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/Vue3/"/>
    
    
    <category term="Vue3基础" scheme="https://hmxyl.github.io/tags/Vue3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>事件处理</title>
    <link href="https://hmxyl.github.io/20231224/4446b2a4.html"/>
    <id>https://hmxyl.github.io/20231224/4446b2a4.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-07-26T02:54:54.953Z</updated>
    
    <content type="html"><![CDATA[<h1><code>v-on</code> 或者<code>@</code>：监听DOM事件</h1><p>我们可以使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript。</p><p>用法为 <code>v-on:click="methodName"</code> 或使用快捷方式 <code>@click="methodName"</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter += 1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>事件参数</h1><p>事件参数可以获取<code>event</code>对象和通过事件传递数据</p><p>官方的翻译称呼：内联处理器中的方法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say('hi')<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Say hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>greet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Say what<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>getNameHandler(item,</span> <span class="token attr-name">$event)</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) of names<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token literal-property property">names</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"赵"</span><span class="token punctuation">,</span><span class="token string">"钱"</span><span class="token punctuation">,</span><span class="token string">"孙"</span><span class="token punctuation">,</span><span class="token string">"李"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// message传参</span>            <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// event 是原生 DOM event. </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>                <span class="token comment">// 读取data里面的数据方案：this.count</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">getNameHandler</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 传参和event同时传递的时候，使用$event传递event</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件修饰符"><code>.</code> 事件修饰符</h2><p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。</p><p>Vue.js 通过由点 <code>.</code> 表示的指令后缀来调用修饰符。</p><ul><li><code>.stop</code> - 阻止冒泡</li><li><code>.prevent</code> - 阻止默认事件</li><li><code>.capture</code> - 阻止捕获</li><li><code>.self</code> - 只监听触发该元素的事件</li><li><code>.once</code> - 只触发一次</li><li><code>.left</code> - 左键事件</li><li><code>.right</code> - 右键事件</li><li><code>.middle</code> - 中间滚轮事件</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 阻止单击事件冒泡 --&gt;&lt;a v-on:click.stop="doThis"&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联  --&gt;&lt;a v-on:click.stop.prevent="doThat"&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;&lt;div v-on:click.capture="doThis"&gt;...&lt;/div&gt;&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;&lt;div v-on:click.self="doThat"&gt;...&lt;/div&gt;&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;&lt;a v-on:click.once="doThis"&gt;&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="：按键修饰符"><code>：</code>按键修饰符</h2><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符<code>：</code></p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;&lt;input v-on:keyup.13="submit"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 同上 --&gt;&lt;input v-on:keyup.enter="submit"&gt;&lt;!-- 缩写语法 --&gt;&lt;input @keyup.enter="submit"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>全部的按键别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;code&gt;v-on&lt;/code&gt; 或者&lt;code&gt;@&lt;/code&gt;：监听DOM事件&lt;/h1&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;v-on&lt;/code&gt; 指令 (通常缩写为 &lt;code&gt;@&lt;/code&gt; 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScri</summary>
      
    
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/Vue3/"/>
    
    
    <category term="Vue3基础" scheme="https://hmxyl.github.io/tags/Vue3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>侦听器（watch）</title>
    <link href="https://hmxyl.github.io/20231224/1954b1ff.html"/>
    <id>https://hmxyl.github.io/20231224/1954b1ff.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-07-26T02:54:54.951Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.vuejs.org/guide/essentials/watchers.html">https://cn.vuejs.org/guide/essentials/watchers.html</a></p><p>侦听对象为data中定义的响应式数据+组件数据</p><p>计算属性允许我们声明性地计算衍生值。</p><p>然而在有些情况下，我们需要在状态变化时执行一些“其他操作”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。</p><h1>基本示例</h1><p>在选项式 API 中，我们可以使用 <a href="https://cn.vuejs.org/api/options-state.html#watch"><code>watch</code> 选项</a>在每次响应式属性发生变化时触发一个函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">answer</span><span class="token operator">:</span> <span class="token string">'Questions usually contain a question mark. ;-)'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">async</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Thinking...'</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://yesno.wtf/api'</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>answer            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>answer <span class="token operator">=</span> <span class="token string">'Error! Could not reach the API. '</span> <span class="token operator">+</span> error            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 每当 question 改变时，这个函数就会执行，从而回去对应的answer</span>        <span class="token function">question</span><span class="token punctuation">(</span><span class="token parameter">newQuestion<span class="token punctuation">,</span> oldQuestion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newQuestion<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>watch</code>中定义的函数名称必须和<code>侦听的数据对象</code>一致。</p></blockquote><h1>深层侦听器</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 注意：只能是简单的路径，不支持表达式。</span>    <span class="token string">'some.nested.key'</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">someObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 注意：在嵌套的变更中，</span>        <span class="token comment">// 只要没有替换对象本身，</span>        <span class="token comment">// 那么这里的 `newValue` 和 `oldValue` 相同</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><a href="https://cn.vuejs.org/guide/essentials/watchers.html#eager-watchers">即时回调的侦听器</a></h1><p><code>watch</code> 默认是懒执行的：仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。</p><p>举例来说，我们想请求一些初始数据，然后在相关状态更改时重新请求数据。</p><p>我们可以用一个对象来声明侦听器，这个对象有 <code>handler</code> 方法和 <code>immediate: true</code> 选项，这样便能强制回调函数立即执行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newQuestion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在组件实例创建时会立即调用</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">// 强制立即执行回调</span>      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调函数的初次执行就发生在 <code>created</code> 钩子之前。Vue 此时已经处理了 <code>data</code>、<code>computed</code> 和 <code>methods</code> 选项，所以这些属性在第一次调用时就是可用的。</p><h1><a href="https://cn.vuejs.org/guide/essentials/watchers.html#callback-flush-timing">回调的触发时机</a></h1><p>当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新<strong>之前</strong>被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的 DOM，你需要指明 <code>flush: 'post'</code> 选项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">'post'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><code>created</code>：  <a href="https://cn.vuejs.org/guide/essentials/watchers.html#this-watch">this.$watch()</a></h1><p>我们也可以使用组件实例的 <a href="https://cn.vuejs.org/api/component-instance.html#watch"><code>$watch()</code> 方法</a>来命令式地创建一个侦听器：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newQuestion</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要在特定条件下设置一个侦听器，或者只侦听响应用户交互的内容，这方法很有用。它还允许你提前停止该侦听器。</p><h1><a href="https://cn.vuejs.org/guide/essentials/watchers.html#stopping-a-watcher">停止侦听器</a></h1><p>用 <code>watch</code> 选项或者 <code>$watch()</code> 实例方法声明的侦听器，会在宿主组件卸载时自动停止。因此，在大多数场景下，你无需关心怎么停止它。</p><p>在少数情况下，你的确需要在组件卸载之前就停止一个侦听器，这时可以调用 <code>$watch()</code> API 返回的函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> unwatch <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token comment">// ...当该侦听器不再需要时</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1>数组变化的侦测</h1><h2 id="变更方法：原数组发生变化，UI自动更新">变更方法：原数组发生变化，UI自动更新</h2><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h2 id="替换一个数组：原数组不发生变化，UI无法自动更新">替换一个数组：原数组不发生变化，UI无法自动更新</h2><ul><li><code>fliter()</code></li><li><code>concat()</code></li><li><code>slice()</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/guide/essentials/watchers.html&quot;&gt;https://cn.vuejs.org/guide/essentials/watchers.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;侦听对象为data中定义</summary>
      
    
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/Vue3/"/>
    
    
    <category term="Vue3基础" scheme="https://hmxyl.github.io/tags/Vue3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>组件</title>
    <link href="https://hmxyl.github.io/20231224/34778b46.html"/>
    <id>https://hmxyl.github.io/20231224/34778b46.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-07-26T02:54:54.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件基础">组件基础</h2><h3 id="单文件组件">单文件组件</h3><p>Vue 单文件组件（又名 <code>*.vue</code> 文件，缩写为 <strong>SFC</strong>）是一种特殊的文件格式，它允许将 Vue 组件的模板、逻辑 <strong>与</strong> 样式封装在单个文件中</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;h3&gt;单文件组件&lt;/h3&gt;&lt;/template&gt;&lt;script&gt;export default {    name:"MyComponent"}&lt;/script&gt;&lt;style scoped&gt;h3{    color: red;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模板引用（ref）">模板引用（<code>ref</code>）</h2><p><a href="https://cn.vuejs.org/guide/essentials/template-refs.html">https://cn.vuejs.org/guide/essentials/template-refs.html</a></p><p>虽然 Vue 的声明性渲染模型为你抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 <code>ref</code> attribute：</p><p><code>ref</code> 是一个特殊的 attribute， 它允许我们在一个特定的 DOM 元素或子组件实例被挂载后，获得对它的直接引用。</p><p>这可能很有用，比如说在组件挂载时将焦点设置到一个 input 元素上，或在一个元素上初始化一个第三方库。</p><h3 id="访问模板引用">访问模板引用</h3><p>挂载结束后引用都会被暴露在 <code>this.$refs</code> 之上：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  mounted() {    this.$refs.input.focus()  }}&lt;/script&gt;&lt;template&gt;  &lt;input ref="input" /&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，你只可以<strong>在组件挂载后</strong>才能访问模板引用。如果你想在模板中的表达式上访问 <code>$refs.input</code>，在初次渲染时会是 <code>null</code>。这是因为在初次渲染前这个元素还不存在</p><h3 id="v-for-中的模板引用"><a href="https://cn.vuejs.org/guide/essentials/template-refs.html#refs-inside-v-for"><code>v-for</code> 中的模板引用</a></h3><blockquote><p>需要 v3.2.25 及以上版本</p></blockquote><p>当在 <code>v-for</code> 中使用模板引用时，相应的引用中包含的值是一个数组：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  data() {    return {      list: [        /* ... */      ]    }  },  mounted() {    console.log(this.$refs.items)  }}&lt;/script&gt;&lt;template&gt;  &lt;ul&gt;    &lt;li v-for="item in list" ref="items"&gt;      {{ item }}    &lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>应该注意的是，ref 数组<strong>并不</strong>保证与源数组相同的顺序。</p></blockquote><h3 id="函数模板引用"><a href="https://cn.vuejs.org/guide/essentials/template-refs.html#function-refs">函数模板引用</a></h3><p>除了使用字符串值作名字，<code>ref</code> attribute 还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(el) =&gt; { /* 将 el 赋值给一个数据属性或 ref 变量 */ }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意我们这里需要使用动态的 <code>:ref</code> 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 <code>el</code> 参数会是 <code>null</code>。你当然也可以绑定一个组件方法而不是内联函数。</p><h3 id="组件上的-ref">组件上的 ref</h3><h2 id="组件基础-2">组件基础</h2><h3 id="加载组件">加载组件</h3><p>第一步：引入组件 <code>import MyComponentVue from './components/MyComponent.vue'</code></p><p>第二步：挂载组件 <code>components: { MyComponentVue }</code></p><p>第三步：显示组件 <code>&lt;my-componentVue /&gt;</code></p><h3 id="组件的嵌套关系">组件的嵌套关系</h3><p>通常一个应用会以一棵嵌套的组件树的形式来组织</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20231210205035429.png" alt="image-20231210205035429"></p><h2 id="Props组件交互">Props组件交互</h2><p>组件与组件之间是需要存在交互的，否则完全没关系，组件的意义就很小了</p><p><code>Prop</code> 是你可以在组件上注册的一些自定义 attribute</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;my-componentVue title="标题"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;h3&gt;单文件组件&lt;/h3&gt;    &lt;p&gt;{{ title }}&lt;/p&gt;&lt;/template&gt;&lt;script&gt;export default {    name:"MyComponent",    props:{        title:{            type:String,            default:""        }    }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Prop-类型">Prop 类型</h3><p>Prop传递参数其实是没有类型限制的</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">props: {  title: String,  likes: Number,  isPublished: Boolean,  commentIds: Array,  author: Object,  callback: Function}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>温馨提示</strong></p><p>数据类型为数组或者对象的时候，默认值是需要返回工厂模式</p></blockquote><h2 id="自定义事件组件交互">自定义事件组件交互</h2><p>自定义事件可以在组件中反向传递数据，<code>prop</code> 可以将数据从父组件传递到子组件，那么反向如何操作呢，就可以利用自定义事件实现 <code>$emit</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;h3&gt;单文件组件&lt;/h3&gt;    &lt;button @click="sendHandle"&gt;发送数据&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default {    name: "MyComponent",    methods:{        sendHandle(){            this.$emit("onCustom","数据")        }    }}&lt;/script&gt;&lt;style scoped&gt;h3 {    color: red;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;my-componentVue @onCustom="getData" /&gt;&lt;/template&gt;&lt;script&gt;import MyComponentVue from './components/MyComponent.vue'export default {  name: 'App',  components: {    MyComponentVue  },  methods: {    getData(data) {      console.log(data);    }  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件基础&quot;&gt;组件基础&lt;/h2&gt;
&lt;h3 id=&quot;单文件组件&quot;&gt;单文件组件&lt;/h3&gt;
&lt;p&gt;Vue 单文件组件（又名 &lt;code&gt;*.vue&lt;/code&gt; 文件，缩写为 &lt;strong&gt;SFC&lt;/strong&gt;）是一种特殊的文件格式，它允许将 Vue 组件的模板、逻</summary>
      
    
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/Vue3/"/>
    
    
    <category term="Vue3基础" scheme="https://hmxyl.github.io/tags/Vue3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>表单输入绑定（v-model）</title>
    <link href="https://hmxyl.github.io/20231224/9ee367a5.html"/>
    <id>https://hmxyl.github.io/20231224/9ee367a5.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-07-26T02:54:54.954Z</updated>
    
    <content type="html"><![CDATA[<h1>表单输入绑定<code>v-model</code></h1><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。</p><p>它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。</p><p>它负责监听用户的输入事件来更新数据，并在某种极端场景下进行一些特殊处理。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit me<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Message is: {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>v-model</code> 会忽略任何表单元素上初始的 <code>value</code>、<code>checked</code> 或 <code>selected</code> attribute。它将始终将当前绑定的 JavaScript 状态视为数据的正确来源。你应该在 JavaScript 中使用<a href="https://cn.vuejs.org/api/options-state.html#data"><code>data</code></a> 选项来声明该初始值。</p></blockquote><h1>基本用法</h1><h2 id="文本">文本</h2><h1>修饰符</h1><h2 id="lazy"><code>.lazy</code></h2><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件之后进行同步</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Message is: {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="trim"><code>.trim</code></h2><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="number"><code>.number</code></h2><p>如果你想让用户输入自动转换为数字，你可以在 <code>v-model</code> 后添加 <code>.number</code> 修饰符来管理输入：如果该值无法被 <code>parseFloat()</code> 处理，那么将返回原始值。</p><p><code>number</code> 修饰符会在输入框有 <code>type="number"</code> 时自动启用。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;表单输入绑定&lt;code&gt;v-model&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;你可以用 &lt;code&gt;v-model&lt;/code&gt; 指令在表单 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 及 &lt;code&gt;&amp;lt;</summary>
      
    
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/Vue3/"/>
    
    
    <category term="Vue3基础" scheme="https://hmxyl.github.io/tags/Vue3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>其他</title>
    <link href="https://hmxyl.github.io/20231224/6e23c48.html"/>
    <id>https://hmxyl.github.io/20231224/6e23c48.html</id>
    <published>2023-12-24T02:49:23.000Z</published>
    <updated>2024-09-27T09:38:33.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件生命周期">组件生命周期</h2><p>每个组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会</p><p>为了方便记忆，我们可以将他们分类：</p><p>创建时：<code>beforeCreate</code>、<code>created</code></p><p>渲染时：<code>beforeMount</code>、<code>mounted</code></p><p>更新时：<code>beforeUpdate</code>、<code>updated</code></p><p>卸载时：<code>beforeUnmount</code>、<code>unmounted</code></p><h2 id="Vue引入第三方">Vue引入第三方</h2><p><code>Swiper</code> 开源、免费、强大的触摸滑动插件</p><p><code>Swiper</code> 是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端</p><p><code>Swiper</code> 能实现触屏焦点图、触屏Tab切换、触屏轮播图切换等常用效果</p><blockquote><p><strong>温馨提示</strong></p><p>官方文档：<a href="https://swiperjs.com/vue">https://swiperjs.com/vue</a></p><p>安装指定版本: <code>npm instal --save swiper@8.1.6</code></p></blockquote><h3 id="基础实现">基础实现</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="hello"&gt;    &lt;swiper class="mySwiper"&gt;      &lt;swiper-slide&gt;Slide 1&lt;/swiper-slide&gt;      &lt;swiper-slide&gt;Slide 2&lt;/swiper-slide&gt;      &lt;swiper-slide&gt;Slide 3&lt;/swiper-slide&gt;    &lt;/swiper&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { Swiper, SwiperSlide } from 'swiper/vue';import 'swiper/css';export default {  name: 'HelloWorld',  components: {    Swiper,    SwiperSlide,  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加指示器">添加指示器</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="hello"&gt;    &lt;swiper class="mySwiper" :modules="modules" :pagination="{ clickable: true }"&gt;      &lt;swiper-slide&gt;        &lt;img src="../assets/logo.png" alt=""&gt;      &lt;/swiper-slide&gt;      &lt;swiper-slide&gt;        &lt;img src="../assets/logo.png" alt=""&gt;      &lt;/swiper-slide&gt;      &lt;swiper-slide&gt;        &lt;img src="../assets/logo.png" alt=""&gt;      &lt;/swiper-slide&gt;    &lt;/swiper&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { Pagination } from 'swiper';import { Swiper, SwiperSlide } from 'swiper/vue';import 'swiper/css';import 'swiper/css/pagination';export default {  name: 'HelloWorld',  data(){    return{      modules: [ Pagination ]    }  },  components: {    Swiper,    SwiperSlide,  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Axios网络请求">Axios网络请求</h2><p>Axios 是一个基于 promise 的网络请求库</p><h3 id="安装">安装</h3><p>Axios的应用是需要单独安装的 <code>npm install --save axios</code></p><h3 id="引入">引入</h3><p>组件中引入: <code>import axios from "axios"</code></p><p>全局引用:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$axios <span class="token operator">=</span> axiosapp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">// 在组件中调用</span><span class="token keyword">this</span><span class="token punctuation">.</span>$axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络请求基本示例">网络请求基本示例</h3><h4 id="get请求">get请求</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://iwenwiki.com/api/blueberrypai/getChengpinDetails.php"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="post请求">post请求</h4><blockquote><p><strong>温馨提示</strong></p><p>post请求参数是需要额外处理的</p><ol><li>安装依赖: <code>npm install --save querystring</code></li><li>转换参数格式: <code>qs.stringify({})</code></li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"http://iwenwiki.com/api/blueberrypai/login.php"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">user_id</span><span class="token operator">:</span><span class="token string">"iwen@qq.com"</span><span class="token punctuation">,</span>        <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">"iwen123"</span><span class="token punctuation">,</span>        <span class="token literal-property property">verification_code</span><span class="token operator">:</span><span class="token string">"crfvw"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快捷方案">快捷方案</h3><h4 id="get请求-2">get请求</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://iwenwiki.com/api/blueberrypai/getChengpinDetails.php"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="post请求-2">post请求</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://iwenwiki.com/api/blueberrypai/login.php"</span><span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">user_id</span><span class="token operator">:</span> <span class="token string">"iwen@qq.com"</span><span class="token punctuation">,</span>      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">"iwen123"</span><span class="token punctuation">,</span>      <span class="token literal-property property">verification_code</span><span class="token operator">:</span> <span class="token string">"crfvw"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Axios网络请求封装">Axios网络请求封装</h2><p>在日常应用过程中，一个项目中的网络请求会很多，此时一般采取的方案是将网络请求封装起来</p><p>在<code>src</code>目录下创建文件夹<code>utils</code>，并创建文件<code>request</code>，用来存储网络请求对象 <code>axios</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">"querystring"</span><span class="token keyword">const</span> <span class="token function-variable function">errorHandle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">status<span class="token punctuation">,</span>info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"语义有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">401</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">403</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器拒绝访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">404</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"地址错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">500</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器遇到意外"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">502</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器无响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">config</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            config<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> response <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">;</span>        <span class="token function">errorHandle</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>response<span class="token punctuation">.</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> instance<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>src</code>目录下创建文件夹<code>api</code>，并创建文件<code>index</code>和<code>path</code>分别用来存放网络请求方法和请求路径</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// path.js</span><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span><span class="token string">"http://iwenwiki.com"</span><span class="token punctuation">,</span>    <span class="token literal-property property">chengpin</span><span class="token operator">:</span><span class="token string">"/api/blueberrypai/getChengpinDetails.php"</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"./path"</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"../utils/request"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">getChengpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>baseUrl <span class="token operator">+</span> path<span class="token punctuation">.</span>chengpin<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中直接调用网络请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">"../api/index"</span>api<span class="token punctuation">.</span><span class="token function">getChengpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络请求跨域解决方案">网络请求跨域解决方案</h2><p>JS采取的是同源策略</p><p>同源策略是浏览器的一项安全策略，浏览器只允许js 代码请求和当前所在服务器域名,端口,协议相同的数据接口上的数据,这就是同源策略.</p><p>也就是说，当协议、域名、端口任意一个不相同时，都会产生跨域问题，所以又应该如何解决跨域问题呢</p><h3 id="跨域错误提示信息">跨域错误提示信息</h3><h3 id="目前主流的跨域解决方案有两种：">目前主流的跨域解决方案有两种：</h3><ol><li>后台解决：cors</li><li>前台解决：proxy</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'&lt;url&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>温馨提示</strong></p><p>解决完跨域配置之后，要记得重启服务器才行哦！</p></blockquote><h2 id="Vue引入路由配置">Vue引入路由配置</h2><p>在Vue中，我们可以通过<code>vue-router</code>路由管理页面之间的关系</p><p>Vue Router 是 Vue.js 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举</p><h3 id="在Vue中引入路由">在Vue中引入路由</h3><p>第一步：安装路由 <code>npm install --save vue-router</code></p><p>第二步：配置独立的路由文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> HomeView <span class="token keyword">from</span> <span class="token string">'../views/HomeView.vue'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> HomeView  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/AboutView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：引入路由到项目</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第四步：指定路由显示入口 <code>&lt;router-view/&gt;</code></p><p>第五步：指定路由跳转</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to="/"&gt;Home&lt;/router-link&gt; |&lt;router-link to="/about"&gt;About&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="路由传递参数">路由传递参数</h2><p>页面跳转过程中，是可以携带参数的，这也是很常见的业务</p><p>例如：在一个列表项，点击进入查看每个列表项的详情</p><p>第一步：在路由配置中指定参数的<code>key</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/list/:name"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"list"</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/ListView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：在跳转过程中携带参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li&gt;&lt;router-link to="/list/内蒙"&gt;内蒙旅游十大景区&lt;/router-link&gt;&lt;/li&gt;&lt;li&gt;&lt;router-link to="/list/北京"&gt;北京旅游十大景区&lt;/router-link&gt;&lt;/li&gt;&lt;li&gt;&lt;router-link to="/list/四川"&gt;四川旅游十大景区&lt;/router-link&gt;&lt;/li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三步：在详情页面读取路由携带的参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;p&gt;{{ $route.params.name }}城市旅游景区详情&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="嵌套路由配置">嵌套路由配置</h2><p>路由嵌套是非常常见的需求</p><p>第一步：创建子路由要加载显示的页面</p><p>第二步：在路由配置文件中添加子路由配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/news"</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"news"</span><span class="token punctuation">,</span>    <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">"/news/baidu"</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/NewsView.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>       <span class="token punctuation">{</span>       <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"baidu"</span><span class="token punctuation">,</span>            <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/NewsList/BaiduNews.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">{</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"wangyi"</span><span class="token punctuation">,</span>            <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../views/NewsList/WangyiNews.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：指定子路由显示位置<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><p>第四步：添加子路由跳转链接</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to="/news/baidu"&gt;百度新闻&lt;/router-link&gt; | &lt;router-link to="/news/wangyi"&gt;网易新闻&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第五步：重定向配置 <code>redirect:"/news/baidu"</code></p><h2 id="Vue状态管理-Vuex">Vue状态管理(Vuex)</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>简单来说，状态管理可以理解成为了更方便的管理组件之间的数据交互，提供了一个集中式的管理方案，任何组件都可以按照指定的方式进行读取和改变数据</p><img src="imgs/image-20220530160524287.png" alt="image-20220530160524287" style="zoom:50%;"><h3 id="引入Vuex的步骤">引入Vuex的步骤</h3><p>第一步：安装Vuex <code>npm install --save vuex</code></p><p>第二步：配置Vuex文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：在主文件中引入Vuex</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第四步：在组件中读取状态</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;p&gt;counter:{{ $store.state.counter }}&lt;/p&gt;// 或者import { mapState } from 'vuex';computed:{    ...mapState(["counter"])}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue状态管理核心-Vuex">Vue状态管理核心(Vuex)</h2><p>最常用的核心概念包含: <code>State</code>、<code>Getter</code>、<code>Mutation</code>、<code>Action</code></p><h3 id="Getter">Getter</h3><p>对Vuex中的数据进行过滤</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> state<span class="token punctuation">.</span>counter <span class="token operator">:</span> <span class="token string">"counter小于0，不符合要求"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"getCount"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mutation">Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的事件类型 (type)和一个回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> num    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"setCounter"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// this.$store.commit("setCounter",20)</span>  <span class="token comment">// 或者</span>      <span class="token comment">// this.setCounter(10)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Action">Action</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态</li><li>Action 可以包含任意异步操作</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> state<span class="token punctuation">.</span>counter <span class="token operator">:</span> <span class="token string">"counter小于0，不符合要求"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> num    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">asyncSetCount</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://iwenwiki.com/api/generator/list.php"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"setCounter"</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span>mapMutations<span class="token punctuation">,</span>mapGetters<span class="token punctuation">,</span>mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"asyncSetCount"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">clickAsyncHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// this.$store.dispatch("asyncSetCount")</span>        <span class="token comment">// 或者</span>        <span class="token comment">// this.asyncSetCount()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue3新特性1">Vue3新特性1</h2><p>Vue3是目前Vue的最新版本，自然也是新增了很多新特性</p><h3 id="六大亮点">六大亮点</h3><ul><li>Performance：性能更比Vue 2.0强。</li><li>Tree shaking support：可以将无用模块“剪辑”，仅打包需要的。</li><li><strong>Composition API：组合API</strong></li><li>Fragment, Teleport, Suspense：“碎片”，Teleport即Protal传送门，“悬念”</li><li>Better TypeScript support：更优秀的Ts支持</li><li>Custom Renderer API：暴露了自定义渲染API</li></ul><h3 id="ref或者reactive">ref或者reactive</h3><p>在2.x中通过组件data的方法来定义一些当前组件的数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'iwen'</span><span class="token punctuation">,</span>    <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在3.x中通过ref或者reactive创建响应式对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span>reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"iwen"</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">list</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        name<span class="token punctuation">,</span>        state    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="methods中定义的方法写在setup">methods中定义的方法写在setup()</h3><p>在2.x中methods来定义一些当前组件内部方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在3.x中直接在setup方法中定义并return</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">http</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token comment">// do something</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      http    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setup-中使用props和context">setup()中使用props和context</h3><p>在2.x中，组件的方法中可以通过this获取到当前组件的实例，并执行data变量的修改，方法的调用，组件的通信等等，但是在3.x中，setup()在beforeCreate和created时机就已调用，无法使用和2.x一样的this，但是可以通过接收setup(props,ctx)的方法，获取到当前组件的实例和props</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue3新特性2">Vue3新特性2</h2><h3 id="在setup中使生命周期函">在setup中使生命周期函</h3><p>你可以通过在生命周期钩子前面加上 “on” 来访问组件的生命周期钩子。</p><p>下表包含如何在 setup () 内部调用生命周期钩子</p><table><thead><tr><th>Options API</th><th>Hook inside setup</th></tr></thead><tbody><tr><td>beforeCreate</td><td>Not needed*</td></tr><tr><td>created</td><td>Not needed*</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// mounted</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Component is mounted!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Provide-Inject">Provide / Inject</h3><ul><li>provide() 和 inject() 可以实现嵌套组件之间的数据传递。</li><li>这两个函数只能在 setup() 函数中使用。</li><li>父级组件中使用 provide() 函数向下传递数据。</li><li>子级组件中使用 inject() 获取上层传递过来的数据。</li><li>不限层级</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">"customVal"</span><span class="token punctuation">,</span> <span class="token string">"我是父组件向子组件传递的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> customVal <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"customVal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      customVal    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Fragment">Fragment</h3><p>Fragment翻译为：“碎片”</p><ul><li>不再限于模板中的单个根节点</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;img alt="Vue logo" src="./assets/logo.png"&gt;  &lt;HelloWorld msg="Welcome to Your Vue.js App" /&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue3加载Element-plus">Vue3加载Element-plus</h2><p>Element，一套为开发者、设计师和产品经理准备的基于 <code>Vue 2.0</code> 的桌面端组件库</p><p>Element Plus 基于 <code>Vue 3</code>，面向设计师和开发者的组件库</p><h3 id="安装Element-Plus">安装Element-Plus</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install element<span class="token operator">-</span>plus <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="完整引用">完整引用</h3><p>如果你对打包后的文件大小不是很在乎，那么使用完整导入会更方便</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按需导入">按需导入</h3><p>按需导入才是我们的最爱，毕竟在真实的应用场景中并不是每个组件都会用到，这会造成不小的浪费</p><p>首先你需要安装<code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code>这两款插件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">-</span><span class="token constant">D</span> unplugin<span class="token operator">-</span>vue<span class="token operator">-</span>components unplugin<span class="token operator">-</span>auto<span class="token operator">-</span><span class="token keyword">import</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改<code>vue.config.js</code>配置文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/cli-service'</span><span class="token punctuation">)</span><span class="token keyword">const</span> AutoImport <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'unplugin-auto-import/webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Components <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'unplugin-vue-components/webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> ElementPlusResolver <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'unplugin-vue-components/resolvers'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">resolvers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">resolvers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，可以直接在组件中使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span><span class="token punctuation">&gt;</span></span>Default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Primary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实时效果反馈</strong></p><p><strong>1. 在Vue3项目中引入饿了么UI组件库，下来命令正确的是：</strong></p><p><font style="background-color:rgb(233, 30, 100)">A</font>   <code>npm install --save element-iu</code></p><p><font style="background-color:rgb(255, 197, 10)">B</font>   <code>vue add element</code></p><p><font style="background-color:#8bc34a">C</font>   <code>npm install element-plus --save</code></p><p><font style="background-color:rgb(2, 170, 244);">D</font>   <code>vue add element-plus</code></p><p><strong>答案</strong></p><p>1=&gt;C</p><h2 id="Vue3加载Element-plus的字体图标">Vue3加载Element-plus的字体图标</h2><p><code>Element-plus</code>不仅仅是提供了各种组件，同时还提供了一整套的字体图标方便开发者使用</p><h3 id="安装icons字体图标">安装<code>icons</code>字体图标</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install @element<span class="token operator">-</span>plus<span class="token operator">/</span>icons<span class="token operator">-</span>vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="全局注册">全局注册</h3><p>在项目根目录下，创建<code>plugins</code>文件夹，在文件夹下创建文件<code>icons.js</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> components <span class="token keyword">from</span> <span class="token string">"@element-plus/icons-vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function-variable function">install</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> components<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> componentConfig <span class="token operator">=</span> components<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>componentConfig<span class="token punctuation">.</span>name<span class="token punctuation">,</span> componentConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入文件">引入文件</h3><p>在<code>main.js</code>中引入<code>icons.js</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> elementIcon <span class="token keyword">from</span> <span class="token string">"./plugins/icons"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>elementIcon<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用方式">使用方式</h3><p>接下来就可以直接在组件中引入使用了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>expand<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#409EFC<span class="token punctuation">"</span></span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>expand</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件生命周期&quot;&gt;组件生命周期&lt;/h2&gt;
&lt;p&gt;每个组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做&lt;strong&gt;生命周期钩子&lt;/strong&gt;的函</summary>
      
    
    
    
    <category term="Vue3" scheme="https://hmxyl.github.io/categories/Vue3/"/>
    
    
    <category term="Vue3基础" scheme="https://hmxyl.github.io/tags/Vue3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="https://hmxyl.github.io/20231108/c8f562d1.html"/>
    <id>https://hmxyl.github.io/20231108/c8f562d1.html</id>
    <published>2023-11-08T02:49:23.000Z</published>
    <updated>2023-12-24T08:14:48.036Z</updated>
    
    <content type="html"><![CDATA[<h1>定义函数</h1><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p><p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p></blockquote><p>如果你已经把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>文件了，那么，可以在该文件的当前目录下启动Python解释器，用<code>from abstest import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abstest</code>是文件名（不含<code>.py</code>扩展名）：</p><h1>函数定义详解</h1><p>函数定义支持可变数量的参数。这里列出三种可以组合使用的形式。</p><h2 id="默认值参数">默认值参数</h2><p>为参数指定默认值是非常有用的方式。调用函数时，可以使用比定义时更少的参数，例如：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;定义函数&lt;/h1&gt;
&lt;p&gt;在Python中，定义一个函数要使用&lt;code&gt;def&lt;/code&gt;语句，依次写出函数名、括号、括号中的参数和冒号&lt;code&gt;:&lt;/code&gt;，然后，在缩进块中编写函数体，函数的返回值用&lt;code&gt;return&lt;/code&gt;语句返回。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/Python/"/>
    
    
    <category term="Python基础" scheme="https://hmxyl.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python内置函数</title>
    <link href="https://hmxyl.github.io/20231106/d59aed63.html"/>
    <id>https://hmxyl.github.io/20231106/d59aed63.html</id>
    <published>2023-11-06T02:49:23.000Z</published>
    <updated>2023-12-24T08:14:48.035Z</updated>
    
    <content type="html"><![CDATA[<h1>range()</h1><p>内置函数 <a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range"><code>range()</code></a> 用于生成等差数列：</p><ol><li><p>定义</p><p><em>class</em> <strong>range</strong>(<em>stop</em>)</p><p><em>class</em> <strong>range</strong>(<em>start</em>, <em>stop</em>[, <em>step</em>])</p></li><li><p>例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>说明</p><p><a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range"><code>range()</code></a> 返回的对象在很多方面和列表的行为一样，但其实它和列表不一样。该对象只有在被迭代时才一个一个地返回所期望的列表项，并没有真正生成过一个含有全部项的列表，从而节省了空间。</p></li></ol><h1>type()</h1><h1>isinstance()</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;range()&lt;/h1&gt;
&lt;p&gt;内置函数 &lt;a href=&quot;https://docs.python.org/zh-cn/3.11/library/stdtypes.html#range&quot;&gt;&lt;code&gt;range()&lt;/code&gt;&lt;/a&gt; 用于生成等差数列：&lt;/p&gt;
&lt;ol</summary>
      
    
    
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/Python/"/>
    
    
    <category term="Python基础" scheme="https://hmxyl.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://hmxyl.github.io/20231106/99832f47.html"/>
    <id>https://hmxyl.github.io/20231106/99832f47.html</id>
    <published>2023-11-06T02:49:23.000Z</published>
    <updated>2023-11-08T03:54:07.005Z</updated>
    
    <content type="html"><![CDATA[<h1><a href="https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#">语法</a></h1><h2 id="编码声明">编码声明</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="运算符">运算符</h2><p>运算符列表</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">+       -       *       **      /       //      %      @&lt;&lt;      &gt;&gt;      &amp;       |       ^       ~       :=&lt;       &gt;       &lt;=      &gt;=      ==      !=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>符号</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td></td></tr><tr><td>-</td><td>减法</td><td></td></tr><tr><td>*</td><td>乘法</td><td></td></tr><tr><td>/</td><td>除法，总是返回浮点数</td><td></td></tr><tr><td>x ** y</td><td><em>x</em> 的 <em>y</em> 次幂</td><td>&gt;&gt;&gt; 5 ** 2 25</td></tr><tr><td>x // y</td><td>x 除以 y 的商数</td><td>&gt;&gt;&gt; 5 // 2 2</td></tr><tr><td>x % 5</td><td>x 除以 y 的余数</td><td></td></tr><tr><td>-x</td><td><em>x</em> 取反</td><td></td></tr><tr><td>+x</td><td><em>x</em> 不变</td><td></td></tr></tbody></table><p>交互模式下，上次输出的表达式会赋给变量 <code>_</code>。把 Python 当作计算器时，用该变量实现下一步计算更简单，例如：</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tax <span class="token operator">=</span> <span class="token number">12.5</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">=</span> <span class="token number">100.50</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">*</span> tax<span class="token number">12.5625</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">+</span> _<span class="token number">113.0625</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">round</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">113.06</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最好把该变量 <code>_</code>当作只读类型。不要为它显式赋值，否则会创建一个同名独立局部变量，该变量会用它的魔法行为屏蔽内置变量。</p><h2 id="分隔符">分隔符</h2><p>以下形符在语法中为分隔符：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">(       )       [       ]       {       },       :       .       ;       @       =       -&gt;+=      -=      *=      /=      //=     %=      @=&amp;=      |=      ^=      &gt;&gt;=     &lt;&lt;=     **=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>句点也可以用于浮点数和虚数字面值。</p><p>三个连续句点表示省略符。</p><p>列表后半部分是增强赋值操作符，用作词法分隔符，但也可以执行运算。</p><p>以下 ASCII 字符具有特殊含义，对词法分析器有重要意义：</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python">'       "       <span class="token comment">#       \</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下 ASCII 字符不用于 Python。在字符串字面值或注释外使用时，将直接报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$       ?       `<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关键字">关键字</h2><p>关键字、软关键字、保留的标识符类</p><h3 id="关键字-2">关键字</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">False      await      else       import     passNone       break      except     in         raiseTrue       class      finally    is         returnand        continue   for        lambda     tryas         def        from       nonlocal   whileassert     del        global     not        withasync      elif       if         or         yield<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="软关键字">软关键字</h3><p>某些标识符仅在特定上下文中被保留。 它们被称为 <em>软关键字</em>。</p><p><code>match</code>, <code>case</code> 和 <code>_</code> 等标识符在模式匹配语句相关的上下文中具有相当于关键字的语义，但这种区分是在解析器层级完成，而不是在形符化的时候。</p><p>作为软关键字，它们能够与模式匹配一起使用，同时仍然保持与使用 <code>match</code>, <code>case</code> 和 <code>_</code> 作为标识符名称的现有代码的兼容性。</p><h3 id="保留的标识符类">保留的标识符类</h3><p>某些标识符类（除了关键字）具有特殊含义。这些类的命名模式以下划线字符开头，并以下划线结尾：</p><table><thead><tr><th>标识符</th><th>说明</th></tr></thead><tbody><tr><td><code>_*</code></td><td>不会被 from module import * 所导入。</td></tr><tr><td><code>_</code></td><td>在 match 语句内部的 case 模式中，_ 是一个 软关键字，它表示 通配符。<br>在此之外，交互式解释器会将最后一次求值的结果放到变量 _ 中。 （它与 print 等内置函数一起被存储于 builtins 模块。）<br>在其他地方，_ 是一个常规标识符。 <br>它常常被用来命名 “特殊” 条目，但对 Python 本身来说毫无特殊之处。如<code>_</code> 常用于连接国际化文本；详见 gettext 模块文档。<br>它还经常被用来命名无需使用的变量。</td></tr><tr><td><code>__*__</code></td><td>系统定义的名称，通常简称为 “dunder” 。这些名称由解释器及其实现（包括标准库）定义。<br>现有系统定义名称相关的论述详见 <a href="https://docs.python.org/zh-cn/3.11/reference/datamodel.html#specialnames">特殊方法名称</a> 等章节。Python 未来版本中还将定义更多此类名称。任何情况下，<em>任何</em> 不显式遵从 <code>__*__</code> 名称的文档用法，都可能导致无警告提示的错误。</td></tr><tr><td><code>__*</code></td><td>类的私有名称。类定义时，此类名称以一种混合形式重写，以避免基类及派生类的 “私有” 属性之间产生名称冲突。详见 标识符（名称）。</td></tr></tbody></table><h1>数据类型和变量</h1><p>Python3 中常见的数据类型有：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>bool（布尔类型）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；</li><li>**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>此外还有一些高级的数据类型，如: 字节数组类型(bytes)。</p><h2 id="整数-int">整数:<a href="https://docs.python.org/zh-cn/3.11/library/functions.html#int"><code>int</code></a></h2><p>Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 交互窗口输入（默认10进制）</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 输入数字：<span class="token number">123</span><span class="token number">123</span><span class="token comment"># 指定2进制数据转化为10进制</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮点数">浮点数</h2><h3 id="float"><a href="https://docs.python.org/zh-cn/3.11/library/functions.html#float"> <code>float</code></a></h3><p>如果该参数是一个字符串，在去除前导和尾随的空格之后，输入必须为符合以下语法的 <code>floatvalue</code> 产生规则:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sign        ::=  "+" | "-"infinity    ::=  "Infinity" | "inf"nan         ::=  "nan"digitpart   ::=  digit (["_"] digit)*number      ::=  [digitpart] "." digitpart | digitpart ["."]exponent    ::=  ("e" | "E") ["+" | "-"] digitpartfloatnumber ::=  number [exponent]floatvalue  ::=  [sign] (floatnumber | infinity | nan)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>符号标记</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>sign ::= “+”</td><td>正，负</td><td>&gt;&gt;&gt; float(‘+1.23’) <br>1.23<br>&gt;&gt;&gt; float(‘-1.23\n’)  <br>-1.23<br>&gt;&gt;&gt; float(‘-123\n’)   <br>-123.0</td></tr><tr><td>(“e” | “E”) [“+” | “-”] 数字部分</td><td>科学计数</td><td>&gt;&gt;&gt; float(1e3)<br>1000.0 <br>&gt;&gt;&gt; float(‘1e3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘1e+3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘+1e3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘-1e3’)<br>-1000.0 <br>&gt;&gt;&gt; float(‘1e-3’)<br>0.001 <br>&gt;&gt;&gt; float(1e-3)<br>0.001 <br>&gt;&gt;&gt; float(1E-3)<br>0.001</td></tr><tr><td>infinity ::= “Infinity” | “inf”</td><td>无穷大<br>1. 大小写不敏感<br>2.  需要为字符串，否则会报错</td><td>&gt;&gt;&gt; float(‘Infinity’)<br>inf<br>&gt;&gt;&gt; float(‘InfinitY’)<br>inf<br>&gt;&gt;&gt; float(‘-Inf’)<br>-inf</td></tr><tr><td>not-a-number</td><td>NaN<br>1. 大小写不敏感<br>2. 需要为字符串，否则会报错</td><td>&gt;&gt;&gt; float(‘NAN’)<br>nan<br>&gt;&gt;&gt; float(‘NaN’)<br>nan<br>&gt;&gt;&gt; float(‘-nan’)<br>nan</td></tr></tbody></table><h3 id="complex-：复数"><a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#typesnumeric"><code>complex</code></a> ：复数</h3><p>后缀 <code>j</code> 或 <code>J</code> 用于表示虚数（例如 <code>3+5j</code> ）</p><table><thead><tr><th></th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>complex(re, im)</td><td>一个带有实部 <em>re</em> 和虚部 <em>im</em> 的复数。 <em>im</em> 默认为0</td><td>&gt;&gt;&gt; complex(3, 2)<br>(3+2j)</td></tr><tr><td>c.conjugate()</td><td>复数 <em>c</em> 的共轭</td><td>&gt;&gt;&gt; complex(3, 2).conjugate()<br>(3-2j)</td></tr></tbody></table><h3 id="Decimal：十进制浮点运算"><a href="https://docs.python.org/zh-cn/3.11/library/decimal.html#decimal-objects"><code>Decimal</code></a>：十进制浮点运算</h3><p><em>class</em> decimal.<strong>Decimal</strong>(<em>value=‘0’</em>, <em>context=None</em>)</p><p><em>value</em> 可以是整数，字符串，元组，<a href="https://docs.python.org/zh-cn/3.11/library/functions.html#float"><code>float</code></a> ，或另一个 <a href="https://docs.python.org/zh-cn/3.11/library/decimal.html#decimal.Decimal"><code>Decimal</code></a> 对象。 如果没有给出 <em>value</em>，则返回 <code>Decimal('0')</code>。</p><p>如果 <em>value</em> 是一个字符串，它应该在前导和尾随空格字符以及下划线被删除之后符合十进制数字字符串语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> decimal <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 因为浮点数据的不准确性</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.1999999999999999555910790149937383830547332763671875'</span><span class="token punctuation">)</span><span class="token comment"># 通过设定有效数字，限定结果样式，保留六个有效数字</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>Decimal<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.142857'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span>Decimal<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> Decimal<span class="token punctuation">(</span><span class="token string">'142.857'</span><span class="token punctuation">)</span><span class="token comment"># 四舍五入，保留两位小数</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token string">'50.5679'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Decimal<span class="token punctuation">(</span><span class="token string">'50.57'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token string">'50.5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Decimal<span class="token punctuation">(</span><span class="token string">'50.50'</span><span class="token punctuation">)</span><span class="token comment"># Decimal 结果转化为string</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'50.5679'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token string">'50.57'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">取整问题：ROUND_CEILING 总是趋向无穷大向上取整ROUND_DOWN　总是趋向0取整ROUND_FLOOR 总是趋向负无穷大向下取整ROUND_HALF_DOWN　如果最后一个有效数字大于或等于5则朝0反方向取整；否则，趋向0取整ROUND_HALF_EVEN　类似于ROUND_HALF_DOWN，不过，如果最后一个有效数字值为5，则会检查前一位。偶数值会导致结果向下取整，奇数值导致结果向上取整ROUND_HALF_UP 类似于ROUND_HALF_DOWN，不过如果最后一位有效数字为5，值会朝0的反方向取整ROUND_UP　朝0的反方向取整ROUND_05UP　如果最后一位是0或5，则朝0的反方向取整；否则向0取整<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fractions-—-分数"><a href="https://docs.python.org/zh-cn/3.11/library/fractions.html#module-fractions"><code>fractions</code></a> — 分数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> fractions <span class="token keyword">import</span> Fraction<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'3/1'</span><span class="token punctuation">)</span> Fraction<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'3/1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'6/2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'6/1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'3/7'</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">' -3/7 '</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'1.414213 \t\n'</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'-.125'</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'7e-6'</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">2.25</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串：String">字符串：String</h2><p>可以用成对的单引号、双引号、三重引号来表示</p><p>字符串由<a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#str"><code>str</code></a> 类型表示。</p><ol><li><p>如果不希望前置 <code>\</code> 的字符转义成特殊字符，可以使用 <em>原始字符串</em>，在引号前添加 <code>r</code> 即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C:\some\name'</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\someame<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'C:\some\name'</span><span class="token punctuation">)</span>C<span class="token punctuation">:</span>\some\name<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>      <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll<span class="token string">'12'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>原始字符串还有一个微妙的限制：一个原始字符串不能以奇数个 <code>\</code> 字符结束</p><p>以奇数个反斜杠结尾的原始字符串将会转义用于标记字符串的引号</p><p>请参阅 <a href="https://docs.python.org/zh-cn/3.11/faq/programming.html#faq-programming-raw-string-backslash">此 FAQ 条目</a> 了解更多信息及绕过的办法。</p></li><li><p>字符串字面值可以多行。使用三重引号：“”“…”“” 或 ‘’‘…’‘’</p></li></ol><h3 id="格式化字符串">格式化字符串</h3><h4 id="占位符">占位符</h4><p>用<code>%</code>实现。当<code>%</code>作为普通字符时，用<code>%%</code>来表示一个<code>%</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 只有一个占位符，括号可以省略</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> <span class="token string">'world'</span><span class="token string">'Hello, world'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hi, %s, you have $%d.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token string">'Hi, Michael, you have $1000000.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, %s, you have $%d. %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hi<span class="token punctuation">,</span> Michael<span class="token punctuation">,</span> you have $<span class="token number">1000000.</span> <span class="token number">1.000000</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %d%%'</span> <span class="token operator">%</span> <span class="token number">1</span><span class="token punctuation">)</span>  percent<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">%</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %.2f%%'</span> <span class="token operator">%</span> <span class="token number">1.345</span><span class="token punctuation">)</span>  percent<span class="token punctuation">:</span> <span class="token number">1.34</span><span class="token operator">%</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %.2f%%'</span> <span class="token operator">%</span> <span class="token number">1.346</span><span class="token punctuation">)</span> percent<span class="token punctuation">:</span> <span class="token number">1.35</span><span class="token operator">%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见的占位符有：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td><code>%s</code>会把任何数据类型转换为字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定浮点数的小数位数，不足补0，超出四舍五入</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%0.4f'</span> <span class="token operator">%</span> <span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token number">3.1416</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.2f'</span> <span class="token operator">%</span> <span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token number">3.14</span><span class="token comment"># 指定浮点数的小数位数，不足补0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.4f'</span> <span class="token operator">%</span> <span class="token number">3.1</span><span class="token punctuation">)</span><span class="token number">3.1000</span><span class="token comment"># 指定整数的最小占位数，不足补空格</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%2d'</span> <span class="token operator">%</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 指定整数的最小占位数，不足补0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%02d'</span><span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="f-string：格式字符串字面值"><a href="https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#formatted-string-literals">f-string：格式字符串字面值</a></h4><p>是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换.</p><p>指定了转换符时，表达式求值的结果会先转换，再格式化。转换符 <code>'!s'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#str"><code>str()</code></a> 转换求值结果，<code>'!r'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/functions.html#repr"><code>repr()</code></a>，<code>'!a'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/functions.html#ascii"><code>ascii()</code></a>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> <span class="token number">2.5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The area of a circle with radius </span><span class="token interpolation"><span class="token punctuation">{</span>r<span class="token punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>The area of a circle <span class="token keyword">with</span> radius <span class="token number">2.5</span> <span class="token keyword">is</span> <span class="token number">19.62</span><span class="token comment">#使用'!r'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">"Fred"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"He said his name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">."</span></span><span class="token string">"He said his name is 'Fred'."</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"He said his name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">."</span></span>   <span class="token string">'He said his name is Fred.'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> decimal<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> width <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> precision <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> value <span class="token operator">=</span> decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">"12.34567"</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"result: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token punctuation">{</span>width<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>precision<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token string">'result:      12.35'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">:</span><span class="token format-spec">#0x</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> <span class="token string">'0xf'</span><span class="token comment"># 格式化日期</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> today <span class="token operator">=</span> datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>today<span class="token punctuation">:</span><span class="token format-spec">%B %d, %Y</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token string">'January 27, 2017'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>today<span class="token operator">=</span><span class="token punctuation">:</span><span class="token format-spec">%B %d, %Y</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> <span class="token string">'today=January 27, 2017'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> line <span class="token operator">=</span> <span class="token string">"The mill's closed"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line<span class="token punctuation">}</span></span><span class="token string">"</span></span>    <span class="token string">"The mill's closed"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> <span class="token string">'line="The mill\'s closed"'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token format-spec">20</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token string">"line = The mill's closed   "</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line <span class="token operator">=</span> <span class="token conversion-option punctuation">!r</span><span class="token punctuation">:</span><span class="token format-spec">20</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token string">'line = "The mill\'s closed" '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="format">format()</h4><p>使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……</p><h3 id="内置函数">内置函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>len(‘asd’)</td><td>计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数</td></tr><tr><td>ord(‘A’)</td><td>返回单个字符的整数编码</td></tr><tr><td>chr(‘32’)</td><td>整数编码转换为对应的字符</td></tr><tr><td>‘ABC’.encode(‘ascii’)</td><td><code>str</code>转<code>bytes</code></td></tr><tr><td>b’ABC’.decode(‘ascii’)</td><td><code>bytes</code>转<code>str</code></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="布尔值：Bool">布尔值：Bool</h2><p>区分大小写</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; not TrueFalse&gt;&gt;&gt; not FalseTrue&gt;&gt;&gt; not 1 &gt; 2True&gt;&gt;&gt; 5 &gt; 3 and 3 &gt; 1True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="空值：None">空值：None</h2><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><h2 id="列表：List">列表：List</h2><p>list是一种有序的集合，可以随时添加和删除其中的元素。可以包含不同类型的元素。列表支持索引和切片查询</p><ol><li><p>定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token comment"># 嵌套列表（创建包含其他列表的列表）</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> n<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 末尾追加元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">+=</span> <span class="token string">'i'</span>      <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span class="token comment"># 把元素插入到指定的位置</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters  <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span class="token comment"># 合并操作</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>          <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token comment"># 修改元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters     <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token comment"># 切片删除元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters          <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token comment"># 删除末尾元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters          <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token string">'g'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token comment"># 删除指定位置元素</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">'b'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters        <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="元组：Tuple">元组：Tuple</h2><p>有序、不可变</p><ol><li><p>定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通定义</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> classmates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">)</span><span class="token comment"># 空</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> classmates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 一个元素（歧义）</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test<span class="token string">'test'</span><span class="token comment"># 一个元素（元组定义）</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只有1个元素的tuple定义时必须加一个逗号<code>,</code>，来消除歧义。而显示时，也会带上一个逗号<code>, </code></p></li><li><p>“可变的”tuple：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Y'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cspaces%2FgYzJOgqycOATew45KSSW%2Fuploads%2FAj60qA8UyPKxQFTtmmXx%2Fimage.png" alt="初始定义的tuple"></p><p>当我们把list的元素<code>'A'</code>和<code>'B'</code>修改为<code>'X'</code>和<code>'Y'</code>后，tuple变为：</p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cspaces%2FgYzJOgqycOATew45KSSW%2Fuploads%2FOYV5J5oQeGAYKW8rTnod%2Fimage.png" alt="修改后的tuple"></p><p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。</p><p>tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向<code>'a'</code>，就不能改成指向<code>'b'</code>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的。</p><p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p></li></ol><h2 id="字典：Dictionary">字典：Dictionary</h2><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p><ol><li><p>定义和赋值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">{</span><span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">{</span><span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token builtin">dict</span>  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果key不存在，dict就会报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">[</span><span class="token string">'Thomas'</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token string">'Thomas'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Thomas'</span> <span class="token keyword">in</span> d<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Thomas'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Thomas'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：返回<code>None</code>的时候Python的交互环境不显示结果。</p><p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除，如果key不存在，一样会报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token number">75</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">{</span><span class="token string">'Michael'</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Bob'</span> <span class="token keyword">in</span> d<span class="token boolean">False</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>KeyError<span class="token punctuation">:</span> <span class="token string">'Bob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="集合：Set">集合：Set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><p>要创建一个set，需要提供一个list作为输入集合：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>{1, 2, 3}</code>只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。</p><p>重复元素在set中自动被过滤：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>remove(key)</code>方法可以删除元素：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">&amp;</span> s2<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s1 <span class="token operator">|</span> s2<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>set和dict的唯一区别仅在于没有存储对应的value，但是，<strong>set的原理和dict一样</strong>，所以，<strong>同样不可以放入可变对象</strong>，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ll <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>TypeError<span class="token punctuation">:</span> unhashable <span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>控制流工具</h1><h2 id="if-语句">if 语句</h2><p>完整结构</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">&gt;</span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">&gt;</span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">&gt;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>if</code>判断条件还可以简写，比如写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code></p><h2 id="match-语句">match 语句</h2><p>版本3.10之后支持</p><p>模式匹配：只有第一个匹配的模式会被执行，并且它还可以提取值的组成部分（序列的元素或对象的属性）赋给变量。</p><h4 id="字面值匹配">字面值匹配</h4><p>最简单的形式是将一个主语值与一个或多个字面值进行比较：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def http_error(status):    match status:        case 400:            return "Bad request"        case 401 | 403 | 404:            return "Not allowed"        case 404:            return "Not found"        case 418:            return "I'm a teapot"        case _:            return "Something's wrong with the internet"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意最后一个代码块：“变量名” <code>_</code> 被作为 <em>通配符</em> 并必定会匹配成功。</p><p>如果没有 case 匹配成功，则不会执行任何分支。</p><p>你可以使用 <code>|</code> （“ or ”）在一个模式中组合几个字面值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">case</span> <span class="token number">401</span> <span class="token operator">|</span> <span class="token number">403</span> <span class="token operator">|</span> <span class="token number">404</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Not allowed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>在case中使用判断语句</strong></p><p>match语句还支持在分支条件中插入判断语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">match</span> a<span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'case 1'</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token keyword">if</span> flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'case 2'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token keyword">case</span> default<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'case default'</span><span class="token punctuation">,</span> default<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解包赋值">解包赋值</h4><p><code>match</code>语句除了可以匹配简单的单个值外，还可以匹配多个值、匹配一定范围，并且把匹配后的值绑定到变量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># point is an (x, y) tuple</span><span class="token keyword">match</span> point<span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Y=</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"X=</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"X=</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">, Y=</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Not a point"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token keyword">def</span> <span class="token function">where_is</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> point<span class="token punctuation">:</span>        <span class="token keyword">case</span> Point<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原点"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> Point<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span>yLine<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Y轴：Y=</span><span class="token interpolation"><span class="token punctuation">{</span>yLine<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">case</span> Point<span class="token punctuation">(</span>x<span class="token operator">=</span>xLine<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"X轴：X=</span><span class="token interpolation"><span class="token punctuation">{</span>xLine<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">case</span> Point<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Somewhere else"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Not a point"</span><span class="token punctuation">)</span>where_is<span class="token punctuation">(</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列模式">序列模式</h4><p>与解包赋值类似，元组和列表模式具有完全相同的含义并且实际上都能匹配任意序列，区别是它们不能匹配迭代器或字符串。</p><p>序列模式支持扩展解包：<code>[x, y, *rest]</code> 和 <code>(x, y, *rest)</code> 和相应的解包赋值做的事是一样的。接在 <code>*</code> 后的名称也可以为 <code>_</code>，所以 <code>(x, y, *_)</code> 匹配含至少两项的序列，而不必绑定剩余的项。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">match_list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> s<span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"None"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Empty"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x={0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x={0},y={1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">*</span>rest<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x=%s, y=%s, rest=%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Not a list"</span><span class="token punctuation">)</span>match_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>match_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>match_list<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>match_list<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token comment"># 输出</span>x<span class="token operator">=</span><span class="token number">1</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> rest<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>Not a <span class="token builtin">list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="映射模式">映射模式</h4><p>映射模式：<code>{"bandwidth": b, "latency": l}</code> 从字典中捕获 <code>"bandwidth"</code> 和 <code>"latency"</code> 的值。额外的键会被忽略，这一点与序列模式不同。<code>**rest</code> 这样的解包也支持。（但 <code>**_</code> 将会是冗余的，故不允许使用。）</p><p>match实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dispatch_match</span><span class="token punctuation">(</span>operator<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> operator<span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">'add'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> y        <span class="token keyword">case</span> <span class="token string">'sub'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">-</span> y        <span class="token keyword">case</span> <span class="token string">'mul'</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> x <span class="token operator">*</span> y        <span class="token keyword">case</span> <span class="token string">'div'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">/</span> y        <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span>dispatch_match<span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dispatch_match<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token number">3</span><span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字典实现相同功能</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dispatch_dict</span><span class="token punctuation">(</span>operator<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">'add'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span>        <span class="token string">'sub'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">-</span> y<span class="token punctuation">,</span>        <span class="token string">'mul'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span>        <span class="token string">'div'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> x <span class="token operator">/</span> y<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>operator<span class="token punctuation">,</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>dispatch_dict<span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dispatch_dict<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token number">3</span><span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环">循环</h2><ol><li><p>for 语句</p><p>for x in …循环就是把每个元素代入变量x，然后执行缩进块的语句。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Measure some strings:</span>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'window'</span><span class="token punctuation">,</span> <span class="token string">'defenestrate'</span><span class="token punctuation">]</span><span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> x<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"b"</span> <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">for</span> x <span class="token keyword">in</span> p<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 输出</span>a<span class="token number">10</span>b<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很难正确地在迭代多项集的同时修改多项集的内容。更简单的方法是迭代多项集的副本或者创建新的多项集：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Create a sample collection</span>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Hans'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token string">'Éléonore'</span><span class="token punctuation">:</span> <span class="token string">'inactive'</span><span class="token punctuation">,</span> <span class="token string">'景太郎'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span class="token comment"># Strategy:  Iterate over a copy</span><span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'inactive'</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> users<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token comment"># Strategy:  Create a new collection</span>active_users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'active'</span><span class="token punctuation">:</span>        active_users<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> statuss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>while循环</p><p>要条件满足，就不断循环，条件不满足时退出循环</p></li><li><p>循环中的 break、continue 语句及 else 子句</p><ul><li><p>break 语句将跳出最近的一层 for 或 while 循环</p></li><li><p>for 或 while 循环可以包括 else 子句（完成循环之后执行）</p><p>在 for 循环中，else 子句会在循环成功结束最后一次迭代之后执行。</p><p>在 while 循环中，它会在循环条件变为假值后执行。</p><p>无论哪种循环，如果因为 <a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#break"><code>break</code></a> 而结束，那么 <code>else</code> 子句就 <strong>不会</strong> 执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 循环配合else使用</span>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Hans'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token string">'Éléonore'</span><span class="token punctuation">:</span> <span class="token string">'inactive'</span><span class="token punctuation">,</span> <span class="token string">'景太郎'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'inactive'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.done&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><span class="token punctuation">)</span><span class="token comment"># 无论哪种循环，如果因为 break 而结束，那么 else 子句就 不会 执行。</span><span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'inactive'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.done&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>done<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">{</span><span class="token string">'Hans'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token string">'Éléonore'</span><span class="token punctuation">:</span> <span class="token string">'inactive'</span><span class="token punctuation">,</span> <span class="token string">'景太郎'</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="pass语句">pass语句</h2><p><a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#pass"><code>pass</code></a> 语句不执行任何动作。语法上需要一个语句，但程序毋需执行任何动作时，可以使用该语句。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>  <span class="token comment"># Busy-wait for keyboard interrupt (Ctrl+C)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这常用于创建一个最小的类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyEmptyClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://docs.python.org/zh-cn/3.11/reference/simple_stmts.html#pass"><code>pass</code></a> 还可用作函数或条件语句体的占位符，让你保持在更抽象的层次进行思考。</p><p><code>pass</code> 会被默默地忽略：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">initlog</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>   <span class="token comment"># Remember to implement this!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#&quot;&gt;语法&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;编码声明&quot;&gt;编码声明&lt;/h2&gt;
&lt;pre class=&quot;line-numbe</summary>
      
    
    
    
    <category term="Python" scheme="https://hmxyl.github.io/categories/Python/"/>
    
    
    <category term="Python基础" scheme="https://hmxyl.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch安装</title>
    <link href="https://hmxyl.github.io/20230618/872a239c.html"/>
    <id>https://hmxyl.github.io/20230618/872a239c.html</id>
    <published>2023-06-18T09:33:20.000Z</published>
    <updated>2023-08-16T08:29:22.078Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker</h1><p>参考：<a href="https://new.nanxiangquan.com/2023/04/26/docker%E9%83%A8%E7%BD%B2elk/">https://new.nanxiangquan.com/2023/04/26/docker部署elk/</a></p><h2 id="单机">单机</h2><h3 id="docker-compose">docker-compose</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.9'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch-standalone</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.2.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>standalone    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> TZ=Asia/Shanghai      <span class="token punctuation">-</span> cluster.name=elasticsearch<span class="token punctuation">-</span>standalone      <span class="token punctuation">-</span> node.name=node01      <span class="token punctuation">-</span> cluster.initial_master_nodes=<span class="token punctuation">[</span><span class="token string">"node01"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore</span>      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/log4j2.properties<span class="token punctuation">:</span>/usr/share/elasticsearch/config/log4j2.properties      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/jvm.options<span class="token punctuation">:</span>/usr/share/elasticsearch/config/jvm.options      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/role_mapping.yml:/usr/share/elasticsearch/config/role_mapping</span>      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/roles.yml:/usr/share/elasticsearch/config/roles</span>      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/users:/usr/share/elasticsearch/config/users</span>      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/users_roles:/usr/share/elasticsearch/config/users_roles</span>      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/logs<span class="token punctuation">:</span>/usr/share/elasticsearch/logs    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9200<span class="token punctuation">:</span><span class="token number">9200</span>      <span class="token punctuation">-</span> 9300<span class="token punctuation">:</span><span class="token number">9300</span>    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         其中的配置文件：</p><ul><li>elasticsearch.yml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9300</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /usr/share/elasticsearch/data  <span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /usr/share/elasticsearch/logs    <span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token key atrule">http.cors.allow-headers</span><span class="token punctuation">:</span> Authorization<span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">xpack.security.transport.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">discovery.zen.ping_timeout</span><span class="token punctuation">:</span> 120s<span class="token key atrule">client.transport.ping_timeout</span><span class="token punctuation">:</span> 60s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>jvm.options</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">## JVM configuration</span><span class="token comment">################################################################</span><span class="token comment">## IMPORTANT: JVM heap size</span><span class="token comment">################################################################</span><span class="token comment">##</span><span class="token comment">## You should always set the min and max JVM heap</span><span class="token comment">## size to the same value. For example, to set</span><span class="token comment">## the heap to 4 GB, set:</span><span class="token comment">##</span><span class="token comment">## -Xms4g</span><span class="token comment">## -Xmx4g</span><span class="token comment">##</span><span class="token comment">## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</span><span class="token comment">## for more information</span><span class="token comment">##</span><span class="token comment">################################################################</span><span class="token comment"># Xms represents the initial size of total heap space</span><span class="token comment"># Xmx represents the maximum size of total heap space</span>-Xms2g-Xmx2g<span class="token comment">################################################################</span><span class="token comment">## Expert settings</span><span class="token comment">################################################################</span><span class="token comment">##</span><span class="token comment">## All settings below this section are considered</span><span class="token comment">## expert settings. Don't tamper with them unless</span><span class="token comment">## you understand what you are doing</span><span class="token comment">##</span><span class="token comment">################################################################</span><span class="token comment">## GC configuration</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+UseConcMarkSweepGC</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">CMSInitiatingOccupancyFraction=75</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+UseCMSInitiatingOccupancyOnly</span><span class="token comment">## G1GC Configuration</span><span class="token comment"># NOTE: G1GC is only supported on JDK version 10 or later.</span><span class="token comment"># To use G1GC uncomment the lines below.</span><span class="token comment"># 10-:-XX:-UseConcMarkSweepGC</span><span class="token comment"># 10-:-XX:-UseCMSInitiatingOccupancyOnly</span><span class="token comment"># 10-:-XX:+UseG1GC</span><span class="token comment"># 10-:-XX:InitiatingHeapOccupancyPercent=75</span><span class="token comment">## DNS cache policy</span><span class="token comment"># cache ttl in seconds for positive DNS lookups noting that this overrides the</span><span class="token comment"># JDK security property networkaddress.cache.ttl; set to -1 to cache forever</span><span class="token key attr-name">-Des.networkaddress.cache.ttl</span><span class="token punctuation">=</span><span class="token value attr-value">60</span><span class="token comment"># cache ttl in seconds for negative DNS lookups noting that this overrides the</span><span class="token comment"># JDK security property networkaddress.cache.negative ttl; set to -1 to cache</span><span class="token comment"># forever</span><span class="token key attr-name">-Des.networkaddress.cache.negative.ttl</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token comment">## optimizations</span><span class="token comment"># pre-touch memory pages used by the JVM during initialization</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+AlwaysPreTouch</span><span class="token comment">## basic</span><span class="token comment"># explicitly set the stack size</span>-Xss1m<span class="token comment"># set to headless, just in case</span><span class="token key attr-name">-Djava.awt.headless</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment"># ensure UTF-8 encoding by default (e.g. filenames)</span><span class="token key attr-name">-Dfile.encoding</span><span class="token punctuation">=</span><span class="token value attr-value">UTF-8</span><span class="token comment"># use our provided JNA always versus the system one</span><span class="token key attr-name">-Djna.nosys</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment"># turn off a JDK optimization that throws away stack traces for common</span><span class="token comment"># exceptions because stack traces are important for debugging</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">-OmitStackTraceInFastThrow</span><span class="token comment"># flags to configure Netty</span><span class="token key attr-name">-Dio.netty.noUnsafe</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">-Dio.netty.noKeySetOptimization</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">-Dio.netty.recycler.maxCapacityPerThread</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span class="token comment"># log4j 2</span><span class="token key attr-name">-Dlog4j.shutdownHookEnabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">-Dlog4j2.disable.jmx</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">-Djava.io.tmpdir</span><span class="token punctuation">=</span><span class="token value attr-value">${ES_TMPDIR}</span><span class="token comment">## heap dumps</span><span class="token comment"># generate a heap dump when an allocation from the Java heap fails</span><span class="token comment"># heap dumps are created in the working directory of the JVM</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+HeapDumpOnOutOfMemoryError</span><span class="token comment"># specify an alternative path for heap dumps; ensure the directory exists and</span><span class="token comment"># has sufficient space</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">HeapDumpPath=data</span><span class="token comment"># specify an alternative path for JVM fatal error logs</span><span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">ErrorFile=logs/hs_err_pid%p.log</span><span class="token comment">## JDK 8 GC logging</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCDetails</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCDateStamps</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintTenuringDistribution</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCApplicationStoppedTime</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-Xloggc:logs/gc.log</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+UseGCLogFileRotation</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:NumberOfGCLogFiles=32</span><span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:GCLogFileSize=64m</span><span class="token comment"># JDK 9+ GC logging</span><span class="token key attr-name">9-</span><span class="token punctuation">:</span><span class="token value attr-value">-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m</span><span class="token comment"># due to internationalization enhancements in JDK 9 Elasticsearch need to set the provider to COMPAT otherwise</span><span class="token comment"># time/date parsing will break in an incompatible way for some date patterns and locals</span><span class="token key attr-name">9-</span><span class="token punctuation">:</span><span class="token value attr-value">-Djava.locale.providers=COMPAT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>log4j2.properties</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">status</span> <span class="token punctuation">=</span> <span class="token value attr-value">error</span><span class="token comment"># log action execution errors for easier debugging</span><span class="token key attr-name">logger.action.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.elasticsearch.action</span><span class="token key attr-name">logger.action.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">debug</span><span class="token key attr-name">appender.rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span><span class="token key attr-name">appender.rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">rolling</span><span class="token key attr-name">appender.rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span><span class="token key attr-name">appender.rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">server</span><span class="token key attr-name">rootLogger.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">info</span><span class="token key attr-name">rootLogger.appenderRef.rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">rolling</span><span class="token key attr-name">appender.deprecation_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span><span class="token key attr-name">appender.deprecation_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation_rolling</span><span class="token key attr-name">appender.deprecation_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span><span class="token key attr-name">appender.deprecation_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation</span><span class="token key attr-name">logger.deprecation.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.elasticsearch.deprecation</span><span class="token key attr-name">logger.deprecation.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">warn</span><span class="token key attr-name">logger.deprecation.appenderRef.deprecation_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation_rolling</span><span class="token key attr-name">logger.deprecation.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span class="token key attr-name">appender.index_search_slowlog_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span><span class="token key attr-name">appender.index_search_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog_rolling</span><span class="token key attr-name">appender.index_search_slowlog_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span><span class="token key attr-name">appender.index_search_slowlog_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog</span><span class="token key attr-name">logger.index_search_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index.search.slowlog</span><span class="token key attr-name">logger.index_search_slowlog_rolling.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">trace</span><span class="token key attr-name">logger.index_search_slowlog_rolling.appenderRef.index_search_slowlog_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog_rolling</span><span class="token key attr-name">logger.index_search_slowlog_rolling.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span class="token key attr-name">appender.index_indexing_slowlog_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span><span class="token key attr-name">appender.index_indexing_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog_rolling</span><span class="token key attr-name">appender.index_indexing_slowlog_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span><span class="token key attr-name">appender.index_indexing_slowlog_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog</span><span class="token key attr-name">logger.index_indexing_slowlog.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index.indexing.slowlog.index</span><span class="token key attr-name">logger.index_indexing_slowlog.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">trace</span><span class="token key attr-name">logger.index_indexing_slowlog.appenderRef.index_indexing_slowlog_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog_rolling</span><span class="token key attr-name">logger.index_indexing_slowlog.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化密码">初始化密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">进入elasticsearch容器<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> elasticsearch <span class="token function">bash</span>进入bin目录<span class="token builtin class-name">cd</span> bin/执行初始化密码./elasticsearch-setup-passwords interactive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Docker&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://new.nanxiangquan.com/2023/04/26/docker%E9%83%A8%E7%BD%B2elk/&quot;&gt;https://new.nanxiangquan.com/2023/04/26</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="ElasticSearch" scheme="https://hmxyl.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring全家桶</title>
    <link href="https://hmxyl.github.io/20230319/6a5a5c18.html"/>
    <id>https://hmxyl.github.io/20230319/6a5a5c18.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.131Z</updated>
    
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础</title>
    <link href="https://hmxyl.github.io/20230319/d607e27b.html"/>
    <id>https://hmxyl.github.io/20230319/d607e27b.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring的特性和优势">Spring的特性和优势</h3><blockquote><p>Spring Framework有哪些特性，用了这个框架对开发而言有什么好处呢？</p></blockquote><p>从Spring 框架的<strong>特性</strong>来看：</p><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>控制反转：<code>IOC——Inversion of Control</code>，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：<code>DI——Dependency Injection</code>，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：<code>Aspect Oriented Programming——AOP</code></li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><p>从使用Spring 框架的<strong>好处</strong>看：</p><ul><li>Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。</li><li>Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了。</li><li>Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。</li><li>测试一个用 Spring 编写的应用程序很容易，因为环境相关的代码被移动到这个框架中。此外，通过使用 JavaBean-style POJOs，它在使用依赖注入注入测试数据时变得更容易。</li><li>Spring 的 web 框架是一个设计良好的 web MVC 框架，它为比如 Structs 或者其他工程上的或者不怎么受欢迎的 web 框架提供了一个很好的供替代的选择。MVC 模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。模型(Model)封装了应用程序数据，通常它们将由 POJO 类组成。视图(View)负责渲染模型数据，一般来说它生成客户端浏览器可以解释 HTML 输出。控制器(Controller)负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。</li><li>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</li><li>轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。</li><li>Spring 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Spring的特性和优势&quot;&gt;Spring的特性和优势&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Framework有哪些特性，用了这个框架对开发而言有什么好处呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从Spring 框架的&lt;strong&gt;特性&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础-AOP</title>
    <link href="https://hmxyl.github.io/20230319/28678f43.html"/>
    <id>https://hmxyl.github.io/20230319/28678f43.html</id>
    <published>2023-03-19T09:44:41.000Z</published>
    <updated>2023-05-11T06:38:33.138Z</updated>
    
    <content type="html"><![CDATA[<h1>拦截器类型</h1><ul><li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li><li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li><li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li><li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li><li>@Around：能完全控制目标代码是否执行，并可以在<strong>执行前后、抛异常后执行任意拦截代码</strong>，可以说是包含了上面所有功能</li></ul><h1>使用注解装配AOP的DEMO</h1><ol><li><p>依赖引入</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>spring-aop：AOP核心功能，例如代理工厂等</p><p>aspectjweaver：支持切入点表达式等</p><p>aspectjrt：支持aop相关注解等</p><p>aspectjweaver包含aspectjrt的内容，所以我们只需要引入aspectjweaver依赖包就可以了</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230319183014032.png" alt="aspectjweaver包含aspectjrt的内容"></p></blockquote></li><li><p>定义一个性能监控的注解</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MetricTime</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义切面</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MetricTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Instant</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(metricTime)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">metric</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">,</span> <span class="token class-name">MetricTime</span> metricTime<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around.begin............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Instant</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> spend <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Metrics][%s]-消耗：%d 毫秒"</span><span class="token punctuation">,</span> metricTime<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spend<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around.end............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在需要被监控的关键方法上标注该注解</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MetricTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@MetricTime</span><span class="token punctuation">(</span><span class="token string">"aop"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/aop/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">testAopSpend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingLong</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动类上标注<code>@EnableAspectJAutoProxy</code></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>AspectJ定义AOP装配规则</h1><table><thead><tr><th>装配规则</th><th>说明</th></tr></thead><tbody><tr><td>“execution(public * com.itranswarp.learnjava.service.<em>.</em>(…))”</td><td>某个service包下面的所有Bean的所有方法都会被拦截</td></tr><tr><td>“execution(public * update*(…))”</td><td>方法名前缀进行拦截。<br>这种非精准打击误伤面更大，因为从方法前缀区分是否是数据库操作是非常不可取的。</td></tr><tr><td></td><td></td></tr></tbody></table><h1>AOP 可能造成的空指针</h1><p>参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1339039378571298">https://www.liaoxuefeng.com/wiki/1252599548343744/1339039378571298</a></p><blockquote><p>Spring通过CGLIB创建的代理类，不会初始化代理类自身继承的任何成员变量，包括final类型的成员变量！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;拦截器类型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；&lt;/li&gt;
&lt;li&gt;@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；&lt;/li&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://hmxyl.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java命名规范</title>
    <link href="https://hmxyl.github.io/20230317/1761bce2.html"/>
    <id>https://hmxyl.github.io/20230317/1761bce2.html</id>
    <published>2023-03-17T09:44:04.000Z</published>
    <updated>2023-05-11T06:38:33.133Z</updated>
    
    <content type="html"><![CDATA[<h1>Java命名规范</h1><h2 id="泛型类">泛型类</h2><p>在书写泛型类时，通常做以下的约定：</p><ul><li>E表示Element，通常用在集合中；</li><li>ID用于表示对象的唯一标识符类型</li><li>T表示Type(类型)，通常指代类；</li><li>K表示Key(键), 通常用于Map中；</li><li>V表示Value(值),通常用于Map中，与K结对出现；</li><li>N表示Number,通常用于表示数值类型；</li><li>？表示不确定的Java类型；</li><li>X用于表示异常；</li><li>U,S表示任意的类型。</li></ul><h2 id="速记Java开发中的各种O">速记Java开发中的各种O</h2><p>通过一张表和图快速对Java中的<code>BO</code>,<code>DTO</code>,<code>DAO</code>,<code>PO</code>,<code>POJO</code>,<code>VO</code>之间的含义，区别以及联系进行梳理。</p><table><thead><tr><th>名称</th><th>使用范围</th><th>解释说明</th></tr></thead><tbody><tr><td>BO</td><td>用于Service,Manager,Business等业务相关类的命名</td><td>Business Object业务处理对象，主要作用是把业务逻辑封装成一个对象。</td></tr><tr><td>DTO</td><td>经过加工后的PO对象，其内部属性可能增加或减少</td><td>Data Transfer  Object数据传输对象，主要用于远程调用等需要大量传输数据的地方，例如，可以将一个或多个PO类的部分或全部属性封装为DTO进行传输</td></tr><tr><td>DAO</td><td>用于对数据库进行读写操作的类进行命名</td><td>Data Access  Object数据访问对象，主要用来封装对数据库的访问，通过DAO可以将POJO持久化为PO，也可以利用PO封装出VO和DTO</td></tr><tr><td>PO</td><td>Bean,Entity等类的命名</td><td>Persistant  Object持久化对象，数据库表中的数据在Java对象中的映射状态，可以简单的理解为一个PO对象即为数据库表中的一条记录</td></tr><tr><td>POJO</td><td>POJO是DO/DTO/BO/VO的统称</td><td>Plain Ordinary Java Object  简单Java对象，它是一个简单的普通Java对象，禁止将类命名为XxxxPOJO</td></tr><tr><td>VO</td><td>通常是视图控制层和模板引擎之间传递的数据对象</td><td>Value Object  值对象，主要用于视图层，视图控制器将视图层所需的属性封装成一个对象，然后用一个VO对象在视图控制器和视图之间进行数据传输。</td></tr><tr><td>AO</td><td>应用层对象</td><td>Application Object，在Web层与Service层之间抽象的复用对象模型，很少用。</td></tr></tbody></table><p>下面将通过一张图来理解上述几种O之间相互转换的关系：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/eae992c8-ce71-47df-ae94-eca9bc91dac0-1679046277720-1.jpg" alt="微信图片_20211213004837"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Java命名规范&lt;/h1&gt;
&lt;h2 id=&quot;泛型类&quot;&gt;泛型类&lt;/h2&gt;
&lt;p&gt;在书写泛型类时，通常做以下的约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E表示Element，通常用在集合中；&lt;/li&gt;
&lt;li&gt;ID用于表示对象的唯一标识符类型&lt;/li&gt;
&lt;li&gt;T表示Type(类型)</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://hmxyl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成Redis</title>
    <link href="https://hmxyl.github.io/20230302/f677ab49.html"/>
    <id>https://hmxyl.github.io/20230302/f677ab49.html</id>
    <published>2023-03-02T11:10:19.000Z</published>
    <updated>2023-06-29T10:43:44.523Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。</p><p>可以参考 <a href="https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.6/spring-boot-dependencies-2.6.6.pom">https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.6/spring-boot-dependencies-2.6.6.pom</a> 查看版本依赖</p></blockquote><h1>基于RedisTemplate+Jedis的数据操作</h1><blockquote><p>Jedis是Redis的Java客户端，在SpringBoot 1.x版本中也是默认的客户端。在SpringBoot 2.x版本中默认客户端是Luttuce。</p></blockquote><h2 id="实现DEMO">实现DEMO</h2><ol><li><p>POM.xml</p><p>引入spring-boot-starter-data-redis包，SpringBoot2中默认的客户端是Lettuce, 所以需要exclude掉lettuce-core包，并引入jedis的包。</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>redis.yml 配置</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.163.128    <span class="token key atrule">password</span><span class="token punctuation">:</span> dHcphufFGcSaJLMK    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisConfig配置</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入JedisConnectionFactory：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315153558460.png" alt="注入JedisConnectionFactory"></p></li><li></li><li><p>测试Redis连接</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DatabaseApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"server.port=80"</span><span class="token punctuation">,</span>                <span class="token string">"spring.application.name=configuration"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.server-addr=native.virtual.com:8848"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.file-extension=yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.group=DEFAULT_GROUP"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].data-id=redis.yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].refresh=true"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>基于RedisTemplate+Lettuce的数据操作</h1><h2 id="Lettuce-说明">Lettuce 说明</h2><p><a href="https://github.com/lettuce-io/lettuce-core">Github（lettuce-core）</a></p><p>Lettuce 是一个可伸缩线程安全的 Redis 客户端。多个线程可以共享同一个 RedisConnection。它利用优秀 netty NIO 框架来高效地管理多个连接。</p><p>Lettuce 从一开始就按照非阻塞式 IO 进行设计，是一个纯异步客户端，对异步和反应式 API 的支持都很全面。即使是同步命令，底层的通信过程仍然是异步模型，只是通过阻塞调用线程来模拟出同步效果而已。</p><blockquote><p>在SpringBoot 2.x版本中Redis默认客户端是Lettuce，本文主要介绍SpringBoot 和默认的Lettuce的整合案例</p></blockquote><h2 id="Lettuce-特性">Lettuce 特性</h2><ul><li>支持 同步、异步、响应式 的方式</li><li>支持 Redis Sentinel</li><li>支持 Redis Cluster</li><li>支持 SSL 和 Unix Domain Socket 连接</li><li>支持 Streaming API</li><li>支持 CDI 和 Spring 的集成</li><li>支持 Command Interfaces</li><li>兼容 Java 8+ 以上版本</li></ul><p><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:connectors:lettuce">Lettuce  和 Jedis 对比官方说明</a></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315150902635.png" alt="image-20230315150902635"></p><h2 id="实现DEMO-2">实现DEMO</h2><ol><li><p>POM.xml</p><p>引入spring-boot-starter-data-redis包，SpringBoot2中默认的客户端是Lettuce, 所以需要exclude掉lettuce-core包，并引入jedis的包。</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>redis.yml 配置</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.163.128    <span class="token key atrule">password</span><span class="token punctuation">:</span> dHcphufFGcSaJLMK    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">200</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisConfig配置（代码和Jedis注入一样 ，只是装配的 <code>connectionFactory</code>  实现类不一样 ）</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入JedisConnectionFactory：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315154313840.png" alt="注入LettuceConnectionFactory"></p></li><li><p>测试Redis连接</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DatabaseApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"server.port=80"</span><span class="token punctuation">,</span>                <span class="token string">"spring.application.name=configuration"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.server-addr=native.virtual.com:8848"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.file-extension=yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.group=DEFAULT_GROUP"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].data-id=redis.yml"</span><span class="token punctuation">,</span>                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].refresh=true"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="基于RedisTemplate-Lettuce数据类封装">基于RedisTemplate+Lettuce数据类封装</h2><p>原文：<a href="https://pdai.tech/md/spring/springboot/springboot-x-redis-lettuce-wrap.html">https://pdai.tech/md/spring/springboot/springboot-x-redis-lettuce-wrap.html</a></p><blockquote><p>RedisTemplate中的操作和方法众多，为了程序保持方法使用的一致性，屏蔽一些无关的方法以及对使用的方法进一步封装。</p></blockquote><ol><li><p>RedisService接口类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisCallback</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deleteSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> redisCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisService的实现类</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">import com.local.service.IRedisService;import org.springframework.data.redis.core.RedisCallback;import org.springframework.data.redis.core.RedisTemplate;import javax.annotation.Resource;import java.util.Collection;import java.util.Set;import java.util.concurrent.TimeUnit;public class RedisServiceImpl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> implements IRedisService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> {    @Resource(name = "redisTemplate")    private RedisTemplate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">T</span><span class="token punctuation">&gt;</span></span> redisTemplate;    @Override    public void set(String key, T value, long time) {        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);    }    @Override    public void set(String key, T value) {        redisTemplate.opsForValue().set(key, value);    }    @Override    public T get(String key) {        return redisTemplate.opsForValue().get(key);    }    @Override    public void delete(String key) {        redisTemplate.delete(key);    }    @Override    public void delete(Collection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span> keys) {        redisTemplate.delete(keys);    }    @Override    public boolean expire(String key, long time) {        return redisTemplate.expire(key, time, TimeUnit.SECONDS);    }    @Override    public Long getExpire(String key) {        return redisTemplate.getExpire(key, TimeUnit.SECONDS);    }    @Override    public boolean hasKey(String key) {        return redisTemplate.hasKey(key);    }    @Override    public Long increment(String key, long delta) {        return redisTemplate.opsForValue().increment(key, delta);    }    @Override    public Long decrement(String key, long delta) {        return redisTemplate.opsForValue().decrement(key);    }    @Override    public void addSet(String key, T value) {        redisTemplate.opsForSet().add(key, value);    }    @Override    public Set<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> getSet(String key) {        return redisTemplate.opsForSet().members(key);    }    @Override    public void deleteSet(String key, T value) {        redisTemplate.opsForSet().remove(key, value);    }    @Override    public T execute(RedisCallback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> redisCallback) {        return redisTemplate.execute(redisCallback);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。&lt;/p&gt;
&lt;p&gt;可以参考 &lt;a href=&quot;https://repo1.maven.org/maven2/org/springframework/boo</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
    <category term="SpringBoot" scheme="https://hmxyl.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Nacos</title>
    <link href="https://hmxyl.github.io/20230301/c383a3c4.html"/>
    <id>https://hmxyl.github.io/20230301/c383a3c4.html</id>
    <published>2023-03-01T02:19:20.000Z</published>
    <updated>2023-05-26T01:42:37.820Z</updated>
    
    <content type="html"><![CDATA[<p>Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台（参考自 <a href="https://nacos.io/zh-cn/index.html">Nacos 官网</a>）。</p><p>英文全称为 Dynamic Naming and Configuration Service，是一个由阿里巴巴团队使用 Java 语言开发的开源项目。Nacos 的命名是由 3 部分组成：</p><table><thead><tr><th>组成部分</th><th>全称</th><th>描述</th></tr></thead><tbody><tr><td>Na</td><td>naming/nameServer</td><td>即服务注册中心，与 Spring Cloud Eureka 的功能类似。</td></tr><tr><td>co</td><td>configuration</td><td>即配置中心，与 Spring Cloud Config+Spring Cloud Bus 的功能类似。</td></tr><tr><td>s</td><td>service</td><td>即服务，表示 Nacos 实现的服务注册中心和配置中心都是以服务为核心的。</td></tr></tbody></table><p>我们可以将 Nacos 理解成服务注册中心和配置中心的组合体。</p><ul><li>它可以替换 <a href="http://c.biancheng.net/springcloud/eureka.html">Eureka</a> 作为服务注册中心，实现服务的注册与发现；</li><li>可以替换 <a href="http://c.biancheng.net/springcloud/config.html">Spring Cloud Config</a> 作为配置中心，实现配置的动态刷新。</li></ul><p>Nacos 支持几乎所有主流类型“服务”的发现、配置和管理：</p><ul><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">Kubernetes Service</a></li><li><a href="https://grpc.io/docs/what-is-grpc/core-concepts#service-definition">gRPC </a>&amp; <a href="https://dubbo.apache.org/zh/">Dubbo RPC Service</a></li><li>Spring Cloud RESTful Service</li></ul><h1>Nacos 的特性</h1><p>Nacos 提供了一系列简单易用的特性，能够帮助我们快速地实现动态服务发现、服务配置等功能。</p><h2 id="服务发现">服务发现</h2><p>Nacos 支持基于 DNS 和 RPC 的服务发现。</p><p>当服务提供者使用原生 SDK、OpenAPI 或一个独立的 Agent TODO 向 Nacos 注册服务后，服务消费者可以在 Nacos 上通过 DNS TODO 或 HTTP&amp;API 查找、发现服务。</p><h2 id="服务健康监测">服务健康监测</h2><p>Nacos 提供对服务的实时健康检查，能够阻止请求发送到不健康主机或服务实例上。Nacos 还提供了一个健康检查仪表盘，能够帮助我们根据健康状态管理服务的可用性及流量。</p><h2 id="动态配置服务">动态配置服务</h2><p>动态配置服务可以让我们以中心化、外部化和动态化的方式，管理所有环境的应用配置和服务配置。</p><p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效、敏捷。</p><p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>Nacos 提供了一个简洁易用的 UI 帮助我们管理所有服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助我们更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p><h2 id="动态-DNS-服务">动态 DNS 服务</h2><p>Nacos 提供了动态 DNS 服务，能够让我们更容易地实现负载均衡、流量控制以及数据中心内网的简单 DNS 解析服务。</p><p>Nacos 提供了一些简单的 DNS APIs TODO，可以帮助我们管理服务的关联域名和可用的 IP:PORT 列表。</p><h2 id="服务及其元数据管理">服务及其元数据管理</h2><p>Nacos 能让我们从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及 metrics 统计数据。</p><h1>Nacos 两大组件</h1><p>与 Eureka 类似，Nacos 也采用 CS（Client/Server，客户端/服务器）架构，它包含两大组件，如下表。</p><ol><li><p>Nacos Server</p><p>描述：</p><ul><li>Nacos 服务端，与 Eureka Server 不同，Nacos Server 由阿里巴巴团队使用 Java 语言编写并将 Nacos Server 的下载地址给用户，用户只需要直接下载并运行即可。</li></ul><p>功能：</p><ul><li>Nacos Server 可以作为服务注册中心，帮助 Nacos Client 实现服务的注册与发现。</li><li>Nacos Server 可以作为配置中心，帮助 Nacos Client 在不重启的情况下，实现配置的动态刷新。</li></ul></li><li><p>Nacos Client</p><p>描述：</p><ul><li>Nacos 客户端，通常指的是微服务架构中的各个服务，由用户自己搭建，可以使用多种语言编写。</li></ul><p>功能：</p><ul><li><p>Nacos Client 通过添加依赖 spring-cloud-starter-alibaba-nacos-discovery，在服务注册中心（Nacos Server）中实现服务的注册与发现</p></li><li><p>Nacos Client 通过添加依赖 spring-cloud-starter-alibaba-nacos-config，在配置中心（Nacos Server）中实现配置的动态刷新。</p></li></ul></li></ol><h1>Nacos 服务注册中心</h1><p>Nacos 作为服务注册中心可以实现服务的注册与发现，流程如下图。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1022563360-0.png" alt="Nacos 服务注册与发现"></p><p>在图 1 中共涉及到以下 3 个角色：</p><ul><li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li><li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li><li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><p>Nacos 实现服务注册与发现的流程如下：</p><ol><li>从 Nacos 官方提供的下载页面中，下载 Nacos Server 并运行。</li><li>服务提供者 Nacos Client 启动时，会把服务以服务名（<a href="http://spring.application.name">spring.application.name</a>）的方式注册到服务注册中心（Nacos Server）；</li><li>服务消费者 Nacos Client 启动时，也会将自己的服务注册到服务注册中心；</li><li>服务消费者在注册服务的同时，它还会从服务注册中心获取一份服务注册列表信息，该列表中包含了所有注册到服务注册中心上的服务的信息（包括服务提供者和自身的信息）；</li><li>在获取了服务提供者的信息后，服务消费者通过 HTTP 或消息中间件远程调用服务提供者提供的服务。</li></ol><h1>默认端口说明</h1><table><thead><tr><th>端口</th><th>与主端口的偏移量</th><th>描述</th><th>版本</th></tr></thead><tbody><tr><td>8848</td><td>0</td><td>主端口</td><td></td></tr><tr><td>9848</td><td>1000</td><td>客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求</td><td></td></tr><tr><td>9849</td><td>1001</td><td>服务端gRPC请求服务端端口，用于服务间同步等</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Common-property-configuration">Common property configuration</h2><table><thead><tr><th>name</th><th>description</th><th>option</th></tr></thead><tbody><tr><td>MODE</td><td>cluster/standalone</td><td>cluster/standalone default <strong>cluster</strong></td></tr><tr><td>NACOS_SERVERS</td><td>nacos cluster address</td><td>eg. ip1:port1 ip2:port2 ip3:port3</td></tr><tr><td>PREFER_HOST_MODE</td><td>Whether hostname are supported</td><td>hostname/ip default <strong>ip</strong></td></tr><tr><td>NACOS_APPLICATION_PORT</td><td>nacos server port</td><td>default <strong>8848</strong></td></tr><tr><td>NACOS_SERVER_IP</td><td>custom nacos server ip when network was mutil-network</td><td></td></tr><tr><td>SPRING_DATASOURCE_PLATFORM</td><td>standalone support mysql</td><td>mysql / empty default empty</td></tr><tr><td>MYSQL_SERVICE_HOST</td><td>mysql host</td><td></td></tr><tr><td>MYSQL_SERVICE_PORT</td><td>mysql database port</td><td>default : <strong>3306</strong></td></tr><tr><td>MYSQL_SERVICE_DB_NAME</td><td>mysql database name</td><td></td></tr><tr><td>MYSQL_SERVICE_USER</td><td>username of database</td><td></td></tr><tr><td>MYSQL_SERVICE_PASSWORD</td><td>password of database</td><td></td></tr><tr><td>MYSQL_DATABASE_NUM</td><td>It indicates the number of database</td><td>default :<strong>1</strong></td></tr><tr><td>MYSQL_SERVICE_DB_PARAM</td><td>Database url parameter</td><td>default : <strong>characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</strong></td></tr><tr><td>JVM_XMS</td><td>-Xms</td><td>default :1g</td></tr><tr><td>JVM_XMX</td><td>-Xmx</td><td>default :1g</td></tr><tr><td>JVM_XMN</td><td>-Xmn</td><td>default :512m</td></tr><tr><td>JVM_MS</td><td>-XX:MetaspaceSize</td><td>default :128m</td></tr><tr><td>JVM_MMS</td><td>-XX:MaxMetaspaceSize</td><td>default :320m</td></tr><tr><td>NACOS_DEBUG</td><td>enable remote debug</td><td>y/n default :n</td></tr><tr><td>TOMCAT_ACCESSLOG_ENABLED</td><td>server.tomcat.accesslog.enabled</td><td>default :false</td></tr><tr><td>NACOS_AUTH_SYSTEM_TYPE</td><td>The auth system to use, currently only ‘nacos’ is supported</td><td>default :nacos</td></tr><tr><td>NACOS_AUTH_ENABLE</td><td>If turn on auth system</td><td>default :false</td></tr><tr><td>NACOS_AUTH_TOKEN_EXPIRE_SECONDS</td><td>The token expiration in seconds</td><td>default :18000</td></tr><tr><td>NACOS_AUTH_TOKEN</td><td>The default token</td><td>default :SecretKey012345678901234567890123456789012345678901234567890123456789</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</td><td>default : false</td></tr><tr><td>MEMBER_LIST</td><td>Set the cluster list with a configuration file or command-line argument</td><td>eg:192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809</td></tr><tr><td>EMBEDDED_STORAGE</td><td>Use embedded storage in cluster mode without mysql</td><td><code>embedded</code> default : none</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>nacos.core.auth.caching.enabled</td><td>default : false</td></tr><tr><td>NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE</td><td>nacos.core.auth.enable.userAgentAuthWhite</td><td>default : false</td></tr><tr><td>NACOS_AUTH_IDENTITY_KEY</td><td>nacos.core.auth.server.identity.key</td><td>default : serverIdentity</td></tr><tr><td>NACOS_AUTH_IDENTITY_VALUE</td><td>nacos.core.auth.server.identity.value</td><td>default : security</td></tr><tr><td>NACOS_SECURITY_IGNORE_URLS</td><td>nacos.security.ignore.urls</td><td>default : <code>/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</code></td></tr></tbody></table><p>参考</p><ul><li><a href="http://c.biancheng.net/springcloud/nacos.html">http://c.biancheng.net/springcloud/nacos.html</a></li><li><a href="https://www.jb51.net/article/235057.htm">https://www.jb51.net/article/235057.htm</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台（参考自 &lt;a href=&quot;https://nacos.io/zh-cn/index.html&quot;&gt;Nacos 官网&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;英文全称为 Dynamic Naming and Con</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Nacos" scheme="https://hmxyl.github.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>Nacos 使用示例</title>
    <link href="https://hmxyl.github.io/20230301/d8cb1733.html"/>
    <id>https://hmxyl.github.io/20230301/d8cb1733.html</id>
    <published>2023-03-01T02:19:20.000Z</published>
    <updated>2023-05-18T02:49:56.490Z</updated>
    
    <content type="html"><![CDATA[<h1>配置中心示例</h1><p>源码地址：<a href="https://github.com/hmxyl/nacosdemo.git">https://github.com/hmxyl/nacosdemo.git</a></p><h2 id="准备Nacos配置文件">准备Nacos配置文件</h2><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510164730428.png" alt="image-20230510164730428"></p><h2 id="使用-application-yml-配置（推荐）">使用 application.yml 配置（推荐）</h2><blockquote><ol><li>版本号<br>从 2021.0.1.0 开始，Spring Cloud Alibaba  版本将会对应 Spring Cloud 版本，<br>前三位为 Spring Cloud 版本，最后一位为扩展版本</li><li>弃用 <code>bootstrap.yml</code> 文件（Spring Cloud 在Spring boot 2.4以后无法应用BootStrap.yml）</li><li>源码： configuration 模块</li></ol></blockquote><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8801</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">import</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>text.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span>      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>code.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动时 配置 active profiles 为 <code>dev</code></p></li><li><p>启动 ConfigurationOldApplication</p></li><li><p>访问 <a href="http://localhost:8801/config/info">http://localhost:8801/config/info</a> 获取配置信息</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">ConfigInfo</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> configInfo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Junit 单元测试</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">ConfigInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ConfigurationOldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>        properties <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ConfigurationOldApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ConfigInfo</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token string">"configuration_test"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>参考[1]：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sca-upgrade-guide.adoc">https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sca-upgrade-guide.adoc</a></p><p>参考[2]：<a href="https://developer.aliyun.com/article/897341#slide-12">https://developer.aliyun.com/article/897341#slide-12</a></p><h2 id="使用-bootstrap-yml-配置（不推荐）">使用 bootstrap.yml 配置（不推荐）</h2><blockquote><p>源码： configuration_old 模块</p></blockquote><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SpringCloud2020及以后的版本默认不启用 bootstrap 配置，我们需要在pom里面显式地引入：--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：我们使用的 Spring Cloud 2020 版本默认不启用 bootstrap，若想要在应用启动时加载 bootstrap 配置（例如 bootstrap.yml 或 bootstrap.properties），就需要我们在 pom.xml 中显式的引入 spring-cloud-starter-bootstrap 依赖。</p></blockquote></li><li><p>bootstrap.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8802</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration_old  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP        <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration.yml        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml        extension<span class="token punctuation">-</span>configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token key atrule">data-id</span><span class="token punctuation">:</span> text.yml          <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        extension<span class="token punctuation">-</span>configs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token key atrule">data-id</span><span class="token punctuation">:</span> code.yml          <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>config配置的dataID组成: ${prefix}-${spring.profiles.active}.${file-extension}</p><ul><li>${prefix}：默认取值为微服务的服务名，即配置文件中 <a href="http://spring.application.name">spring.application.name</a> 的值，我们可以在配置文件中通过配置 <code>spring.cloud.nacos.config.prefix</code> 来指定。</li><li>${spring.profiles.active}：表示当前环境对应的 Profile，例如 dev、test、prod 等。当没有指定环境的 Profile 时，其对应的连接符也将不存在， dataId 的格式变成${prefix}.${file-extension}。</li><li>${file-extension}：表示配置内容的数据格式，我们可以在配置文件中通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置，例如 properties 和 yaml。</li></ul></blockquote><p>问题记录：</p><ul><li><p><strong>若文件名称不为 bootstrap.yml， 则在启动时，会先加载默认配置。server-addr 为127.0.0.1:8848，而正确的配置，在注解参数读取完成之后，才能读取到。因此BEAN 创建失败</strong></p><p><code>com.alibaba.cloud.nacos.NacosConfigManager</code>、<code>com.alibaba.cloud.nacos.NacosConfigProperties</code></p></li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span>BeanCreationException</span><span class="token operator">:</span> <span class="token class-name">Error</span> creating bean <span class="token keyword">with</span> <span class="token namespace">name</span> 'scopedTarget<span class="token punctuation">.</span>configInfo'<span class="token operator">:</span> <span class="token class-name">Injection</span> of autowired dependencies failed<span class="token punctuation">;</span> nested exception is <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalArgumentException</span><span class="token operator">:</span> <span class="token class-name">Could</span> not resolve placeholder 'config<span class="token punctuation">.</span>text' in value <span class="token string">"${config.text}"</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">405</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.3</span><span class="token number">.18</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.3</span><span class="token number">.18</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动时 配置 active profiles 为 <code>dev</code></p></li><li><p>启动 ConfigurationOldApplication</p></li><li><p>访问 <a href="http://localhost:8802/config/info">http://localhost:8802/config/info</a> 获取配置信息。同上。</p></li><li><p>Junit测试。同上。</p></li></ol><h1>注册中心示例</h1><p>目的：将不同的服务，注册到<code>服务列表</code>中，如下图所示</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510183445711.png" alt="image-20230510183445711"></p><table><thead><tr><th>字段</th><th>说明</th><th></th></tr></thead><tbody><tr><td>服务名</td><td>注册的服务名称<code>spring.cloud.nacos.discovery.service</code> 默认配置的是：<code>spring.application.name</code></td><td></td></tr><tr><td>触发保护阈值</td><td>保护阈值：可以设置为0-1之间的浮点数，它其实是⼀个⽐例值（当前服务健康实例数/当前服务总实例数）<br><br>⼀般流程下， nacos是服务注册中⼼，服务消费者要从nacos获取某⼀个服务的可⽤实例信息，对于服务实例有健康/不健康状态之分， nacos在返回给消费者实例信息的时候，会返回健康实例。这个时候在⼀些⾼并发、⼤流量场景下会存在⼀定的问题：<br><br>如果服务A有100个实例， 98个实例都不健康了，只有2个实例是健康的，如果nacos只返回这两个健康实例的信息的话，那么后续消费者的请求将全部被分配到这两个实例，流量洪峰到来， 2个健康的实例也扛不住了，整个服务A 就扛不住，上游的微服务也会导致崩溃，产⽣雪崩效应。<br><br><strong>保护阈值的意义在于</strong>：当服务A健康实例数/总实例数 &lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触发（状态<strong>true</strong>）<br>nacos将会把该服务所有的实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也⽐造成雪崩要好，牺牲了⼀些请求，保证了整个系统的⼀个可⽤</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><ul><li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li><li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li><li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><h2 id="注册服务提供者">注册服务提供者</h2><blockquote><p>producer_a、producer_a 两个模块，模拟两个服务提供者实例</p></blockquote><h3 id="producer-a">producer_a</h3><ol><li><p>pom.xml</p> <pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> producer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>        <span class="token key atrule">register-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>配置</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>spring.cloud.nacos.discovery.service</td><td>${<a href="http://spring.application.name">spring.application.name</a>}</td><td>注册服务名称</td></tr><tr><td>spring.cloud.nacos.discovery.register-enabled</td><td>true</td><td>是否注册服务</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>启动类上，使用 <code>@EnableDiscoveryClient</code> 注解开启 Nacos 服务发现功能</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerA</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProducerA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供服务的业务方法（测试类）</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.application.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"服务名："</span> <span class="token operator">+</span> serverName <span class="token operator">+</span> <span class="token string">"&lt;br /&gt; 端口号： "</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">"&lt;br /&gt; 传入的参数："</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动模块, 提示  <strong>register finished</strong> 注册完成。查看Nacos服务列表，此时 producer  服务已注册，实例数为1。</p></li><li><p>使用浏览器访问http://localhost:8001/nacos/1 验证实例是否正常提供服务</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510181828965.png" alt="image-20230510181828965"></p></li></ol><h3 id="producer-b">producer_b</h3><ol><li><p>pom.xml ：同 producer_a</p></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8002</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> producer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动类上，使用 <code>@EnableDiscoveryClient</code> 注解开启 Nacos 服务发现功能</p></li><li><p>提供服务的业务方法（测试类）</p></li><li><p>启动模块。查看Nacos服务列表，此时 producer  服务已注册，实例数为2。</p></li><li><p>使用浏览器访问http://localhost:8002/nacos/1 验证实例是否正常提供服务</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510182034079.png" alt="image-20230510182034079"></p></li></ol><h2 id="注册服务消费者">注册服务消费者</h2><h3 id="consumer">consumer</h3><ol><li><p>pom.xml</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--由于 Netflix Ribbon 进入停更维护阶段，因此新版本的 Nacos discovery 都已经移除了 Ribbon ，此时我们需要引入 loadbalancer 代替 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8101</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>        <span class="token key atrule">register-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//producer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个<code>配置类</code>，使用 @LoadBalanced 注解与 Ribbon 进行集成开启负载均衡功能</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">LoadBalanced</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//与 Ribbon 集成，并开启负载均衡功能</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建消费者测试类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service-url.nacos-user-service}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverURL<span class="token punctuation">;</span> <span class="token comment">//服务提供者的服务名</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverURL <span class="token operator">+</span> <span class="token string">"/nacos/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动consumer模块</p></li><li><p>使用浏览器多次访问 <code>http://localhost:8101/consumer/nacos/1</code>。</p><p>浏览器地址不变，4次请求结果如下</p><table><thead><tr><th>请求次数</th><th>返回结果</th></tr></thead><tbody><tr><td>1</td><td>服务名：producer<br>端口号： 8001<br>传入的参数：1</td></tr><tr><td>2</td><td>服务名：producer<br>端口号： 8002<br>传入的参数：1</td></tr><tr><td>3</td><td>服务名：producer<br>端口号： 8001<br>传入的参数：1</td></tr><tr><td>4</td><td>服务名：producer<br>端口号： 8002<br>传入的参数：1</td></tr></tbody></table></li></ol><h2 id="问题记录">问题记录</h2><ol><li>nacos服务部署时， 配置的默认路径由  <code>server.servlet.contextPath=/nacos</code> 修改为  <code>server.servlet.contextPath=/</code>  API 查询结果404</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;配置中心示例&lt;/h1&gt;
&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/hmxyl/nacosdemo.git&quot;&gt;https://github.com/hmxyl/nacosdemo.git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;准备Nacos配置文件&quot;</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Nacos" scheme="https://hmxyl.github.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>2023年问题记录</title>
    <link href="https://hmxyl.github.io/20230223/65e80ab3.html"/>
    <id>https://hmxyl.github.io/20230223/65e80ab3.html</id>
    <published>2023-02-23T11:52:44.000Z</published>
    <updated>2023-05-22T03:13:26.492Z</updated>
    
    <content type="html"><![CDATA[<h1>response.sendRedirect丢失请求地址的HTTPS协议</h1><ul><li><p>问题描述：</p><p><code>response.sendRedirect</code> 默认采用的HTTP协议GET请求，导致在重定向之后，原先的HTTPS请求变为HTTP请求</p></li><li><p>解决</p><ol><li><p>在响应信息中设置<code>HTTP状态码</code>和<code>location</code>头信息</p><p>当状态码为302时，表明资源位置临时发生了改变，需要进行重定向，location头信息标识了资源转向的位置，该地址写相对地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> consultUser<span class="token punctuation">.</span><span class="token function">getSession_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/dept_sub_consult/source/notice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用转发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>consultUser<span class="token punctuation">.</span><span class="token function">getSession_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/intermediate/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul><h1>JUnit测试提示Java.lang.Exception: No runnable methods</h1><ul><li><p>问题描述：</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315103150697.png" alt="image-20230315103150697"></p></li><li><p>解决</p><p>@Test导入的包错了，spring-test 需要的Junit是org.junit.Test，但是在@Test有两个包，另一个是org.junit.jupiter.api.Test，</p></li></ul><h1>jquery – 在SPAN元素上禁用设置属性不会阻止点击事件</h1><p>来源：<a href="https://www.jb51.cc/jquery/182333.html">https://www.jb51.cc/jquery/182333.html</a></p><p>一个SPAN元素，在点击事件上做某事。当我禁用它，使用jQuery：<code>$(“span”).attr(“disabled”，true)</code> 无效</p><h3 id="解决方法">解决方法</h3><p>尝试这个：</p><pre class="line-numbers language-none"><code class="language-none">$("span").css("pointer-events","none");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以启用这些</p><pre class="line-numbers language-none"><code class="language-none">$("span").css("pointer-events","auto");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;response.sendRedirect丢失请求地址的HTTPS协议&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;response.sendRedirect&lt;/code&gt; 默认采用的HTTP协议GET请求，导致在重定向之后，原先的HTTPS</summary>
      
    
    
    
    <category term="后端" scheme="https://hmxyl.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="点滴" scheme="https://hmxyl.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
    <category term="Java" scheme="https://hmxyl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Windows日常使用问题记录</title>
    <link href="https://hmxyl.github.io/20230216/d9a8c0d4.html"/>
    <id>https://hmxyl.github.io/20230216/d9a8c0d4.html</id>
    <published>2023-02-16T02:39:23.000Z</published>
    <updated>2024-07-26T08:30:06.973Z</updated>
    
    <content type="html"><![CDATA[<h1>Windows 查看端口占用</h1><ol><li><p>获取占用端口的进程ID  <code>netstat -ano|findstr 10001</code></p></li><li><p>获取进程信息 <code>tasklist|findstr 9352</code></p></li><li><p>关闭进程（强行关闭） <code>taskkill /PID 9140 /T /F</code></p></li></ol><h1>Windows 设置护眼颜色</h1><blockquote><p>豆沙绿 <code>RGB（202，234，206），#CAEACE</code></p><p>淡黄色<code>RGB（253，246，227），#FDF6E3 【选用】</code></p></blockquote><ol><li><p>首先使用 Win + R 组合快捷键，打开“运行”，然后键入打开注册表命令「regedit」，按回车键确认打开，如图所示</p></li><li><p>打开Win10注册表之后，依次在左侧树状菜单中展开：HKEY_CURRENT_USER\Control Panel\Colors然后再右侧找到「Windows」值，并双击打开，将默认的255 255 255（默认是白色背景）三组颜色数值改成 253，246，227完成后，点击下方的“确定”保存，如图所示。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124002345774-1678131778293-28.png" alt="image.png"></p></li><li><p>继续找到注册表的路径：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors\Standard</p><p>同样再在右侧找到「Windows」双击打开，将默认的数据值 ffffff 改成  FDF6E3 完成后，点击下方的确定保存如下图所示。</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124002408921-1678131778293-30.png" alt="image.png"></p><p>完成以上三步操作后，需要重启电脑生效</p></li></ol><h1>Windows 命令行命令记录</h1><table><thead><tr><th>说明</th><th>命令</th></tr></thead><tbody><tr><td>ipconfig /flushdns</td><td>Windows刷新DNS命令</td></tr><tr><td>wmic memphysical get maxcapacity</td><td>查看支持的最大内存容量</td></tr><tr><td></td><td></td></tr></tbody></table><h1>Windows将jar注册成windows服务</h1><h2 id="下载Windows-Service-Wrapper">下载Windows Service Wrapper</h2><p>下载地址：<a href="https://github.com/winsw/winsw/releases">https://github.com/winsw/winsw/releases</a></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1242201-20191226150203417-575070520.png" alt="img"></p><h2 id="安装windows服务">安装windows服务</h2><ol><li><p>将java jar包和下载的WinSW.NET4.exe放在同一个文件夹目录下面</p></li><li><p>重命名WinSW.NET4.exe为MyApp.exe(这个可以任意取)，新建个MyApp.xml(这个必须和前者的exe文件名字相同)</p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5C1242201-20191226150309464-1767183682-1700576177250-7.png" alt="img"></p></li><li><p>编辑MyApp.xml文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>MyApp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>MyApp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>This is MyApp.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executable</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executable</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">&gt;</span></span>-jar C:\Users\tanhw119214\Desktop\MyApp\MyApp.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开机启动 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>startmode</span><span class="token punctuation">&gt;</span></span>Automatic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>startmode</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logpath</span><span class="token punctuation">&gt;</span></span>C:\Users\tanhw119214\Desktop\MyApp\logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logpath</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roll-by-time<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>yyyyMMdd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C:\Users\tanhw119214\Desktop\MyApp 为你要要注册服务的文件的父路径</p></li><li><p>进入根目录下面，执行以下cmd命令，注册服务。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">MyApp.exe install <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在服务里面就能找到这个实例了</p><pre class="line-numbers language-none"><code class="language-none">启动命令net start MyApp停止命令net stop MyApp卸载命令sc delete MyApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>VPN连接报错</h1><ul><li><p>问题描述</p><p>确认VPN信息正确的条件下，选择<code>PPTP</code>协议连接，提示 “不能建立到远程计算机的连接。你可能需要更改此连接的网络设置” 的错误</p></li><li><p>问题排除</p><p><code>event</code> 打开 <code>事件查看器</code>，获取VPN连接失败错误代码</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230216100057902.png" alt="image-20230216100057902"></p></li><li><p>搜索对应的问题描述：<a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/networking/troubleshoot-error-720-when-establishing-a-vpn-connection">尝试建立 VPN 连接时出现“失败后返回的错误代码为 720”</a></p></li><li><p>最终解决方案：重新安装 WAN 微型端口 (IP) 接口驱动程序</p></li></ul><h1>Windows 开放服务器端口</h1><h2 id="控制面板">控制面板</h2><p>win7下打开端口测试端口时 可用telnet 命令侦听端口：<code>C:\Documents and Settings\administrator&gt;netstat -na</code></p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124112102739-1678132121801-34.png" alt="image-20211124112102739"></p><p>测试端口是否开放：<br><code>C:\Documents and Settings\administrator&gt;telnet 127.0.0.1 8500</code><br>正在连接到127.0.0.1…不能打开到主机的连接， 在端口 8500: 连接失败</p><p>下面开始打开端口（Win7）</p><p>Win7的防火墙做了比较大升级 设置已经分为入站和出站。下面以开通Tomcat的远程访问8080作为例子。<strong>控制面板–所有控制面板项–Windows 防火墙</strong> 进入</p><p>入站规则设置<br>第一步 选择 入站规则 然后 新建规则，选择 端口，然后下一步<br>第二步 选择TCP 选择特定端口 然后输入端口，如有多个端口需要用逗号隔开了 例如:88,8080<br>第三步，选择允许连接<br>第四步 选择应用规则的范围<br>第五步 输入规则名称</p><p>出站规则设置<br>第一步 选择 入站规则 然后 新建规则，选择 端口，然后下一步<br>第二步 选择TCP 选择特定端口 然后输入端口，如有多个端口需要用逗号隔开了 例如:88,8080<br>第三步，选择允许连接<br>第四步 选择应用规则的范围<br>第五步 输入规则名称<br>至此，防火墙规则设置完毕，启用即可！<br>另外win7的 IIS7，只需启用 入站规则：BranchCache 内容检索(HTTP-In)<br>出站规则： BranchCache 内容检索(HTTP-Out) 即可。</p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124112849477-1678132121801-36.png" alt="image-20211124112849477"><br><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124113626250-1678132121801-38.png" alt="image-20211124113626250"><br><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124113803236-1678132121801-40.png" alt="image-20211124113803236"><br><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124113911637-1678132121801-44.png" alt="image-20211124113911637"></p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124114010436-1678132121801-42.png" alt="image-20211124114010436"></p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124114015918-1678132121801-46.png" alt="image-20211124114015918"></p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124114021360-1678132121801-48.png" alt="image-20211124114021360"></p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124114030488-1678132121801-50.png" alt="image-20211124114030488"></p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124114034567-1678132121801-52.png" alt="image-20211124114034567"></p><p>输出规则也一样的设置 可以看到</p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124114043841-1678132121801-54.png" alt="image-20211124114043841"></p><p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211124114050299-1678132121801-56.png" alt="image-20211124114050299"></p><h2 id="命令行">命令行</h2><pre class="line-numbers language-none"><code class="language-none">win10：netsh advfirewall firewall add rule name="ES Port 9300" dir=in action=allow protocol=TCP localport=9300<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>Windows快捷键</h1><h2 id="win-r-可执行的命令">win+r 可执行的命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>mstsc</td><td>打开远程连接</td></tr><tr><td>services.msc</td><td>本地服务设置</td></tr><tr><td>calc</td><td>计算器</td></tr><tr><td>dxdiag</td><td>系统配置查看命令</td></tr></tbody></table><h2 id="Windows系统快捷键记录">Windows系统快捷键记录</h2><table><thead><tr><th><strong>快捷键</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Ctrl+Shift+Esc</td><td>打开任务管理器</td></tr><tr><td>Esc</td><td>取消当前任务</td></tr><tr><td>Shift+delete</td><td>永久删除所选的项目（删除之后无法从回收站还原）</td></tr><tr><td>Ctrl+shiff+tab</td><td>在选项卡上向后移动</td></tr><tr><td>Tab</td><td>在选项上向后移动</td></tr><tr><td>Shift+Tab</td><td>在选项卡上向前移动</td></tr></tbody></table><h2 id="Windows资源管理器中的快捷键">Windows资源管理器中的快捷键</h2><table><thead><tr><th><strong>快捷键</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Alt+P</td><td>显示预览窗格</td></tr><tr><td>Alt+←</td><td>切换到前一次打开的文件夹</td></tr><tr><td>Alt+→</td><td>切换到下一次后打开的文件夹</td></tr><tr><td>Alt+↑</td><td>打开上层文件夹</td></tr><tr><td>Backspace</td><td>打开上层文件夹</td></tr></tbody></table><h2 id="Windows徽标键相关的快捷键">Windows徽标键相关的快捷键</h2><table><thead><tr><th><strong>快捷键</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Win</td><td>打开或者关闭开始菜单</td></tr><tr><td>Win+Pause</td><td>显示系统属性对话框</td></tr><tr><td>Win+d</td><td>显示桌面</td></tr><tr><td>Win+m</td><td>最小化所有窗口</td></tr><tr><td>Win+Shift+m</td><td>还原最小化窗口到桌面上</td></tr><tr><td>Win+E</td><td>打开我的电脑</td></tr><tr><td>Win+F</td><td>搜索文件或文件夹</td></tr><tr><td>Win+L</td><td>锁定您的计算机或切换用户</td></tr><tr><td>Win+R</td><td>打开运行对话框</td></tr><tr><td>Win+↓</td><td>最小化窗口</td></tr><tr><td>Win+↑</td><td>最大化当前窗口</td></tr><tr><td>Win+←</td><td>最大化到窗口左侧的屏幕上</td></tr><tr><td>Win+→</td><td>最大化到窗口右侧的屏幕上</td></tr><tr><td>Win+home</td><td>最小化所有窗口，除了当前激活窗口</td></tr></tbody></table><h2 id="Windows-特殊文件路径">Windows 特殊文件路径</h2><table><thead><tr><th>说明</th><th>路径</th></tr></thead><tbody><tr><td>开机启动程序路径</td><td>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</td></tr><tr><td>host文件位置</td><td>C:\Windows\System32\drivers\etc</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h1>windows下powershell执行脚本报错</h1><p><a href="https://blog.csdn.net/weixin_45228198/article/details/122677084">https://blog.csdn.net/weixin_45228198/article/details/122677084</a></p><p>window power shell 禁止运行脚本</p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/470d9697342be97e0646a2b0549a0dc2.png" alt="在这里插入图片描述" style="zoom:67%;"> <p>vscode命令行 禁止运行脚本</p><p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/9b37439de951fc3fbd6fc3a246010250.png" alt="在这里插入图片描述"></p><blockquote><p>解决方案<br>windows系统中== PowerShell 执行策略==的问题。解决：</p><p>电脑左下角搜索<code>windows powershell</code> , 以管理员身份运行。输入<code>get-ExecutionPolicy</code>， 回车</p><p>显示<code>Restricted</code>，表示受限制的，执行脚本受限。输入<code>set-ExecutionPolicy</code>， 回车，然后输入：<code>RemoteSigned</code>， 即下载的脚本执行时才需要签名</p><p>确认操作，输入Y</p><p>搞定！！</p></blockquote><p>Windows给powershell设定一个叫“执行策略”的东西。为了避免一些恶意脚本直接运行，一般家用的windows系统默认将执行策略设置成了“Restricted”，即受限制的。</p><p>所有的执行策略如下所示:</p><p>AllSigned. 要求所有脚本和配置文件均需受信任的发布者签名，包括在本地计算机上编写的脚本。（安全但是本地编写的脚本也要签名，麻烦）<br>Bypass. 不会阻止你运行任何脚本，也没有提示和警告。（不安全）<br>Default. 默认的执行策略，普通桌面Windows默认Restricted，服务器windows默认RemoteSigned。<br>RemoteSigned. 要求从互联网上下载的所有脚本和配置文件均需要受信任的发布者签名，本地脚本则不需要签名。是Windows服务器的默认执行策略。（较为安全）<br>Restricted. 无法加载配置文件或运行脚本。桌面Windows的默认执行策略。(安全，但无法运行脚本)<br>Unrestricted 为允许所有的脚本运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Windows 查看端口占用&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取占用端口的进程ID  &lt;code&gt;netstat -ano|findstr 10001&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取进程信息 &lt;code&gt;tasklist|findstr 93</summary>
      
    
    
    
    <category term="操作系统" scheme="https://hmxyl.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Windows" scheme="https://hmxyl.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Redis-ACL</title>
    <link href="https://hmxyl.github.io/20230210/4be8fe93.html"/>
    <id>https://hmxyl.github.io/20230210/4be8fe93.html</id>
    <published>2023-02-10T07:14:01.000Z</published>
    <updated>2023-03-17T06:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。</p><p>Redis AUTH命令在Redis 6中进行了扩展，所以现在可以以双参数形式使用它:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUTH <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里有一个旧形式的例子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUTH <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所发生的情况是，用于身份验证的用户名是“default”，因此仅指定密码就意味着我们希望根据默认用户进行身份验证。这提供了向后兼容性。</p><p>如果该用户具有 <code>nopass</code>规则，那么新的连接将立即作为“默认”用户进行身份验证，而不需要通过AUTH命令提供任何密码。</p><p>如果“默认”用户没有标记为<code>nopass</code>，则连接将在未验证的状态下启动，并将需要AUTH(或HELLO命令AUTH选项)才能进行身份验证并开始工作。</p><h1>使用场景</h1><ol><li>您希望通过限制对命令和密钥的访问来提高安全性，这样不受信任的客户机就没有访问权限，而受信任的客户机只有执行所需工作所需的最低级别的数据库访问权限。例如，某些客户端可能只能执行只读命令。</li><li>您希望提高操作安全性，以便访问Redis的进程或人员不允许由于软件错误或手动错误而损坏数据或配置。例如，从Redis获取延迟作业的worker没有理由能够调用FLUSHALL命令。</li></ol><h1>配置ACL</h1><p>Redis ACL用户的定义格式如下: <code>user &lt;username&gt; ... acl rules ...</code> 如<code> worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</code></p><p>默认情况下，只定义了一个名为default的用户。我们可以使用ACL LIST命令来检查当前活动的ACL，并验证一个新启动的、默认配置的Redis实例的配置是什么:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>每行的前两个单词是“user”，后面跟着用户名。下一个单词是描述不同事物的ACL规则。我们将详细说明这些规则是如何工作的，但现在只需要说明默认用户被配置为活动(on)，不需要密码(nopass)，可以访问每个可能的密钥(~<em>)和发布/订阅通道(&amp;</em>)，并且能够调用每个可能的命令(+@all)。</p><p>此外，在默认用户的特殊情况下，使用<code>nopass</code>规则意味着新连接将自动使用默认用户进行身份验证，而不需要任何显式的AUTH调用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> ACL SETUSER aliceOK<span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user alice off resetchannels -@all"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span class="token comment"># 这样的用户完全没用。让我们尝试定义用户，使其处于活动状态，具有密码，并且只能使用GET命令访问以字符串“cached:”开头的键名。</span><span class="token operator">&gt;</span> ACL SETUSER alice on <span class="token operator">&gt;</span>p1pp0 ~cached:* +getOK<span class="token operator">&gt;</span> AUTH alice p1pp0OK<span class="token operator">&gt;</span> GET foo<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to access one of the keys used as arguments<span class="token operator">&gt;</span> GET cached:1234<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token operator">&gt;</span> SET cached:1234 zap<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to run the <span class="token string">'set'</span> <span class="token builtin class-name">command</span><span class="token comment"># ACL GETUSER 是 ACL LIST的替代方案，方便阅读</span><span class="token operator">&gt;</span> ACL GETUSER alice<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"flags"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"on"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"passwords"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"2d9c75..."</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"commands"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"-@all +get"</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"keys"</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"~cached:*"</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"channels"</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">""</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"selectors"</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token comment"># 使用另一个ACL SETUSER命令(来自不同的用户，因为alice不能运行ACL命令)，我们可以向用户添加多个模式:</span><span class="token operator">&gt;</span> ACL SETUSER alice ~objects:* ~items:* ~public:*OK<span class="token operator">&gt;</span> ACL LIST<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user alice on #2d9c75... ~cached:* ~objects:* ~items:* ~public:* resetchannels -@all +get"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>ACL规则</h1><p>ACL规则可以以任意顺序指定：例如，可以从密码开始，然后是标志或密钥模式。但是请注意，加法和减法规则将根据顺序改变含义。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 例如，请看下面的例子:</span><span class="token comment">#</span><span class="token comment">#   user alice on +@all -DEBUG ~* &gt;somepassword</span><span class="token comment">#</span><span class="token comment"># 这将允许“alice”使用除DEBUG命令之外的所有命令,因为 +@all将所有命令添加到alice可以使用的命令集，后来DEBUG被删除。</span><span class="token comment"># 然而，如果我们颠倒两个ACL规则的顺序，结果将是不同的:</span><span class="token comment">#</span><span class="token comment">#   user alice on -DEBUG +@all ~* &gt;somepassword</span><span class="token comment">#</span><span class="token comment"># 现在，当alice在允许的命令集中还没有命令时，DEBUG被删除，之后所有的命令都被添加，所以用户将能够执行所有的命令。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本上ACL规则是从左到右处理的。</p><p>下面是有效的ACL规则列表。某些规则只是单个单词，用于激活或删除标志，或执行对用户ACL的给定更改。其他规则是与命令或类别名称、键模式等连接在一起的字符前缀。</p><ul><li><p>启用和禁用用户</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>on</td><td>启用用户：可以作为该用户进行身份验证。</td></tr><tr><td>off</td><td>禁止该用户：不再可能对该用户进行身份验证；但是，以前经过身份验证的连接仍然可以工作。<br>注意，如果默认用户被标记为关闭，那么新的连接将作为未验证启动，并且将要求用户发送带有AUTH选项的AUTH或HELLO，以便以某种方式进行身份验证，而不管默认用户配置如何。</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>allow和disallow命令</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead></table></li></ul><p>|+<command> | 将该命令添加到用户可以调用的命令列表中。可以与<code>|</code>一起使用以允许子命令（例如<code>+config|get</code>)。 |<br>| -<command> | 将该命令移到用户可以调用的命令列表中。从Redis 7.0开始，它可以与<code>|</code>一起用于阻塞子命令（例如<code>+config|get</code>)。 |<br>| +@<category> | 添加该类别中所有用户调用的命令，有效类别为@admin， @set， @sortedset，…诸如此类， <code>ACL CAT </code>命令查看完整的列表。<br>特殊类别@all表示所有命令，包括当前存在于服务器中的命令，以及将来将通过模块加载的命令。 |<br>| -@<category> | 类似<code> +@&lt;category&gt;</code> 但是从客户端可以调用的命令列表中删除命令。 |<br>| +<command>|first-arg（弃用） | 允许在其他情况下禁用命令的特定第一个参数<br>它只支持没有子命令的命令，并且不允许作为<code>-SELECT|1</code>这样的负形式，只支持以<code>+</code>开头的加法。 |<br>| allcommands | <code> +@all</code>另外一种书写形式.  注意，它意味着能够执行通过模块系统加载的所有未来命令。 |<br>| nocommands | <code> -@all</code>另外一种书写形式 |</command></category></category></command></command></p><ul><li><p>允许和禁止某些密钥和密钥权限</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>~<pattern></pattern></td><td>可以作为命令的一部分, 添加一个键的模式 <br>例如<code>~*</code> 允许所有的键 。该模式是一个全局样式的模式，类似于KEYS的模式。可以指定多个模式。</td></tr><tr><td>%R~<pattern></pattern></td><td>(版本<code>7.0</code>之后)  添加键读取模式，指定可以从哪些键读取。<br>它的行为类似于常规键模式，但只授予从匹配给定模式的键读取的权限. <br>有关更多信息，请参阅关键权限。</td></tr><tr><td>%W~<pattern></pattern></td><td>(版本<code>7.0</code>之后)  添加指定的写键模式。指定可以写入哪些键。<br>它的行为类似于常规键模式，但只授予写入匹配给定模式的键的权限。<br>有关更多信息，请参阅关键权限。</td></tr><tr><td>%RW~<pattern></pattern></td><td>(版本<code>7.0</code>之后) <code> ~&lt;pattern&gt;</code>另外一种书写形式</td></tr><tr><td>allkeys</td><td><code>~*</code>另外一种书写形式</td></tr><tr><td>resetkeys</td><td>刷新允许的键模式列表。 <br>例如<code>ACL ~foo:* ~bar:* resetkeys ~objects:*</code>，将只允许客户端访问匹配模式<code>objects:*</code>的键。</td></tr></tbody></table></li><li><p>允许和禁止发布/订阅频道:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>&amp;<pattern></pattern></td><td>(版本<code>6.2</code>之后) 添加用户可以访问的 <code>Pub/Sub</code> 通道的全局样式模式。可以指定多个通道模式。<br>注意：模式匹配只对<code>PUBLISH</code>和<code>SUBSCRIBE</code>提到的通道进行, 而<code>PSUBSCRIBE</code>要求它的通道模式和用户允许的通道模式之间的文字匹配</td></tr><tr><td>allchannels</td><td><code>&amp;*</code>另外一种书写形式，允许用户访问所有Pub/Sub通道。</td></tr><tr><td>resetchannels</td><td>刷新允许的通道模式列表，如果用户的发布/订阅客户端不再能够访问各自的通道 和/或 通道模式，则断开这些客户端。</td></tr></tbody></table></li><li><p>为用户配置有效密码</p><p>如果一个用户没有标记为nopass，并且没有有效密码列表，那么该用户实际上是不可能使用的，因为无法以该用户身份登录</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>&gt;<password></password></td><td>将此密码添加到用户的有效密码列表中。例如，<code>&gt;mypass</code>会将<code>mypass</code>添加到有效密码列表中。<br>该指令清除<code>nopass</code>标志(参见后面的内容)。每个用户可以有任意数量的密码。</td></tr><tr><td>&lt;<password></password></td><td>从有效密码列表中删除此密码。如果您试图删除的密码实际上没有设置，则会发出一个错误。</td></tr><tr><td>#<hash></hash></td><td>将此SHA-256哈希值添加到用户的有效密码列表中。<br>此哈希值将与为ACL用户输入的密码的哈希值进行比较。这允许用户在acl.conf文件中存储哈希值，而不是存储明文密码。<br>只有SHA-256哈希值被接受，因为密码哈希值必须是64个字符，并且只包含小写的十六进制字符。</td></tr><tr><td>!<hash></hash></td><td>从有效密码列表中删除此散列值。<br>当您不知道由哈希值指定的密码，但希望从用户中删除密码时，这很有用。</td></tr><tr><td>nopass</td><td>该用户设置的所有密码都被删除，并且该用户被标记为不需要密码：这意味着每个密码都适用于该用户。<br>如果此指令用于默认用户<code>default</code>，则每个新连接将立即使用默认用户进行身份验证，而不需要任何显式的<code>AUTH</code>命令。<br>注意，resetpass 指令将清除此条件。</td></tr><tr><td>resetpass</td><td>清除允许的密码列表并删除<code>nopass</code>状态。<br>在<code>resetpass</code>之后，用户没有关联的密码，如果不添加一些密码（或者稍后将其设置为nopass）就无法进行身份验证。</td></tr></tbody></table></li><li><p>为用户配置选择器</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>(<rule list="">)</rule></td><td>(版本<code>7.0</code>之后) 创建一个新的选择器来匹配规则。<br>用括号中指定的选项创建一个新的选择器，并将其附加到用户。每个选项应该用空格隔开。第一个字符必须是<code>(</code>最后一个字符必须是<code>)</code><br>选择器在用户权限之后计算，并根据它们定义的顺序计算。如果一个命令匹配用户权限或任何选择器，它就被允许。<br>去 <a href="https://redis.io/docs/management/security/acl/#selectors">selectors</a> 查看更多信息</td></tr><tr><td>clearselectors</td><td>(版本<code>7.0</code>之后) 删除所有附加到用户的选择器</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>重置用户:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>reset</td><td>执行以下操作:<code>resetpass, resetkeys, resetchannels, allchannels(如果设置了acl-pubsub-default)， off, clearselectors， -@all</code><br>用户将返回到创建后立即具有的相同状态。</td></tr></tbody></table></li></ul><h1>命令分类</h1><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>admin</td><td>管理命令。普通应用程序永远不需要使用这些. <br>Includes REPLICAOF, CONFIG, DEBUG, SAVE, MONITOR, ACL, SHUTDOWN, etc.</td></tr><tr><td>blocking</td><td>可能阻塞连接，直到另一个命令释放</td></tr><tr><td>connection</td><td>影响连接或其他连接的命令. 包含 AUTH, SELECT, COMMAND, CLIENT, ECHO, PING, 等</td></tr><tr><td>dangerous</td><td>有潜在危险(由于各种原因，每一种都应谨慎考虑). 包含 FLUSHALL, MIGRATE, RESTORE, SORT, KEYS, CLIENT, DEBUG, INFO, CONFIG, SAVE, REPLICAOF, 等</td></tr><tr><td>fast</td><td>Fast O(1) 命令. 可以循环参数的数量，但不是键中的元素数量。</td></tr><tr><td>keyspace</td><td>以类型不可知的方式从键、数据库或其元数据中写入或读取。包括DEL, RESTORE, DUMP, RENAME, EXISTS, DBSIZE, KEYS, EXPIRE, TTL, FLUSHALL等。<br>可能修改键空间、键或元数据的命令也将有<code>写</code>类别<br>只读取键空间、键或元数据的命令将具有<code>read</code>类别</td></tr><tr><td>pubsub</td><td>PubSub相关命令</td></tr><tr><td>read</td><td>从键(值或元数据)读取。注意，不与键交互的命令既不能读也不能写。</td></tr><tr><td>scripting</td><td>Scripting相关命令</td></tr><tr><td>slow</td><td>所有不是快速的命令.</td></tr><tr><td>transaction</td><td>WATCH / MULTI / EXEC 相关命令</td></tr><tr><td>write</td><td>写入键(值或元数据)。</td></tr><tr><td>bitmap</td><td>Data type: bitmaps related.</td></tr><tr><td>set</td><td>Data type: sets related.</td></tr><tr><td>sortedset</td><td>Data type: sorted sets related.</td></tr><tr><td>geo</td><td>Data type: geospatial indexes related.</td></tr><tr><td>hash</td><td>Data type: hashes related.</td></tr><tr><td>hyperloglog</td><td>Data type: hyperloglog related.</td></tr><tr><td>stream</td><td>Data type: streams related.</td></tr><tr><td>string</td><td>Data type: strings related.</td></tr><tr><td>list</td><td>Data type: lists related.</td></tr></tbody></table><p>有关ACL配置的更多信息，请参见 <a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。&lt;/p&gt;
&lt;p&gt;Redis AUTH命令在Redis 6中进行了扩展，所以现在可以以双参数形式使用它:&lt;/p&gt;
&lt;pre c</summary>
      
    
    
    
    <category term="数据库" scheme="https://hmxyl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://hmxyl.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
